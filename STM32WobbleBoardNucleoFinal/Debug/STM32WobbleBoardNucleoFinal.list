
STM32WobbleBoardNucleoFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a4e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bac  0801a670  0801a670  0002a670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b21c  0801b21c  000302c0  2**0
                  CONTENTS
  4 .ARM          00000008  0801b21c  0801b21c  0002b21c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b224  0801b224  000302c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b224  0801b224  0002b224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b228  0801b228  0002b228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c0  20000000  0801b22c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001748  200002c0  0801b4ec  000302c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001a08  0801b4ec  00031a08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004f0cc  00000000  00000000  000302f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006044  00000000  00000000  0007f3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b60  00000000  00000000  00085400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002918  00000000  00000000  00087f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000312ae  00000000  00000000  0008a878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b072  00000000  00000000  000bbb26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001167f0  00000000  00000000  000e6b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001fd388  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e3e4  00000000  00000000  001fd3dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c0 	.word	0x200002c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801a658 	.word	0x0801a658

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c4 	.word	0x200002c4
 80001cc:	0801a658 	.word	0x0801a658

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <_ZN14WobbleBoardAppC1Ev>:

#define STREAMING_MSG_LENGTH  107

#define DEV_ADDR  50U

WobbleBoardApp::WobbleBoardApp()
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000f4e:	801a      	strh	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a21      	ldr	r2, [pc, #132]	; (8000fd8 <_ZN14WobbleBoardAppC1Ev+0x98>)
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	721a      	strb	r2, [r3, #8]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2201      	movs	r2, #1
 8000f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	645a      	str	r2, [r3, #68]	; 0x44
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2201      	movs	r2, #1
 8000f84:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	f8a3 221a 	strh.w	r2, [r3, #538]	; 0x21a
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
{
}
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	3e4ccccd 	.word	0x3e4ccccd

08000fdc <_ZN14WobbleBoardApp4InitEv>:

void WobbleBoardApp::Init()
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	// Initialize Virtual COM Port
	BSP_COM_Init(COM1);
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f005 f98d 	bl	8006304 <BSP_COM_Init>

	// Initialize Timer
	BSP_IP_TIM_Init();
 8000fea:	f001 fda3 	bl	8002b34 <MX_TIM3_Init>

	// Configure Timer to run with desired algorithm frequency
	DataStreamTimerConfig(ALGO_FREQ);
 8000fee:	2164      	movs	r1, #100	; 0x64
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 fc3f 	bl	8001874 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm>

	InitInertialSensors();
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f000 f85e 	bl	80010b8 <_ZN14WobbleBoardApp19InitInertialSensorsEv>

	// Sensor Fusion API initialization function
	MotionFX_manager_init();
 8000ffc:	f001 f9b8 	bl	8002370 <MotionFX_manager_init>

	//Enable magnetometer calibration
	MotionFX_manager_MagCal_start(ALGO_PERIOD);
 8001000:	200a      	movs	r0, #10
 8001002:	f001 fa70 	bl	80024e6 <MotionFX_manager_MagCal_start>

	// Test if calibration data are available
	MFX_MagCal_output_t mag_cal_test;
	MotionFX_MagCal_getParams(&mag_cal_test);
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	4618      	mov	r0, r3
 800100c:	f014 fc1e 	bl	801584c <MotionFX_MagCal_getParams>

	// If calibration data are available load HI coefficients
	if (mag_cal_test.cal_quality == MFX_MAGCALGOOD)
 8001010:	7e3b      	ldrb	r3, [r7, #24]
 8001012:	2b03      	cmp	r3, #3
 8001014:	d132      	bne.n	800107c <_ZN14WobbleBoardApp4InitEv+0xa0>
	{
		float ans_float;
		ans_float = (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8001016:	edd7 7a03 	vldr	s15, [r7, #12]
 800101a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80010b4 <_ZN14WobbleBoardApp4InitEv+0xd8>
 800101e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001022:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.x = (int32_t)ans_float;
 8001026:	edd7 7a07 	vldr	s15, [r7, #28]
 800102a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800102e:	ee17 2a90 	vmov	r2, s15
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	60da      	str	r2, [r3, #12]
		ans_float = (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8001036:	edd7 7a04 	vldr	s15, [r7, #16]
 800103a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80010b4 <_ZN14WobbleBoardApp4InitEv+0xd8>
 800103e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001042:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.y = (int32_t)ans_float;
 8001046:	edd7 7a07 	vldr	s15, [r7, #28]
 800104a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800104e:	ee17 2a90 	vmov	r2, s15
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	611a      	str	r2, [r3, #16]
		ans_float = (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8001056:	edd7 7a05 	vldr	s15, [r7, #20]
 800105a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80010b4 <_ZN14WobbleBoardApp4InitEv+0xd8>
 800105e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001062:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.z = (int32_t)ans_float;
 8001066:	edd7 7a07 	vldr	s15, [r7, #28]
 800106a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800106e:	ee17 2a90 	vmov	r2, s15
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	615a      	str	r2, [r3, #20]

		MagCalStatus = 1;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2201      	movs	r2, #1
 800107a:	721a      	strb	r2, [r3, #8]
	}

	DWTInit();
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 fb5b 	bl	8001738 <_ZN14WobbleBoardApp7DWTInitEv>

	// Start receiving messages via DMA
	UART_StartReceiveMsg();
 8001082:	f000 fe69 	bl	8001d58 <UART_StartReceiveMsg>

	SensorReadRequest = 1;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	if(Enable6XMotionFusion == 1U)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8001094:	2b01      	cmp	r3, #1
 8001096:	d103      	bne.n	80010a0 <_ZN14WobbleBoardApp4InitEv+0xc4>
	{
		Enable6AxisMotionFusion();
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 fbd3 	bl	8001844 <_ZN14WobbleBoardApp23Enable6AxisMotionFusionEv>
 800109e:	e002      	b.n	80010a6 <_ZN14WobbleBoardApp4InitEv+0xca>
	}
	else
	{
		Enable9AxisMotionFusion();
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 fbdb 	bl	800185c <_ZN14WobbleBoardApp23Enable9AxisMotionFusionEv>
	}

	StartDataStreaming();
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 fb9e 	bl	80017e8 <_ZN14WobbleBoardApp18StartDataStreamingEv>
}
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	43fa0000 	.word	0x43fa0000

080010b8 <_ZN14WobbleBoardApp19InitInertialSensorsEv>:

void WobbleBoardApp::InitInertialSensors()
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_ACC_Init();
 80010c0:	f000 fff4 	bl	80020ac <BSP_SENSOR_ACC_Init>
	BSP_SENSOR_GYR_Init();
 80010c4:	f000 fffa 	bl	80020bc <BSP_SENSOR_GYR_Init>
	BSP_SENSOR_MAG_Init();
 80010c8:	f001 f800 	bl	80020cc <BSP_SENSOR_MAG_Init>

	BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 80010cc:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80010e4 <_ZN14WobbleBoardApp19InitInertialSensorsEv+0x2c>
 80010d0:	f001 f843 	bl	800215a <BSP_SENSOR_ACC_SetOutputDataRate>
	BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 80010d4:	2004      	movs	r0, #4
 80010d6:	f001 f84f 	bl	8002178 <BSP_SENSOR_ACC_SetFullScale>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	42c80000 	.word	0x42c80000

080010e8 <_ZN14WobbleBoardApp7ProcessEv>:

void WobbleBoardApp::Process()
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
//			HandleCMD((TMsg *)&msg_cmd);
//		}
//	}
//

	if (MagCalRequest == 1U)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	bf0c      	ite	eq
 80010fc:	2301      	moveq	r3, #1
 80010fe:	2300      	movne	r3, #0
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d012      	beq.n	800112c <_ZN14WobbleBoardApp7ProcessEv+0x44>
	{
		MagCalRequest = 0;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

		/* Reset magnetometer calibration value*/
		MagCalStatus = 0;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	721a      	strb	r2, [r3, #8]
		MagOffset.x = 0;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
		MagOffset.y = 0;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
		MagOffset.z = 0;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	615a      	str	r2, [r3, #20]

		/* Enable magnetometer calibration */
		MotionFX_manager_MagCal_start(ALGO_PERIOD);
 8001126:	200a      	movs	r0, #10
 8001128:	f001 f9dd 	bl	80024e6 <MotionFX_manager_MagCal_start>
//	int sensorDataTimerCount = __HAL_TIM_GET_COUNTER(&BSP_IP_TIM_Handle);
//	snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n Sensor counter: %d \r\n",
//			sensorDataTimerCount);
//	    printf("%s", DataOut);

	if(!IsInUserCalibrationMode && __HAL_TIM_GET_COUNTER(&BSP_IP_TIM_Handle) == 0)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 8001132:	f083 0301 	eor.w	r3, r3, #1
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	d006      	beq.n	800114a <_ZN14WobbleBoardApp7ProcessEv+0x62>
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <_ZN14WobbleBoardApp7ProcessEv+0xd4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <_ZN14WobbleBoardApp7ProcessEv+0x62>
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <_ZN14WobbleBoardApp7ProcessEv+0x64>
 800114a:	2300      	movs	r3, #0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <_ZN14WobbleBoardApp7ProcessEv+0x70>
	{
		SensorReadRequest = 1;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2201      	movs	r2, #1
 8001154:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
//	snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n User Calibration Mode timer counter: %d \r\n",
//			userCalbirationModeTimerCount);
//		printf("%s", DataOut);
	// When the user calibration timer reaches 0 (4 seconds)
	// then stop the user calibration mode
	if(IsInUserCalibrationMode)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 800115e:	2b00      	cmp	r3, #0
 8001160:	d016      	beq.n	8001190 <_ZN14WobbleBoardApp7ProcessEv+0xa8>
	{
		CaptureMotionFXGravityXData();
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 fbe2 	bl	800192c <_ZN14WobbleBoardApp27CaptureMotionFXGravityXDataEv>

		if(HAL_GetTick() - UserCalibrationTimerTimestamp  >= USER_CALIBRATION_TIME)
 8001168:	f005 fa36 	bl	80065d8 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	8812      	ldrh	r2, [r2, #0]
 800117a:	4293      	cmp	r3, r2
 800117c:	bf2c      	ite	cs
 800117e:	2301      	movcs	r3, #1
 8001180:	2300      	movcc	r3, #0
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <_ZN14WobbleBoardApp7ProcessEv+0xa8>
		{
			ExitUserCalibrationMode(false);
 8001188:	2100      	movs	r1, #0
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 fcf0 	bl	8001b70 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb>
		}
	}

	if (SensorReadRequest == 1U)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b01      	cmp	r3, #1
 800119a:	bf0c      	ite	eq
 800119c:	2301      	moveq	r3, #1
 800119e:	2300      	movne	r3, #0
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d006      	beq.n	80011b4 <_ZN14WobbleBoardApp7ProcessEv+0xcc>
	{
		SensorReadRequest = 0;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

		// Write the sensor motion fusion data to the terminal
		MotionFXDataHandler();
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 f91a 	bl	80013e8 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv>
		// in FX_Data Handler and add 4 to that
		//msg_dat.Len = STREAMING_MSG_LENGTH;

		//UART_SendMsg(&msg_dat);
	}
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200014a8 	.word	0x200014a8

080011c0 <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv>:
//		ExitUserCalibrationMode();
//	}
//}

void WobbleBoardApp::AccelerometerSensorHandler()
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af02      	add	r7, sp, #8
 80011c6:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_ACC_GetAxes(&AccValue);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3318      	adds	r3, #24
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 ff9d 	bl	800210c <BSP_SENSOR_ACC_GetAxes>

	if(MotionDataVerbosityLevel == All)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d116      	bne.n	800120a <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv+0x4a>

	//	Serialize_s32(&Msg->Data[3], (int32_t)AccValue.x, 4);
	//	Serialize_s32(&Msg->Data[7], (int32_t)AccValue.y, 4);
	//	Serialize_s32(&Msg->Data[11], (int32_t)AccValue.z, 4);

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nAccelerometer Axes X: %d, Y: %d, Z: %d\r\n",
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f103 004c 	add.w	r0, r3, #76	; 0x4c
					 (int)AccValue.x, (int)AccValue.y, (int)AccValue.z);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6999      	ldr	r1, [r3, #24]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	6a12      	ldr	r2, [r2, #32]
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nAccelerometer Axes X: %d, Y: %d, Z: %d\r\n",
 80011ee:	9201      	str	r2, [sp, #4]
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	460b      	mov	r3, r1
 80011f4:	4a07      	ldr	r2, [pc, #28]	; (8001214 <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv+0x54>)
 80011f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011fa:	f017 f903 	bl	8018404 <sniprintf>
		printf("%s", DataOut);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	334c      	adds	r3, #76	; 0x4c
 8001202:	4619      	mov	r1, r3
 8001204:	4804      	ldr	r0, [pc, #16]	; (8001218 <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv+0x58>)
 8001206:	f017 f891 	bl	801832c <iprintf>
	}
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	0801a670 	.word	0x0801a670
 8001218:	0801a69c 	.word	0x0801a69c

0800121c <_ZN14WobbleBoardApp17GyroSensorHandlerEv>:

void WobbleBoardApp::GyroSensorHandler()
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af02      	add	r7, sp, #8
 8001222:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_GYR_GetAxes(&GyrValue);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3324      	adds	r3, #36	; 0x24
 8001228:	4618      	mov	r0, r3
 800122a:	f000 ff7c 	bl	8002126 <BSP_SENSOR_GYR_GetAxes>

	if(MotionDataVerbosityLevel == All)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8001234:	2b00      	cmp	r3, #0
 8001236:	d116      	bne.n	8001266 <_ZN14WobbleBoardApp17GyroSensorHandlerEv+0x4a>
	{
	//	Serialize_s32(&Msg->Data[15], GyrValue.x, 4);
	//	Serialize_s32(&Msg->Data[19], GyrValue.y, 4);
	//	Serialize_s32(&Msg->Data[23], GyrValue.z, 4);

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nGyro Axes X: %d, Y: %d, Z: %d\r\n",
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f103 004c 	add.w	r0, r3, #76	; 0x4c
					 (int)GyrValue.x, (int)GyrValue.y, (int)GyrValue.z);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nGyro Axes X: %d, Y: %d, Z: %d\r\n",
 800124a:	9201      	str	r2, [sp, #4]
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	460b      	mov	r3, r1
 8001250:	4a07      	ldr	r2, [pc, #28]	; (8001270 <_ZN14WobbleBoardApp17GyroSensorHandlerEv+0x54>)
 8001252:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001256:	f017 f8d5 	bl	8018404 <sniprintf>
		printf("%s", DataOut);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	334c      	adds	r3, #76	; 0x4c
 800125e:	4619      	mov	r1, r3
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <_ZN14WobbleBoardApp17GyroSensorHandlerEv+0x58>)
 8001262:	f017 f863 	bl	801832c <iprintf>
	}
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	0801a6a0 	.word	0x0801a6a0
 8001274:	0801a69c 	.word	0x0801a69c

08001278 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv>:

void WobbleBoardApp::MagnetometerSensorHandler()
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08e      	sub	sp, #56	; 0x38
 800127c:	af02      	add	r7, sp, #8
 800127e:	6078      	str	r0, [r7, #4]
	float ans_float;
	MFX_MagCal_input_t mag_data_in;
	MFX_MagCal_output_t mag_data_out;

	BSP_SENSOR_MAG_GetAxes(&MagValue);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3330      	adds	r3, #48	; 0x30
 8001284:	4618      	mov	r0, r3
 8001286:	f000 ff5b 	bl	8002140 <BSP_SENSOR_MAG_GetAxes>

	if (MagCalStatus == 0U)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	7a1b      	ldrb	r3, [r3, #8]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d16d      	bne.n	800136e <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0xf6>
	{
		mag_data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	ee07 3a90 	vmov	s15, r3
 800129a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129e:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80013d8 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x160>
 80012a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a6:	edc7 7a07 	vstr	s15, [r7, #28]
		mag_data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ae:	ee07 3a90 	vmov	s15, r3
 80012b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80013d8 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x160>
 80012ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012be:	edc7 7a08 	vstr	s15, [r7, #32]
		mag_data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012c6:	ee07 3a90 	vmov	s15, r3
 80012ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ce:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80013d8 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x160>
 80012d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		mag_data_in.time_stamp = (int)TimeStamp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
		TimeStamp += (uint32_t)ALGO_PERIOD;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012e4:	f103 020a 	add.w	r2, r3, #10
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	63da      	str	r2, [r3, #60]	; 0x3c

		MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 80012ec:	f107 020c 	add.w	r2, r7, #12
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	4611      	mov	r1, r2
 80012f6:	4618      	mov	r0, r3
 80012f8:	f001 f8e6 	bl	80024c8 <MotionFX_manager_MagCal_run>

		if (mag_data_out.cal_quality == MFX_MAGCALGOOD)
 80012fc:	7e3b      	ldrb	r3, [r7, #24]
 80012fe:	2b03      	cmp	r3, #3
 8001300:	d135      	bne.n	800136e <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0xf6>
		{
			MagCalStatus = 1;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2201      	movs	r2, #1
 8001306:	721a      	strb	r2, [r3, #8]

			ans_float = (mag_data_out.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8001308:	edd7 7a03 	vldr	s15, [r7, #12]
 800130c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80013dc <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x164>
 8001310:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001314:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			MagOffset.x = (int32_t)ans_float;
 8001318:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800131c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001320:	ee17 2a90 	vmov	r2, s15
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	60da      	str	r2, [r3, #12]
			ans_float = (mag_data_out.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8001328:	edd7 7a04 	vldr	s15, [r7, #16]
 800132c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80013dc <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x164>
 8001330:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001334:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			MagOffset.y = (int32_t)ans_float;
 8001338:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800133c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001340:	ee17 2a90 	vmov	r2, s15
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	611a      	str	r2, [r3, #16]
			ans_float = (mag_data_out.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8001348:	edd7 7a05 	vldr	s15, [r7, #20]
 800134c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80013dc <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x164>
 8001350:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001354:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			MagOffset.z = (int32_t)ans_float;
 8001358:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800135c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001360:	ee17 2a90 	vmov	r2, s15
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	615a      	str	r2, [r3, #20]

			/* Disable magnetometer calibration */
			MotionFX_manager_MagCal_stop(ALGO_PERIOD);
 8001368:	200a      	movs	r0, #10
 800136a:	f001 f8c8 	bl	80024fe <MotionFX_manager_MagCal_stop>
		}
	}

	MagValue.x = (int32_t)(MagValue.x - MagOffset.x);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	1ad2      	subs	r2, r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	631a      	str	r2, [r3, #48]	; 0x30
	MagValue.y = (int32_t)(MagValue.y - MagOffset.y);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	1ad2      	subs	r2, r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	635a      	str	r2, [r3, #52]	; 0x34
	MagValue.z = (int32_t)(MagValue.z - MagOffset.z);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	1ad2      	subs	r2, r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	639a      	str	r2, [r3, #56]	; 0x38

	if(MotionDataVerbosityLevel == All)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d116      	bne.n	80013d0 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x158>
	{
	//	Serialize_s32(&Msg->Data[27], MagValue.x, 4);
	//	Serialize_s32(&Msg->Data[31], MagValue.y, 4);
	//	Serialize_s32(&Msg->Data[35], MagValue.z, 4);

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nMagnetometer Axes X: %d, Y: %d, Z: %d\r\n",
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f103 004c 	add.w	r0, r3, #76	; 0x4c
					 (int)MagValue.x, (int)MagValue.y, (int)MagValue.z);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nMagnetometer Axes X: %d, Y: %d, Z: %d\r\n",
 80013b4:	9201      	str	r2, [sp, #4]
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	460b      	mov	r3, r1
 80013ba:	4a09      	ldr	r2, [pc, #36]	; (80013e0 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x168>)
 80013bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c0:	f017 f820 	bl	8018404 <sniprintf>
		printf("%s", DataOut);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	334c      	adds	r3, #76	; 0x4c
 80013c8:	4619      	mov	r1, r3
 80013ca:	4806      	ldr	r0, [pc, #24]	; (80013e4 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x16c>)
 80013cc:	f016 ffae 	bl	801832c <iprintf>
	}
}
 80013d0:	bf00      	nop
 80013d2:	3730      	adds	r7, #48	; 0x30
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	3b03126f 	.word	0x3b03126f
 80013dc:	43fa0000 	.word	0x43fa0000
 80013e0:	0801a6c4 	.word	0x0801a6c4
 80013e4:	0801a69c 	.word	0x0801a69c

080013e8 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv>:

MFX_output_t * WobbleBoardApp::MotionFXDataHandler()
{
 80013e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013ec:	b0a5      	sub	sp, #148	; 0x94
 80013ee:	af06      	add	r7, sp, #24
 80013f0:	6078      	str	r0, [r7, #4]
	// Get the 3 motion sensor data
	// and potentially write them to the terminal
	// depending on motion verbosity log level
	AccelerometerSensorHandler();
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff fee4 	bl	80011c0 <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv>
	GyroSensorHandler();
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff0f 	bl	800121c <_ZN14WobbleBoardApp17GyroSensorHandlerEv>
	MagnetometerSensorHandler();
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ff3a 	bl	8001278 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv>

	MFX_input_t dataIn;
	MFX_input_t* pDataIn = &dataIn;
 8001404:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001408:	673b      	str	r3, [r7, #112]	; 0x70
	MFX_output_t dataOut;
	MFX_output_t* pDataOut = &dataOut;
 800140a:	f107 0308 	add.w	r3, r7, #8
 800140e:	66fb      	str	r3, [r7, #108]	; 0x6c

	/* Convert angular velocity from [mdps] to [dps] */
	dataIn.gyro[0] = (float)GyrValue.x * FROM_MDPS_TO_DPS;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001414:	ee07 3a90 	vmov	s15, r3
 8001418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141c:	ed9f 7abd 	vldr	s14, [pc, #756]	; 8001714 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x32c>
 8001420:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001424:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	dataIn.gyro[1] = (float)GyrValue.y * FROM_MDPS_TO_DPS;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142c:	ee07 3a90 	vmov	s15, r3
 8001430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001434:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8001714 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x32c>
 8001438:	ee67 7a87 	vmul.f32	s15, s15, s14
 800143c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	dataIn.gyro[2] = (float)GyrValue.z * FROM_MDPS_TO_DPS;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001444:	ee07 3a90 	vmov	s15, r3
 8001448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800144c:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8001714 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x32c>
 8001450:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001454:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

	/* Convert acceleration from [mg] to [g] */
	dataIn.acc[0] = (float)AccValue.x * FROM_MG_TO_G;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	ee07 3a90 	vmov	s15, r3
 8001460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001464:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8001714 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x32c>
 8001468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800146c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	dataIn.acc[1] = (float)AccValue.y * FROM_MG_TO_G;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147c:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8001714 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x32c>
 8001480:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001484:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	dataIn.acc[2] = (float)AccValue.z * FROM_MG_TO_G;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	ee07 3a90 	vmov	s15, r3
 8001490:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001494:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8001714 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x32c>
 8001498:	ee67 7a87 	vmul.f32	s15, s15, s14
 800149c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

	/* Convert magnetic field intensity from [mGauss] to [uT / 50] */
	dataIn.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ac:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8001718 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x330>
 80014b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	dataIn.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014bc:	ee07 3a90 	vmov	s15, r3
 80014c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c4:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8001718 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x330>
 80014c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014cc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	dataIn.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d4:	ee07 3a90 	vmov	s15, r3
 80014d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014dc:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8001718 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x330>
 80014e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

	/* Run Sensor Fusion algorithm */
	DWTStart();
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 f93f 	bl	800176c <_ZN14WobbleBoardApp8DWTStartEv>
	MotionFX_manager_run(pDataIn, pDataOut, MOTION_FX_ENGINE_DELTATIME);
 80014ee:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 800171c <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x334>
 80014f2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80014f4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80014f6:	f000 ff93 	bl	8002420 <MotionFX_manager_run>
	uint32_t elapsed_time_us = DWTStop();
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 f94c 	bl	8001798 <_ZN14WobbleBoardApp7DWTStopEv>
 8001500:	66b8      	str	r0, [r7, #104]	; 0x68
//	(void)memcpy(&Msg->Data[95], (void *) & (pDataOut->heading), sizeof(float));
//	(void)memcpy(&Msg->Data[99], (void *) & (pDataOut->headingErr), sizeof(float));
//
//	Serialize_s32(&Msg->Data[103], (int32_t)elapsed_time_us, 4);

	if((MotionDataVerbosityLevel == All || MotionDataVerbosityLevel == MotionFXOnly) &&
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8001508:	2b00      	cmp	r3, #0
 800150a:	d005      	beq.n	8001518 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x130>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8001512:	2b01      	cmp	r3, #1
 8001514:	f040 80f7 	bne.w	8001706 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x31e>
 8001518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 80f3 	beq.w	8001706 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x31e>
			(pDataOut != nullptr))
	{
		float motionFXGravityX = pDataOut->gravity[0];
 8001520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	677b      	str	r3, [r7, #116]	; 0x74
		if(motionFXGravityX < 0.0f)
 8001526:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800152a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800152e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001532:	d505      	bpl.n	8001540 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x158>
		{
			motionFXGravityX *= -1.0f;
 8001534:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001538:	eef1 7a67 	vneg.f32	s15, s15
 800153c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		}

		// Only transmit the motion FX data if it's more than the deadzone
		if(motionFXGravityX > DeadZoneMotionFXGravityX)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	edd3 7a88 	vldr	s15, [r3, #544]	; 0x220
 8001546:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800154a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800154e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001552:	f340 80d8 	ble.w	8001706 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x31e>
		{
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f103 064c 	add.w	r6, r3, #76	; 0x4c
					pDataOut->quaternion[0], pDataOut->quaternion[1], pDataOut->quaternion[2]);
 800155c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800155e:	68db      	ldr	r3, [r3, #12]
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe fff1 	bl	8000548 <__aeabi_f2d>
 8001566:	4604      	mov	r4, r0
 8001568:	460d      	mov	r5, r1
					pDataOut->quaternion[0], pDataOut->quaternion[1], pDataOut->quaternion[2]);
 800156a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800156c:	691b      	ldr	r3, [r3, #16]
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe ffea 	bl	8000548 <__aeabi_f2d>
 8001574:	4680      	mov	r8, r0
 8001576:	4689      	mov	r9, r1
					pDataOut->quaternion[0], pDataOut->quaternion[1], pDataOut->quaternion[2]);
 8001578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800157a:	695b      	ldr	r3, [r3, #20]
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe ffe3 	bl	8000548 <__aeabi_f2d>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800158a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800158e:	e9cd 4500 	strd	r4, r5, [sp]
 8001592:	4a63      	ldr	r2, [pc, #396]	; (8001720 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x338>)
 8001594:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001598:	4630      	mov	r0, r6
 800159a:	f016 ff33 	bl	8018404 <sniprintf>
			printf("%s", DataOut);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	334c      	adds	r3, #76	; 0x4c
 80015a2:	4619      	mov	r1, r3
 80015a4:	485f      	ldr	r0, [pc, #380]	; (8001724 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x33c>)
 80015a6:	f016 fec1 	bl	801832c <iprintf>

			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Rotation X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f103 064c 	add.w	r6, r3, #76	; 0x4c
					pDataOut->rotation[0], pDataOut->rotation[1], pDataOut->rotation[2]);
 80015b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015b2:	681b      	ldr	r3, [r3, #0]
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Rotation X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe ffc7 	bl	8000548 <__aeabi_f2d>
 80015ba:	4604      	mov	r4, r0
 80015bc:	460d      	mov	r5, r1
					pDataOut->rotation[0], pDataOut->rotation[1], pDataOut->rotation[2]);
 80015be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015c0:	685b      	ldr	r3, [r3, #4]
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Rotation X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe ffc0 	bl	8000548 <__aeabi_f2d>
 80015c8:	4680      	mov	r8, r0
 80015ca:	4689      	mov	r9, r1
					pDataOut->rotation[0], pDataOut->rotation[1], pDataOut->rotation[2]);
 80015cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015ce:	689b      	ldr	r3, [r3, #8]
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Rotation X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ffb9 	bl	8000548 <__aeabi_f2d>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80015de:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80015e2:	e9cd 4500 	strd	r4, r5, [sp]
 80015e6:	4a50      	ldr	r2, [pc, #320]	; (8001728 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x340>)
 80015e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ec:	4630      	mov	r0, r6
 80015ee:	f016 ff09 	bl	8018404 <sniprintf>
			printf("%s", DataOut);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	334c      	adds	r3, #76	; 0x4c
 80015f6:	4619      	mov	r1, r3
 80015f8:	484a      	ldr	r0, [pc, #296]	; (8001724 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x33c>)
 80015fa:	f016 fe97 	bl	801832c <iprintf>

			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f103 064c 	add.w	r6, r3, #76	; 0x4c
					pDataOut->gravity[0], pDataOut->gravity[1], pDataOut->gravity[2]);
 8001604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001606:	69db      	ldr	r3, [r3, #28]
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe ff9d 	bl	8000548 <__aeabi_f2d>
 800160e:	4604      	mov	r4, r0
 8001610:	460d      	mov	r5, r1
					pDataOut->gravity[0], pDataOut->gravity[1], pDataOut->gravity[2]);
 8001612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001614:	6a1b      	ldr	r3, [r3, #32]
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe ff96 	bl	8000548 <__aeabi_f2d>
 800161c:	4680      	mov	r8, r0
 800161e:	4689      	mov	r9, r1
					pDataOut->gravity[0], pDataOut->gravity[1], pDataOut->gravity[2]);
 8001620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe ff8f 	bl	8000548 <__aeabi_f2d>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001632:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001636:	e9cd 4500 	strd	r4, r5, [sp]
 800163a:	4a3c      	ldr	r2, [pc, #240]	; (800172c <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x344>)
 800163c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001640:	4630      	mov	r0, r6
 8001642:	f016 fedf 	bl	8018404 <sniprintf>
			printf("%s", DataOut);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	334c      	adds	r3, #76	; 0x4c
 800164a:	4619      	mov	r1, r3
 800164c:	4835      	ldr	r0, [pc, #212]	; (8001724 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x33c>)
 800164e:	f016 fe6d 	bl	801832c <iprintf>

			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f103 064c 	add.w	r6, r3, #76	; 0x4c
					pDataOut->linear_acceleration[0], pDataOut->linear_acceleration[1], pDataOut->linear_acceleration[2]);
 8001658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800165a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff73 	bl	8000548 <__aeabi_f2d>
 8001662:	4604      	mov	r4, r0
 8001664:	460d      	mov	r5, r1
					pDataOut->linear_acceleration[0], pDataOut->linear_acceleration[1], pDataOut->linear_acceleration[2]);
 8001666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe ff6c 	bl	8000548 <__aeabi_f2d>
 8001670:	4680      	mov	r8, r0
 8001672:	4689      	mov	r9, r1
					pDataOut->linear_acceleration[0], pDataOut->linear_acceleration[1], pDataOut->linear_acceleration[2]);
 8001674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ff65 	bl	8000548 <__aeabi_f2d>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001686:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800168a:	e9cd 4500 	strd	r4, r5, [sp]
 800168e:	4a24      	ldr	r2, [pc, #144]	; (8001720 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x338>)
 8001690:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001694:	4630      	mov	r0, r6
 8001696:	f016 feb5 	bl	8018404 <sniprintf>
			printf("%s", DataOut);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	334c      	adds	r3, #76	; 0x4c
 800169e:	4619      	mov	r1, r3
 80016a0:	4820      	ldr	r0, [pc, #128]	; (8001724 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x33c>)
 80016a2:	f016 fe43 	bl	801832c <iprintf>

			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Heading: %.1f\r\n",
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f103 044c 	add.w	r4, r3, #76	; 0x4c
					pDataOut->heading);
 80016ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Heading: %.1f\r\n",
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe ff49 	bl	8000548 <__aeabi_f2d>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	e9cd 2300 	strd	r2, r3, [sp]
 80016be:	4a1c      	ldr	r2, [pc, #112]	; (8001730 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x348>)
 80016c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016c4:	4620      	mov	r0, r4
 80016c6:	f016 fe9d 	bl	8018404 <sniprintf>
			printf("%s", DataOut);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	334c      	adds	r3, #76	; 0x4c
 80016ce:	4619      	mov	r1, r3
 80016d0:	4814      	ldr	r0, [pc, #80]	; (8001724 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x33c>)
 80016d2:	f016 fe2b 	bl	801832c <iprintf>

			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Heading Error: %.1f\r\n",
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f103 044c 	add.w	r4, r3, #76	; 0x4c
					pDataOut->headingErr);
 80016dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Heading Error: %.1f\r\n",
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe ff31 	bl	8000548 <__aeabi_f2d>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	e9cd 2300 	strd	r2, r3, [sp]
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x34c>)
 80016f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016f4:	4620      	mov	r0, r4
 80016f6:	f016 fe85 	bl	8018404 <sniprintf>
			printf("%s", DataOut);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	334c      	adds	r3, #76	; 0x4c
 80016fe:	4619      	mov	r1, r3
 8001700:	4808      	ldr	r0, [pc, #32]	; (8001724 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x33c>)
 8001702:	f016 fe13 	bl	801832c <iprintf>
		}
	}

	return pDataOut;
 8001706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8001708:	4618      	mov	r0, r3
 800170a:	377c      	adds	r7, #124	; 0x7c
 800170c:	46bd      	mov	sp, r7
 800170e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001712:	bf00      	nop
 8001714:	3a83126f 	.word	0x3a83126f
 8001718:	3b03126f 	.word	0x3b03126f
 800171c:	3c23d70a 	.word	0x3c23d70a
 8001720:	0801a6f0 	.word	0x0801a6f0
 8001724:	0801a69c 	.word	0x0801a69c
 8001728:	0801a728 	.word	0x0801a728
 800172c:	0801a760 	.word	0x0801a760
 8001730:	0801a794 	.word	0x0801a794
 8001734:	0801a7b4 	.word	0x0801a7b4

08001738 <_ZN14WobbleBoardApp7DWTInitEv>:
 * @brief  Initialize DWT register for counting clock cycles purpose
 * @param  None
 * @retval None
 */
void WobbleBoardApp::DWTInit()
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <_ZN14WobbleBoardApp7DWTInitEv+0x2c>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	4a07      	ldr	r2, [pc, #28]	; (8001764 <_ZN14WobbleBoardApp7DWTInitEv+0x2c>)
 8001746:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800174a:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <_ZN14WobbleBoardApp7DWTInitEv+0x30>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a05      	ldr	r2, [pc, #20]	; (8001768 <_ZN14WobbleBoardApp7DWTInitEv+0x30>)
 8001752:	f023 0301 	bic.w	r3, r3, #1
 8001756:	6013      	str	r3, [r2, #0]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000edf0 	.word	0xe000edf0
 8001768:	e0001000 	.word	0xe0001000

0800176c <_ZN14WobbleBoardApp8DWTStartEv>:

void WobbleBoardApp::DWTStart()
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	DWT->CYCCNT = 0; /* Clear count of clock cycles */
 8001774:	4b07      	ldr	r3, [pc, #28]	; (8001794 <_ZN14WobbleBoardApp8DWTStartEv+0x28>)
 8001776:	2200      	movs	r2, #0
 8001778:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; /* Enable counter */
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <_ZN14WobbleBoardApp8DWTStartEv+0x28>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a05      	ldr	r2, [pc, #20]	; (8001794 <_ZN14WobbleBoardApp8DWTStartEv+0x28>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6013      	str	r3, [r2, #0]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e0001000 	.word	0xe0001000

08001798 <_ZN14WobbleBoardApp7DWTStopEv>:
 * @brief  Stop counting clock cycles and calculate elapsed time in [us]
 * @param  None
 * @retval Elapsed time in [us]
 */
uint32_t WobbleBoardApp::DWTStop()
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	volatile uint32_t cycles_count = 0U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60bb      	str	r3, [r7, #8]
	uint32_t system_core_clock_mhz = 0U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <_ZN14WobbleBoardApp7DWTStopEv+0x44>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0b      	ldr	r2, [pc, #44]	; (80017dc <_ZN14WobbleBoardApp7DWTStopEv+0x44>)
 80017ae:	f023 0301 	bic.w	r3, r3, #1
 80017b2:	6013      	str	r3, [r2, #0]
	cycles_count = DWT->CYCCNT; /* Read count of clock cycles */
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <_ZN14WobbleBoardApp7DWTStopEv+0x44>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	60bb      	str	r3, [r7, #8]

	/* Calculate elapsed time in [us] */
	system_core_clock_mhz = SystemCoreClock / 1000000U;
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <_ZN14WobbleBoardApp7DWTStopEv+0x48>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a09      	ldr	r2, [pc, #36]	; (80017e4 <_ZN14WobbleBoardApp7DWTStopEv+0x4c>)
 80017c0:	fba2 2303 	umull	r2, r3, r2, r3
 80017c4:	0c9b      	lsrs	r3, r3, #18
 80017c6:	60fb      	str	r3, [r7, #12]
	return cycles_count / system_core_clock_mhz;
 80017c8:	68ba      	ldr	r2, [r7, #8]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e0001000 	.word	0xe0001000
 80017e0:	2000000c 	.word	0x2000000c
 80017e4:	431bde83 	.word	0x431bde83

080017e8 <_ZN14WobbleBoardApp18StartDataStreamingEv>:

  return hasHandledMessage;
}

void WobbleBoardApp::StartDataStreaming()
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_ACC_Enable();
 80017f0:	f000 fc74 	bl	80020dc <BSP_SENSOR_ACC_Enable>
	BSP_SENSOR_GYR_Enable();
 80017f4:	f000 fc7a 	bl	80020ec <BSP_SENSOR_GYR_Enable>
	BSP_SENSOR_MAG_Enable();
 80017f8:	f000 fc80 	bl	80020fc <BSP_SENSOR_MAG_Enable>

	//HAL_TIM_Base_Start_IT(&BSP_IP_TIM_Handle);

	// Start the data stream timer
	HAL_TIM_Base_Start(&BSP_IP_TIM_Handle);
 80017fc:	4806      	ldr	r0, [pc, #24]	; (8001818 <_ZN14WobbleBoardApp18StartDataStreamingEv+0x30>)
 80017fe:	f008 f9b7 	bl	8009b70 <HAL_TIM_Base_Start>

	DataLoggerActive = 1;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	SensorsEnabled = 1;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	200014a8 	.word	0x200014a8

0800181c <_ZN14WobbleBoardApp17StopDataStreamingEv>:

void WobbleBoardApp::StopDataStreaming()
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	DataLoggerActive = 0;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	//HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);

	// Stop the data stream timer
	HAL_TIM_Base_Stop(&BSP_IP_TIM_Handle);
 800182c:	4804      	ldr	r0, [pc, #16]	; (8001840 <_ZN14WobbleBoardApp17StopDataStreamingEv+0x24>)
 800182e:	f008 fa07 	bl	8009c40 <HAL_TIM_Base_Stop>

	SensorsEnabled = 0;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	200014a8 	.word	0x200014a8

08001844 <_ZN14WobbleBoardApp23Enable6AxisMotionFusionEv>:

void WobbleBoardApp::Enable6AxisMotionFusion()
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	MotionFX_manager_stop_9X();
 800184c:	f000 fe32 	bl	80024b4 <MotionFX_manager_stop_9X>
	MotionFX_manager_start_6X();
 8001850:	f000 fe12 	bl	8002478 <MotionFX_manager_start_6X>
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <_ZN14WobbleBoardApp23Enable9AxisMotionFusionEv>:

void WobbleBoardApp::Enable9AxisMotionFusion()
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	MotionFX_manager_stop_6X();
 8001864:	f000 fe12 	bl	800248c <MotionFX_manager_stop_6X>
	MotionFX_manager_start_9X();
 8001868:	f000 fe1a 	bl	80024a0 <MotionFX_manager_start_9X>
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm>:

void WobbleBoardApp::DataStreamTimerConfig(uint32_t Freq)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  const uint32_t tim_counter_clock = 2000; /* TIM counter clock 2 kHz */
 800187e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001882:	617b      	str	r3, [r7, #20]
  uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 8001884:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x70>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a17      	ldr	r2, [pc, #92]	; (80018e8 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x74>)
 800188a:	fba2 2303 	umull	r2, r3, r2, r3
 800188e:	09db      	lsrs	r3, r3, #7
 8001890:	3b01      	subs	r3, #1
 8001892:	613b      	str	r3, [r7, #16]
  uint32_t period = (tim_counter_clock / Freq) - 1;
 8001894:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	fbb2 f3f3 	udiv	r3, r2, r3
 800189e:	3b01      	subs	r3, #1
 80018a0:	60fb      	str	r3, [r7, #12]

  BSP_IP_TIM_Handle.Init.Prescaler = prescaler_value;
 80018a2:	4a12      	ldr	r2, [pc, #72]	; (80018ec <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	6053      	str	r3, [r2, #4]
  BSP_IP_TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a8:	4b10      	ldr	r3, [pc, #64]	; (80018ec <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  BSP_IP_TIM_Handle.Init.Period = period;
 80018ae:	4a0f      	ldr	r2, [pc, #60]	; (80018ec <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	60d3      	str	r3, [r2, #12]
  BSP_IP_TIM_Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b4:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	611a      	str	r2, [r3, #16]
  BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018bc:	2200      	movs	r2, #0
 80018be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 80018c0:	480a      	ldr	r0, [pc, #40]	; (80018ec <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018c2:	f008 f8fd 	bl	8009ac0 <HAL_TIM_Base_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	bf14      	ite	ne
 80018cc:	2301      	movne	r3, #1
 80018ce:	2300      	moveq	r3, #0
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x66>
  {
    Error_Handler();
 80018d6:	f000 fd45 	bl	8002364 <Error_Handler>
  }
}
 80018da:	bf00      	nop
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	2000000c 	.word	0x2000000c
 80018e8:	10624dd3 	.word	0x10624dd3
 80018ec:	200014a8 	.word	0x200014a8

080018f0 <_ZN14WobbleBoardApp25ToggleUserCalibrationModeEv>:

void WobbleBoardApp::ToggleUserCalibrationMode()
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	ShouldStartUserCalibrationMode = !ShouldStartUserCalibrationMode;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80018fe:	f083 0301 	eor.w	r3, r3, #1
 8001902:	b2da      	uxtb	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	if(ShouldStartUserCalibrationMode)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <_ZN14WobbleBoardApp25ToggleUserCalibrationModeEv+0x2c>
	{
		EnterUserCalibrationMode();
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 f8b5 	bl	8001a84 <_ZN14WobbleBoardApp24EnterUserCalibrationModeEv>
	}
	else
	{
		ExitUserCalibrationMode(true);
	}
}
 800191a:	e003      	b.n	8001924 <_ZN14WobbleBoardApp25ToggleUserCalibrationModeEv+0x34>
		ExitUserCalibrationMode(true);
 800191c:	2101      	movs	r1, #1
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f926 	bl	8001b70 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb>
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <_ZN14WobbleBoardApp27CaptureMotionFXGravityXDataEv>:

void WobbleBoardApp::CaptureMotionFXGravityXData()
{
 800192c:	b590      	push	{r4, r7, lr}
 800192e:	b087      	sub	sp, #28
 8001930:	af02      	add	r7, sp, #8
 8001932:	6078      	str	r0, [r7, #4]
	MFX_output_t* pMotionFXData = MotionFXDataHandler();
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff fd57 	bl	80013e8 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv>
 800193a:	60f8      	str	r0, [r7, #12]
	if(pMotionFXData != nullptr)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d031      	beq.n	80019a6 <_ZN14WobbleBoardApp27CaptureMotionFXGravityXDataEv+0x7a>
	{
		MotionFXGravityXBuffer[MotionFXDataBufferIndex] = pMotionFXData->gravity[0];
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	69d2      	ldr	r2, [r2, #28]
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	3354      	adds	r3, #84	; 0x54
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	601a      	str	r2, [r3, #0]

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n Captured MotionFusion Gravity X from User: %.1f\r\n",
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f103 044c 	add.w	r4, r3, #76	; 0x4c
				pMotionFXData->gravity[0]);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	69db      	ldr	r3, [r3, #28]
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n Captured MotionFusion Gravity X from User: %.1f\r\n",
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fdf1 	bl	8000548 <__aeabi_f2d>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	e9cd 2300 	strd	r2, r3, [sp]
 800196e:	4a10      	ldr	r2, [pc, #64]	; (80019b0 <_ZN14WobbleBoardApp27CaptureMotionFXGravityXDataEv+0x84>)
 8001970:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001974:	4620      	mov	r0, r4
 8001976:	f016 fd45 	bl	8018404 <sniprintf>
		printf("%s", DataOut);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	334c      	adds	r3, #76	; 0x4c
 800197e:	4619      	mov	r1, r3
 8001980:	480c      	ldr	r0, [pc, #48]	; (80019b4 <_ZN14WobbleBoardApp27CaptureMotionFXGravityXDataEv+0x88>)
 8001982:	f016 fcd3 	bl	801832c <iprintf>

		MotionFXDataBufferIndex++;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800198c:	1c5a      	adds	r2, r3, #1
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224

		// Make sure we don't exceed the buffer length and wrap around
		// instead to keep grabbing data
		if(MotionFXDataBufferIndex >= NUMBER_OF_MOTIONFX_DATA_SAMPLES)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800199a:	2b31      	cmp	r3, #49	; 0x31
 800199c:	dd03      	ble.n	80019a6 <_ZN14WobbleBoardApp27CaptureMotionFXGravityXDataEv+0x7a>
		{
			MotionFXDataBufferIndex = 0;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		}
	}
}
 80019a6:	bf00      	nop
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd90      	pop	{r4, r7, pc}
 80019ae:	bf00      	nop
 80019b0:	0801a7dc 	.word	0x0801a7dc
 80019b4:	0801a69c 	.word	0x0801a69c

080019b8 <_ZN14WobbleBoardApp17CalculateDeadZoneEv>:

// Get the average motion fusion gravity X over a time period
float WobbleBoardApp::CalculateDeadZone()
{
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af02      	add	r7, sp, #8
 80019be:	6078      	str	r0, [r7, #4]
	float accumulatedMotionFXGravityX = 0.0f;
 80019c0:	f04f 0300 	mov.w	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < NUMBER_OF_MOTIONFX_DATA_SAMPLES; i++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	2b31      	cmp	r3, #49	; 0x31
 80019ce:	dc1f      	bgt.n	8001a10 <_ZN14WobbleBoardApp17CalculateDeadZoneEv+0x58>
	{
		float motionFusionGravityX = MotionFXGravityXBuffer[i];
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	3354      	adds	r3, #84	; 0x54
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	60fb      	str	r3, [r7, #12]

		// It's possible that it could be negative and we want to
		// negate that so they don't cancel each other out
		// when accumulating the gravity X
		if(motionFusionGravityX < 0.0f)
 80019de:	edd7 7a03 	vldr	s15, [r7, #12]
 80019e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ea:	d505      	bpl.n	80019f8 <_ZN14WobbleBoardApp17CalculateDeadZoneEv+0x40>
		{
			motionFusionGravityX *= -1.0f;
 80019ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80019f0:	eef1 7a67 	vneg.f32	s15, s15
 80019f4:	edc7 7a03 	vstr	s15, [r7, #12]

//		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X from User: %.1f\r\n",
//				motionFusionGravityX);
//			printf("%s", DataOut);

		accumulatedMotionFXGravityX += motionFusionGravityX;
 80019f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80019fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a04:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i = 0; i < NUMBER_OF_MOTIONFX_DATA_SAMPLES; i++)
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	e7dc      	b.n	80019ca <_ZN14WobbleBoardApp17CalculateDeadZoneEv+0x12>
	}

	float averageMotionFXGravityX = accumulatedMotionFXGravityX / NUMBER_OF_MOTIONFX_DATA_SAMPLES;
 8001a10:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a14:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001a78 <_ZN14WobbleBoardApp17CalculateDeadZoneEv+0xc0>
 8001a18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a1c:	edc7 7a02 	vstr	s15, [r7, #8]
	if(averageMotionFXGravityX < MIN_DEADZONE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a26:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a32:	d502      	bpl.n	8001a3a <_ZN14WobbleBoardApp17CalculateDeadZoneEv+0x82>
	{
		averageMotionFXGravityX = MIN_DEADZONE;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	60bb      	str	r3, [r7, #8]
	}

	snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X DeadZone Calculated For User: %.1f\r\n",
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8001a40:	68b8      	ldr	r0, [r7, #8]
 8001a42:	f7fe fd81 	bl	8000548 <__aeabi_f2d>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	e9cd 2300 	strd	r2, r3, [sp]
 8001a4e:	4a0b      	ldr	r2, [pc, #44]	; (8001a7c <_ZN14WobbleBoardApp17CalculateDeadZoneEv+0xc4>)
 8001a50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a54:	4620      	mov	r0, r4
 8001a56:	f016 fcd5 	bl	8018404 <sniprintf>
			averageMotionFXGravityX);
	printf("%s", DataOut);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	334c      	adds	r3, #76	; 0x4c
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4807      	ldr	r0, [pc, #28]	; (8001a80 <_ZN14WobbleBoardApp17CalculateDeadZoneEv+0xc8>)
 8001a62:	f016 fc63 	bl	801832c <iprintf>

	return averageMotionFXGravityX;
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	ee07 3a90 	vmov	s15, r3
}
 8001a6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a70:	371c      	adds	r7, #28
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd90      	pop	{r4, r7, pc}
 8001a76:	bf00      	nop
 8001a78:	42480000 	.word	0x42480000
 8001a7c:	0801a814 	.word	0x0801a814
 8001a80:	0801a69c 	.word	0x0801a69c

08001a84 <_ZN14WobbleBoardApp24EnterUserCalibrationModeEv>:

void WobbleBoardApp::EnterUserCalibrationMode()
{
 8001a84:	b5b0      	push	{r4, r5, r7, lr}
 8001a86:	b08c      	sub	sp, #48	; 0x30
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	// we will use this to compare against the new
	// elapsed time every tick cycle to see if we have passed
	// the user calibration time to end the user calibration mode
	UserCalibrationTimerTimestamp = HAL_GetTick();

	IsInUserCalibrationMode = true;
 8001a8c:	466b      	mov	r3, sp
 8001a8e:	461d      	mov	r5, r3
	std::string printString = "Entered User Calibration Mode\r\n";
 8001a90:	f107 0320 	add.w	r3, r7, #32
 8001a94:	4618      	mov	r0, r3
 8001a96:	f013 ff26 	bl	80158e6 <_ZNSaIcEC1Ev>
 8001a9a:	f107 0220 	add.w	r2, r7, #32
 8001a9e:	f107 0308 	add.w	r3, r7, #8
 8001aa2:	4931      	ldr	r1, [pc, #196]	; (8001b68 <_ZN14WobbleBoardApp24EnterUserCalibrationModeEv+0xe4>)
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f013 ff8b 	bl	80159c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001aaa:	f107 0320 	add.w	r3, r7, #32
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f013 ff1a 	bl	80158e8 <_ZNSaIcED1Ev>
	int printStringLength = printString.length();
 8001ab4:	f107 0308 	add.w	r3, r7, #8
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f013 ff59 	bl	8015970 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
	char PrintBuffer[printStringLength];
 8001ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac4:	1e5c      	subs	r4, r3, #1
 8001ac6:	62bc      	str	r4, [r7, #40]	; 0x28
 8001ac8:	4623      	mov	r3, r4
 8001aca:	3301      	adds	r3, #1
 8001acc:	4618      	mov	r0, r3
 8001ace:	f04f 0100 	mov.w	r1, #0
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	f04f 0300 	mov.w	r3, #0
 8001ada:	00cb      	lsls	r3, r1, #3
 8001adc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001ae0:	00c2      	lsls	r2, r0, #3
 8001ae2:	4623      	mov	r3, r4
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f04f 0100 	mov.w	r1, #0
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	00cb      	lsls	r3, r1, #3
 8001af6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001afa:	00c2      	lsls	r2, r0, #3
 8001afc:	4623      	mov	r3, r4
 8001afe:	3301      	adds	r3, #1
 8001b00:	3307      	adds	r3, #7
 8001b02:	08db      	lsrs	r3, r3, #3
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	ebad 0d03 	sub.w	sp, sp, r3
 8001b0a:	466b      	mov	r3, sp
 8001b0c:	3300      	adds	r3, #0
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
	sprintf(PrintBuffer, printString.c_str());
 8001b10:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001b12:	f107 0308 	add.w	r3, r7, #8
 8001b16:	4618      	mov	r0, r3
 8001b18:	f013 ff2c 	bl	8015974 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4620      	mov	r0, r4
 8001b22:	f016 fca3 	bl	801846c <siprintf>
	HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)PrintBuffer, printStringLength, 5000);
 8001b26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b30:	480e      	ldr	r0, [pc, #56]	; (8001b6c <_ZN14WobbleBoardApp24EnterUserCalibrationModeEv+0xe8>)
 8001b32:	f008 fcf9 	bl	800a528 <HAL_UART_Transmit>
	StopDataStreaming();
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff fe70 	bl	800181c <_ZN14WobbleBoardApp17StopDataStreamingEv>
	UserCalibrationTimerTimestamp = HAL_GetTick();
 8001b3c:	f004 fd4c 	bl	80065d8 <HAL_GetTick>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461a      	mov	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	IsInUserCalibrationMode = true;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	std::string printString = "Entered User Calibration Mode\r\n";
 8001b52:	f107 0308 	add.w	r3, r7, #8
 8001b56:	4618      	mov	r0, r3
 8001b58:	f013 ff04 	bl	8015964 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001b5c:	46ad      	mov	sp, r5
}
 8001b5e:	bf00      	nop
 8001b60:	3730      	adds	r7, #48	; 0x30
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bdb0      	pop	{r4, r5, r7, pc}
 8001b66:	bf00      	nop
 8001b68:	0801a854 	.word	0x0801a854
 8001b6c:	20001548 	.word	0x20001548

08001b70 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb>:

void WobbleBoardApp::ExitUserCalibrationMode(bool Interrupted)
{
 8001b70:	b5b0      	push	{r4, r5, r7, lr}
 8001b72:	b098      	sub	sp, #96	; 0x60
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	70fb      	strb	r3, [r7, #3]
	IsInUserCalibrationMode = false;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	ShouldStartUserCalibrationMode = false;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	if(!Interrupted)
 8001b8c:	78fb      	ldrb	r3, [r7, #3]
 8001b8e:	f083 0301 	eor.w	r3, r3, #1
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d007      	beq.n	8001ba8 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb+0x38>
	{
		DeadZoneMotionFXGravityX = CalculateDeadZone();
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff ff0d 	bl	80019b8 <_ZN14WobbleBoardApp17CalculateDeadZoneEv>
 8001b9e:	eef0 7a40 	vmov.f32	s15, s0
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	edc3 7a88 	vstr	s15, [r3, #544]	; 0x220
	}

	// Clear out the MotionFXGravityXBuffer
	for(int i = 0; i < NUMBER_OF_MOTIONFX_DATA_SAMPLES; i++)
 8001ba8:	2300      	movs	r3, #0
 8001baa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001bac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bae:	2b31      	cmp	r3, #49	; 0x31
 8001bb0:	dc0b      	bgt.n	8001bca <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb+0x5a>
	{
		MotionFXGravityXBuffer[i] = 0.0f;
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bb6:	3354      	adds	r3, #84	; 0x54
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < NUMBER_OF_MOTIONFX_DATA_SAMPLES; i++)
 8001bc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001bc8:	e7f0      	b.n	8001bac <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb+0x3c>
	}

	if(Interrupted)
 8001bca:	78fb      	ldrb	r3, [r7, #3]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d05b      	beq.n	8001c88 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb+0x118>
		std::string printString = "Exited User Calibration Mode: Interrupted - Will Discard User Calibration Data\r\n";
		int printStringLength = printString.length();

		char PrintBuffer[printStringLength];
		sprintf(PrintBuffer, printString.c_str());
		HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)PrintBuffer, printStringLength, 5000);
 8001bd0:	466b      	mov	r3, sp
 8001bd2:	461d      	mov	r5, r3
		std::string printString = "Exited User Calibration Mode: Interrupted - Will Discard User Calibration Data\r\n";
 8001bd4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f013 fe84 	bl	80158e6 <_ZNSaIcEC1Ev>
 8001bde:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be6:	4959      	ldr	r1, [pc, #356]	; (8001d4c <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb+0x1dc>)
 8001be8:	4618      	mov	r0, r3
 8001bea:	f013 fee9 	bl	80159c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001bee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f013 fe78 	bl	80158e8 <_ZNSaIcED1Ev>
		int printStringLength = printString.length();
 8001bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f013 feb7 	bl	8015970 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8001c02:	4603      	mov	r3, r0
 8001c04:	64fb      	str	r3, [r7, #76]	; 0x4c
		char PrintBuffer[printStringLength];
 8001c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c08:	1e5c      	subs	r4, r3, #1
 8001c0a:	64bc      	str	r4, [r7, #72]	; 0x48
 8001c0c:	4623      	mov	r3, r4
 8001c0e:	3301      	adds	r3, #1
 8001c10:	4618      	mov	r0, r3
 8001c12:	f04f 0100 	mov.w	r1, #0
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	00cb      	lsls	r3, r1, #3
 8001c20:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001c24:	00c2      	lsls	r2, r0, #3
 8001c26:	4623      	mov	r3, r4
 8001c28:	3301      	adds	r3, #1
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f04f 0100 	mov.w	r1, #0
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	00cb      	lsls	r3, r1, #3
 8001c3a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001c3e:	00c2      	lsls	r2, r0, #3
 8001c40:	4623      	mov	r3, r4
 8001c42:	3301      	adds	r3, #1
 8001c44:	3307      	adds	r3, #7
 8001c46:	08db      	lsrs	r3, r3, #3
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	ebad 0d03 	sub.w	sp, sp, r3
 8001c4e:	466b      	mov	r3, sp
 8001c50:	3300      	adds	r3, #0
 8001c52:	647b      	str	r3, [r7, #68]	; 0x44
		sprintf(PrintBuffer, printString.c_str());
 8001c54:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8001c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f013 fe8a 	bl	8015974 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001c60:	4603      	mov	r3, r0
 8001c62:	4619      	mov	r1, r3
 8001c64:	4620      	mov	r0, r4
 8001c66:	f016 fc01 	bl	801846c <siprintf>
		HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)PrintBuffer, printStringLength, 5000);
 8001c6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c74:	4836      	ldr	r0, [pc, #216]	; (8001d50 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb+0x1e0>)
 8001c76:	f008 fc57 	bl	800a528 <HAL_UART_Transmit>
		std::string printString = "Exited User Calibration Mode: Interrupted - Will Discard User Calibration Data\r\n";
 8001c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f013 fe70 	bl	8015964 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001c84:	46ad      	mov	sp, r5
 8001c86:	e05a      	b.n	8001d3e <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb+0x1ce>
		std::string printString = "Exited User Calibration Mode\r\n";
		int printStringLength = printString.length();

		char PrintBuffer[printStringLength];
		sprintf(PrintBuffer, printString.c_str());
		HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)PrintBuffer, printStringLength, 5000);
 8001c88:	466b      	mov	r3, sp
 8001c8a:	461d      	mov	r5, r3
		std::string printString = "Exited User Calibration Mode\r\n";
 8001c8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c90:	4618      	mov	r0, r3
 8001c92:	f013 fe28 	bl	80158e6 <_ZNSaIcEC1Ev>
 8001c96:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	492d      	ldr	r1, [pc, #180]	; (8001d54 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb+0x1e4>)
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f013 fe8d 	bl	80159c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001ca6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001caa:	4618      	mov	r0, r3
 8001cac:	f013 fe1c 	bl	80158e8 <_ZNSaIcED1Ev>
		int printStringLength = printString.length();
 8001cb0:	f107 030c 	add.w	r3, r7, #12
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f013 fe5b 	bl	8015970 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	65bb      	str	r3, [r7, #88]	; 0x58
		char PrintBuffer[printStringLength];
 8001cbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cc0:	1e5c      	subs	r4, r3, #1
 8001cc2:	657c      	str	r4, [r7, #84]	; 0x54
 8001cc4:	4623      	mov	r3, r4
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f04f 0100 	mov.w	r1, #0
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	00cb      	lsls	r3, r1, #3
 8001cd8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001cdc:	00c2      	lsls	r2, r0, #3
 8001cde:	4623      	mov	r3, r4
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f04f 0100 	mov.w	r1, #0
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	f04f 0300 	mov.w	r3, #0
 8001cf0:	00cb      	lsls	r3, r1, #3
 8001cf2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001cf6:	00c2      	lsls	r2, r0, #3
 8001cf8:	4623      	mov	r3, r4
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	3307      	adds	r3, #7
 8001cfe:	08db      	lsrs	r3, r3, #3
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	ebad 0d03 	sub.w	sp, sp, r3
 8001d06:	466b      	mov	r3, sp
 8001d08:	3300      	adds	r3, #0
 8001d0a:	653b      	str	r3, [r7, #80]	; 0x50
		sprintf(PrintBuffer, printString.c_str());
 8001d0c:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8001d0e:	f107 030c 	add.w	r3, r7, #12
 8001d12:	4618      	mov	r0, r3
 8001d14:	f013 fe2e 	bl	8015974 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4620      	mov	r0, r4
 8001d1e:	f016 fba5 	bl	801846c <siprintf>
		HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)PrintBuffer, printStringLength, 5000);
 8001d22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001d24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d2c:	4808      	ldr	r0, [pc, #32]	; (8001d50 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb+0x1e0>)
 8001d2e:	f008 fbfb 	bl	800a528 <HAL_UART_Transmit>
		std::string printString = "Exited User Calibration Mode\r\n";
 8001d32:	f107 030c 	add.w	r3, r7, #12
 8001d36:	4618      	mov	r0, r3
 8001d38:	f013 fe14 	bl	8015964 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001d3c:	46ad      	mov	sp, r5

	// Stop the user calibration timer
	//HAL_TIM_Base_Stop(&htim15);

	// Start streaming out the motion data again
	StartDataStreaming();
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff fd52 	bl	80017e8 <_ZN14WobbleBoardApp18StartDataStreamingEv>
}
 8001d44:	bf00      	nop
 8001d46:	3760      	adds	r7, #96	; 0x60
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d4c:	0801a874 	.word	0x0801a874
 8001d50:	20001548 	.word	0x20001548
 8001d54:	0801a8c8 	.word	0x0801a8c8

08001d58 <UART_StartReceiveMsg>:
 * @brief  Start receiving messages via DMA
 * @param  None
 * @retval None
 */
void UART_StartReceiveMsg(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  hcom_uart[COM1].pRxBuffPtr = (uint8_t *)UartRxBuffer; /* MISRA C-2012 rule 11.8 violation for purpose */
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <UART_StartReceiveMsg+0x2c>)
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <UART_StartReceiveMsg+0x30>)
 8001d60:	655a      	str	r2, [r3, #84]	; 0x54
  hcom_uart[COM1].RxXferSize = UART_RxBufferSize;
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <UART_StartReceiveMsg+0x2c>)
 8001d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d68:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  hcom_uart[COM1].ErrorCode = (uint32_t)HAL_UART_ERROR_NONE;
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <UART_StartReceiveMsg+0x2c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
     in the UART CR3 register */
  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Receive_DMA(&hcom_uart[COM1], (uint8_t *)UartRxBuffer, UART_RxBufferSize);
 8001d74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d78:	4903      	ldr	r1, [pc, #12]	; (8001d88 <UART_StartReceiveMsg+0x30>)
 8001d7a:	4802      	ldr	r0, [pc, #8]	; (8001d84 <UART_StartReceiveMsg+0x2c>)
 8001d7c:	f008 fc68 	bl	800a650 <HAL_UART_Receive_DMA>
}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20001548 	.word	0x20001548
 8001d88:	200011c0 	.word	0x200011c0

08001d8c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001d90:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <MX_CRC_Init+0x3c>)
 8001d92:	4a0e      	ldr	r2, [pc, #56]	; (8001dcc <MX_CRC_Init+0x40>)
 8001d94:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <MX_CRC_Init+0x3c>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <MX_CRC_Init+0x3c>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <MX_CRC_Init+0x3c>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001da8:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <MX_CRC_Init+0x3c>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <MX_CRC_Init+0x3c>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001db4:	4804      	ldr	r0, [pc, #16]	; (8001dc8 <MX_CRC_Init+0x3c>)
 8001db6:	f004 fd2d 	bl	8006814 <HAL_CRC_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001dc0:	f000 fad0 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	200013c8 	.word	0x200013c8
 8001dcc:	40023000 	.word	0x40023000

08001dd0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a0a      	ldr	r2, [pc, #40]	; (8001e08 <HAL_CRC_MspInit+0x38>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d10b      	bne.n	8001dfa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001de2:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <HAL_CRC_MspInit+0x3c>)
 8001de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001de6:	4a09      	ldr	r2, [pc, #36]	; (8001e0c <HAL_CRC_MspInit+0x3c>)
 8001de8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dec:	6493      	str	r3, [r2, #72]	; 0x48
 8001dee:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <HAL_CRC_MspInit+0x3c>)
 8001df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001dfa:	bf00      	nop
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40023000 	.word	0x40023000
 8001e0c:	40021000 	.word	0x40021000

08001e10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e16:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <MX_DMA_Init+0x38>)
 8001e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e1a:	4a0b      	ldr	r2, [pc, #44]	; (8001e48 <MX_DMA_Init+0x38>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6493      	str	r3, [r2, #72]	; 0x48
 8001e22:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <MX_DMA_Init+0x38>)
 8001e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	607b      	str	r3, [r7, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2100      	movs	r1, #0
 8001e32:	2010      	movs	r0, #16
 8001e34:	f004 fcb7 	bl	80067a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001e38:	2010      	movs	r0, #16
 8001e3a:	f004 fcd0 	bl	80067de <HAL_NVIC_EnableIRQ>

}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000

08001e4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	; 0x28
 8001e50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e52:	f107 0314 	add.w	r3, r7, #20
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
 8001e5e:	60da      	str	r2, [r3, #12]
 8001e60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e62:	4b2f      	ldr	r3, [pc, #188]	; (8001f20 <MX_GPIO_Init+0xd4>)
 8001e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e66:	4a2e      	ldr	r2, [pc, #184]	; (8001f20 <MX_GPIO_Init+0xd4>)
 8001e68:	f043 0304 	orr.w	r3, r3, #4
 8001e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e6e:	4b2c      	ldr	r3, [pc, #176]	; (8001f20 <MX_GPIO_Init+0xd4>)
 8001e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e7a:	4b29      	ldr	r3, [pc, #164]	; (8001f20 <MX_GPIO_Init+0xd4>)
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7e:	4a28      	ldr	r2, [pc, #160]	; (8001f20 <MX_GPIO_Init+0xd4>)
 8001e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e86:	4b26      	ldr	r3, [pc, #152]	; (8001f20 <MX_GPIO_Init+0xd4>)
 8001e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e92:	4b23      	ldr	r3, [pc, #140]	; (8001f20 <MX_GPIO_Init+0xd4>)
 8001e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e96:	4a22      	ldr	r2, [pc, #136]	; (8001f20 <MX_GPIO_Init+0xd4>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e9e:	4b20      	ldr	r3, [pc, #128]	; (8001f20 <MX_GPIO_Init+0xd4>)
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eaa:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <MX_GPIO_Init+0xd4>)
 8001eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eae:	4a1c      	ldr	r2, [pc, #112]	; (8001f20 <MX_GPIO_Init+0xd4>)
 8001eb0:	f043 0302 	orr.w	r3, r3, #2
 8001eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eb6:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <MX_GPIO_Init+0xd4>)
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2120      	movs	r1, #32
 8001ec6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eca:	f005 fa23 	bl	8007314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserCalibrationButton_Pin;
 8001ece:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ed2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ed4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ed8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UserCalibrationButton_GPIO_Port, &GPIO_InitStruct);
 8001ede:	f107 0314 	add.w	r3, r7, #20
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	480f      	ldr	r0, [pc, #60]	; (8001f24 <MX_GPIO_Init+0xd8>)
 8001ee6:	f004 ff77 	bl	8006dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001eea:	2320      	movs	r3, #32
 8001eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	4619      	mov	r1, r3
 8001f00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f04:	f004 ff68 	bl	8006dd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	2028      	movs	r0, #40	; 0x28
 8001f0e:	f004 fc4a 	bl	80067a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f12:	2028      	movs	r0, #40	; 0x28
 8001f14:	f004 fc63 	bl	80067de <HAL_NVIC_EnableIRQ>

}
 8001f18:	bf00      	nop
 8001f1a:	3728      	adds	r7, #40	; 0x28
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021000 	.word	0x40021000
 8001f24:	48000800 	.word	0x48000800

08001f28 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f2c:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <MX_I2C1_Init+0x74>)
 8001f2e:	4a1c      	ldr	r2, [pc, #112]	; (8001fa0 <MX_I2C1_Init+0x78>)
 8001f30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8001f32:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <MX_I2C1_Init+0x74>)
 8001f34:	4a1b      	ldr	r2, [pc, #108]	; (8001fa4 <MX_I2C1_Init+0x7c>)
 8001f36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f38:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <MX_I2C1_Init+0x74>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f3e:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <MX_I2C1_Init+0x74>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f44:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <MX_I2C1_Init+0x74>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f4a:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <MX_I2C1_Init+0x74>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <MX_I2C1_Init+0x74>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f56:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <MX_I2C1_Init+0x74>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f5c:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <MX_I2C1_Init+0x74>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f62:	480e      	ldr	r0, [pc, #56]	; (8001f9c <MX_I2C1_Init+0x74>)
 8001f64:	f005 fa06 	bl	8007374 <HAL_I2C_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001f6e:	f000 f9f9 	bl	8002364 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f72:	2100      	movs	r1, #0
 8001f74:	4809      	ldr	r0, [pc, #36]	; (8001f9c <MX_I2C1_Init+0x74>)
 8001f76:	f005 ffa9 	bl	8007ecc <HAL_I2CEx_ConfigAnalogFilter>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001f80:	f000 f9f0 	bl	8002364 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f84:	2100      	movs	r1, #0
 8001f86:	4805      	ldr	r0, [pc, #20]	; (8001f9c <MX_I2C1_Init+0x74>)
 8001f88:	f005 ffeb 	bl	8007f62 <HAL_I2CEx_ConfigDigitalFilter>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001f92:	f000 f9e7 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	200013ec 	.word	0x200013ec
 8001fa0:	40005400 	.word	0x40005400
 8001fa4:	00702991 	.word	0x00702991

08001fa8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b0ac      	sub	sp, #176	; 0xb0
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	2288      	movs	r2, #136	; 0x88
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f015 fc93 	bl	80178f4 <memset>
  if(i2cHandle->Instance==I2C1)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a21      	ldr	r2, [pc, #132]	; (8002058 <HAL_I2C_MspInit+0xb0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d13b      	bne.n	8002050 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001fd8:	2340      	movs	r3, #64	; 0x40
 8001fda:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f006 fe59 	bl	8008c9c <HAL_RCCEx_PeriphCLKConfig>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001ff0:	f000 f9b8 	bl	8002364 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff4:	4b19      	ldr	r3, [pc, #100]	; (800205c <HAL_I2C_MspInit+0xb4>)
 8001ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff8:	4a18      	ldr	r2, [pc, #96]	; (800205c <HAL_I2C_MspInit+0xb4>)
 8001ffa:	f043 0302 	orr.w	r3, r3, #2
 8001ffe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002000:	4b16      	ldr	r3, [pc, #88]	; (800205c <HAL_I2C_MspInit+0xb4>)
 8002002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800200c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002010:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002014:	2312      	movs	r3, #18
 8002016:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002020:	2303      	movs	r3, #3
 8002022:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002026:	2304      	movs	r3, #4
 8002028:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002030:	4619      	mov	r1, r3
 8002032:	480b      	ldr	r0, [pc, #44]	; (8002060 <HAL_I2C_MspInit+0xb8>)
 8002034:	f004 fed0 	bl	8006dd8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002038:	4b08      	ldr	r3, [pc, #32]	; (800205c <HAL_I2C_MspInit+0xb4>)
 800203a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203c:	4a07      	ldr	r2, [pc, #28]	; (800205c <HAL_I2C_MspInit+0xb4>)
 800203e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002042:	6593      	str	r3, [r2, #88]	; 0x58
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <HAL_I2C_MspInit+0xb4>)
 8002046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002050:	bf00      	nop
 8002052:	37b0      	adds	r7, #176	; 0xb0
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40005400 	.word	0x40005400
 800205c:	40021000 	.word	0x40021000
 8002060:	48000400 	.word	0x48000400

08002064 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a0b      	ldr	r2, [pc, #44]	; (80020a0 <HAL_I2C_MspDeInit+0x3c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d10f      	bne.n	8002096 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002076:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <HAL_I2C_MspDeInit+0x40>)
 8002078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207a:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <HAL_I2C_MspDeInit+0x40>)
 800207c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002080:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8002082:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002086:	4808      	ldr	r0, [pc, #32]	; (80020a8 <HAL_I2C_MspDeInit+0x44>)
 8002088:	f005 f850 	bl	800712c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800208c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002090:	4805      	ldr	r0, [pc, #20]	; (80020a8 <HAL_I2C_MspDeInit+0x44>)
 8002092:	f005 f84b 	bl	800712c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40005400 	.word	0x40005400
 80020a4:	40021000 	.word	0x40021000
 80020a8:	48000400 	.word	0x48000400

080020ac <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 80020b0:	2102      	movs	r1, #2
 80020b2:	2000      	movs	r0, #0
 80020b4:	f003 fd16 	bl	8005ae4 <IKS01A2_MOTION_SENSOR_Init>
}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}

080020bc <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 80020c0:	2101      	movs	r1, #1
 80020c2:	2000      	movs	r0, #0
 80020c4:	f003 fd0e 	bl	8005ae4 <IKS01A2_MOTION_SENSOR_Init>
}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}

080020cc <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 80020d0:	2104      	movs	r1, #4
 80020d2:	2002      	movs	r0, #2
 80020d4:	f003 fd06 	bl	8005ae4 <IKS01A2_MOTION_SENSOR_Init>
}
 80020d8:	bf00      	nop
 80020da:	bd80      	pop	{r7, pc}

080020dc <BSP_SENSOR_ACC_Enable>:
  * @brief  Enables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Enable(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 80020e0:	2102      	movs	r1, #2
 80020e2:	2000      	movs	r0, #0
 80020e4:	f003 fdfa 	bl	8005cdc <IKS01A2_MOTION_SENSOR_Enable>
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}

080020ec <BSP_SENSOR_GYR_Enable>:
  * @brief  Enables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Enable(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 80020f0:	2101      	movs	r1, #1
 80020f2:	2000      	movs	r0, #0
 80020f4:	f003 fdf2 	bl	8005cdc <IKS01A2_MOTION_SENSOR_Enable>
}
 80020f8:	bf00      	nop
 80020fa:	bd80      	pop	{r7, pc}

080020fc <BSP_SENSOR_MAG_Enable>:
  * @brief  Enables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Enable(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 8002100:	2104      	movs	r1, #4
 8002102:	2002      	movs	r0, #2
 8002104:	f003 fdea 	bl	8005cdc <IKS01A2_MOTION_SENSOR_Enable>
}
 8002108:	bf00      	nop
 800210a:	bd80      	pop	{r7, pc}

0800210c <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Axes);
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	2102      	movs	r1, #2
 8002118:	2000      	movs	r0, #0
 800211a:	f003 fe21 	bl	8005d60 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_GYRO, Axes);
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	2101      	movs	r1, #1
 8002132:	2000      	movs	r0, #0
 8002134:	f003 fe14 	bl	8005d60 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <BSP_SENSOR_MAG_GetAxes>:
  * @brief  Get magnetometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_MAG_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO, Axes);
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	2104      	movs	r1, #4
 800214c:	2002      	movs	r0, #2
 800214e:	f003 fe07 	bl	8005d60 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetOutputDataRate(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Odr);
 8002164:	ed97 0a01 	vldr	s0, [r7, #4]
 8002168:	2102      	movs	r1, #2
 800216a:	2000      	movs	r0, #0
 800216c:	f003 fe3c 	bl	8005de8 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>
}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for acclerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetFullScale(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Fullscale);
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	2102      	movs	r1, #2
 8002184:	2000      	movs	r0, #0
 8002186:	f003 fe75 	bl	8005e74 <IKS01A2_MOTION_SENSOR_SetFullScale>
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <BSP_SENSOR_ACC_GetOrientation>:
  * @brief  Get accelerometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_ACC_GetOrientation(char *Orientation)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	226e      	movs	r2, #110	; 0x6e
 800219e:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3301      	adds	r3, #1
 80021a4:	2277      	movs	r2, #119	; 0x77
 80021a6:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3302      	adds	r3, #2
 80021ac:	2275      	movs	r2, #117	; 0x75
 80021ae:	701a      	strb	r2, [r3, #0]
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <BSP_SENSOR_GYR_GetOrientation>:
  * @brief  Get gyroscope sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_GYR_GetOrientation(char *Orientation)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	226e      	movs	r2, #110	; 0x6e
 80021c8:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3301      	adds	r3, #1
 80021ce:	2277      	movs	r2, #119	; 0x77
 80021d0:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3302      	adds	r3, #2
 80021d6:	2275      	movs	r2, #117	; 0x75
 80021d8:	701a      	strb	r2, [r3, #0]
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <BSP_SENSOR_MAG_GetOrientation>:
  * @brief  Get magnetometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_MAG_GetOrientation(char *Orientation)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	226e      	movs	r2, #110	; 0x6e
 80021f2:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3301      	adds	r3, #1
 80021f8:	2265      	movs	r2, #101	; 0x65
 80021fa:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3302      	adds	r3, #2
 8002200:	2275      	movs	r2, #117	; 0x75
 8002202:	701a      	strb	r2, [r3, #0]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002210:	b598      	push	{r3, r4, r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002214:	f004 f970 	bl	80064f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002218:	f000 f82a 	bl	8002270 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800221c:	f7ff fe16 	bl	8001e4c <MX_GPIO_Init>
  MX_DMA_Init();
 8002220:	f7ff fdf6 	bl	8001e10 <MX_DMA_Init>
  MX_CRC_Init();
 8002224:	f7ff fdb2 	bl	8001d8c <MX_CRC_Init>
  MX_RTC_Init();
 8002228:	f000 f976 	bl	8002518 <MX_RTC_Init>
  MX_TIM15_Init();
 800222c:	f000 fcd0 	bl	8002bd0 <MX_TIM15_Init>

  /* USER CODE BEGIN 2 */
  wobbleBoardApp = new WobbleBoardApp();
 8002230:	f44f 700a 	mov.w	r0, #552	; 0x228
 8002234:	f013 fb46 	bl	80158c4 <_Znwj>
 8002238:	4603      	mov	r3, r0
 800223a:	461c      	mov	r4, r3
 800223c:	4620      	mov	r0, r4
 800223e:	f7fe fe7f 	bl	8000f40 <_ZN14WobbleBoardAppC1Ev>
 8002242:	4b0a      	ldr	r3, [pc, #40]	; (800226c <main+0x5c>)
 8002244:	601c      	str	r4, [r3, #0]
  if(wobbleBoardApp != nullptr)
 8002246:	4b09      	ldr	r3, [pc, #36]	; (800226c <main+0x5c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d004      	beq.n	8002258 <main+0x48>
  {
	  wobbleBoardApp->Init();
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <main+0x5c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe fec2 	bl	8000fdc <_ZN14WobbleBoardApp4InitEv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(wobbleBoardApp != nullptr)
 8002258:	4b04      	ldr	r3, [pc, #16]	; (800226c <main+0x5c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0fb      	beq.n	8002258 <main+0x48>
	  {
		  wobbleBoardApp->Process();
 8002260:	4b02      	ldr	r3, [pc, #8]	; (800226c <main+0x5c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe ff3f 	bl	80010e8 <_ZN14WobbleBoardApp7ProcessEv>
	  if(wobbleBoardApp != nullptr)
 800226a:	e7f5      	b.n	8002258 <main+0x48>
 800226c:	2000072c 	.word	0x2000072c

08002270 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b096      	sub	sp, #88	; 0x58
 8002274:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002276:	f107 0314 	add.w	r3, r7, #20
 800227a:	2244      	movs	r2, #68	; 0x44
 800227c:	2100      	movs	r1, #0
 800227e:	4618      	mov	r0, r3
 8002280:	f015 fb38 	bl	80178f4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002284:	463b      	mov	r3, r7
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	605a      	str	r2, [r3, #4]
 800228c:	609a      	str	r2, [r3, #8]
 800228e:	60da      	str	r2, [r3, #12]
 8002290:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002292:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002296:	f005 febf 	bl	8008018 <HAL_PWREx_ControlVoltageScaling>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	bf14      	ite	ne
 80022a0:	2301      	movne	r3, #1
 80022a2:	2300      	moveq	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <_Z18SystemClock_Configv+0x3e>
	{
		Error_Handler();
 80022aa:	f000 f85b 	bl	8002364 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80022ae:	230a      	movs	r3, #10
 80022b0:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022b6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022b8:	2310      	movs	r3, #16
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80022bc:	2301      	movs	r3, #1
 80022be:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022c0:	2302      	movs	r3, #2
 80022c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022c4:	2302      	movs	r3, #2
 80022c6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80022c8:	2301      	movs	r3, #1
 80022ca:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80022cc:	230a      	movs	r3, #10
 80022ce:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80022d0:	2307      	movs	r3, #7
 80022d2:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80022d4:	2302      	movs	r3, #2
 80022d6:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80022d8:	2302      	movs	r3, #2
 80022da:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	4618      	mov	r0, r3
 80022e2:	f005 feef 	bl	80080c4 <HAL_RCC_OscConfig>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	bf14      	ite	ne
 80022ec:	2301      	movne	r3, #1
 80022ee:	2300      	moveq	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <_Z18SystemClock_Configv+0x8a>
	{
		Error_Handler();
 80022f6:	f000 f835 	bl	8002364 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022fa:	230f      	movs	r3, #15
 80022fc:	603b      	str	r3, [r7, #0]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022fe:	2303      	movs	r3, #3
 8002300:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002302:	2300      	movs	r3, #0
 8002304:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800230e:	463b      	mov	r3, r7
 8002310:	2104      	movs	r1, #4
 8002312:	4618      	mov	r0, r3
 8002314:	f006 fabc 	bl	8008890 <HAL_RCC_ClockConfig>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	bf14      	ite	ne
 800231e:	2301      	movne	r3, #1
 8002320:	2300      	moveq	r3, #0
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <_Z18SystemClock_Configv+0xbc>
	{
		Error_Handler();
 8002328:	f000 f81c 	bl	8002364 <Error_Handler>
	}
}
 800232c:	bf00      	nop
 800232e:	3758      	adds	r7, #88	; 0x58
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
// This gets triggered by a falling edge detection of the button
// See: https://www.arduino.cc/en/Tutorial/BuiltInExamples/StateChangeDetection
// for an explanation on edge detection
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == UserCalibrationButton_Pin)
 800233e:	88fb      	ldrh	r3, [r7, #6]
 8002340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002344:	d108      	bne.n	8002358 <HAL_GPIO_EXTI_Callback+0x24>
	{
		// TODO:  Send data via BLE virtual COM port to bring up or
		// close down the user calibration screen

		if(wobbleBoardApp != nullptr)
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d004      	beq.n	8002358 <HAL_GPIO_EXTI_Callback+0x24>
		{
			wobbleBoardApp->ToggleUserCalibrationMode();
 800234e:	4b04      	ldr	r3, [pc, #16]	; (8002360 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff facc 	bl	80018f0 <_ZN14WobbleBoardApp25ToggleUserCalibrationModeEv>
			Error_Handler();
		}*/

		//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, iIsUserCalibrationLEDOn);
	}
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	2000072c 	.word	0x2000072c

08002364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002368:	b672      	cpsid	i
}
 800236a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800236c:	e7fe      	b.n	800236c <Error_Handler+0x8>
	...

08002370 <MotionFX_manager_init>:
 * @brief  Initialize the MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  if (STATE_SIZE < MotionFX_GetStateSize())
 8002374:	f012 fcec 	bl	8014d50 <MotionFX_GetStateSize>
 8002378:	4603      	mov	r3, r0
 800237a:	f5b3 6f18 	cmp.w	r3, #2432	; 0x980
 800237e:	d901      	bls.n	8002384 <MotionFX_manager_init+0x14>
    Error_Handler();
 8002380:	f7ff fff0 	bl	8002364 <Error_Handler>

  MotionFX_initialize((MFXState_t *)mfxstate);
 8002384:	4821      	ldr	r0, [pc, #132]	; (800240c <MotionFX_manager_init+0x9c>)
 8002386:	f012 fce7 	bl	8014d58 <MotionFX_initialize>

  MotionFX_getKnobs(mfxstate, ipKnobs);
 800238a:	4b21      	ldr	r3, [pc, #132]	; (8002410 <MotionFX_manager_init+0xa0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4619      	mov	r1, r3
 8002390:	481e      	ldr	r0, [pc, #120]	; (800240c <MotionFX_manager_init+0x9c>)
 8002392:	f012 fdc5 	bl	8014f20 <MotionFX_getKnobs>

  BSP_SENSOR_ACC_GetOrientation(ipKnobs->acc_orientation);
 8002396:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <MotionFX_manager_init+0xa0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	331d      	adds	r3, #29
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fef8 	bl	8002192 <BSP_SENSOR_ACC_GetOrientation>
  BSP_SENSOR_GYR_GetOrientation(ipKnobs->gyro_orientation);
 80023a2:	4b1b      	ldr	r3, [pc, #108]	; (8002410 <MotionFX_manager_init+0xa0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	3321      	adds	r3, #33	; 0x21
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff07 	bl	80021bc <BSP_SENSOR_GYR_GetOrientation>
  BSP_SENSOR_MAG_GetOrientation(ipKnobs->mag_orientation);
 80023ae:	4b18      	ldr	r3, [pc, #96]	; (8002410 <MotionFX_manager_init+0xa0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	3325      	adds	r3, #37	; 0x25
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff ff16 	bl	80021e6 <BSP_SENSOR_MAG_GetOrientation>

  ipKnobs->gbias_acc_th_sc = GBIAS_ACC_TH_SC;
 80023ba:	4b15      	ldr	r3, [pc, #84]	; (8002410 <MotionFX_manager_init+0xa0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a15      	ldr	r2, [pc, #84]	; (8002414 <MotionFX_manager_init+0xa4>)
 80023c0:	615a      	str	r2, [r3, #20]
  ipKnobs->gbias_gyro_th_sc = GBIAS_GYRO_TH_SC;
 80023c2:	4b13      	ldr	r3, [pc, #76]	; (8002410 <MotionFX_manager_init+0xa0>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a14      	ldr	r2, [pc, #80]	; (8002418 <MotionFX_manager_init+0xa8>)
 80023c8:	619a      	str	r2, [r3, #24]
  ipKnobs->gbias_mag_th_sc = GBIAS_MAG_TH_SC;
 80023ca:	4b11      	ldr	r3, [pc, #68]	; (8002410 <MotionFX_manager_init+0xa0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a13      	ldr	r2, [pc, #76]	; (800241c <MotionFX_manager_init+0xac>)
 80023d0:	611a      	str	r2, [r3, #16]

  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 80023d2:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <MotionFX_manager_init+0xa0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ipKnobs->LMode = 1;
 80023dc:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <MotionFX_manager_init+0xa0>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2201      	movs	r2, #1
 80023e2:	731a      	strb	r2, [r3, #12]
  ipKnobs->modx = DECIMATION;
 80023e4:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <MotionFX_manager_init+0xa0>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2201      	movs	r2, #1
 80023ea:	771a      	strb	r2, [r3, #28]

  MotionFX_setKnobs(mfxstate, ipKnobs);
 80023ec:	4b08      	ldr	r3, [pc, #32]	; (8002410 <MotionFX_manager_init+0xa0>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4619      	mov	r1, r3
 80023f2:	4806      	ldr	r0, [pc, #24]	; (800240c <MotionFX_manager_init+0x9c>)
 80023f4:	f012 fd4a 	bl	8014e8c <MotionFX_setKnobs>

  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 80023f8:	2100      	movs	r1, #0
 80023fa:	4804      	ldr	r0, [pc, #16]	; (800240c <MotionFX_manager_init+0x9c>)
 80023fc:	f012 fdcc 	bl	8014f98 <MotionFX_enable_6X>
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 8002400:	2100      	movs	r1, #0
 8002402:	4802      	ldr	r0, [pc, #8]	; (800240c <MotionFX_manager_init+0x9c>)
 8002404:	f012 fde8 	bl	8014fd8 <MotionFX_enable_9X>
}
 8002408:	bf00      	nop
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20000764 	.word	0x20000764
 8002410:	20000004 	.word	0x20000004
 8002414:	3ac88a48 	.word	0x3ac88a48
 8002418:	3b83126f 	.word	0x3b83126f
 800241c:	3b449ba6 	.word	0x3b449ba6

08002420 <MotionFX_manager_run>:
 * @param  data_out Structure containing output data
 * @param  delta_time Delta time
 * @retval None
 */
void MotionFX_manager_run(MFX_input_t *data_in, MFX_output_t *data_out, float delta_time)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af02      	add	r7, sp, #8
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	ed87 0a01 	vstr	s0, [r7, #4]
  if (discardedCount == sampleToDiscard)
 800242e:	4b0f      	ldr	r3, [pc, #60]	; (800246c <MotionFX_manager_run+0x4c>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <MotionFX_manager_run+0x50>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d10e      	bne.n	8002458 <MotionFX_manager_run+0x38>
  {
    MotionFX_propagate(mfxstate, data_out, data_in, &delta_time);
 800243a:	1d3b      	adds	r3, r7, #4
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	68b9      	ldr	r1, [r7, #8]
 8002440:	480c      	ldr	r0, [pc, #48]	; (8002474 <MotionFX_manager_run+0x54>)
 8002442:	f012 fdf9 	bl	8015038 <MotionFX_propagate>
    MotionFX_update(mfxstate, data_out, data_in, &delta_time, NULL);
 8002446:	1d3b      	adds	r3, r7, #4
 8002448:	2200      	movs	r2, #0
 800244a:	9200      	str	r2, [sp, #0]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	68b9      	ldr	r1, [r7, #8]
 8002450:	4808      	ldr	r0, [pc, #32]	; (8002474 <MotionFX_manager_run+0x54>)
 8002452:	f012 fde1 	bl	8015018 <MotionFX_update>
  }
  else
  {
    discardedCount++;
  }
}
 8002456:	e004      	b.n	8002462 <MotionFX_manager_run+0x42>
    discardedCount++;
 8002458:	4b04      	ldr	r3, [pc, #16]	; (800246c <MotionFX_manager_run+0x4c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	3301      	adds	r3, #1
 800245e:	4a03      	ldr	r2, [pc, #12]	; (800246c <MotionFX_manager_run+0x4c>)
 8002460:	6013      	str	r3, [r2, #0]
}
 8002462:	bf00      	nop
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000760 	.word	0x20000760
 8002470:	20000008 	.word	0x20000008
 8002474:	20000764 	.word	0x20000764

08002478 <MotionFX_manager_start_6X>:
 * @brief  Start 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_6X(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  MotionFX_enable_6X(mfxstate, MFX_ENGINE_ENABLE);
 800247c:	2101      	movs	r1, #1
 800247e:	4802      	ldr	r0, [pc, #8]	; (8002488 <MotionFX_manager_start_6X+0x10>)
 8002480:	f012 fd8a 	bl	8014f98 <MotionFX_enable_6X>
}
 8002484:	bf00      	nop
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20000764 	.word	0x20000764

0800248c <MotionFX_manager_stop_6X>:
 * @brief  Stop 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_6X(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 8002490:	2100      	movs	r1, #0
 8002492:	4802      	ldr	r0, [pc, #8]	; (800249c <MotionFX_manager_stop_6X+0x10>)
 8002494:	f012 fd80 	bl	8014f98 <MotionFX_enable_6X>
}
 8002498:	bf00      	nop
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000764 	.word	0x20000764

080024a0 <MotionFX_manager_start_9X>:
 * @brief  Start 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_9X(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_ENABLE);
 80024a4:	2101      	movs	r1, #1
 80024a6:	4802      	ldr	r0, [pc, #8]	; (80024b0 <MotionFX_manager_start_9X+0x10>)
 80024a8:	f012 fd96 	bl	8014fd8 <MotionFX_enable_9X>
}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20000764 	.word	0x20000764

080024b4 <MotionFX_manager_stop_9X>:
 * @brief  Stop 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_9X(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 80024b8:	2100      	movs	r1, #0
 80024ba:	4802      	ldr	r0, [pc, #8]	; (80024c4 <MotionFX_manager_stop_9X+0x10>)
 80024bc:	f012 fd8c 	bl	8014fd8 <MotionFX_enable_9X>
}
 80024c0:	bf00      	nop
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20000764 	.word	0x20000764

080024c8 <MotionFX_manager_MagCal_run>:
 * @brief  Run magnetometer calibration algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_run(MFX_MagCal_input_t *data_in, MFX_MagCal_output_t *data_out)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  MotionFX_MagCal_run(data_in);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f012 ff98 	bl	8015408 <MotionFX_MagCal_run>
  MotionFX_MagCal_getParams(data_out);
 80024d8:	6838      	ldr	r0, [r7, #0]
 80024da:	f013 f9b7 	bl	801584c <MotionFX_MagCal_getParams>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <MotionFX_manager_MagCal_start>:
 * @brief  Start magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_start(int sampletime)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 1);
 80024ee:	2101      	movs	r1, #1
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f012 fef3 	bl	80152dc <MotionFX_MagCal_init>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <MotionFX_manager_MagCal_stop>:
 * @brief  Stop magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_stop(int sampletime)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 0);
 8002506:	2100      	movs	r1, #0
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f012 fee7 	bl	80152dc <MotionFX_MagCal_init>
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800251e:	1d3b      	adds	r3, r7, #4
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800252c:	2300      	movs	r3, #0
 800252e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002530:	4b25      	ldr	r3, [pc, #148]	; (80025c8 <MX_RTC_Init+0xb0>)
 8002532:	4a26      	ldr	r2, [pc, #152]	; (80025cc <MX_RTC_Init+0xb4>)
 8002534:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002536:	4b24      	ldr	r3, [pc, #144]	; (80025c8 <MX_RTC_Init+0xb0>)
 8002538:	2200      	movs	r2, #0
 800253a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800253c:	4b22      	ldr	r3, [pc, #136]	; (80025c8 <MX_RTC_Init+0xb0>)
 800253e:	227f      	movs	r2, #127	; 0x7f
 8002540:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002542:	4b21      	ldr	r3, [pc, #132]	; (80025c8 <MX_RTC_Init+0xb0>)
 8002544:	22ff      	movs	r2, #255	; 0xff
 8002546:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002548:	4b1f      	ldr	r3, [pc, #124]	; (80025c8 <MX_RTC_Init+0xb0>)
 800254a:	2200      	movs	r2, #0
 800254c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800254e:	4b1e      	ldr	r3, [pc, #120]	; (80025c8 <MX_RTC_Init+0xb0>)
 8002550:	2200      	movs	r2, #0
 8002552:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002554:	4b1c      	ldr	r3, [pc, #112]	; (80025c8 <MX_RTC_Init+0xb0>)
 8002556:	2200      	movs	r2, #0
 8002558:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800255a:	4b1b      	ldr	r3, [pc, #108]	; (80025c8 <MX_RTC_Init+0xb0>)
 800255c:	2200      	movs	r2, #0
 800255e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002560:	4819      	ldr	r0, [pc, #100]	; (80025c8 <MX_RTC_Init+0xb0>)
 8002562:	f007 f857 	bl	8009614 <HAL_RTC_Init>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800256c:	f7ff fefa 	bl	8002364 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002570:	2300      	movs	r3, #0
 8002572:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002574:	2300      	movs	r3, #0
 8002576:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002578:	2300      	movs	r3, #0
 800257a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800257c:	2300      	movs	r3, #0
 800257e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002584:	1d3b      	adds	r3, r7, #4
 8002586:	2201      	movs	r2, #1
 8002588:	4619      	mov	r1, r3
 800258a:	480f      	ldr	r0, [pc, #60]	; (80025c8 <MX_RTC_Init+0xb0>)
 800258c:	f007 f8bd 	bl	800970a <HAL_RTC_SetTime>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8002596:	f7ff fee5 	bl	8002364 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800259a:	2301      	movs	r3, #1
 800259c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800259e:	2301      	movs	r3, #1
 80025a0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80025a2:	2301      	movs	r3, #1
 80025a4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80025aa:	463b      	mov	r3, r7
 80025ac:	2201      	movs	r2, #1
 80025ae:	4619      	mov	r1, r3
 80025b0:	4805      	ldr	r0, [pc, #20]	; (80025c8 <MX_RTC_Init+0xb0>)
 80025b2:	f007 f947 	bl	8009844 <HAL_RTC_SetDate>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80025bc:	f7ff fed2 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80025c0:	bf00      	nop
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20001438 	.word	0x20001438
 80025cc:	40002800 	.word	0x40002800

080025d0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b0a4      	sub	sp, #144	; 0x90
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025d8:	f107 0308 	add.w	r3, r7, #8
 80025dc:	2288      	movs	r2, #136	; 0x88
 80025de:	2100      	movs	r1, #0
 80025e0:	4618      	mov	r0, r3
 80025e2:	f015 f987 	bl	80178f4 <memset>
  if(rtcHandle->Instance==RTC)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a10      	ldr	r2, [pc, #64]	; (800262c <HAL_RTC_MspInit+0x5c>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d118      	bne.n	8002622 <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80025f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025f4:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80025f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025fe:	f107 0308 	add.w	r3, r7, #8
 8002602:	4618      	mov	r0, r3
 8002604:	f006 fb4a 	bl	8008c9c <HAL_RCCEx_PeriphCLKConfig>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800260e:	f7ff fea9 	bl	8002364 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002612:	4b07      	ldr	r3, [pc, #28]	; (8002630 <HAL_RTC_MspInit+0x60>)
 8002614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002618:	4a05      	ldr	r2, [pc, #20]	; (8002630 <HAL_RTC_MspInit+0x60>)
 800261a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800261e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002622:	bf00      	nop
 8002624:	3790      	adds	r7, #144	; 0x90
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40002800 	.word	0x40002800
 8002630:	40021000 	.word	0x40021000

08002634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263a:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <HAL_MspInit+0x44>)
 800263c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800263e:	4a0e      	ldr	r2, [pc, #56]	; (8002678 <HAL_MspInit+0x44>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	6613      	str	r3, [r2, #96]	; 0x60
 8002646:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <HAL_MspInit+0x44>)
 8002648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	607b      	str	r3, [r7, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002652:	4b09      	ldr	r3, [pc, #36]	; (8002678 <HAL_MspInit+0x44>)
 8002654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002656:	4a08      	ldr	r2, [pc, #32]	; (8002678 <HAL_MspInit+0x44>)
 8002658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800265c:	6593      	str	r3, [r2, #88]	; 0x58
 800265e:	4b06      	ldr	r3, [pc, #24]	; (8002678 <HAL_MspInit+0x44>)
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002666:	603b      	str	r3, [r7, #0]
 8002668:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40021000 	.word	0x40021000

0800267c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002680:	e7fe      	b.n	8002680 <NMI_Handler+0x4>

08002682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002682:	b480      	push	{r7}
 8002684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002686:	e7fe      	b.n	8002686 <HardFault_Handler+0x4>

08002688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800268c:	e7fe      	b.n	800268c <MemManage_Handler+0x4>

0800268e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800268e:	b480      	push	{r7}
 8002690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002692:	e7fe      	b.n	8002692 <BusFault_Handler+0x4>

08002694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002698:	e7fe      	b.n	8002698 <UsageFault_Handler+0x4>

0800269a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800269a:	b480      	push	{r7}
 800269c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800269e:	bf00      	nop
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026b6:	b480      	push	{r7}
 80026b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026c8:	f003 ff72 	bl	80065b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026cc:	bf00      	nop
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80026d4:	4802      	ldr	r0, [pc, #8]	; (80026e0 <DMA1_Channel6_IRQHandler+0x10>)
 80026d6:	f004 fa9f 	bl	8006c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20001500 	.word	0x20001500

080026e4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80026e8:	4802      	ldr	r0, [pc, #8]	; (80026f4 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80026ea:	f007 fad0 	bl	8009c8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	2000145c 	.word	0x2000145c

080026f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80026fc:	4802      	ldr	r0, [pc, #8]	; (8002708 <TIM3_IRQHandler+0x10>)
 80026fe:	f007 fac6 	bl	8009c8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	200014a8 	.word	0x200014a8

0800270c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UserCalibrationButton_Pin);
 8002710:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002714:	f004 fe16 	bl	8007344 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002718:	bf00      	nop
 800271a:	bd80      	pop	{r7, pc}

0800271c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002722:	2300      	movs	r3, #0
 8002724:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8002726:	4b19      	ldr	r3, [pc, #100]	; (800278c <BSP_I2C1_Init+0x70>)
 8002728:	4a19      	ldr	r2, [pc, #100]	; (8002790 <BSP_I2C1_Init+0x74>)
 800272a:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 800272c:	4b19      	ldr	r3, [pc, #100]	; (8002794 <BSP_I2C1_Init+0x78>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	4918      	ldr	r1, [pc, #96]	; (8002794 <BSP_I2C1_Init+0x78>)
 8002734:	600a      	str	r2, [r1, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d122      	bne.n	8002780 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800273a:	4814      	ldr	r0, [pc, #80]	; (800278c <BSP_I2C1_Init+0x70>)
 800273c:	f005 f906 	bl	800794c <HAL_I2C_GetState>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d11c      	bne.n	8002780 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8002746:	4811      	ldr	r0, [pc, #68]	; (800278c <BSP_I2C1_Init+0x70>)
 8002748:	f000 f8ba 	bl	80028c0 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d116      	bne.n	8002780 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8002752:	480e      	ldr	r0, [pc, #56]	; (800278c <BSP_I2C1_Init+0x70>)
 8002754:	f7ff fbe8 	bl	8001f28 <MX_I2C1_Init>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800275e:	f06f 0307 	mvn.w	r3, #7
 8002762:	607b      	str	r3, [r7, #4]
 8002764:	e00c      	b.n	8002780 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002766:	2100      	movs	r1, #0
 8002768:	4808      	ldr	r0, [pc, #32]	; (800278c <BSP_I2C1_Init+0x70>)
 800276a:	f005 fbaf 	bl	8007ecc <HAL_I2CEx_ConfigAnalogFilter>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002774:	f06f 0307 	mvn.w	r3, #7
 8002778:	607b      	str	r3, [r7, #4]
 800277a:	e001      	b.n	8002780 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800277c:	2300      	movs	r3, #0
 800277e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002780:	687b      	ldr	r3, [r7, #4]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	200013ec 	.word	0x200013ec
 8002790:	40005400 	.word	0x40005400
 8002794:	200010e4 	.word	0x200010e4

08002798 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800279e:	2300      	movs	r3, #0
 80027a0:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80027a2:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <BSP_I2C1_DeInit+0x48>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d014      	beq.n	80027d4 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80027aa:	4b0d      	ldr	r3, [pc, #52]	; (80027e0 <BSP_I2C1_DeInit+0x48>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	4a0b      	ldr	r2, [pc, #44]	; (80027e0 <BSP_I2C1_DeInit+0x48>)
 80027b2:	6013      	str	r3, [r2, #0]
 80027b4:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <BSP_I2C1_DeInit+0x48>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10b      	bne.n	80027d4 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80027bc:	4809      	ldr	r0, [pc, #36]	; (80027e4 <BSP_I2C1_DeInit+0x4c>)
 80027be:	f000 f8c5 	bl	800294c <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80027c2:	4808      	ldr	r0, [pc, #32]	; (80027e4 <BSP_I2C1_DeInit+0x4c>)
 80027c4:	f004 fe65 	bl	8007492 <HAL_I2C_DeInit>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d002      	beq.n	80027d4 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80027ce:	f06f 0307 	mvn.w	r3, #7
 80027d2:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80027d4:	687b      	ldr	r3, [r7, #4]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	200010e4 	.word	0x200010e4
 80027e4:	200013ec 	.word	0x200013ec

080027e8 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08a      	sub	sp, #40	; 0x28
 80027ec:	af04      	add	r7, sp, #16
 80027ee:	60ba      	str	r2, [r7, #8]
 80027f0:	461a      	mov	r2, r3
 80027f2:	4603      	mov	r3, r0
 80027f4:	81fb      	strh	r3, [r7, #14]
 80027f6:	460b      	mov	r3, r1
 80027f8:	81bb      	strh	r3, [r7, #12]
 80027fa:	4613      	mov	r3, r2
 80027fc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002802:	89ba      	ldrh	r2, [r7, #12]
 8002804:	89f9      	ldrh	r1, [r7, #14]
 8002806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800280a:	9302      	str	r3, [sp, #8]
 800280c:	88fb      	ldrh	r3, [r7, #6]
 800280e:	9301      	str	r3, [sp, #4]
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	2301      	movs	r3, #1
 8002816:	480c      	ldr	r0, [pc, #48]	; (8002848 <BSP_I2C1_WriteReg+0x60>)
 8002818:	f004 fe6a 	bl	80074f0 <HAL_I2C_Mem_Write>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00c      	beq.n	800283c <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002822:	4809      	ldr	r0, [pc, #36]	; (8002848 <BSP_I2C1_WriteReg+0x60>)
 8002824:	f005 f8a0 	bl	8007968 <HAL_I2C_GetError>
 8002828:	4603      	mov	r3, r0
 800282a:	2b04      	cmp	r3, #4
 800282c:	d103      	bne.n	8002836 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800282e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	e002      	b.n	800283c <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002836:	f06f 0303 	mvn.w	r3, #3
 800283a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800283c:	697b      	ldr	r3, [r7, #20]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	200013ec 	.word	0x200013ec

0800284c <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08a      	sub	sp, #40	; 0x28
 8002850:	af04      	add	r7, sp, #16
 8002852:	60ba      	str	r2, [r7, #8]
 8002854:	461a      	mov	r2, r3
 8002856:	4603      	mov	r3, r0
 8002858:	81fb      	strh	r3, [r7, #14]
 800285a:	460b      	mov	r3, r1
 800285c:	81bb      	strh	r3, [r7, #12]
 800285e:	4613      	mov	r3, r2
 8002860:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002866:	89ba      	ldrh	r2, [r7, #12]
 8002868:	89f9      	ldrh	r1, [r7, #14]
 800286a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800286e:	9302      	str	r3, [sp, #8]
 8002870:	88fb      	ldrh	r3, [r7, #6]
 8002872:	9301      	str	r3, [sp, #4]
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	2301      	movs	r3, #1
 800287a:	480c      	ldr	r0, [pc, #48]	; (80028ac <BSP_I2C1_ReadReg+0x60>)
 800287c:	f004 ff4c 	bl	8007718 <HAL_I2C_Mem_Read>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00c      	beq.n	80028a0 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002886:	4809      	ldr	r0, [pc, #36]	; (80028ac <BSP_I2C1_ReadReg+0x60>)
 8002888:	f005 f86e 	bl	8007968 <HAL_I2C_GetError>
 800288c:	4603      	mov	r3, r0
 800288e:	2b04      	cmp	r3, #4
 8002890:	d103      	bne.n	800289a <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002892:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	e002      	b.n	80028a0 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800289a:	f06f 0303 	mvn.w	r3, #3
 800289e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80028a0:	697b      	ldr	r3, [r7, #20]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	200013ec 	.word	0x200013ec

080028b0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80028b4:	f003 fe90 	bl	80065d8 <HAL_GetTick>
 80028b8:	4603      	mov	r3, r0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <I2C1_MspInit>:

  return ret;
}

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08a      	sub	sp, #40	; 0x28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c8:	4b1e      	ldr	r3, [pc, #120]	; (8002944 <I2C1_MspInit+0x84>)
 80028ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028cc:	4a1d      	ldr	r2, [pc, #116]	; (8002944 <I2C1_MspInit+0x84>)
 80028ce:	f043 0302 	orr.w	r3, r3, #2
 80028d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028d4:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <I2C1_MspInit+0x84>)
 80028d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80028e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028e6:	2312      	movs	r3, #18
 80028e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ee:	2303      	movs	r3, #3
 80028f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80028f2:	2304      	movs	r3, #4
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80028f6:	f107 0314 	add.w	r3, r7, #20
 80028fa:	4619      	mov	r1, r3
 80028fc:	4812      	ldr	r0, [pc, #72]	; (8002948 <I2C1_MspInit+0x88>)
 80028fe:	f004 fa6b 	bl	8006dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8002902:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002908:	2312      	movs	r3, #18
 800290a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002910:	2303      	movs	r3, #3
 8002912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8002914:	2304      	movs	r3, #4
 8002916:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002918:	f107 0314 	add.w	r3, r7, #20
 800291c:	4619      	mov	r1, r3
 800291e:	480a      	ldr	r0, [pc, #40]	; (8002948 <I2C1_MspInit+0x88>)
 8002920:	f004 fa5a 	bl	8006dd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002924:	4b07      	ldr	r3, [pc, #28]	; (8002944 <I2C1_MspInit+0x84>)
 8002926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002928:	4a06      	ldr	r2, [pc, #24]	; (8002944 <I2C1_MspInit+0x84>)
 800292a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800292e:	6593      	str	r3, [r2, #88]	; 0x58
 8002930:	4b04      	ldr	r3, [pc, #16]	; (8002944 <I2C1_MspInit+0x84>)
 8002932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 800293c:	bf00      	nop
 800293e:	3728      	adds	r7, #40	; 0x28
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40021000 	.word	0x40021000
 8002948:	48000400 	.word	0x48000400

0800294c <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002954:	4b09      	ldr	r3, [pc, #36]	; (800297c <I2C1_MspDeInit+0x30>)
 8002956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002958:	4a08      	ldr	r2, [pc, #32]	; (800297c <I2C1_MspDeInit+0x30>)
 800295a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800295e:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8002960:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002964:	4806      	ldr	r0, [pc, #24]	; (8002980 <I2C1_MspDeInit+0x34>)
 8002966:	f004 fbe1 	bl	800712c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800296a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800296e:	4804      	ldr	r0, [pc, #16]	; (8002980 <I2C1_MspDeInit+0x34>)
 8002970:	f004 fbdc 	bl	800712c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8002974:	bf00      	nop
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40021000 	.word	0x40021000
 8002980:	48000400 	.word	0x48000400

08002984 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
	return 1;
 8002988:	2301      	movs	r3, #1
}
 800298a:	4618      	mov	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <_kill>:

int _kill(int pid, int sig)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800299e:	f014 ff47 	bl	8017830 <__errno>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2216      	movs	r2, #22
 80029a6:	601a      	str	r2, [r3, #0]
	return -1;
 80029a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <_exit>:

void _exit (int status)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80029bc:	f04f 31ff 	mov.w	r1, #4294967295
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff ffe7 	bl	8002994 <_kill>
	while (1) {}		/* Make sure we hang here */
 80029c6:	e7fe      	b.n	80029c6 <_exit+0x12>

080029c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	e00a      	b.n	80029f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029da:	f3af 8000 	nop.w
 80029de:	4601      	mov	r1, r0
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	60ba      	str	r2, [r7, #8]
 80029e6:	b2ca      	uxtb	r2, r1
 80029e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	3301      	adds	r3, #1
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	dbf0      	blt.n	80029da <_read+0x12>
	}

return len;
 80029f8:	687b      	ldr	r3, [r7, #4]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b086      	sub	sp, #24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	e009      	b.n	8002a28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	60ba      	str	r2, [r7, #8]
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f003 fce3 	bl	80063e8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	3301      	adds	r3, #1
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	dbf1      	blt.n	8002a14 <_write+0x12>
	}
	return len;
 8002a30:	687b      	ldr	r3, [r7, #4]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <_close>:

int _close(int file)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
	return -1;
 8002a42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
 8002a5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a62:	605a      	str	r2, [r3, #4]
	return 0;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <_isatty>:

int _isatty(int file)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
	return 1;
 8002a7a:	2301      	movs	r3, #1
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
	return 0;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
	...

08002aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002aac:	4a14      	ldr	r2, [pc, #80]	; (8002b00 <_sbrk+0x5c>)
 8002aae:	4b15      	ldr	r3, [pc, #84]	; (8002b04 <_sbrk+0x60>)
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ab8:	4b13      	ldr	r3, [pc, #76]	; (8002b08 <_sbrk+0x64>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d102      	bne.n	8002ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ac0:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <_sbrk+0x64>)
 8002ac2:	4a12      	ldr	r2, [pc, #72]	; (8002b0c <_sbrk+0x68>)
 8002ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ac6:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <_sbrk+0x64>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4413      	add	r3, r2
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d207      	bcs.n	8002ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ad4:	f014 feac 	bl	8017830 <__errno>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	220c      	movs	r2, #12
 8002adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ade:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae2:	e009      	b.n	8002af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ae4:	4b08      	ldr	r3, [pc, #32]	; (8002b08 <_sbrk+0x64>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002aea:	4b07      	ldr	r3, [pc, #28]	; (8002b08 <_sbrk+0x64>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4413      	add	r3, r2
 8002af2:	4a05      	ldr	r2, [pc, #20]	; (8002b08 <_sbrk+0x64>)
 8002af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002af6:	68fb      	ldr	r3, [r7, #12]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	20018000 	.word	0x20018000
 8002b04:	00000400 	.word	0x00000400
 8002b08:	200010e8 	.word	0x200010e8
 8002b0c:	20001a08 	.word	0x20001a08

08002b10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002b14:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <SystemInit+0x20>)
 8002b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1a:	4a05      	ldr	r2, [pc, #20]	; (8002b30 <SystemInit+0x20>)
 8002b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002b24:	bf00      	nop
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim15;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b3a:	f107 0310 	add.w	r3, r7, #16
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	605a      	str	r2, [r3, #4]
 8002b44:	609a      	str	r2, [r3, #8]
 8002b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b48:	1d3b      	adds	r3, r7, #4
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	605a      	str	r2, [r3, #4]
 8002b50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b52:	4b1d      	ldr	r3, [pc, #116]	; (8002bc8 <MX_TIM3_Init+0x94>)
 8002b54:	4a1d      	ldr	r2, [pc, #116]	; (8002bcc <MX_TIM3_Init+0x98>)
 8002b56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002b58:	4b1b      	ldr	r3, [pc, #108]	; (8002bc8 <MX_TIM3_Init+0x94>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b5e:	4b1a      	ldr	r3, [pc, #104]	; (8002bc8 <MX_TIM3_Init+0x94>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002b64:	4b18      	ldr	r3, [pc, #96]	; (8002bc8 <MX_TIM3_Init+0x94>)
 8002b66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b6c:	4b16      	ldr	r3, [pc, #88]	; (8002bc8 <MX_TIM3_Init+0x94>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b72:	4b15      	ldr	r3, [pc, #84]	; (8002bc8 <MX_TIM3_Init+0x94>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b78:	4813      	ldr	r0, [pc, #76]	; (8002bc8 <MX_TIM3_Init+0x94>)
 8002b7a:	f006 ffa1 	bl	8009ac0 <HAL_TIM_Base_Init>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002b84:	f7ff fbee 	bl	8002364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b8e:	f107 0310 	add.w	r3, r7, #16
 8002b92:	4619      	mov	r1, r3
 8002b94:	480c      	ldr	r0, [pc, #48]	; (8002bc8 <MX_TIM3_Init+0x94>)
 8002b96:	f007 f999 	bl	8009ecc <HAL_TIM_ConfigClockSource>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002ba0:	f7ff fbe0 	bl	8002364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bac:	1d3b      	adds	r3, r7, #4
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4805      	ldr	r0, [pc, #20]	; (8002bc8 <MX_TIM3_Init+0x94>)
 8002bb2:	f007 fbbb 	bl	800a32c <HAL_TIMEx_MasterConfigSynchronization>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002bbc:	f7ff fbd2 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002bc0:	bf00      	nop
 8002bc2:	3720      	adds	r7, #32
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	200014a8 	.word	0x200014a8
 8002bcc:	40000400 	.word	0x40000400

08002bd0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bd6:	f107 0310 	add.w	r3, r7, #16
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	605a      	str	r2, [r3, #4]
 8002be0:	609a      	str	r2, [r3, #8]
 8002be2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002be4:	1d3b      	adds	r3, r7, #4
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	605a      	str	r2, [r3, #4]
 8002bec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002bee:	4b1f      	ldr	r3, [pc, #124]	; (8002c6c <MX_TIM15_Init+0x9c>)
 8002bf0:	4a1f      	ldr	r2, [pc, #124]	; (8002c70 <MX_TIM15_Init+0xa0>)
 8002bf2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 10000 -1;
 8002bf4:	4b1d      	ldr	r3, [pc, #116]	; (8002c6c <MX_TIM15_Init+0x9c>)
 8002bf6:	f242 720f 	movw	r2, #9999	; 0x270f
 8002bfa:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bfc:	4b1b      	ldr	r3, [pc, #108]	; (8002c6c <MX_TIM15_Init+0x9c>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65536 - 1;
 8002c02:	4b1a      	ldr	r3, [pc, #104]	; (8002c6c <MX_TIM15_Init+0x9c>)
 8002c04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c08:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c0a:	4b18      	ldr	r3, [pc, #96]	; (8002c6c <MX_TIM15_Init+0x9c>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002c10:	4b16      	ldr	r3, [pc, #88]	; (8002c6c <MX_TIM15_Init+0x9c>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c16:	4b15      	ldr	r3, [pc, #84]	; (8002c6c <MX_TIM15_Init+0x9c>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002c1c:	4813      	ldr	r0, [pc, #76]	; (8002c6c <MX_TIM15_Init+0x9c>)
 8002c1e:	f006 ff4f 	bl	8009ac0 <HAL_TIM_Base_Init>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8002c28:	f7ff fb9c 	bl	8002364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002c32:	f107 0310 	add.w	r3, r7, #16
 8002c36:	4619      	mov	r1, r3
 8002c38:	480c      	ldr	r0, [pc, #48]	; (8002c6c <MX_TIM15_Init+0x9c>)
 8002c3a:	f007 f947 	bl	8009ecc <HAL_TIM_ConfigClockSource>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8002c44:	f7ff fb8e 	bl	8002364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002c50:	1d3b      	adds	r3, r7, #4
 8002c52:	4619      	mov	r1, r3
 8002c54:	4805      	ldr	r0, [pc, #20]	; (8002c6c <MX_TIM15_Init+0x9c>)
 8002c56:	f007 fb69 	bl	800a32c <HAL_TIMEx_MasterConfigSynchronization>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8002c60:	f7ff fb80 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002c64:	bf00      	nop
 8002c66:	3720      	adds	r7, #32
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	2000145c 	.word	0x2000145c
 8002c70:	40014000 	.word	0x40014000

08002c74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a1a      	ldr	r2, [pc, #104]	; (8002cec <HAL_TIM_Base_MspInit+0x78>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d114      	bne.n	8002cb0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c86:	4b1a      	ldr	r3, [pc, #104]	; (8002cf0 <HAL_TIM_Base_MspInit+0x7c>)
 8002c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8a:	4a19      	ldr	r2, [pc, #100]	; (8002cf0 <HAL_TIM_Base_MspInit+0x7c>)
 8002c8c:	f043 0302 	orr.w	r3, r3, #2
 8002c90:	6593      	str	r3, [r2, #88]	; 0x58
 8002c92:	4b17      	ldr	r3, [pc, #92]	; (8002cf0 <HAL_TIM_Base_MspInit+0x7c>)
 8002c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	201d      	movs	r0, #29
 8002ca4:	f003 fd7f 	bl	80067a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ca8:	201d      	movs	r0, #29
 8002caa:	f003 fd98 	bl	80067de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002cae:	e018      	b.n	8002ce2 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM15)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a0f      	ldr	r2, [pc, #60]	; (8002cf4 <HAL_TIM_Base_MspInit+0x80>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d113      	bne.n	8002ce2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002cba:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <HAL_TIM_Base_MspInit+0x7c>)
 8002cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cbe:	4a0c      	ldr	r2, [pc, #48]	; (8002cf0 <HAL_TIM_Base_MspInit+0x7c>)
 8002cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc4:	6613      	str	r3, [r2, #96]	; 0x60
 8002cc6:	4b0a      	ldr	r3, [pc, #40]	; (8002cf0 <HAL_TIM_Base_MspInit+0x7c>)
 8002cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cce:	60bb      	str	r3, [r7, #8]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	2018      	movs	r0, #24
 8002cd8:	f003 fd65 	bl	80067a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002cdc:	2018      	movs	r0, #24
 8002cde:	f003 fd7e 	bl	80067de <HAL_NVIC_EnableIRQ>
}
 8002ce2:	bf00      	nop
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40000400 	.word	0x40000400
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40014000 	.word	0x40014000

08002cf8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002cf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002cfc:	f7ff ff08 	bl	8002b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d00:	480c      	ldr	r0, [pc, #48]	; (8002d34 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d02:	490d      	ldr	r1, [pc, #52]	; (8002d38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d04:	4a0d      	ldr	r2, [pc, #52]	; (8002d3c <LoopForever+0xe>)
  movs r3, #0
 8002d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d08:	e002      	b.n	8002d10 <LoopCopyDataInit>

08002d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d0e:	3304      	adds	r3, #4

08002d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d14:	d3f9      	bcc.n	8002d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d16:	4a0a      	ldr	r2, [pc, #40]	; (8002d40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d18:	4c0a      	ldr	r4, [pc, #40]	; (8002d44 <LoopForever+0x16>)
  movs r3, #0
 8002d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d1c:	e001      	b.n	8002d22 <LoopFillZerobss>

08002d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d20:	3204      	adds	r2, #4

08002d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d24:	d3fb      	bcc.n	8002d1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d26:	f014 fd89 	bl	801783c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d2a:	f7ff fa71 	bl	8002210 <main>

08002d2e <LoopForever>:

LoopForever:
    b LoopForever
 8002d2e:	e7fe      	b.n	8002d2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002d30:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d38:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 8002d3c:	0801b22c 	.word	0x0801b22c
  ldr r2, =_sbss
 8002d40:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 8002d44:	20001a08 	.word	0x20001a08

08002d48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d48:	e7fe      	b.n	8002d48 <ADC1_2_IRQHandler>
	...

08002d4c <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002d56:	2300      	movs	r3, #0
 8002d58:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d103      	bne.n	8002d68 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8002d60:	f04f 33ff 	mov.w	r3, #4294967295
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	e04d      	b.n	8002e04 <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685a      	ldr	r2, [r3, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	7b1a      	ldrb	r2, [r3, #12]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	695a      	ldr	r2, [r3, #20]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	699a      	ldr	r2, [r3, #24]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a1b      	ldr	r2, [pc, #108]	; (8002e10 <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 8002da4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a1a      	ldr	r2, [pc, #104]	; (8002e14 <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 8002daa:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d103      	bne.n	8002dc2 <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8002dba:	f04f 33ff 	mov.w	r3, #4294967295
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	e020      	b.n	8002e04 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4798      	blx	r3
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8002dce:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	e016      	b.n	8002e04 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d112      	bne.n	8002e04 <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10d      	bne.n	8002e04 <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8002de8:	2301      	movs	r3, #1
 8002dea:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8002dec:	7afb      	ldrb	r3, [r7, #11]
 8002dee:	461a      	mov	r2, r3
 8002df0:	2123      	movs	r1, #35	; 0x23
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 fb55 	bl	80034a2 <LSM303AGR_ACC_Write_Reg>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 8002dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002e02:	e000      	b.n	8002e06 <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 8002e04:	68fb      	ldr	r3, [r7, #12]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	08003cb1 	.word	0x08003cb1
 8002e14:	08003d13 	.word	0x08003d13

08002e18 <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	331c      	adds	r3, #28
 8002e24:	2101      	movs	r1, #1
 8002e26:	4618      	mov	r0, r3
 8002e28:	f001 f94a 	bl	80040c0 <lsm303agr_xl_block_data_update_set>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8002e32:	f04f 33ff 	mov.w	r3, #4294967295
 8002e36:	e02c      	b.n	8002e92 <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	331c      	adds	r3, #28
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f001 faed 	bl	800441e <lsm303agr_xl_fifo_mode_set>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d002      	beq.n	8002e50 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8002e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e4e:	e020      	b.n	8002e92 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2205      	movs	r2, #5
 8002e54:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	331c      	adds	r3, #28
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f001 f84e 	bl	8003f00 <lsm303agr_xl_data_rate_set>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d002      	beq.n	8002e70 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 8002e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e6e:	e010      	b.n	8002e92 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	331c      	adds	r3, #28
 8002e74:	2100      	movs	r1, #0
 8002e76:	4618      	mov	r0, r3
 8002e78:	f001 f8c4 	bl	8004004 <lsm303agr_xl_full_scale_set>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 8002e82:	f04f 33ff 	mov.w	r3, #4294967295
 8002e86:	e004      	b.n	8002e92 <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f87c 	bl	8002fa0 <LSM303AGR_ACC_Disable>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8002eae:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb2:	e008      	b.n	8002ec6 <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	331c      	adds	r3, #28
 8002edc:	6839      	ldr	r1, [r7, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f001 fa55 	bl	800438e <lsm303agr_xl_device_id_get>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d002      	beq.n	8002ef0 <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8002eea:	f04f 33ff 	mov.w	r3, #4294967295
 8002eee:	e000      	b.n	8002ef2 <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2200      	movs	r2, #0
 8002f16:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2200      	movs	r2, #0
 8002f22:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	2210      	movs	r2, #16
 8002f28:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	4a06      	ldr	r2, [pc, #24]	; (8002f54 <LSM303AGR_ACC_GetCapabilities+0x58>)
 8002f3c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	43c80000 	.word	0x43c80000

08002f58 <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	e014      	b.n	8002f98 <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f103 021c 	add.w	r2, r3, #28
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4610      	mov	r0, r2
 8002f7e:	f000 ffbf 	bl	8003f00 <lsm303agr_xl_data_rate_set>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d002      	beq.n	8002f8e <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 8002f88:	f04f 33ff 	mov.w	r3, #4294967295
 8002f8c:	e004      	b.n	8002f98 <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	e01f      	b.n	8002ff6 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f103 021c 	add.w	r2, r3, #28
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	332a      	adds	r3, #42	; 0x2a
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	f000 ffc2 	bl	8003f4c <lsm303agr_xl_data_rate_get>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 8002fce:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd2:	e010      	b.n	8002ff6 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	331c      	adds	r3, #28
 8002fd8:	2100      	movs	r1, #0
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 ff90 	bl	8003f00 <lsm303agr_xl_data_rate_set>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d002      	beq.n	8002fec <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 8002fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fea:	e004      	b.n	8002ff6 <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b084      	sub	sp, #16
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
 8003006:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	331c      	adds	r3, #28
 8003010:	f107 020b 	add.w	r2, r7, #11
 8003014:	4611      	mov	r1, r2
 8003016:	4618      	mov	r0, r3
 8003018:	f000 ff3e 	bl	8003e98 <lsm303agr_xl_operating_mode_get>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 8003022:	f04f 33ff 	mov.w	r3, #4294967295
 8003026:	e031      	b.n	800308c <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 8003028:	7afb      	ldrb	r3, [r7, #11]
 800302a:	2b02      	cmp	r3, #2
 800302c:	d01a      	beq.n	8003064 <LSM303AGR_ACC_GetSensitivity+0x66>
 800302e:	2b02      	cmp	r3, #2
 8003030:	dc22      	bgt.n	8003078 <LSM303AGR_ACC_GetSensitivity+0x7a>
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <LSM303AGR_ACC_GetSensitivity+0x3e>
 8003036:	2b01      	cmp	r3, #1
 8003038:	d00a      	beq.n	8003050 <LSM303AGR_ACC_GetSensitivity+0x52>
 800303a:	e01d      	b.n	8003078 <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 800303c:	6839      	ldr	r1, [r7, #0]
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 fca8 	bl	8003994 <LSM303AGR_ACC_GetSensitivityHR>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d01a      	beq.n	8003080 <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 800304a:	f04f 33ff 	mov.w	r3, #4294967295
 800304e:	e01d      	b.n	800308c <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 8003050:	6839      	ldr	r1, [r7, #0]
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 fce4 	bl	8003a20 <LSM303AGR_ACC_GetSensitivityNM>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d012      	beq.n	8003084 <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 800305e:	f04f 33ff 	mov.w	r3, #4294967295
 8003062:	e013      	b.n	800308c <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 8003064:	6839      	ldr	r1, [r7, #0]
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 fd20 	bl	8003aac <LSM303AGR_ACC_GetSensitivityLP>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 8003072:	f04f 33ff 	mov.w	r3, #4294967295
 8003076:	e009      	b.n	800308c <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 8003078:	f04f 33ff 	mov.w	r3, #4294967295
 800307c:	60fb      	str	r3, [r7, #12]
      break;
 800307e:	e004      	b.n	800308a <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8003080:	bf00      	nop
 8003082:	e002      	b.n	800308a <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8003084:	bf00      	nop
 8003086:	e000      	b.n	800308a <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8003088:	bf00      	nop
  }

  return ret;
 800308a:	68fb      	ldr	r3, [r7, #12]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	331c      	adds	r3, #28
 80030a6:	f107 020b 	add.w	r2, r7, #11
 80030aa:	4611      	mov	r1, r2
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 fef3 	bl	8003e98 <lsm303agr_xl_operating_mode_get>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 80030b8:	f04f 33ff 	mov.w	r3, #4294967295
 80030bc:	e09d      	b.n	80031fa <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	331c      	adds	r3, #28
 80030c2:	f107 020a 	add.w	r2, r7, #10
 80030c6:	4611      	mov	r1, r2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 ff3f 	bl	8003f4c <lsm303agr_xl_data_rate_get>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 80030d4:	f04f 33ff 	mov.w	r3, #4294967295
 80030d8:	e08f      	b.n	80031fa <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 80030da:	7afb      	ldrb	r3, [r7, #11]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d147      	bne.n	8003170 <LSM303AGR_ACC_GetOutputDataRate+0xdc>
  {
    switch (odr_low_level)
 80030e0:	7abb      	ldrb	r3, [r7, #10]
 80030e2:	2b09      	cmp	r3, #9
 80030e4:	d840      	bhi.n	8003168 <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 80030e6:	a201      	add	r2, pc, #4	; (adr r2, 80030ec <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 80030e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ec:	08003115 	.word	0x08003115
 80030f0:	0800311f 	.word	0x0800311f
 80030f4:	08003129 	.word	0x08003129
 80030f8:	08003131 	.word	0x08003131
 80030fc:	08003139 	.word	0x08003139
 8003100:	08003141 	.word	0x08003141
 8003104:	08003149 	.word	0x08003149
 8003108:	08003151 	.word	0x08003151
 800310c:	08003159 	.word	0x08003159
 8003110:	08003161 	.word	0x08003161
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
        break;
 800311c:	e06c      	b.n	80031f8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003124:	601a      	str	r2, [r3, #0]
        break;
 8003126:	e067      	b.n	80031f8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	4a36      	ldr	r2, [pc, #216]	; (8003204 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 800312c:	601a      	str	r2, [r3, #0]
        break;
 800312e:	e063      	b.n	80031f8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	4a35      	ldr	r2, [pc, #212]	; (8003208 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8003134:	601a      	str	r2, [r3, #0]
        break;
 8003136:	e05f      	b.n	80031f8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	4a34      	ldr	r2, [pc, #208]	; (800320c <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 800313c:	601a      	str	r2, [r3, #0]
        break;
 800313e:	e05b      	b.n	80031f8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	4a33      	ldr	r2, [pc, #204]	; (8003210 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8003144:	601a      	str	r2, [r3, #0]
        break;
 8003146:	e057      	b.n	80031f8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	4a32      	ldr	r2, [pc, #200]	; (8003214 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 800314c:	601a      	str	r2, [r3, #0]
        break;
 800314e:	e053      	b.n	80031f8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	4a31      	ldr	r2, [pc, #196]	; (8003218 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8003154:	601a      	str	r2, [r3, #0]
        break;
 8003156:	e04f      	b.n	80031f8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	4a30      	ldr	r2, [pc, #192]	; (800321c <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 800315c:	601a      	str	r2, [r3, #0]
        break;
 800315e:	e04b      	b.n	80031f8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	4a2f      	ldr	r2, [pc, #188]	; (8003220 <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 8003164:	601a      	str	r2, [r3, #0]
        break;
 8003166:	e047      	b.n	80031f8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8003168:	f04f 33ff 	mov.w	r3, #4294967295
 800316c:	60fb      	str	r3, [r7, #12]
        break;
 800316e:	e043      	b.n	80031f8 <LSM303AGR_ACC_GetOutputDataRate+0x164>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 8003170:	7abb      	ldrb	r3, [r7, #10]
 8003172:	2b09      	cmp	r3, #9
 8003174:	d83c      	bhi.n	80031f0 <LSM303AGR_ACC_GetOutputDataRate+0x15c>
 8003176:	a201      	add	r2, pc, #4	; (adr r2, 800317c <LSM303AGR_ACC_GetOutputDataRate+0xe8>)
 8003178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317c:	080031a5 	.word	0x080031a5
 8003180:	080031af 	.word	0x080031af
 8003184:	080031b9 	.word	0x080031b9
 8003188:	080031c1 	.word	0x080031c1
 800318c:	080031c9 	.word	0x080031c9
 8003190:	080031d1 	.word	0x080031d1
 8003194:	080031d9 	.word	0x080031d9
 8003198:	080031e1 	.word	0x080031e1
 800319c:	080031f1 	.word	0x080031f1
 80031a0:	080031e9 	.word	0x080031e9
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
        break;
 80031ac:	e024      	b.n	80031f8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80031b4:	601a      	str	r2, [r3, #0]
        break;
 80031b6:	e01f      	b.n	80031f8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	4a12      	ldr	r2, [pc, #72]	; (8003204 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 80031bc:	601a      	str	r2, [r3, #0]
        break;
 80031be:	e01b      	b.n	80031f8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	4a11      	ldr	r2, [pc, #68]	; (8003208 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 80031c4:	601a      	str	r2, [r3, #0]
        break;
 80031c6:	e017      	b.n	80031f8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	4a10      	ldr	r2, [pc, #64]	; (800320c <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 80031cc:	601a      	str	r2, [r3, #0]
        break;
 80031ce:	e013      	b.n	80031f8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	4a0f      	ldr	r2, [pc, #60]	; (8003210 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 80031d4:	601a      	str	r2, [r3, #0]
        break;
 80031d6:	e00f      	b.n	80031f8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	4a0e      	ldr	r2, [pc, #56]	; (8003214 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 80031dc:	601a      	str	r2, [r3, #0]
        break;
 80031de:	e00b      	b.n	80031f8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	4a0d      	ldr	r2, [pc, #52]	; (8003218 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 80031e4:	601a      	str	r2, [r3, #0]
        break;
 80031e6:	e007      	b.n	80031f8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	4a0e      	ldr	r2, [pc, #56]	; (8003224 <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 80031ec:	601a      	str	r2, [r3, #0]
        break;
 80031ee:	e003      	b.n	80031f8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 80031f0:	f04f 33ff 	mov.w	r3, #4294967295
 80031f4:	60fb      	str	r3, [r7, #12]
        break;
 80031f6:	bf00      	nop
    }
  }

  return ret;
 80031f8:	68fb      	ldr	r3, [r7, #12]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	41200000 	.word	0x41200000
 8003208:	41c80000 	.word	0x41c80000
 800320c:	42480000 	.word	0x42480000
 8003210:	42c80000 	.word	0x42c80000
 8003214:	43480000 	.word	0x43480000
 8003218:	43c80000 	.word	0x43c80000
 800321c:	44ca8000 	.word	0x44ca8000
 8003220:	45a80000 	.word	0x45a80000
 8003224:	44a80000 	.word	0x44a80000

08003228 <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800323a:	2b01      	cmp	r3, #1
 800323c:	d106      	bne.n	800324c <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800323e:	ed97 0a00 	vldr	s0, [r7]
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fc78 	bl	8003b38 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 8003248:	4603      	mov	r3, r0
 800324a:	e005      	b.n	8003258 <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 800324c:	ed97 0a00 	vldr	s0, [r7]
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 fcd3 	bl	8003bfc <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 8003256:	4603      	mov	r3, r0
  }
}
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	331c      	adds	r3, #28
 8003272:	f107 020b 	add.w	r2, r7, #11
 8003276:	4611      	mov	r1, r2
 8003278:	4618      	mov	r0, r3
 800327a:	f000 fee9 	bl	8004050 <lsm303agr_xl_full_scale_get>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 8003284:	f04f 33ff 	mov.w	r3, #4294967295
 8003288:	e023      	b.n	80032d2 <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800328a:	7afb      	ldrb	r3, [r7, #11]
 800328c:	2b03      	cmp	r3, #3
 800328e:	d81b      	bhi.n	80032c8 <LSM303AGR_ACC_GetFullScale+0x68>
 8003290:	a201      	add	r2, pc, #4	; (adr r2, 8003298 <LSM303AGR_ACC_GetFullScale+0x38>)
 8003292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003296:	bf00      	nop
 8003298:	080032a9 	.word	0x080032a9
 800329c:	080032b1 	.word	0x080032b1
 80032a0:	080032b9 	.word	0x080032b9
 80032a4:	080032c1 	.word	0x080032c1
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	2202      	movs	r2, #2
 80032ac:	601a      	str	r2, [r3, #0]
      break;
 80032ae:	e00f      	b.n	80032d0 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2204      	movs	r2, #4
 80032b4:	601a      	str	r2, [r3, #0]
      break;
 80032b6:	e00b      	b.n	80032d0 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	2208      	movs	r2, #8
 80032bc:	601a      	str	r2, [r3, #0]
      break;
 80032be:	e007      	b.n	80032d0 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2210      	movs	r2, #16
 80032c4:	601a      	str	r2, [r3, #0]
      break;
 80032c6:	e003      	b.n	80032d0 <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80032c8:	f04f 33ff 	mov.w	r3, #4294967295
 80032cc:	60fb      	str	r3, [r7, #12]
      break;
 80032ce:	bf00      	nop
  }

  return ret;
 80032d0:	68fb      	ldr	r3, [r7, #12]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop

080032dc <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	dd0b      	ble.n	8003304 <LSM303AGR_ACC_SetFullScale+0x28>
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	dd06      	ble.n	8003300 <LSM303AGR_ACC_SetFullScale+0x24>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	dc01      	bgt.n	80032fc <LSM303AGR_ACC_SetFullScale+0x20>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e004      	b.n	8003306 <LSM303AGR_ACC_SetFullScale+0x2a>
 80032fc:	2303      	movs	r3, #3
 80032fe:	e002      	b.n	8003306 <LSM303AGR_ACC_SetFullScale+0x2a>
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <LSM303AGR_ACC_SetFullScale+0x2a>
 8003304:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 8003306:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	331c      	adds	r3, #28
 800330c:	7bfa      	ldrb	r2, [r7, #15]
 800330e:	4611      	mov	r1, r2
 8003310:	4618      	mov	r0, r3
 8003312:	f000 fe77 	bl	8004004 <lsm303agr_xl_full_scale_set>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d002      	beq.n	8003322 <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 800331c:	f04f 33ff 	mov.w	r3, #4294967295
 8003320:	e000      	b.n	8003324 <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b088      	sub	sp, #32
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 8003336:	2301      	movs	r3, #1
 8003338:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	331c      	adds	r3, #28
 8003342:	f107 020f 	add.w	r2, r7, #15
 8003346:	4611      	mov	r1, r2
 8003348:	4618      	mov	r0, r3
 800334a:	f000 fda5 	bl	8003e98 <lsm303agr_xl_operating_mode_get>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d002      	beq.n	800335a <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8003354:	f04f 33ff 	mov.w	r3, #4294967295
 8003358:	e04a      	b.n	80033f0 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	2b02      	cmp	r3, #2
 800335e:	d00c      	beq.n	800337a <LSM303AGR_ACC_GetAxesRaw+0x4e>
 8003360:	2b02      	cmp	r3, #2
 8003362:	dc0e      	bgt.n	8003382 <LSM303AGR_ACC_GetAxesRaw+0x56>
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <LSM303AGR_ACC_GetAxesRaw+0x42>
 8003368:	2b01      	cmp	r3, #1
 800336a:	d003      	beq.n	8003374 <LSM303AGR_ACC_GetAxesRaw+0x48>
 800336c:	e009      	b.n	8003382 <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 800336e:	2310      	movs	r3, #16
 8003370:	83fb      	strh	r3, [r7, #30]
      break;
 8003372:	e00a      	b.n	800338a <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 8003374:	2340      	movs	r3, #64	; 0x40
 8003376:	83fb      	strh	r3, [r7, #30]
      break;
 8003378:	e007      	b.n	800338a <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 800337a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800337e:	83fb      	strh	r3, [r7, #30]
      break;
 8003380:	e003      	b.n	800338a <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 8003382:	f04f 33ff 	mov.w	r3, #4294967295
 8003386:	61bb      	str	r3, [r7, #24]
      break;
 8003388:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003390:	d101      	bne.n	8003396 <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	e02c      	b.n	80033f0 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	331c      	adds	r3, #28
 800339a:	f107 0210 	add.w	r2, r7, #16
 800339e:	4611      	mov	r1, r2
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 feb3 	bl	800410c <lsm303agr_acceleration_raw_get>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d002      	beq.n	80033b2 <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 80033ac:	f04f 33ff 	mov.w	r3, #4294967295
 80033b0:	e01e      	b.n	80033f0 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 80033b2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80033b6:	461a      	mov	r2, r3
 80033b8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80033bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80033c0:	b21a      	sxth	r2, r3
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 80033c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80033ca:	461a      	mov	r2, r3
 80033cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80033d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80033d4:	b21a      	sxth	r2, r3
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 80033da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80033de:	461a      	mov	r2, r3
 80033e0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80033e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80033e8:	b21a      	sxth	r2, r3
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	809a      	strh	r2, [r3, #4]

  return ret;
 80033ee:	69bb      	ldr	r3, [r7, #24]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3720      	adds	r7, #32
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8003402:	f04f 0300 	mov.w	r3, #0
 8003406:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8003408:	f107 0310 	add.w	r3, r7, #16
 800340c:	4619      	mov	r1, r3
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7ff ff8c 	bl	800332c <LSM303AGR_ACC_GetAxesRaw>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 800341a:	f04f 33ff 	mov.w	r3, #4294967295
 800341e:	e03c      	b.n	800349a <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8003420:	f107 030c 	add.w	r3, r7, #12
 8003424:	4619      	mov	r1, r3
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff fde9 	bl	8002ffe <LSM303AGR_ACC_GetSensitivity>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d002      	beq.n	8003438 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8003432:	f04f 33ff 	mov.w	r3, #4294967295
 8003436:	e030      	b.n	800349a <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8003438:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800343c:	ee07 3a90 	vmov	s15, r3
 8003440:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003444:	edd7 7a03 	vldr	s15, [r7, #12]
 8003448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800344c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003450:	ee17 2a90 	vmov	r2, s15
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8003458:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800345c:	ee07 3a90 	vmov	s15, r3
 8003460:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003464:	edd7 7a03 	vldr	s15, [r7, #12]
 8003468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800346c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003470:	ee17 2a90 	vmov	r2, s15
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8003478:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800347c:	ee07 3a90 	vmov	s15, r3
 8003480:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003484:	edd7 7a03 	vldr	s15, [r7, #12]
 8003488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800348c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003490:	ee17 2a90 	vmov	r2, s15
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b082      	sub	sp, #8
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
 80034aa:	460b      	mov	r3, r1
 80034ac:	70fb      	strb	r3, [r7, #3]
 80034ae:	4613      	mov	r3, r2
 80034b0:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f103 001c 	add.w	r0, r3, #28
 80034b8:	1cba      	adds	r2, r7, #2
 80034ba:	78f9      	ldrb	r1, [r7, #3]
 80034bc:	2301      	movs	r3, #1
 80034be:	f000 fcd3 	bl	8003e68 <lsm303agr_write_reg>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 80034c8:	f04f 33ff 	mov.w	r3, #4294967295
 80034cc:	e000      	b.n	80034d0 <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80034e2:	2300      	movs	r3, #0
 80034e4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d103      	bne.n	80034f4 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 80034ec:	f04f 33ff 	mov.w	r3, #4294967295
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	e04b      	b.n	800358c <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	7b1a      	ldrb	r2, [r3, #12]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	691a      	ldr	r2, [r3, #16]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	695a      	ldr	r2, [r3, #20]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	699a      	ldr	r2, [r3, #24]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a1a      	ldr	r2, [pc, #104]	; (8003598 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8003530:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a19      	ldr	r2, [pc, #100]	; (800359c <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8003536:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d103      	bne.n	800354e <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8003546:	f04f 33ff 	mov.w	r3, #4294967295
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	e01e      	b.n	800358c <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4798      	blx	r3
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 800355a:	f04f 33ff 	mov.w	r3, #4294967295
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	e014      	b.n	800358c <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d010      	beq.n	800358c <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10b      	bne.n	800358c <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	331c      	adds	r3, #28
 8003578:	2101      	movs	r1, #1
 800357a:	4618      	mov	r0, r3
 800357c:	f000 ff75 	bl	800446a <lsm303agr_mag_i2c_interface_set>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 8003586:	f04f 33ff 	mov.w	r3, #4294967295
 800358a:	e000      	b.n	800358e <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 800358c:	68fb      	ldr	r3, [r7, #12]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	08003d75 	.word	0x08003d75
 800359c:	08003dd7 	.word	0x08003dd7

080035a0 <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	331c      	adds	r3, #28
 80035ac:	2101      	movs	r1, #1
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 fe7c 	bl	80042ac <lsm303agr_mag_block_data_update_set>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 80035ba:	f04f 33ff 	mov.w	r3, #4294967295
 80035be:	e028      	b.n	8003612 <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	331c      	adds	r3, #28
 80035c4:	2102      	movs	r1, #2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fdeb 	bl	80041a2 <lsm303agr_mag_operating_mode_set>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d002      	beq.n	80035d8 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 80035d2:	f04f 33ff 	mov.w	r3, #4294967295
 80035d6:	e01c      	b.n	8003612 <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	331c      	adds	r3, #28
 80035dc:	2103      	movs	r1, #3
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 fe05 	bl	80041ee <lsm303agr_mag_data_rate_set>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 80035ea:	f04f 33ff 	mov.w	r3, #4294967295
 80035ee:	e010      	b.n	8003612 <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	331c      	adds	r3, #28
 80035f4:	2100      	movs	r1, #0
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 feeb 	bl	80043d2 <lsm303agr_mag_self_test_set>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8003602:	f04f 33ff 	mov.w	r3, #4294967295
 8003606:	e004      	b.n	8003612 <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b082      	sub	sp, #8
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f874 	bl	8003710 <LSM303AGR_MAG_Disable>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 800362e:	f04f 33ff 	mov.w	r3, #4294967295
 8003632:	e004      	b.n	800363e <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
 800364e:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	331c      	adds	r3, #28
 8003654:	6839      	ldr	r1, [r7, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f000 feaa 	bl	80043b0 <lsm303agr_mag_device_id_get>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d002      	beq.n	8003668 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8003662:	f04f 33ff 	mov.w	r3, #4294967295
 8003666:	e000      	b.n	800366a <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2200      	movs	r2, #0
 8003682:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	2200      	movs	r2, #0
 8003688:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2201      	movs	r2, #1
 800368e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	2200      	movs	r2, #0
 8003694:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2200      	movs	r2, #0
 800369a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2200      	movs	r2, #0
 80036a0:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2232      	movs	r2, #50	; 0x32
 80036a6:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	4a04      	ldr	r2, [pc, #16]	; (80036cc <LSM303AGR_MAG_GetCapabilities+0x58>)
 80036bc:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	42c80000 	.word	0x42c80000

080036d0 <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d101      	bne.n	80036e6 <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 80036e2:	2300      	movs	r3, #0
 80036e4:	e010      	b.n	8003708 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	331c      	adds	r3, #28
 80036ea:	2100      	movs	r1, #0
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 fd58 	bl	80041a2 <lsm303agr_mag_operating_mode_set>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 80036f8:	f04f 33ff 	mov.w	r3, #4294967295
 80036fc:	e004      	b.n	8003708 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 8003722:	2300      	movs	r3, #0
 8003724:	e010      	b.n	8003748 <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	331c      	adds	r3, #28
 800372a:	2102      	movs	r1, #2
 800372c:	4618      	mov	r0, r3
 800372e:	f000 fd38 	bl	80041a2 <lsm303agr_mag_operating_mode_set>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8003738:	f04f 33ff 	mov.w	r3, #4294967295
 800373c:	e004      	b.n	8003748 <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8003760:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	331c      	adds	r3, #28
 8003782:	f107 020b 	add.w	r2, r7, #11
 8003786:	4611      	mov	r1, r2
 8003788:	4618      	mov	r0, r3
 800378a:	f000 fd57 	bl	800423c <lsm303agr_mag_data_rate_get>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8003794:	f04f 33ff 	mov.w	r3, #4294967295
 8003798:	e023      	b.n	80037e2 <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 800379a:	7afb      	ldrb	r3, [r7, #11]
 800379c:	2b03      	cmp	r3, #3
 800379e:	d81b      	bhi.n	80037d8 <LSM303AGR_MAG_GetOutputDataRate+0x68>
 80037a0:	a201      	add	r2, pc, #4	; (adr r2, 80037a8 <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 80037a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a6:	bf00      	nop
 80037a8:	080037b9 	.word	0x080037b9
 80037ac:	080037c1 	.word	0x080037c1
 80037b0:	080037c9 	.word	0x080037c9
 80037b4:	080037d1 	.word	0x080037d1
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	4a0c      	ldr	r2, [pc, #48]	; (80037ec <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 80037bc:	601a      	str	r2, [r3, #0]
      break;
 80037be:	e00f      	b.n	80037e0 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	4a0b      	ldr	r2, [pc, #44]	; (80037f0 <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 80037c4:	601a      	str	r2, [r3, #0]
      break;
 80037c6:	e00b      	b.n	80037e0 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	4a0a      	ldr	r2, [pc, #40]	; (80037f4 <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 80037cc:	601a      	str	r2, [r3, #0]
      break;
 80037ce:	e007      	b.n	80037e0 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	4a09      	ldr	r2, [pc, #36]	; (80037f8 <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 80037d4:	601a      	str	r2, [r3, #0]
      break;
 80037d6:	e003      	b.n	80037e0 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80037d8:	f04f 33ff 	mov.w	r3, #4294967295
 80037dc:	60fb      	str	r3, [r7, #12]
      break;
 80037de:	bf00      	nop
  }

  return ret;
 80037e0:	68fb      	ldr	r3, [r7, #12]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	41200000 	.word	0x41200000
 80037f0:	41a00000 	.word	0x41a00000
 80037f4:	42480000 	.word	0x42480000
 80037f8:	42c80000 	.word	0x42c80000

080037fc <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8003808:	edd7 7a00 	vldr	s15, [r7]
 800380c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003810:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003818:	d801      	bhi.n	800381e <LSM303AGR_MAG_SetOutputDataRate+0x22>
 800381a:	2300      	movs	r3, #0
 800381c:	e016      	b.n	800384c <LSM303AGR_MAG_SetOutputDataRate+0x50>
 800381e:	edd7 7a00 	vldr	s15, [r7]
 8003822:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003826:	eef4 7ac7 	vcmpe.f32	s15, s14
 800382a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800382e:	d801      	bhi.n	8003834 <LSM303AGR_MAG_SetOutputDataRate+0x38>
 8003830:	2301      	movs	r3, #1
 8003832:	e00b      	b.n	800384c <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8003834:	edd7 7a00 	vldr	s15, [r7]
 8003838:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003874 <LSM303AGR_MAG_SetOutputDataRate+0x78>
 800383c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003844:	d801      	bhi.n	800384a <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 8003846:	2302      	movs	r3, #2
 8003848:	e000      	b.n	800384c <LSM303AGR_MAG_SetOutputDataRate+0x50>
 800384a:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 800384c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	331c      	adds	r3, #28
 8003852:	7bfa      	ldrb	r2, [r7, #15]
 8003854:	4611      	mov	r1, r2
 8003856:	4618      	mov	r0, r3
 8003858:	f000 fcc9 	bl	80041ee <lsm303agr_mag_data_rate_set>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d002      	beq.n	8003868 <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 8003862:	f04f 33ff 	mov.w	r3, #4294967295
 8003866:	e000      	b.n	800386a <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	42480000 	.word	0x42480000

08003878 <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	2232      	movs	r2, #50	; 0x32
 8003886:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b084      	sub	sp, #16
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	331c      	adds	r3, #28
 80038bc:	f107 0208 	add.w	r2, r7, #8
 80038c0:	4611      	mov	r1, r2
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 fd18 	bl	80042f8 <lsm303agr_magnetic_raw_get>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 80038ce:	f04f 33ff 	mov.w	r3, #4294967295
 80038d2:	e00c      	b.n	80038ee <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80038d4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80038dc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80038e4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b086      	sub	sp, #24
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	331c      	adds	r3, #28
 8003904:	f107 0210 	add.w	r2, r7, #16
 8003908:	4611      	mov	r1, r2
 800390a:	4618      	mov	r0, r3
 800390c:	f000 fcf4 	bl	80042f8 <lsm303agr_magnetic_raw_get>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 8003916:	f04f 33ff 	mov.w	r3, #4294967295
 800391a:	e036      	b.n	800398a <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 800391c:	f107 030c 	add.w	r3, r7, #12
 8003920:	4619      	mov	r1, r3
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7ff ff14 	bl	8003750 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003928:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800392c:	ee07 3a90 	vmov	s15, r3
 8003930:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003934:	edd7 7a03 	vldr	s15, [r7, #12]
 8003938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800393c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003940:	ee17 2a90 	vmov	r2, s15
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003948:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800394c:	ee07 3a90 	vmov	s15, r3
 8003950:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003954:	edd7 7a03 	vldr	s15, [r7, #12]
 8003958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800395c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003960:	ee17 2a90 	vmov	r2, s15
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003968:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800396c:	ee07 3a90 	vmov	s15, r3
 8003970:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003974:	edd7 7a03 	vldr	s15, [r7, #12]
 8003978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800397c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003980:	ee17 2a90 	vmov	r2, s15
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	331c      	adds	r3, #28
 80039a6:	f107 020b 	add.w	r2, r7, #11
 80039aa:	4611      	mov	r1, r2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 fb4f 	bl	8004050 <lsm303agr_xl_full_scale_get>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 80039b8:	f04f 33ff 	mov.w	r3, #4294967295
 80039bc:	e023      	b.n	8003a06 <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80039be:	7afb      	ldrb	r3, [r7, #11]
 80039c0:	2b03      	cmp	r3, #3
 80039c2:	d81b      	bhi.n	80039fc <LSM303AGR_ACC_GetSensitivityHR+0x68>
 80039c4:	a201      	add	r2, pc, #4	; (adr r2, 80039cc <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 80039c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ca:	bf00      	nop
 80039cc:	080039dd 	.word	0x080039dd
 80039d0:	080039e5 	.word	0x080039e5
 80039d4:	080039ed 	.word	0x080039ed
 80039d8:	080039f5 	.word	0x080039f5
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	4a0c      	ldr	r2, [pc, #48]	; (8003a10 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 80039e0:	601a      	str	r2, [r3, #0]
      break;
 80039e2:	e00f      	b.n	8003a04 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	4a0b      	ldr	r2, [pc, #44]	; (8003a14 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 80039e8:	601a      	str	r2, [r3, #0]
      break;
 80039ea:	e00b      	b.n	8003a04 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	4a0a      	ldr	r2, [pc, #40]	; (8003a18 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 80039f0:	601a      	str	r2, [r3, #0]
      break;
 80039f2:	e007      	b.n	8003a04 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	4a09      	ldr	r2, [pc, #36]	; (8003a1c <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 80039f8:	601a      	str	r2, [r3, #0]
      break;
 80039fa:	e003      	b.n	8003a04 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80039fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003a00:	60fb      	str	r3, [r7, #12]
      break;
 8003a02:	bf00      	nop
  }

  return ret;
 8003a04:	68fb      	ldr	r3, [r7, #12]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	3f7ae148 	.word	0x3f7ae148
 8003a14:	3ff9999a 	.word	0x3ff9999a
 8003a18:	4079999a 	.word	0x4079999a
 8003a1c:	413b851f 	.word	0x413b851f

08003a20 <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	331c      	adds	r3, #28
 8003a32:	f107 020b 	add.w	r2, r7, #11
 8003a36:	4611      	mov	r1, r2
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 fb09 	bl	8004050 <lsm303agr_xl_full_scale_get>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d002      	beq.n	8003a4a <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8003a44:	f04f 33ff 	mov.w	r3, #4294967295
 8003a48:	e023      	b.n	8003a92 <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003a4a:	7afb      	ldrb	r3, [r7, #11]
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d81b      	bhi.n	8003a88 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8003a50:	a201      	add	r2, pc, #4	; (adr r2, 8003a58 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 8003a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a56:	bf00      	nop
 8003a58:	08003a69 	.word	0x08003a69
 8003a5c:	08003a71 	.word	0x08003a71
 8003a60:	08003a79 	.word	0x08003a79
 8003a64:	08003a81 	.word	0x08003a81
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	4a0c      	ldr	r2, [pc, #48]	; (8003a9c <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 8003a6c:	601a      	str	r2, [r3, #0]
      break;
 8003a6e:	e00f      	b.n	8003a90 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	4a0b      	ldr	r2, [pc, #44]	; (8003aa0 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 8003a74:	601a      	str	r2, [r3, #0]
      break;
 8003a76:	e00b      	b.n	8003a90 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	4a0a      	ldr	r2, [pc, #40]	; (8003aa4 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 8003a7c:	601a      	str	r2, [r3, #0]
      break;
 8003a7e:	e007      	b.n	8003a90 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	4a09      	ldr	r2, [pc, #36]	; (8003aa8 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 8003a84:	601a      	str	r2, [r3, #0]
      break;
 8003a86:	e003      	b.n	8003a90 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003a88:	f04f 33ff 	mov.w	r3, #4294967295
 8003a8c:	60fb      	str	r3, [r7, #12]
      break;
 8003a8e:	bf00      	nop
  }

  return ret;
 8003a90:	68fb      	ldr	r3, [r7, #12]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	4079999a 	.word	0x4079999a
 8003aa0:	40fa3d71 	.word	0x40fa3d71
 8003aa4:	417a147b 	.word	0x417a147b
 8003aa8:	423b999a 	.word	0x423b999a

08003aac <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	331c      	adds	r3, #28
 8003abe:	f107 020b 	add.w	r2, r7, #11
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 fac3 	bl	8004050 <lsm303agr_xl_full_scale_get>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d002      	beq.n	8003ad6 <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8003ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad4:	e023      	b.n	8003b1e <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003ad6:	7afb      	ldrb	r3, [r7, #11]
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d81b      	bhi.n	8003b14 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8003adc:	a201      	add	r2, pc, #4	; (adr r2, 8003ae4 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 8003ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae2:	bf00      	nop
 8003ae4:	08003af5 	.word	0x08003af5
 8003ae8:	08003afd 	.word	0x08003afd
 8003aec:	08003b05 	.word	0x08003b05
 8003af0:	08003b0d 	.word	0x08003b0d
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	4a0c      	ldr	r2, [pc, #48]	; (8003b28 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8003af8:	601a      	str	r2, [r3, #0]
      break;
 8003afa:	e00f      	b.n	8003b1c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	4a0b      	ldr	r2, [pc, #44]	; (8003b2c <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8003b00:	601a      	str	r2, [r3, #0]
      break;
 8003b02:	e00b      	b.n	8003b1c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	4a0a      	ldr	r2, [pc, #40]	; (8003b30 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8003b08:	601a      	str	r2, [r3, #0]
      break;
 8003b0a:	e007      	b.n	8003b1c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	4a09      	ldr	r2, [pc, #36]	; (8003b34 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8003b10:	601a      	str	r2, [r3, #0]
      break;
 8003b12:	e003      	b.n	8003b1c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003b14:	f04f 33ff 	mov.w	r3, #4294967295
 8003b18:	60fb      	str	r3, [r7, #12]
      break;
 8003b1a:	bf00      	nop
  }

  return ret;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	417a147b 	.word	0x417a147b
 8003b2c:	41fa147b 	.word	0x41fa147b
 8003b30:	427a147b 	.word	0x427a147b
 8003b34:	433b947b 	.word	0x433b947b

08003b38 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8003b44:	edd7 7a00 	vldr	s15, [r7]
 8003b48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b54:	d801      	bhi.n	8003b5a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 8003b56:	2301      	movs	r3, #1
 8003b58:	e037      	b.n	8003bca <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003b5a:	edd7 7a00 	vldr	s15, [r7]
 8003b5e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003b62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b6a:	d801      	bhi.n	8003b70 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e02c      	b.n	8003bca <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003b70:	edd7 7a00 	vldr	s15, [r7]
 8003b74:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003b78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b80:	d801      	bhi.n	8003b86 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8003b82:	2303      	movs	r3, #3
 8003b84:	e021      	b.n	8003bca <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003b86:	edd7 7a00 	vldr	s15, [r7]
 8003b8a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003bf0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 8003b8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b96:	d801      	bhi.n	8003b9c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 8003b98:	2304      	movs	r3, #4
 8003b9a:	e016      	b.n	8003bca <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003b9c:	edd7 7a00 	vldr	s15, [r7]
 8003ba0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003bf4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8003ba4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bac:	d801      	bhi.n	8003bb2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8003bae:	2305      	movs	r3, #5
 8003bb0:	e00b      	b.n	8003bca <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003bb2:	edd7 7a00 	vldr	s15, [r7]
 8003bb6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003bf8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8003bba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bc2:	d801      	bhi.n	8003bc8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8003bc4:	2306      	movs	r3, #6
 8003bc6:	e000      	b.n	8003bca <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003bc8:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8003bca:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	331c      	adds	r3, #28
 8003bd0:	7bfa      	ldrb	r2, [r7, #15]
 8003bd2:	4611      	mov	r1, r2
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 f993 	bl	8003f00 <lsm303agr_xl_data_rate_set>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 8003be0:	f04f 33ff 	mov.w	r3, #4294967295
 8003be4:	e000      	b.n	8003be8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	42480000 	.word	0x42480000
 8003bf4:	42c80000 	.word	0x42c80000
 8003bf8:	43480000 	.word	0x43480000

08003bfc <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8003c08:	edd7 7a00 	vldr	s15, [r7]
 8003c0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c18:	d801      	bhi.n	8003c1e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e037      	b.n	8003c8e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003c1e:	edd7 7a00 	vldr	s15, [r7]
 8003c22:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003c26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c2e:	d801      	bhi.n	8003c34 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 8003c30:	2302      	movs	r3, #2
 8003c32:	e02c      	b.n	8003c8e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003c34:	edd7 7a00 	vldr	s15, [r7]
 8003c38:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003c3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c44:	d801      	bhi.n	8003c4a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8003c46:	2303      	movs	r3, #3
 8003c48:	e021      	b.n	8003c8e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003c4a:	edd7 7a00 	vldr	s15, [r7]
 8003c4e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003ca4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8003c52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c5a:	d801      	bhi.n	8003c60 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 8003c5c:	2304      	movs	r3, #4
 8003c5e:	e016      	b.n	8003c8e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003c60:	edd7 7a00 	vldr	s15, [r7]
 8003c64:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003ca8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 8003c68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c70:	d801      	bhi.n	8003c76 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8003c72:	2305      	movs	r3, #5
 8003c74:	e00b      	b.n	8003c8e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003c76:	edd7 7a00 	vldr	s15, [r7]
 8003c7a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003cac <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8003c7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c86:	d801      	bhi.n	8003c8c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8003c88:	2306      	movs	r3, #6
 8003c8a:	e000      	b.n	8003c8e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003c8c:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	42480000 	.word	0x42480000
 8003ca8:	42c80000 	.word	0x42c80000
 8003cac:	43480000 	.word	0x43480000

08003cb0 <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003cb0:	b590      	push	{r4, r7, lr}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	607a      	str	r2, [r7, #4]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	72fb      	strb	r3, [r7, #11]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10e      	bne.n	8003cee <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	695c      	ldr	r4, [r3, #20]
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	7b1b      	ldrb	r3, [r3, #12]
 8003cd8:	b298      	uxth	r0, r3
 8003cda:	7afb      	ldrb	r3, [r7, #11]
 8003cdc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	b299      	uxth	r1, r3
 8003ce4:	893b      	ldrh	r3, [r7, #8]
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	47a0      	blx	r4
 8003cea:	4603      	mov	r3, r0
 8003cec:	e00d      	b.n	8003d0a <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	695c      	ldr	r4, [r3, #20]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	7b1b      	ldrb	r3, [r3, #12]
 8003cf6:	b298      	uxth	r0, r3
 8003cf8:	7afb      	ldrb	r3, [r7, #11]
 8003cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	b299      	uxth	r1, r3
 8003d02:	893b      	ldrh	r3, [r7, #8]
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	47a0      	blx	r4
 8003d08:	4603      	mov	r3, r0
  }
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	371c      	adds	r7, #28
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd90      	pop	{r4, r7, pc}

08003d12 <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003d12:	b590      	push	{r4, r7, lr}
 8003d14:	b087      	sub	sp, #28
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	60f8      	str	r0, [r7, #12]
 8003d1a:	607a      	str	r2, [r7, #4]
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	460b      	mov	r3, r1
 8003d20:	72fb      	strb	r3, [r7, #11]
 8003d22:	4613      	mov	r3, r2
 8003d24:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10e      	bne.n	8003d50 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	691c      	ldr	r4, [r3, #16]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	7b1b      	ldrb	r3, [r3, #12]
 8003d3a:	b298      	uxth	r0, r3
 8003d3c:	7afb      	ldrb	r3, [r7, #11]
 8003d3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	b299      	uxth	r1, r3
 8003d46:	893b      	ldrh	r3, [r7, #8]
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	47a0      	blx	r4
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	e00d      	b.n	8003d6c <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	691c      	ldr	r4, [r3, #16]
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	7b1b      	ldrb	r3, [r3, #12]
 8003d58:	b298      	uxth	r0, r3
 8003d5a:	7afb      	ldrb	r3, [r7, #11]
 8003d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	b299      	uxth	r1, r3
 8003d64:	893b      	ldrh	r3, [r7, #8]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	47a0      	blx	r4
 8003d6a:	4603      	mov	r3, r0
  }
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	371c      	adds	r7, #28
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd90      	pop	{r4, r7, pc}

08003d74 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003d74:	b590      	push	{r4, r7, lr}
 8003d76:	b087      	sub	sp, #28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	607a      	str	r2, [r7, #4]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	460b      	mov	r3, r1
 8003d82:	72fb      	strb	r3, [r7, #11]
 8003d84:	4613      	mov	r3, r2
 8003d86:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10e      	bne.n	8003db2 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	695c      	ldr	r4, [r3, #20]
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	7b1b      	ldrb	r3, [r3, #12]
 8003d9c:	b298      	uxth	r0, r3
 8003d9e:	7afb      	ldrb	r3, [r7, #11]
 8003da0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	b299      	uxth	r1, r3
 8003da8:	893b      	ldrh	r3, [r7, #8]
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	47a0      	blx	r4
 8003dae:	4603      	mov	r3, r0
 8003db0:	e00d      	b.n	8003dce <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	695c      	ldr	r4, [r3, #20]
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	7b1b      	ldrb	r3, [r3, #12]
 8003dba:	b298      	uxth	r0, r3
 8003dbc:	7afb      	ldrb	r3, [r7, #11]
 8003dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	b299      	uxth	r1, r3
 8003dc6:	893b      	ldrh	r3, [r7, #8]
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	47a0      	blx	r4
 8003dcc:	4603      	mov	r3, r0
  }
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	371c      	adds	r7, #28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd90      	pop	{r4, r7, pc}

08003dd6 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003dd6:	b590      	push	{r4, r7, lr}
 8003dd8:	b087      	sub	sp, #28
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	60f8      	str	r0, [r7, #12]
 8003dde:	607a      	str	r2, [r7, #4]
 8003de0:	461a      	mov	r2, r3
 8003de2:	460b      	mov	r3, r1
 8003de4:	72fb      	strb	r3, [r7, #11]
 8003de6:	4613      	mov	r3, r2
 8003de8:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10e      	bne.n	8003e14 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	691c      	ldr	r4, [r3, #16]
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	7b1b      	ldrb	r3, [r3, #12]
 8003dfe:	b298      	uxth	r0, r3
 8003e00:	7afb      	ldrb	r3, [r7, #11]
 8003e02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	b299      	uxth	r1, r3
 8003e0a:	893b      	ldrh	r3, [r7, #8]
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	47a0      	blx	r4
 8003e10:	4603      	mov	r3, r0
 8003e12:	e00d      	b.n	8003e30 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	691c      	ldr	r4, [r3, #16]
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	7b1b      	ldrb	r3, [r3, #12]
 8003e1c:	b298      	uxth	r0, r3
 8003e1e:	7afb      	ldrb	r3, [r7, #11]
 8003e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	b299      	uxth	r1, r3
 8003e28:	893b      	ldrh	r3, [r7, #8]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	47a0      	blx	r4
 8003e2e:	4603      	mov	r3, r0
  }
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	371c      	adds	r7, #28
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd90      	pop	{r4, r7, pc}

08003e38 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8003e38:	b590      	push	{r4, r7, lr}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	607a      	str	r2, [r7, #4]
 8003e42:	461a      	mov	r2, r3
 8003e44:	460b      	mov	r3, r1
 8003e46:	72fb      	strb	r3, [r7, #11]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	685c      	ldr	r4, [r3, #4]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6898      	ldr	r0, [r3, #8]
 8003e54:	893b      	ldrh	r3, [r7, #8]
 8003e56:	7af9      	ldrb	r1, [r7, #11]
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	47a0      	blx	r4
 8003e5c:	6178      	str	r0, [r7, #20]
  return ret;
 8003e5e:	697b      	ldr	r3, [r7, #20]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	371c      	adds	r7, #28
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd90      	pop	{r4, r7, pc}

08003e68 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8003e68:	b590      	push	{r4, r7, lr}
 8003e6a:	b087      	sub	sp, #28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	607a      	str	r2, [r7, #4]
 8003e72:	461a      	mov	r2, r3
 8003e74:	460b      	mov	r3, r1
 8003e76:	72fb      	strb	r3, [r7, #11]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681c      	ldr	r4, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6898      	ldr	r0, [r3, #8]
 8003e84:	893b      	ldrh	r3, [r7, #8]
 8003e86:	7af9      	ldrb	r1, [r7, #11]
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	47a0      	blx	r4
 8003e8c:	6178      	str	r0, [r7, #20]
  return ret;
 8003e8e:	697b      	ldr	r3, [r7, #20]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	371c      	adds	r7, #28
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd90      	pop	{r4, r7, pc}

08003e98 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003ea2:	f107 020c 	add.w	r2, r7, #12
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	2120      	movs	r1, #32
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7ff ffc4 	bl	8003e38 <lsm303agr_read_reg>
 8003eb0:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d107      	bne.n	8003ec8 <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003eb8:	f107 0210 	add.w	r2, r7, #16
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	2123      	movs	r1, #35	; 0x23
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7ff ffb9 	bl	8003e38 <lsm303agr_read_reg>
 8003ec6:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ) {
 8003ec8:	7b3b      	ldrb	r3, [r7, #12]
 8003eca:	f003 0308 	and.w	r3, r3, #8
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	701a      	strb	r2, [r3, #0]
 8003eda:	e00c      	b.n	8003ef6 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 8003edc:	7c3b      	ldrb	r3, [r7, #16]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	2200      	movs	r2, #0
 8003eec:	701a      	strb	r2, [r3, #0]
 8003eee:	e002      	b.n	8003ef6 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else {
    *val = LSM303AGR_NM_10bit;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8003ef6:	697b      	ldr	r3, [r7, #20]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3718      	adds	r7, #24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003f0c:	f107 0208 	add.w	r2, r7, #8
 8003f10:	2301      	movs	r3, #1
 8003f12:	2120      	movs	r1, #32
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7ff ff8f 	bl	8003e38 <lsm303agr_read_reg>
 8003f1a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10f      	bne.n	8003f42 <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 8003f22:	78fb      	ldrb	r3, [r7, #3]
 8003f24:	f003 030f 	and.w	r3, r3, #15
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	7a3b      	ldrb	r3, [r7, #8]
 8003f2c:	f362 1307 	bfi	r3, r2, #4, #4
 8003f30:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003f32:	f107 0208 	add.w	r2, r7, #8
 8003f36:	2301      	movs	r3, #1
 8003f38:	2120      	movs	r1, #32
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7ff ff94 	bl	8003e68 <lsm303agr_write_reg>
 8003f40:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 8003f42:	68fb      	ldr	r3, [r7, #12]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003f56:	f107 0208 	add.w	r2, r7, #8
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	2120      	movs	r1, #32
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7ff ff6a 	bl	8003e38 <lsm303agr_read_reg>
 8003f64:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr) {
 8003f66:	7a3b      	ldrb	r3, [r7, #8]
 8003f68:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b09      	cmp	r3, #9
 8003f70:	d83e      	bhi.n	8003ff0 <lsm303agr_xl_data_rate_get+0xa4>
 8003f72:	a201      	add	r2, pc, #4	; (adr r2, 8003f78 <lsm303agr_xl_data_rate_get+0x2c>)
 8003f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f78:	08003fa1 	.word	0x08003fa1
 8003f7c:	08003fa9 	.word	0x08003fa9
 8003f80:	08003fb1 	.word	0x08003fb1
 8003f84:	08003fb9 	.word	0x08003fb9
 8003f88:	08003fc1 	.word	0x08003fc1
 8003f8c:	08003fc9 	.word	0x08003fc9
 8003f90:	08003fd1 	.word	0x08003fd1
 8003f94:	08003fd9 	.word	0x08003fd9
 8003f98:	08003fe1 	.word	0x08003fe1
 8003f9c:	08003fe9 	.word	0x08003fe9
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	701a      	strb	r2, [r3, #0]
      break;
 8003fa6:	e027      	b.n	8003ff8 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	2201      	movs	r2, #1
 8003fac:	701a      	strb	r2, [r3, #0]
      break;
 8003fae:	e023      	b.n	8003ff8 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	701a      	strb	r2, [r3, #0]
      break;
 8003fb6:	e01f      	b.n	8003ff8 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	2203      	movs	r2, #3
 8003fbc:	701a      	strb	r2, [r3, #0]
      break;
 8003fbe:	e01b      	b.n	8003ff8 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	2204      	movs	r2, #4
 8003fc4:	701a      	strb	r2, [r3, #0]
      break;
 8003fc6:	e017      	b.n	8003ff8 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	2205      	movs	r2, #5
 8003fcc:	701a      	strb	r2, [r3, #0]
      break;
 8003fce:	e013      	b.n	8003ff8 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	2206      	movs	r2, #6
 8003fd4:	701a      	strb	r2, [r3, #0]
      break;
 8003fd6:	e00f      	b.n	8003ff8 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	2207      	movs	r2, #7
 8003fdc:	701a      	strb	r2, [r3, #0]
      break;
 8003fde:	e00b      	b.n	8003ff8 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	2208      	movs	r2, #8
 8003fe4:	701a      	strb	r2, [r3, #0]
      break;
 8003fe6:	e007      	b.n	8003ff8 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	2209      	movs	r2, #9
 8003fec:	701a      	strb	r2, [r3, #0]
      break;
 8003fee:	e003      	b.n	8003ff8 <lsm303agr_xl_data_rate_get+0xac>

    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	701a      	strb	r2, [r3, #0]
      break;
 8003ff6:	bf00      	nop
  }

  return ret;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop

08004004 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004010:	f107 0208 	add.w	r2, r7, #8
 8004014:	2301      	movs	r3, #1
 8004016:	2123      	movs	r1, #35	; 0x23
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7ff ff0d 	bl	8003e38 <lsm303agr_read_reg>
 800401e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10f      	bne.n	8004046 <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 8004026:	78fb      	ldrb	r3, [r7, #3]
 8004028:	f003 0303 	and.w	r3, r3, #3
 800402c:	b2da      	uxtb	r2, r3
 800402e:	7a3b      	ldrb	r3, [r7, #8]
 8004030:	f362 1305 	bfi	r3, r2, #4, #2
 8004034:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004036:	f107 0208 	add.w	r2, r7, #8
 800403a:	2301      	movs	r3, #1
 800403c:	2123      	movs	r1, #35	; 0x23
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7ff ff12 	bl	8003e68 <lsm303agr_write_reg>
 8004044:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8004046:	68fb      	ldr	r3, [r7, #12]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800405a:	f107 0208 	add.w	r2, r7, #8
 800405e:	2301      	movs	r3, #1
 8004060:	2123      	movs	r1, #35	; 0x23
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff fee8 	bl	8003e38 <lsm303agr_read_reg>
 8004068:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs) {
 800406a:	7a3b      	ldrb	r3, [r7, #8]
 800406c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b03      	cmp	r3, #3
 8004074:	d81a      	bhi.n	80040ac <lsm303agr_xl_full_scale_get+0x5c>
 8004076:	a201      	add	r2, pc, #4	; (adr r2, 800407c <lsm303agr_xl_full_scale_get+0x2c>)
 8004078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407c:	0800408d 	.word	0x0800408d
 8004080:	08004095 	.word	0x08004095
 8004084:	0800409d 	.word	0x0800409d
 8004088:	080040a5 	.word	0x080040a5
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	2200      	movs	r2, #0
 8004090:	701a      	strb	r2, [r3, #0]
      break;
 8004092:	e00f      	b.n	80040b4 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	2201      	movs	r2, #1
 8004098:	701a      	strb	r2, [r3, #0]
      break;
 800409a:	e00b      	b.n	80040b4 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	2202      	movs	r2, #2
 80040a0:	701a      	strb	r2, [r3, #0]
      break;
 80040a2:	e007      	b.n	80040b4 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	2203      	movs	r2, #3
 80040a8:	701a      	strb	r2, [r3, #0]
      break;
 80040aa:	e003      	b.n	80040b4 <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	2200      	movs	r2, #0
 80040b0:	701a      	strb	r2, [r3, #0]
      break;
 80040b2:	bf00      	nop
  }

  return ret;
 80040b4:	68fb      	ldr	r3, [r7, #12]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop

080040c0 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	460b      	mov	r3, r1
 80040ca:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80040cc:	f107 0208 	add.w	r2, r7, #8
 80040d0:	2301      	movs	r3, #1
 80040d2:	2123      	movs	r1, #35	; 0x23
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7ff feaf 	bl	8003e38 <lsm303agr_read_reg>
 80040da:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10f      	bne.n	8004102 <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 80040e2:	78fb      	ldrb	r3, [r7, #3]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	7a3b      	ldrb	r3, [r7, #8]
 80040ec:	f362 13c7 	bfi	r3, r2, #7, #1
 80040f0:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80040f2:	f107 0208 	add.w	r2, r7, #8
 80040f6:	2301      	movs	r3, #1
 80040f8:	2123      	movs	r1, #35	; 0x23
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7ff feb4 	bl	8003e68 <lsm303agr_write_reg>
 8004100:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8004102:	68fb      	ldr	r3, [r7, #12]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8004116:	f107 020c 	add.w	r2, r7, #12
 800411a:	2306      	movs	r3, #6
 800411c:	2128      	movs	r1, #40	; 0x28
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff fe8a 	bl	8003e38 <lsm303agr_read_reg>
 8004124:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004126:	7b7b      	ldrb	r3, [r7, #13]
 8004128:	b21a      	sxth	r2, r3
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004134:	b29b      	uxth	r3, r3
 8004136:	021b      	lsls	r3, r3, #8
 8004138:	b29a      	uxth	r2, r3
 800413a:	7b3b      	ldrb	r3, [r7, #12]
 800413c:	b29b      	uxth	r3, r3
 800413e:	4413      	add	r3, r2
 8004140:	b29b      	uxth	r3, r3
 8004142:	b21a      	sxth	r2, r3
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004148:	7bfa      	ldrb	r2, [r7, #15]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	3302      	adds	r3, #2
 800414e:	b212      	sxth	r2, r2
 8004150:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	3302      	adds	r3, #2
 8004156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800415a:	b29b      	uxth	r3, r3
 800415c:	021b      	lsls	r3, r3, #8
 800415e:	b29a      	uxth	r2, r3
 8004160:	7bbb      	ldrb	r3, [r7, #14]
 8004162:	b29b      	uxth	r3, r3
 8004164:	4413      	add	r3, r2
 8004166:	b29a      	uxth	r2, r3
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	3302      	adds	r3, #2
 800416c:	b212      	sxth	r2, r2
 800416e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004170:	7c7a      	ldrb	r2, [r7, #17]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	3304      	adds	r3, #4
 8004176:	b212      	sxth	r2, r2
 8004178:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	3304      	adds	r3, #4
 800417e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004182:	b29b      	uxth	r3, r3
 8004184:	021b      	lsls	r3, r3, #8
 8004186:	b29a      	uxth	r2, r3
 8004188:	7c3b      	ldrb	r3, [r7, #16]
 800418a:	b29b      	uxth	r3, r3
 800418c:	4413      	add	r3, r2
 800418e:	b29a      	uxth	r2, r3
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	3304      	adds	r3, #4
 8004194:	b212      	sxth	r2, r2
 8004196:	801a      	strh	r2, [r3, #0]
  return ret;
 8004198:	697b      	ldr	r3, [r7, #20]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b084      	sub	sp, #16
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	460b      	mov	r3, r1
 80041ac:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80041ae:	f107 0208 	add.w	r2, r7, #8
 80041b2:	2301      	movs	r3, #1
 80041b4:	2160      	movs	r1, #96	; 0x60
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7ff fe3e 	bl	8003e38 <lsm303agr_read_reg>
 80041bc:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10f      	bne.n	80041e4 <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 80041c4:	78fb      	ldrb	r3, [r7, #3]
 80041c6:	f003 0303 	and.w	r3, r3, #3
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	7a3b      	ldrb	r3, [r7, #8]
 80041ce:	f362 0301 	bfi	r3, r2, #0, #2
 80041d2:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80041d4:	f107 0208 	add.w	r2, r7, #8
 80041d8:	2301      	movs	r3, #1
 80041da:	2160      	movs	r1, #96	; 0x60
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f7ff fe43 	bl	8003e68 <lsm303agr_write_reg>
 80041e2:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 80041e4:	68fb      	ldr	r3, [r7, #12]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b084      	sub	sp, #16
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
 80041f6:	460b      	mov	r3, r1
 80041f8:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80041fa:	f107 0208 	add.w	r2, r7, #8
 80041fe:	2301      	movs	r3, #1
 8004200:	2160      	movs	r1, #96	; 0x60
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7ff fe18 	bl	8003e38 <lsm303agr_read_reg>
 8004208:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10f      	bne.n	8004230 <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 8004210:	78fb      	ldrb	r3, [r7, #3]
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	b2da      	uxtb	r2, r3
 8004218:	7a3b      	ldrb	r3, [r7, #8]
 800421a:	f362 0383 	bfi	r3, r2, #2, #2
 800421e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004220:	f107 0208 	add.w	r2, r7, #8
 8004224:	2301      	movs	r3, #1
 8004226:	2160      	movs	r1, #96	; 0x60
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7ff fe1d 	bl	8003e68 <lsm303agr_write_reg>
 800422e:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8004230:	68fb      	ldr	r3, [r7, #12]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004246:	f107 0208 	add.w	r2, r7, #8
 800424a:	2301      	movs	r3, #1
 800424c:	2160      	movs	r1, #96	; 0x60
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff fdf2 	bl	8003e38 <lsm303agr_read_reg>
 8004254:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  switch (cfg_reg_a_m.odr) {
 8004256:	7a3b      	ldrb	r3, [r7, #8]
 8004258:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b03      	cmp	r3, #3
 8004260:	d81a      	bhi.n	8004298 <lsm303agr_mag_data_rate_get+0x5c>
 8004262:	a201      	add	r2, pc, #4	; (adr r2, 8004268 <lsm303agr_mag_data_rate_get+0x2c>)
 8004264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004268:	08004279 	.word	0x08004279
 800426c:	08004281 	.word	0x08004281
 8004270:	08004289 	.word	0x08004289
 8004274:	08004291 	.word	0x08004291
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2200      	movs	r2, #0
 800427c:	701a      	strb	r2, [r3, #0]
      break;
 800427e:	e00f      	b.n	80042a0 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	2201      	movs	r2, #1
 8004284:	701a      	strb	r2, [r3, #0]
      break;
 8004286:	e00b      	b.n	80042a0 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2202      	movs	r2, #2
 800428c:	701a      	strb	r2, [r3, #0]
      break;
 800428e:	e007      	b.n	80042a0 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	2203      	movs	r2, #3
 8004294:	701a      	strb	r2, [r3, #0]
      break;
 8004296:	e003      	b.n	80042a0 <lsm303agr_mag_data_rate_get+0x64>

    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	2200      	movs	r2, #0
 800429c:	701a      	strb	r2, [r3, #0]
      break;
 800429e:	bf00      	nop
  }

  return ret;
 80042a0:	68fb      	ldr	r3, [r7, #12]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop

080042ac <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	460b      	mov	r3, r1
 80042b6:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80042b8:	f107 0208 	add.w	r2, r7, #8
 80042bc:	2301      	movs	r3, #1
 80042be:	2162      	movs	r1, #98	; 0x62
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7ff fdb9 	bl	8003e38 <lsm303agr_read_reg>
 80042c6:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10f      	bne.n	80042ee <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 80042ce:	78fb      	ldrb	r3, [r7, #3]
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	7a3b      	ldrb	r3, [r7, #8]
 80042d8:	f362 1304 	bfi	r3, r2, #4, #1
 80042dc:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80042de:	f107 0208 	add.w	r2, r7, #8
 80042e2:	2301      	movs	r3, #1
 80042e4:	2162      	movs	r1, #98	; 0x62
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7ff fdbe 	bl	8003e68 <lsm303agr_write_reg>
 80042ec:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 80042ee:	68fb      	ldr	r3, [r7, #12]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8004302:	f107 020c 	add.w	r2, r7, #12
 8004306:	2306      	movs	r3, #6
 8004308:	2168      	movs	r1, #104	; 0x68
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7ff fd94 	bl	8003e38 <lsm303agr_read_reg>
 8004310:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004312:	7b7b      	ldrb	r3, [r7, #13]
 8004314:	b21a      	sxth	r2, r3
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004320:	b29b      	uxth	r3, r3
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	b29a      	uxth	r2, r3
 8004326:	7b3b      	ldrb	r3, [r7, #12]
 8004328:	b29b      	uxth	r3, r3
 800432a:	4413      	add	r3, r2
 800432c:	b29b      	uxth	r3, r3
 800432e:	b21a      	sxth	r2, r3
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004334:	7bfa      	ldrb	r2, [r7, #15]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	3302      	adds	r3, #2
 800433a:	b212      	sxth	r2, r2
 800433c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	3302      	adds	r3, #2
 8004342:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004346:	b29b      	uxth	r3, r3
 8004348:	021b      	lsls	r3, r3, #8
 800434a:	b29a      	uxth	r2, r3
 800434c:	7bbb      	ldrb	r3, [r7, #14]
 800434e:	b29b      	uxth	r3, r3
 8004350:	4413      	add	r3, r2
 8004352:	b29a      	uxth	r2, r3
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	3302      	adds	r3, #2
 8004358:	b212      	sxth	r2, r2
 800435a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800435c:	7c7a      	ldrb	r2, [r7, #17]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	3304      	adds	r3, #4
 8004362:	b212      	sxth	r2, r2
 8004364:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	3304      	adds	r3, #4
 800436a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800436e:	b29b      	uxth	r3, r3
 8004370:	021b      	lsls	r3, r3, #8
 8004372:	b29a      	uxth	r2, r3
 8004374:	7c3b      	ldrb	r3, [r7, #16]
 8004376:	b29b      	uxth	r3, r3
 8004378:	4413      	add	r3, r2
 800437a:	b29a      	uxth	r2, r3
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	3304      	adds	r3, #4
 8004380:	b212      	sxth	r2, r2
 8004382:	801a      	strh	r2, [r3, #0]
  return ret;
 8004384:	697b      	ldr	r3, [r7, #20]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b084      	sub	sp, #16
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 8004398:	2301      	movs	r3, #1
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	210f      	movs	r1, #15
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7ff fd4a 	bl	8003e38 <lsm303agr_read_reg>
 80043a4:	60f8      	str	r0, [r7, #12]
  return ret;
 80043a6:	68fb      	ldr	r3, [r7, #12]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 80043ba:	2301      	movs	r3, #1
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	214f      	movs	r1, #79	; 0x4f
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f7ff fd39 	bl	8003e38 <lsm303agr_read_reg>
 80043c6:	60f8      	str	r0, [r7, #12]
  return ret;
 80043c8:	68fb      	ldr	r3, [r7, #12]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b084      	sub	sp, #16
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
 80043da:	460b      	mov	r3, r1
 80043dc:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80043de:	f107 0208 	add.w	r2, r7, #8
 80043e2:	2301      	movs	r3, #1
 80043e4:	2162      	movs	r1, #98	; 0x62
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7ff fd26 	bl	8003e38 <lsm303agr_read_reg>
 80043ec:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10f      	bne.n	8004414 <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 80043f4:	78fb      	ldrb	r3, [r7, #3]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	7a3b      	ldrb	r3, [r7, #8]
 80043fe:	f362 0341 	bfi	r3, r2, #1, #1
 8004402:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004404:	f107 0208 	add.w	r2, r7, #8
 8004408:	2301      	movs	r3, #1
 800440a:	2162      	movs	r1, #98	; 0x62
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7ff fd2b 	bl	8003e68 <lsm303agr_write_reg>
 8004412:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8004414:	68fb      	ldr	r3, [r7, #12]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b084      	sub	sp, #16
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
 8004426:	460b      	mov	r3, r1
 8004428:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 800442a:	f107 0208 	add.w	r2, r7, #8
 800442e:	2301      	movs	r3, #1
 8004430:	212e      	movs	r1, #46	; 0x2e
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7ff fd00 	bl	8003e38 <lsm303agr_read_reg>
 8004438:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0) {
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10f      	bne.n	8004460 <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8004440:	78fb      	ldrb	r3, [r7, #3]
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	b2da      	uxtb	r2, r3
 8004448:	7a3b      	ldrb	r3, [r7, #8]
 800444a:	f362 1387 	bfi	r3, r2, #6, #2
 800444e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8004450:	f107 0208 	add.w	r2, r7, #8
 8004454:	2301      	movs	r3, #1
 8004456:	212e      	movs	r1, #46	; 0x2e
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7ff fd05 	bl	8003e68 <lsm303agr_write_reg>
 800445e:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8004460:	68fb      	ldr	r3, [r7, #12]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b084      	sub	sp, #16
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
 8004472:	460b      	mov	r3, r1
 8004474:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004476:	f107 0208 	add.w	r2, r7, #8
 800447a:	2301      	movs	r3, #1
 800447c:	2162      	movs	r1, #98	; 0x62
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7ff fcda 	bl	8003e38 <lsm303agr_read_reg>
 8004484:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10f      	bne.n	80044ac <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 800448c:	78fb      	ldrb	r3, [r7, #3]
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	b2da      	uxtb	r2, r3
 8004494:	7a3b      	ldrb	r3, [r7, #8]
 8004496:	f362 1345 	bfi	r3, r2, #5, #1
 800449a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800449c:	f107 0208 	add.w	r2, r7, #8
 80044a0:	2301      	movs	r3, #1
 80044a2:	2162      	movs	r1, #98	; 0x62
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7ff fcdf 	bl	8003e68 <lsm303agr_write_reg>
 80044aa:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 80044ac:	68fb      	ldr	r3, [r7, #12]
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d103      	bne.n	80044d4 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 80044cc:	f04f 33ff 	mov.w	r3, #4294967295
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	e04d      	b.n	8004570 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	7b1a      	ldrb	r2, [r3, #12]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	695a      	ldr	r2, [r3, #20]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	699a      	ldr	r2, [r3, #24]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a1b      	ldr	r2, [pc, #108]	; (800457c <LSM6DSL_RegisterBusIO+0xc4>)
 8004510:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a1a      	ldr	r2, [pc, #104]	; (8004580 <LSM6DSL_RegisterBusIO+0xc8>)
 8004516:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d103      	bne.n	800452e <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 8004526:	f04f 33ff 	mov.w	r3, #4294967295
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	e020      	b.n	8004570 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4798      	blx	r3
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 800453a:	f04f 33ff 	mov.w	r3, #4294967295
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	e016      	b.n	8004570 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	2b02      	cmp	r3, #2
 8004548:	d112      	bne.n	8004570 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10d      	bne.n	8004570 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8004554:	230c      	movs	r3, #12
 8004556:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8004558:	7afb      	ldrb	r3, [r7, #11]
 800455a:	461a      	mov	r2, r3
 800455c:	2112      	movs	r1, #18
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 fd2d 	bl	8004fbe <LSM6DSL_Write_Reg>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d002      	beq.n	8004570 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 800456a:	f04f 33ff 	mov.w	r3, #4294967295
 800456e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004570:	68fb      	ldr	r3, [r7, #12]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	0800542d 	.word	0x0800542d
 8004580:	08005463 	.word	0x08005463

08004584 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	331c      	adds	r3, #28
 8004590:	2101      	movs	r1, #1
 8004592:	4618      	mov	r0, r3
 8004594:	f001 fa59 	bl	8005a4a <lsm6dsl_auto_increment_set>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 800459e:	f04f 33ff 	mov.w	r3, #4294967295
 80045a2:	e054      	b.n	800464e <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	331c      	adds	r3, #28
 80045a8:	2101      	movs	r1, #1
 80045aa:	4618      	mov	r0, r3
 80045ac:	f001 f980 	bl	80058b0 <lsm6dsl_block_data_update_set>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d002      	beq.n	80045bc <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 80045b6:	f04f 33ff 	mov.w	r3, #4294967295
 80045ba:	e048      	b.n	800464e <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	331c      	adds	r3, #28
 80045c0:	2100      	movs	r1, #0
 80045c2:	4618      	mov	r0, r3
 80045c4:	f001 fa67 	bl	8005a96 <lsm6dsl_fifo_mode_set>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 80045ce:	f04f 33ff 	mov.w	r3, #4294967295
 80045d2:	e03c      	b.n	800464e <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2204      	movs	r2, #4
 80045d8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	331c      	adds	r3, #28
 80045e0:	2100      	movs	r1, #0
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 ffe6 	bl	80055b4 <lsm6dsl_xl_data_rate_set>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d002      	beq.n	80045f4 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 80045ee:	f04f 33ff 	mov.w	r3, #4294967295
 80045f2:	e02c      	b.n	800464e <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	331c      	adds	r3, #28
 80045f8:	2100      	movs	r1, #0
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 ff7c 	bl	80054f8 <lsm6dsl_xl_full_scale_set>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8004606:	f04f 33ff 	mov.w	r3, #4294967295
 800460a:	e020      	b.n	800464e <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2204      	movs	r2, #4
 8004610:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	331c      	adds	r3, #28
 8004618:	2100      	movs	r1, #0
 800461a:	4618      	mov	r0, r3
 800461c:	f001 f8c0 	bl	80057a0 <lsm6dsl_gy_data_rate_set>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8004626:	f04f 33ff 	mov.w	r3, #4294967295
 800462a:	e010      	b.n	800464e <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	331c      	adds	r3, #28
 8004630:	2106      	movs	r1, #6
 8004632:	4618      	mov	r0, r3
 8004634:	f001 f84c 	bl	80056d0 <lsm6dsl_gy_full_scale_set>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 800463e:	f04f 33ff 	mov.w	r3, #4294967295
 8004642:	e004      	b.n	800464e <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b082      	sub	sp, #8
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f888 	bl	8004774 <LSM6DSL_ACC_Disable>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d002      	beq.n	8004670 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 800466a:	f04f 33ff 	mov.w	r3, #4294967295
 800466e:	e015      	b.n	800469c <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 fa9a 	bl	8004baa <LSM6DSL_GYRO_Disable>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 800467c:	f04f 33ff 	mov.w	r3, #4294967295
 8004680:	e00c      	b.n	800469c <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	331c      	adds	r3, #28
 80046b2:	6839      	ldr	r1, [r7, #0]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f001 f9b7 	bl	8005a28 <lsm6dsl_device_id_get>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d002      	beq.n	80046c6 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 80046c0:	f04f 33ff 	mov.w	r3, #4294967295
 80046c4:	e000      	b.n	80046c8 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3708      	adds	r7, #8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2201      	movs	r2, #1
 80046de:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	2201      	movs	r2, #1
 80046e4:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2200      	movs	r2, #0
 80046ea:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2200      	movs	r2, #0
 80046f0:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80046f8:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2210      	movs	r2, #16
 80046fe:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	2200      	movs	r2, #0
 8004704:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	4a07      	ldr	r2, [pc, #28]	; (8004728 <LSM6DSL_GetCapabilities+0x58>)
 800470a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	4a06      	ldr	r2, [pc, #24]	; (8004728 <LSM6DSL_GetCapabilities+0x58>)
 8004710:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	f04f 0200 	mov.w	r2, #0
 8004718:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	45d02000 	.word	0x45d02000

0800472c <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800473a:	2b01      	cmp	r3, #1
 800473c:	d101      	bne.n	8004742 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	e014      	b.n	800476c <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f103 021c 	add.w	r2, r3, #28
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800474e:	4619      	mov	r1, r3
 8004750:	4610      	mov	r0, r2
 8004752:	f000 ff2f 	bl	80055b4 <lsm6dsl_xl_data_rate_set>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 800475c:	f04f 33ff 	mov.w	r3, #4294967295
 8004760:	e004      	b.n	800476c <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3708      	adds	r7, #8
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 8004786:	2300      	movs	r3, #0
 8004788:	e01f      	b.n	80047ca <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f103 021c 	add.w	r2, r3, #28
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	332b      	adds	r3, #43	; 0x2b
 8004794:	4619      	mov	r1, r3
 8004796:	4610      	mov	r0, r2
 8004798:	f000 ff32 	bl	8005600 <lsm6dsl_xl_data_rate_get>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d002      	beq.n	80047a8 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 80047a2:	f04f 33ff 	mov.w	r3, #4294967295
 80047a6:	e010      	b.n	80047ca <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	331c      	adds	r3, #28
 80047ac:	2100      	movs	r1, #0
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 ff00 	bl	80055b4 <lsm6dsl_xl_data_rate_set>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 80047ba:	f04f 33ff 	mov.w	r3, #4294967295
 80047be:	e004      	b.n	80047ca <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
	...

080047d4 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	331c      	adds	r3, #28
 80047e6:	f107 020b 	add.w	r2, r7, #11
 80047ea:	4611      	mov	r1, r2
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 fea9 	bl	8005544 <lsm6dsl_xl_full_scale_get>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 80047f8:	f04f 33ff 	mov.w	r3, #4294967295
 80047fc:	e023      	b.n	8004846 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80047fe:	7afb      	ldrb	r3, [r7, #11]
 8004800:	2b03      	cmp	r3, #3
 8004802:	d81b      	bhi.n	800483c <LSM6DSL_ACC_GetSensitivity+0x68>
 8004804:	a201      	add	r2, pc, #4	; (adr r2, 800480c <LSM6DSL_ACC_GetSensitivity+0x38>)
 8004806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480a:	bf00      	nop
 800480c:	0800481d 	.word	0x0800481d
 8004810:	08004835 	.word	0x08004835
 8004814:	08004825 	.word	0x08004825
 8004818:	0800482d 	.word	0x0800482d
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	4a0c      	ldr	r2, [pc, #48]	; (8004850 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8004820:	601a      	str	r2, [r3, #0]
      break;
 8004822:	e00f      	b.n	8004844 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	4a0b      	ldr	r2, [pc, #44]	; (8004854 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8004828:	601a      	str	r2, [r3, #0]
      break;
 800482a:	e00b      	b.n	8004844 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	4a0a      	ldr	r2, [pc, #40]	; (8004858 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8004830:	601a      	str	r2, [r3, #0]
      break;
 8004832:	e007      	b.n	8004844 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	4a09      	ldr	r2, [pc, #36]	; (800485c <LSM6DSL_ACC_GetSensitivity+0x88>)
 8004838:	601a      	str	r2, [r3, #0]
      break;
 800483a:	e003      	b.n	8004844 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 800483c:	f04f 33ff 	mov.w	r3, #4294967295
 8004840:	60fb      	str	r3, [r7, #12]
      break;
 8004842:	bf00      	nop
  }

  return ret;
 8004844:	68fb      	ldr	r3, [r7, #12]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	3d79db23 	.word	0x3d79db23
 8004854:	3df9db23 	.word	0x3df9db23
 8004858:	3e79db23 	.word	0x3e79db23
 800485c:	3ef9db23 	.word	0x3ef9db23

08004860 <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800486a:	2300      	movs	r3, #0
 800486c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	331c      	adds	r3, #28
 8004872:	f107 020b 	add.w	r2, r7, #11
 8004876:	4611      	mov	r1, r2
 8004878:	4618      	mov	r0, r3
 800487a:	f000 fec1 	bl	8005600 <lsm6dsl_xl_data_rate_get>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8004884:	f04f 33ff 	mov.w	r3, #4294967295
 8004888:	e054      	b.n	8004934 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 800488a:	7afb      	ldrb	r3, [r7, #11]
 800488c:	2b0b      	cmp	r3, #11
 800488e:	d84c      	bhi.n	800492a <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8004890:	a201      	add	r2, pc, #4	; (adr r2, 8004898 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8004892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004896:	bf00      	nop
 8004898:	080048c9 	.word	0x080048c9
 800489c:	080048db 	.word	0x080048db
 80048a0:	080048e3 	.word	0x080048e3
 80048a4:	080048eb 	.word	0x080048eb
 80048a8:	080048f3 	.word	0x080048f3
 80048ac:	080048fb 	.word	0x080048fb
 80048b0:	08004903 	.word	0x08004903
 80048b4:	0800490b 	.word	0x0800490b
 80048b8:	08004913 	.word	0x08004913
 80048bc:	0800491b 	.word	0x0800491b
 80048c0:	08004923 	.word	0x08004923
 80048c4:	080048d3 	.word	0x080048d3
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	f04f 0200 	mov.w	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
      break;
 80048d0:	e02f      	b.n	8004932 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	4a19      	ldr	r2, [pc, #100]	; (800493c <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 80048d6:	601a      	str	r2, [r3, #0]
      break;
 80048d8:	e02b      	b.n	8004932 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	4a18      	ldr	r2, [pc, #96]	; (8004940 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 80048de:	601a      	str	r2, [r3, #0]
      break;
 80048e0:	e027      	b.n	8004932 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	4a17      	ldr	r2, [pc, #92]	; (8004944 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 80048e6:	601a      	str	r2, [r3, #0]
      break;
 80048e8:	e023      	b.n	8004932 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	4a16      	ldr	r2, [pc, #88]	; (8004948 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 80048ee:	601a      	str	r2, [r3, #0]
      break;
 80048f0:	e01f      	b.n	8004932 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	4a15      	ldr	r2, [pc, #84]	; (800494c <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 80048f6:	601a      	str	r2, [r3, #0]
      break;
 80048f8:	e01b      	b.n	8004932 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	4a14      	ldr	r2, [pc, #80]	; (8004950 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 80048fe:	601a      	str	r2, [r3, #0]
      break;
 8004900:	e017      	b.n	8004932 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	4a13      	ldr	r2, [pc, #76]	; (8004954 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8004906:	601a      	str	r2, [r3, #0]
      break;
 8004908:	e013      	b.n	8004932 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	4a12      	ldr	r2, [pc, #72]	; (8004958 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 800490e:	601a      	str	r2, [r3, #0]
      break;
 8004910:	e00f      	b.n	8004932 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	4a11      	ldr	r2, [pc, #68]	; (800495c <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8004916:	601a      	str	r2, [r3, #0]
      break;
 8004918:	e00b      	b.n	8004932 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	4a10      	ldr	r2, [pc, #64]	; (8004960 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 800491e:	601a      	str	r2, [r3, #0]
      break;
 8004920:	e007      	b.n	8004932 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	4a0f      	ldr	r2, [pc, #60]	; (8004964 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8004926:	601a      	str	r2, [r3, #0]
      break;
 8004928:	e003      	b.n	8004932 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 800492a:	f04f 33ff 	mov.w	r3, #4294967295
 800492e:	60fb      	str	r3, [r7, #12]
      break;
 8004930:	bf00      	nop
  }

  return ret;
 8004932:	68fb      	ldr	r3, [r7, #12]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	3fcccccd 	.word	0x3fcccccd
 8004940:	41480000 	.word	0x41480000
 8004944:	41d00000 	.word	0x41d00000
 8004948:	42500000 	.word	0x42500000
 800494c:	42d00000 	.word	0x42d00000
 8004950:	43500000 	.word	0x43500000
 8004954:	43d00000 	.word	0x43d00000
 8004958:	44504000 	.word	0x44504000
 800495c:	44cf8000 	.word	0x44cf8000
 8004960:	45502000 	.word	0x45502000
 8004964:	45d02000 	.word	0x45d02000

08004968 <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800497a:	2b01      	cmp	r3, #1
 800497c:	d106      	bne.n	800498c <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800497e:	ed97 0a00 	vldr	s0, [r7]
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 fb36 	bl	8004ff4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8004988:	4603      	mov	r3, r0
 800498a:	e005      	b.n	8004998 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 800498c:	ed97 0a00 	vldr	s0, [r7]
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 fbbb 	bl	800510c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8004996:	4603      	mov	r3, r0
  }
}
 8004998:	4618      	mov	r0, r3
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	331c      	adds	r3, #28
 80049b2:	f107 020b 	add.w	r2, r7, #11
 80049b6:	4611      	mov	r1, r2
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 fdc3 	bl	8005544 <lsm6dsl_xl_full_scale_get>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 80049c4:	f04f 33ff 	mov.w	r3, #4294967295
 80049c8:	e023      	b.n	8004a12 <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80049ca:	7afb      	ldrb	r3, [r7, #11]
 80049cc:	2b03      	cmp	r3, #3
 80049ce:	d81b      	bhi.n	8004a08 <LSM6DSL_ACC_GetFullScale+0x68>
 80049d0:	a201      	add	r2, pc, #4	; (adr r2, 80049d8 <LSM6DSL_ACC_GetFullScale+0x38>)
 80049d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d6:	bf00      	nop
 80049d8:	080049e9 	.word	0x080049e9
 80049dc:	08004a01 	.word	0x08004a01
 80049e0:	080049f1 	.word	0x080049f1
 80049e4:	080049f9 	.word	0x080049f9
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2202      	movs	r2, #2
 80049ec:	601a      	str	r2, [r3, #0]
      break;
 80049ee:	e00f      	b.n	8004a10 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	2204      	movs	r2, #4
 80049f4:	601a      	str	r2, [r3, #0]
      break;
 80049f6:	e00b      	b.n	8004a10 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	2208      	movs	r2, #8
 80049fc:	601a      	str	r2, [r3, #0]
      break;
 80049fe:	e007      	b.n	8004a10 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2210      	movs	r2, #16
 8004a04:	601a      	str	r2, [r3, #0]
      break;
 8004a06:	e003      	b.n	8004a10 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004a08:	f04f 33ff 	mov.w	r3, #4294967295
 8004a0c:	60fb      	str	r3, [r7, #12]
      break;
 8004a0e:	bf00      	nop
  }

  return ret;
 8004a10:	68fb      	ldr	r3, [r7, #12]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop

08004a1c <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	dd0b      	ble.n	8004a44 <LSM6DSL_ACC_SetFullScale+0x28>
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	dd06      	ble.n	8004a40 <LSM6DSL_ACC_SetFullScale+0x24>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	dc01      	bgt.n	8004a3c <LSM6DSL_ACC_SetFullScale+0x20>
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e004      	b.n	8004a46 <LSM6DSL_ACC_SetFullScale+0x2a>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e002      	b.n	8004a46 <LSM6DSL_ACC_SetFullScale+0x2a>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e000      	b.n	8004a46 <LSM6DSL_ACC_SetFullScale+0x2a>
 8004a44:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8004a46:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	331c      	adds	r3, #28
 8004a4c:	7bfa      	ldrb	r2, [r7, #15]
 8004a4e:	4611      	mov	r1, r2
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 fd51 	bl	80054f8 <lsm6dsl_xl_full_scale_set>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d002      	beq.n	8004a62 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8004a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a60:	e000      	b.n	8004a64 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	331c      	adds	r3, #28
 8004a7a:	f107 0208 	add.w	r2, r7, #8
 8004a7e:	4611      	mov	r1, r2
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 ff86 	bl	8005992 <lsm6dsl_acceleration_raw_get>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d002      	beq.n	8004a92 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8004a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a90:	e00c      	b.n	8004aac <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004a92:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004a9a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004aa2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8004abe:	f04f 0300 	mov.w	r3, #0
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	331c      	adds	r3, #28
 8004ac8:	f107 0210 	add.w	r2, r7, #16
 8004acc:	4611      	mov	r1, r2
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 ff5f 	bl	8005992 <lsm6dsl_acceleration_raw_get>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8004ada:	f04f 33ff 	mov.w	r3, #4294967295
 8004ade:	e03c      	b.n	8004b5a <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004ae0:	f107 030c 	add.w	r3, r7, #12
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7ff fe74 	bl	80047d4 <LSM6DSL_ACC_GetSensitivity>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d002      	beq.n	8004af8 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8004af2:	f04f 33ff 	mov.w	r3, #4294967295
 8004af6:	e030      	b.n	8004b5a <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004af8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004afc:	ee07 3a90 	vmov	s15, r3
 8004b00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b04:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b10:	ee17 2a90 	vmov	r2, s15
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004b18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004b1c:	ee07 3a90 	vmov	s15, r3
 8004b20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b24:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b30:	ee17 2a90 	vmov	r2, s15
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004b38:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004b3c:	ee07 3a90 	vmov	s15, r3
 8004b40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b44:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b50:	ee17 2a90 	vmov	r2, s15
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3718      	adds	r7, #24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b082      	sub	sp, #8
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d101      	bne.n	8004b78 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	e014      	b.n	8004ba2 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f103 021c 	add.w	r2, r3, #28
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004b84:	4619      	mov	r1, r3
 8004b86:	4610      	mov	r0, r2
 8004b88:	f000 fe0a 	bl	80057a0 <lsm6dsl_gy_data_rate_set>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d002      	beq.n	8004b98 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8004b92:	f04f 33ff 	mov.w	r3, #4294967295
 8004b96:	e004      	b.n	8004ba2 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b082      	sub	sp, #8
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	e01f      	b.n	8004c00 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f103 021c 	add.w	r2, r3, #28
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	332c      	adds	r3, #44	; 0x2c
 8004bca:	4619      	mov	r1, r3
 8004bcc:	4610      	mov	r0, r2
 8004bce:	f000 fe0d 	bl	80057ec <lsm6dsl_gy_data_rate_get>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8004bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bdc:	e010      	b.n	8004c00 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	331c      	adds	r3, #28
 8004be2:	2100      	movs	r1, #0
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fddb 	bl	80057a0 <lsm6dsl_gy_data_rate_set>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8004bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8004bf4:	e004      	b.n	8004c00 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	331c      	adds	r3, #28
 8004c1a:	f107 020b 	add.w	r2, r7, #11
 8004c1e:	4611      	mov	r1, r2
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 fd7b 	bl	800571c <lsm6dsl_gy_full_scale_get>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d002      	beq.n	8004c32 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8004c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c30:	e02d      	b.n	8004c8e <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004c32:	7afb      	ldrb	r3, [r7, #11]
 8004c34:	2b06      	cmp	r3, #6
 8004c36:	d825      	bhi.n	8004c84 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8004c38:	a201      	add	r2, pc, #4	; (adr r2, 8004c40 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 8004c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3e:	bf00      	nop
 8004c40:	08004c65 	.word	0x08004c65
 8004c44:	08004c5d 	.word	0x08004c5d
 8004c48:	08004c6d 	.word	0x08004c6d
 8004c4c:	08004c85 	.word	0x08004c85
 8004c50:	08004c75 	.word	0x08004c75
 8004c54:	08004c85 	.word	0x08004c85
 8004c58:	08004c7d 	.word	0x08004c7d
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	4a0e      	ldr	r2, [pc, #56]	; (8004c98 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8004c60:	601a      	str	r2, [r3, #0]
      break;
 8004c62:	e013      	b.n	8004c8c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	4a0d      	ldr	r2, [pc, #52]	; (8004c9c <LSM6DSL_GYRO_GetSensitivity+0x94>)
 8004c68:	601a      	str	r2, [r3, #0]
      break;
 8004c6a:	e00f      	b.n	8004c8c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	4a0c      	ldr	r2, [pc, #48]	; (8004ca0 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 8004c70:	601a      	str	r2, [r3, #0]
      break;
 8004c72:	e00b      	b.n	8004c8c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	4a0b      	ldr	r2, [pc, #44]	; (8004ca4 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 8004c78:	601a      	str	r2, [r3, #0]
      break;
 8004c7a:	e007      	b.n	8004c8c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	4a0a      	ldr	r2, [pc, #40]	; (8004ca8 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8004c80:	601a      	str	r2, [r3, #0]
      break;
 8004c82:	e003      	b.n	8004c8c <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8004c84:	f04f 33ff 	mov.w	r3, #4294967295
 8004c88:	60fb      	str	r3, [r7, #12]
      break;
 8004c8a:	bf00      	nop
  }

  return ret;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	408c0000 	.word	0x408c0000
 8004c9c:	410c0000 	.word	0x410c0000
 8004ca0:	418c0000 	.word	0x418c0000
 8004ca4:	420c0000 	.word	0x420c0000
 8004ca8:	428c0000 	.word	0x428c0000

08004cac <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	331c      	adds	r3, #28
 8004cbe:	f107 020b 	add.w	r2, r7, #11
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 fd91 	bl	80057ec <lsm6dsl_gy_data_rate_get>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8004cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd4:	e04e      	b.n	8004d74 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004cd6:	7afb      	ldrb	r3, [r7, #11]
 8004cd8:	2b0a      	cmp	r3, #10
 8004cda:	d846      	bhi.n	8004d6a <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 8004cdc:	a201      	add	r2, pc, #4	; (adr r2, 8004ce4 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 8004cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce2:	bf00      	nop
 8004ce4:	08004d11 	.word	0x08004d11
 8004ce8:	08004d1b 	.word	0x08004d1b
 8004cec:	08004d23 	.word	0x08004d23
 8004cf0:	08004d2b 	.word	0x08004d2b
 8004cf4:	08004d33 	.word	0x08004d33
 8004cf8:	08004d3b 	.word	0x08004d3b
 8004cfc:	08004d43 	.word	0x08004d43
 8004d00:	08004d4b 	.word	0x08004d4b
 8004d04:	08004d53 	.word	0x08004d53
 8004d08:	08004d5b 	.word	0x08004d5b
 8004d0c:	08004d63 	.word	0x08004d63
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	f04f 0200 	mov.w	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]
      break;
 8004d18:	e02b      	b.n	8004d72 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	4a17      	ldr	r2, [pc, #92]	; (8004d7c <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 8004d1e:	601a      	str	r2, [r3, #0]
      break;
 8004d20:	e027      	b.n	8004d72 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	4a16      	ldr	r2, [pc, #88]	; (8004d80 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 8004d26:	601a      	str	r2, [r3, #0]
      break;
 8004d28:	e023      	b.n	8004d72 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	4a15      	ldr	r2, [pc, #84]	; (8004d84 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 8004d2e:	601a      	str	r2, [r3, #0]
      break;
 8004d30:	e01f      	b.n	8004d72 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	4a14      	ldr	r2, [pc, #80]	; (8004d88 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 8004d36:	601a      	str	r2, [r3, #0]
      break;
 8004d38:	e01b      	b.n	8004d72 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	4a13      	ldr	r2, [pc, #76]	; (8004d8c <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 8004d3e:	601a      	str	r2, [r3, #0]
      break;
 8004d40:	e017      	b.n	8004d72 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	4a12      	ldr	r2, [pc, #72]	; (8004d90 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 8004d46:	601a      	str	r2, [r3, #0]
      break;
 8004d48:	e013      	b.n	8004d72 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	4a11      	ldr	r2, [pc, #68]	; (8004d94 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 8004d4e:	601a      	str	r2, [r3, #0]
      break;
 8004d50:	e00f      	b.n	8004d72 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	4a10      	ldr	r2, [pc, #64]	; (8004d98 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 8004d56:	601a      	str	r2, [r3, #0]
      break;
 8004d58:	e00b      	b.n	8004d72 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	4a0f      	ldr	r2, [pc, #60]	; (8004d9c <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 8004d5e:	601a      	str	r2, [r3, #0]
      break;
 8004d60:	e007      	b.n	8004d72 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	4a0e      	ldr	r2, [pc, #56]	; (8004da0 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 8004d66:	601a      	str	r2, [r3, #0]
      break;
 8004d68:	e003      	b.n	8004d72 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 8004d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d6e:	60fb      	str	r3, [r7, #12]
      break;
 8004d70:	bf00      	nop
  }

  return ret;
 8004d72:	68fb      	ldr	r3, [r7, #12]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	41480000 	.word	0x41480000
 8004d80:	41d00000 	.word	0x41d00000
 8004d84:	42500000 	.word	0x42500000
 8004d88:	42d00000 	.word	0x42d00000
 8004d8c:	43500000 	.word	0x43500000
 8004d90:	43d00000 	.word	0x43d00000
 8004d94:	44504000 	.word	0x44504000
 8004d98:	44cf8000 	.word	0x44cf8000
 8004d9c:	45502000 	.word	0x45502000
 8004da0:	45d02000 	.word	0x45d02000

08004da4 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d106      	bne.n	8004dc8 <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004dba:	ed97 0a00 	vldr	s0, [r7]
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fa26 	bl	8005210 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	e005      	b.n	8004dd4 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004dc8:	ed97 0a00 	vldr	s0, [r7]
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 faab 	bl	8005328 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 8004dd2:	4603      	mov	r3, r0
  }
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	331c      	adds	r3, #28
 8004dee:	f107 020b 	add.w	r2, r7, #11
 8004df2:	4611      	mov	r1, r2
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 fc91 	bl	800571c <lsm6dsl_gy_full_scale_get>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d002      	beq.n	8004e06 <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8004e00:	f04f 33ff 	mov.w	r3, #4294967295
 8004e04:	e030      	b.n	8004e68 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8004e06:	7afb      	ldrb	r3, [r7, #11]
 8004e08:	2b06      	cmp	r3, #6
 8004e0a:	d828      	bhi.n	8004e5e <LSM6DSL_GYRO_GetFullScale+0x82>
 8004e0c:	a201      	add	r2, pc, #4	; (adr r2, 8004e14 <LSM6DSL_GYRO_GetFullScale+0x38>)
 8004e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e12:	bf00      	nop
 8004e14:	08004e39 	.word	0x08004e39
 8004e18:	08004e31 	.word	0x08004e31
 8004e1c:	08004e41 	.word	0x08004e41
 8004e20:	08004e5f 	.word	0x08004e5f
 8004e24:	08004e4b 	.word	0x08004e4b
 8004e28:	08004e5f 	.word	0x08004e5f
 8004e2c:	08004e55 	.word	0x08004e55
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	227d      	movs	r2, #125	; 0x7d
 8004e34:	601a      	str	r2, [r3, #0]
      break;
 8004e36:	e016      	b.n	8004e66 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	22fa      	movs	r2, #250	; 0xfa
 8004e3c:	601a      	str	r2, [r3, #0]
      break;
 8004e3e:	e012      	b.n	8004e66 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004e46:	601a      	str	r2, [r3, #0]
      break;
 8004e48:	e00d      	b.n	8004e66 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e50:	601a      	str	r2, [r3, #0]
      break;
 8004e52:	e008      	b.n	8004e66 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004e5a:	601a      	str	r2, [r3, #0]
      break;
 8004e5c:	e003      	b.n	8004e66 <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 8004e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e62:	60fb      	str	r3, [r7, #12]
      break;
 8004e64:	bf00      	nop
  }

  return ret;
 8004e66:	68fb      	ldr	r3, [r7, #12]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b7d      	cmp	r3, #125	; 0x7d
 8004e7e:	dd12      	ble.n	8004ea6 <LSM6DSL_GYRO_SetFullScale+0x36>
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	2bfa      	cmp	r3, #250	; 0xfa
 8004e84:	dd0d      	ble.n	8004ea2 <LSM6DSL_GYRO_SetFullScale+0x32>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004e8c:	dd07      	ble.n	8004e9e <LSM6DSL_GYRO_SetFullScale+0x2e>
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e94:	dc01      	bgt.n	8004e9a <LSM6DSL_GYRO_SetFullScale+0x2a>
 8004e96:	2304      	movs	r3, #4
 8004e98:	e006      	b.n	8004ea8 <LSM6DSL_GYRO_SetFullScale+0x38>
 8004e9a:	2306      	movs	r3, #6
 8004e9c:	e004      	b.n	8004ea8 <LSM6DSL_GYRO_SetFullScale+0x38>
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	e002      	b.n	8004ea8 <LSM6DSL_GYRO_SetFullScale+0x38>
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	e000      	b.n	8004ea8 <LSM6DSL_GYRO_SetFullScale+0x38>
 8004ea6:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 8004ea8:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	331c      	adds	r3, #28
 8004eae:	7bfa      	ldrb	r2, [r7, #15]
 8004eb0:	4611      	mov	r1, r2
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 fc0c 	bl	80056d0 <lsm6dsl_gy_full_scale_set>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d002      	beq.n	8004ec4 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 8004ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8004ec2:	e000      	b.n	8004ec6 <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b084      	sub	sp, #16
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
 8004ed6:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	331c      	adds	r3, #28
 8004edc:	f107 0208 	add.w	r2, r7, #8
 8004ee0:	4611      	mov	r1, r2
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 fd0a 	bl	80058fc <lsm6dsl_angular_rate_raw_get>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d002      	beq.n	8004ef4 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8004eee:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef2:	e00c      	b.n	8004f0e <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004ef4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004efc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004f04:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b086      	sub	sp, #24
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
 8004f1e:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	331c      	adds	r3, #28
 8004f24:	f107 0210 	add.w	r2, r7, #16
 8004f28:	4611      	mov	r1, r2
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 fce6 	bl	80058fc <lsm6dsl_angular_rate_raw_get>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d002      	beq.n	8004f3c <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 8004f36:	f04f 33ff 	mov.w	r3, #4294967295
 8004f3a:	e03c      	b.n	8004fb6 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004f3c:	f107 030c 	add.w	r3, r7, #12
 8004f40:	4619      	mov	r1, r3
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7ff fe60 	bl	8004c08 <LSM6DSL_GYRO_GetSensitivity>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d002      	beq.n	8004f54 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 8004f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f52:	e030      	b.n	8004fb6 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004f54:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004f58:	ee07 3a90 	vmov	s15, r3
 8004f5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f60:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f6c:	ee17 2a90 	vmov	r2, s15
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004f74:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004f78:	ee07 3a90 	vmov	s15, r3
 8004f7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f80:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f8c:	ee17 2a90 	vmov	r2, s15
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004f94:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004f98:	ee07 3a90 	vmov	s15, r3
 8004f9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fa0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fac:	ee17 2a90 	vmov	r2, s15
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3718      	adds	r7, #24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b082      	sub	sp, #8
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	70fb      	strb	r3, [r7, #3]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f103 001c 	add.w	r0, r3, #28
 8004fd4:	1cba      	adds	r2, r7, #2
 8004fd6:	78f9      	ldrb	r1, [r7, #3]
 8004fd8:	2301      	movs	r3, #1
 8004fda:	f000 fa75 	bl	80054c8 <lsm6dsl_write_reg>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8004fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8004fe8:	e000      	b.n	8004fec <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8005000:	edd7 7a00 	vldr	s15, [r7]
 8005004:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005008:	eef4 7ac7 	vcmpe.f32	s15, s14
 800500c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005010:	d801      	bhi.n	8005016 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8005012:	2301      	movs	r3, #1
 8005014:	e058      	b.n	80050c8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005016:	edd7 7a00 	vldr	s15, [r7]
 800501a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800501e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005026:	d801      	bhi.n	800502c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8005028:	2302      	movs	r3, #2
 800502a:	e04d      	b.n	80050c8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800502c:	edd7 7a00 	vldr	s15, [r7]
 8005030:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80050f0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8005034:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800503c:	d801      	bhi.n	8005042 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800503e:	2303      	movs	r3, #3
 8005040:	e042      	b.n	80050c8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005042:	edd7 7a00 	vldr	s15, [r7]
 8005046:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80050f4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 800504a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800504e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005052:	d801      	bhi.n	8005058 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8005054:	2304      	movs	r3, #4
 8005056:	e037      	b.n	80050c8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005058:	edd7 7a00 	vldr	s15, [r7]
 800505c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80050f8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8005060:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005068:	d801      	bhi.n	800506e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800506a:	2305      	movs	r3, #5
 800506c:	e02c      	b.n	80050c8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800506e:	edd7 7a00 	vldr	s15, [r7]
 8005072:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80050fc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8005076:	eef4 7ac7 	vcmpe.f32	s15, s14
 800507a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800507e:	d801      	bhi.n	8005084 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005080:	2306      	movs	r3, #6
 8005082:	e021      	b.n	80050c8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005084:	edd7 7a00 	vldr	s15, [r7]
 8005088:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005100 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 800508c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005094:	d801      	bhi.n	800509a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8005096:	2307      	movs	r3, #7
 8005098:	e016      	b.n	80050c8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800509a:	edd7 7a00 	vldr	s15, [r7]
 800509e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005104 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 80050a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050aa:	d801      	bhi.n	80050b0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80050ac:	2308      	movs	r3, #8
 80050ae:	e00b      	b.n	80050c8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80050b0:	edd7 7a00 	vldr	s15, [r7]
 80050b4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005108 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 80050b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c0:	d801      	bhi.n	80050c6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80050c2:	2309      	movs	r3, #9
 80050c4:	e000      	b.n	80050c8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80050c6:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80050c8:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	331c      	adds	r3, #28
 80050ce:	7bfa      	ldrb	r2, [r7, #15]
 80050d0:	4611      	mov	r1, r2
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 fa6e 	bl	80055b4 <lsm6dsl_xl_data_rate_set>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d002      	beq.n	80050e4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 80050de:	f04f 33ff 	mov.w	r3, #4294967295
 80050e2:	e000      	b.n	80050e6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	42500000 	.word	0x42500000
 80050f4:	42d00000 	.word	0x42d00000
 80050f8:	43500000 	.word	0x43500000
 80050fc:	43d00000 	.word	0x43d00000
 8005100:	44504000 	.word	0x44504000
 8005104:	44cf8000 	.word	0x44cf8000
 8005108:	45502000 	.word	0x45502000

0800510c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8005118:	edd7 7a00 	vldr	s15, [r7]
 800511c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005120:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005128:	d801      	bhi.n	800512e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 800512a:	2301      	movs	r3, #1
 800512c:	e058      	b.n	80051e0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800512e:	edd7 7a00 	vldr	s15, [r7]
 8005132:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005136:	eef4 7ac7 	vcmpe.f32	s15, s14
 800513a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800513e:	d801      	bhi.n	8005144 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8005140:	2302      	movs	r3, #2
 8005142:	e04d      	b.n	80051e0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005144:	edd7 7a00 	vldr	s15, [r7]
 8005148:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80051f4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 800514c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005154:	d801      	bhi.n	800515a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8005156:	2303      	movs	r3, #3
 8005158:	e042      	b.n	80051e0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800515a:	edd7 7a00 	vldr	s15, [r7]
 800515e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80051f8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8005162:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800516a:	d801      	bhi.n	8005170 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 800516c:	2304      	movs	r3, #4
 800516e:	e037      	b.n	80051e0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005170:	edd7 7a00 	vldr	s15, [r7]
 8005174:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80051fc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8005178:	eef4 7ac7 	vcmpe.f32	s15, s14
 800517c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005180:	d801      	bhi.n	8005186 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8005182:	2305      	movs	r3, #5
 8005184:	e02c      	b.n	80051e0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005186:	edd7 7a00 	vldr	s15, [r7]
 800518a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005200 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 800518e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005196:	d801      	bhi.n	800519c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005198:	2306      	movs	r3, #6
 800519a:	e021      	b.n	80051e0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800519c:	edd7 7a00 	vldr	s15, [r7]
 80051a0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005204 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80051a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ac:	d801      	bhi.n	80051b2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80051ae:	2307      	movs	r3, #7
 80051b0:	e016      	b.n	80051e0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80051b2:	edd7 7a00 	vldr	s15, [r7]
 80051b6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005208 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80051ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c2:	d801      	bhi.n	80051c8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80051c4:	2308      	movs	r3, #8
 80051c6:	e00b      	b.n	80051e0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80051c8:	edd7 7a00 	vldr	s15, [r7]
 80051cc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800520c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 80051d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d8:	d801      	bhi.n	80051de <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80051da:	2309      	movs	r3, #9
 80051dc:	e000      	b.n	80051e0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80051de:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr
 80051f4:	42500000 	.word	0x42500000
 80051f8:	42d00000 	.word	0x42d00000
 80051fc:	43500000 	.word	0x43500000
 8005200:	43d00000 	.word	0x43d00000
 8005204:	44504000 	.word	0x44504000
 8005208:	44cf8000 	.word	0x44cf8000
 800520c:	45502000 	.word	0x45502000

08005210 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 800521c:	edd7 7a00 	vldr	s15, [r7]
 8005220:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005224:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800522c:	d801      	bhi.n	8005232 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800522e:	2301      	movs	r3, #1
 8005230:	e058      	b.n	80052e4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005232:	edd7 7a00 	vldr	s15, [r7]
 8005236:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800523a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800523e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005242:	d801      	bhi.n	8005248 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8005244:	2302      	movs	r3, #2
 8005246:	e04d      	b.n	80052e4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005248:	edd7 7a00 	vldr	s15, [r7]
 800524c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800530c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8005250:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005258:	d801      	bhi.n	800525e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800525a:	2303      	movs	r3, #3
 800525c:	e042      	b.n	80052e4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800525e:	edd7 7a00 	vldr	s15, [r7]
 8005262:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005310 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8005266:	eef4 7ac7 	vcmpe.f32	s15, s14
 800526a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800526e:	d801      	bhi.n	8005274 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8005270:	2304      	movs	r3, #4
 8005272:	e037      	b.n	80052e4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005274:	edd7 7a00 	vldr	s15, [r7]
 8005278:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005314 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 800527c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005284:	d801      	bhi.n	800528a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8005286:	2305      	movs	r3, #5
 8005288:	e02c      	b.n	80052e4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800528a:	edd7 7a00 	vldr	s15, [r7]
 800528e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005318 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8005292:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800529a:	d801      	bhi.n	80052a0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 800529c:	2306      	movs	r3, #6
 800529e:	e021      	b.n	80052e4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80052a0:	edd7 7a00 	vldr	s15, [r7]
 80052a4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800531c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80052a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052b0:	d801      	bhi.n	80052b6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80052b2:	2307      	movs	r3, #7
 80052b4:	e016      	b.n	80052e4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80052b6:	edd7 7a00 	vldr	s15, [r7]
 80052ba:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005320 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80052be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052c6:	d801      	bhi.n	80052cc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80052c8:	2308      	movs	r3, #8
 80052ca:	e00b      	b.n	80052e4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80052cc:	edd7 7a00 	vldr	s15, [r7]
 80052d0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005324 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80052d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052dc:	d801      	bhi.n	80052e2 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80052de:	2309      	movs	r3, #9
 80052e0:	e000      	b.n	80052e4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80052e2:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 80052e4:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	331c      	adds	r3, #28
 80052ea:	7bfa      	ldrb	r2, [r7, #15]
 80052ec:	4611      	mov	r1, r2
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 fa56 	bl	80057a0 <lsm6dsl_gy_data_rate_set>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d002      	beq.n	8005300 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 80052fa:	f04f 33ff 	mov.w	r3, #4294967295
 80052fe:	e000      	b.n	8005302 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	42500000 	.word	0x42500000
 8005310:	42d00000 	.word	0x42d00000
 8005314:	43500000 	.word	0x43500000
 8005318:	43d00000 	.word	0x43d00000
 800531c:	44504000 	.word	0x44504000
 8005320:	44cf8000 	.word	0x44cf8000
 8005324:	45502000 	.word	0x45502000

08005328 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8005334:	edd7 7a00 	vldr	s15, [r7]
 8005338:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800533c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005344:	d801      	bhi.n	800534a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8005346:	2301      	movs	r3, #1
 8005348:	e058      	b.n	80053fc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800534a:	edd7 7a00 	vldr	s15, [r7]
 800534e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005352:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800535a:	d801      	bhi.n	8005360 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 800535c:	2302      	movs	r3, #2
 800535e:	e04d      	b.n	80053fc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005360:	edd7 7a00 	vldr	s15, [r7]
 8005364:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005410 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8005368:	eef4 7ac7 	vcmpe.f32	s15, s14
 800536c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005370:	d801      	bhi.n	8005376 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8005372:	2303      	movs	r3, #3
 8005374:	e042      	b.n	80053fc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005376:	edd7 7a00 	vldr	s15, [r7]
 800537a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005414 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 800537e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005386:	d801      	bhi.n	800538c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8005388:	2304      	movs	r3, #4
 800538a:	e037      	b.n	80053fc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800538c:	edd7 7a00 	vldr	s15, [r7]
 8005390:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005418 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8005394:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800539c:	d801      	bhi.n	80053a2 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800539e:	2305      	movs	r3, #5
 80053a0:	e02c      	b.n	80053fc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80053a2:	edd7 7a00 	vldr	s15, [r7]
 80053a6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800541c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80053aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053b2:	d801      	bhi.n	80053b8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80053b4:	2306      	movs	r3, #6
 80053b6:	e021      	b.n	80053fc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80053b8:	edd7 7a00 	vldr	s15, [r7]
 80053bc:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005420 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80053c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053c8:	d801      	bhi.n	80053ce <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80053ca:	2307      	movs	r3, #7
 80053cc:	e016      	b.n	80053fc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80053ce:	edd7 7a00 	vldr	s15, [r7]
 80053d2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005424 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80053d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053de:	d801      	bhi.n	80053e4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80053e0:	2308      	movs	r3, #8
 80053e2:	e00b      	b.n	80053fc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80053e4:	edd7 7a00 	vldr	s15, [r7]
 80053e8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005428 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80053ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053f4:	d801      	bhi.n	80053fa <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80053f6:	2309      	movs	r3, #9
 80053f8:	e000      	b.n	80053fc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80053fa:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	42500000 	.word	0x42500000
 8005414:	42d00000 	.word	0x42d00000
 8005418:	43500000 	.word	0x43500000
 800541c:	43d00000 	.word	0x43d00000
 8005420:	44504000 	.word	0x44504000
 8005424:	44cf8000 	.word	0x44cf8000
 8005428:	45502000 	.word	0x45502000

0800542c <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800542c:	b590      	push	{r4, r7, lr}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	607a      	str	r2, [r7, #4]
 8005436:	461a      	mov	r2, r3
 8005438:	460b      	mov	r3, r1
 800543a:	72fb      	strb	r3, [r7, #11]
 800543c:	4613      	mov	r3, r2
 800543e:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	695c      	ldr	r4, [r3, #20]
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	7b1b      	ldrb	r3, [r3, #12]
 800544c:	b298      	uxth	r0, r3
 800544e:	7afb      	ldrb	r3, [r7, #11]
 8005450:	b299      	uxth	r1, r3
 8005452:	893b      	ldrh	r3, [r7, #8]
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	47a0      	blx	r4
 8005458:	4603      	mov	r3, r0
}
 800545a:	4618      	mov	r0, r3
 800545c:	371c      	adds	r7, #28
 800545e:	46bd      	mov	sp, r7
 8005460:	bd90      	pop	{r4, r7, pc}

08005462 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005462:	b590      	push	{r4, r7, lr}
 8005464:	b087      	sub	sp, #28
 8005466:	af00      	add	r7, sp, #0
 8005468:	60f8      	str	r0, [r7, #12]
 800546a:	607a      	str	r2, [r7, #4]
 800546c:	461a      	mov	r2, r3
 800546e:	460b      	mov	r3, r1
 8005470:	72fb      	strb	r3, [r7, #11]
 8005472:	4613      	mov	r3, r2
 8005474:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	691c      	ldr	r4, [r3, #16]
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	7b1b      	ldrb	r3, [r3, #12]
 8005482:	b298      	uxth	r0, r3
 8005484:	7afb      	ldrb	r3, [r7, #11]
 8005486:	b299      	uxth	r1, r3
 8005488:	893b      	ldrh	r3, [r7, #8]
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	47a0      	blx	r4
 800548e:	4603      	mov	r3, r0
}
 8005490:	4618      	mov	r0, r3
 8005492:	371c      	adds	r7, #28
 8005494:	46bd      	mov	sp, r7
 8005496:	bd90      	pop	{r4, r7, pc}

08005498 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005498:	b590      	push	{r4, r7, lr}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	607a      	str	r2, [r7, #4]
 80054a2:	461a      	mov	r2, r3
 80054a4:	460b      	mov	r3, r1
 80054a6:	72fb      	strb	r3, [r7, #11]
 80054a8:	4613      	mov	r3, r2
 80054aa:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	685c      	ldr	r4, [r3, #4]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6898      	ldr	r0, [r3, #8]
 80054b4:	893b      	ldrh	r3, [r7, #8]
 80054b6:	7af9      	ldrb	r1, [r7, #11]
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	47a0      	blx	r4
 80054bc:	6178      	str	r0, [r7, #20]
  return ret;
 80054be:	697b      	ldr	r3, [r7, #20]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	371c      	adds	r7, #28
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd90      	pop	{r4, r7, pc}

080054c8 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80054c8:	b590      	push	{r4, r7, lr}
 80054ca:	b087      	sub	sp, #28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	607a      	str	r2, [r7, #4]
 80054d2:	461a      	mov	r2, r3
 80054d4:	460b      	mov	r3, r1
 80054d6:	72fb      	strb	r3, [r7, #11]
 80054d8:	4613      	mov	r3, r2
 80054da:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681c      	ldr	r4, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6898      	ldr	r0, [r3, #8]
 80054e4:	893b      	ldrh	r3, [r7, #8]
 80054e6:	7af9      	ldrb	r1, [r7, #11]
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	47a0      	blx	r4
 80054ec:	6178      	str	r0, [r7, #20]
  return ret;
 80054ee:	697b      	ldr	r3, [r7, #20]
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	371c      	adds	r7, #28
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd90      	pop	{r4, r7, pc}

080054f8 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	460b      	mov	r3, r1
 8005502:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8005504:	f107 0208 	add.w	r2, r7, #8
 8005508:	2301      	movs	r3, #1
 800550a:	2110      	movs	r1, #16
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7ff ffc3 	bl	8005498 <lsm6dsl_read_reg>
 8005512:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10f      	bne.n	800553a <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 800551a:	78fb      	ldrb	r3, [r7, #3]
 800551c:	f003 0303 	and.w	r3, r3, #3
 8005520:	b2da      	uxtb	r2, r3
 8005522:	7a3b      	ldrb	r3, [r7, #8]
 8005524:	f362 0383 	bfi	r3, r2, #2, #2
 8005528:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800552a:	f107 0208 	add.w	r2, r7, #8
 800552e:	2301      	movs	r3, #1
 8005530:	2110      	movs	r1, #16
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7ff ffc8 	bl	80054c8 <lsm6dsl_write_reg>
 8005538:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800553a:	68fb      	ldr	r3, [r7, #12]
}
 800553c:	4618      	mov	r0, r3
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800554e:	f107 0208 	add.w	r2, r7, #8
 8005552:	2301      	movs	r3, #1
 8005554:	2110      	movs	r1, #16
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7ff ff9e 	bl	8005498 <lsm6dsl_read_reg>
 800555c:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.fs_xl) {
 800555e:	7a3b      	ldrb	r3, [r7, #8]
 8005560:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b03      	cmp	r3, #3
 8005568:	d81a      	bhi.n	80055a0 <lsm6dsl_xl_full_scale_get+0x5c>
 800556a:	a201      	add	r2, pc, #4	; (adr r2, 8005570 <lsm6dsl_xl_full_scale_get+0x2c>)
 800556c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005570:	08005581 	.word	0x08005581
 8005574:	08005589 	.word	0x08005589
 8005578:	08005591 	.word	0x08005591
 800557c:	08005599 	.word	0x08005599
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	2200      	movs	r2, #0
 8005584:	701a      	strb	r2, [r3, #0]
      break;
 8005586:	e00f      	b.n	80055a8 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	2201      	movs	r2, #1
 800558c:	701a      	strb	r2, [r3, #0]
      break;
 800558e:	e00b      	b.n	80055a8 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	2202      	movs	r2, #2
 8005594:	701a      	strb	r2, [r3, #0]
      break;
 8005596:	e007      	b.n	80055a8 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2203      	movs	r2, #3
 800559c:	701a      	strb	r2, [r3, #0]
      break;
 800559e:	e003      	b.n	80055a8 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	2204      	movs	r2, #4
 80055a4:	701a      	strb	r2, [r3, #0]
      break;
 80055a6:	bf00      	nop
  }

  return ret;
 80055a8:	68fb      	ldr	r3, [r7, #12]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop

080055b4 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	460b      	mov	r3, r1
 80055be:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80055c0:	f107 0208 	add.w	r2, r7, #8
 80055c4:	2301      	movs	r3, #1
 80055c6:	2110      	movs	r1, #16
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7ff ff65 	bl	8005498 <lsm6dsl_read_reg>
 80055ce:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10f      	bne.n	80055f6 <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 80055d6:	78fb      	ldrb	r3, [r7, #3]
 80055d8:	f003 030f 	and.w	r3, r3, #15
 80055dc:	b2da      	uxtb	r2, r3
 80055de:	7a3b      	ldrb	r3, [r7, #8]
 80055e0:	f362 1307 	bfi	r3, r2, #4, #4
 80055e4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80055e6:	f107 0208 	add.w	r2, r7, #8
 80055ea:	2301      	movs	r3, #1
 80055ec:	2110      	movs	r1, #16
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7ff ff6a 	bl	80054c8 <lsm6dsl_write_reg>
 80055f4:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80055f6:	68fb      	ldr	r3, [r7, #12]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800560a:	f107 0208 	add.w	r2, r7, #8
 800560e:	2301      	movs	r3, #1
 8005610:	2110      	movs	r1, #16
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7ff ff40 	bl	8005498 <lsm6dsl_read_reg>
 8005618:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.odr_xl) {
 800561a:	7a3b      	ldrb	r3, [r7, #8]
 800561c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b0b      	cmp	r3, #11
 8005624:	d84a      	bhi.n	80056bc <lsm6dsl_xl_data_rate_get+0xbc>
 8005626:	a201      	add	r2, pc, #4	; (adr r2, 800562c <lsm6dsl_xl_data_rate_get+0x2c>)
 8005628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562c:	0800565d 	.word	0x0800565d
 8005630:	08005665 	.word	0x08005665
 8005634:	0800566d 	.word	0x0800566d
 8005638:	08005675 	.word	0x08005675
 800563c:	0800567d 	.word	0x0800567d
 8005640:	08005685 	.word	0x08005685
 8005644:	0800568d 	.word	0x0800568d
 8005648:	08005695 	.word	0x08005695
 800564c:	0800569d 	.word	0x0800569d
 8005650:	080056a5 	.word	0x080056a5
 8005654:	080056ad 	.word	0x080056ad
 8005658:	080056b5 	.word	0x080056b5
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	2200      	movs	r2, #0
 8005660:	701a      	strb	r2, [r3, #0]
      break;
 8005662:	e02f      	b.n	80056c4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2201      	movs	r2, #1
 8005668:	701a      	strb	r2, [r3, #0]
      break;
 800566a:	e02b      	b.n	80056c4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	2202      	movs	r2, #2
 8005670:	701a      	strb	r2, [r3, #0]
      break;
 8005672:	e027      	b.n	80056c4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	2203      	movs	r2, #3
 8005678:	701a      	strb	r2, [r3, #0]
      break;
 800567a:	e023      	b.n	80056c4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	2204      	movs	r2, #4
 8005680:	701a      	strb	r2, [r3, #0]
      break;
 8005682:	e01f      	b.n	80056c4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	2205      	movs	r2, #5
 8005688:	701a      	strb	r2, [r3, #0]
      break;
 800568a:	e01b      	b.n	80056c4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	2206      	movs	r2, #6
 8005690:	701a      	strb	r2, [r3, #0]
      break;
 8005692:	e017      	b.n	80056c4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2207      	movs	r2, #7
 8005698:	701a      	strb	r2, [r3, #0]
      break;
 800569a:	e013      	b.n	80056c4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	2208      	movs	r2, #8
 80056a0:	701a      	strb	r2, [r3, #0]
      break;
 80056a2:	e00f      	b.n	80056c4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2209      	movs	r2, #9
 80056a8:	701a      	strb	r2, [r3, #0]
      break;
 80056aa:	e00b      	b.n	80056c4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	220a      	movs	r2, #10
 80056b0:	701a      	strb	r2, [r3, #0]
      break;
 80056b2:	e007      	b.n	80056c4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	220b      	movs	r2, #11
 80056b8:	701a      	strb	r2, [r3, #0]
      break;
 80056ba:	e003      	b.n	80056c4 <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	220c      	movs	r2, #12
 80056c0:	701a      	strb	r2, [r3, #0]
      break;
 80056c2:	bf00      	nop
  }

  return ret;
 80056c4:	68fb      	ldr	r3, [r7, #12]
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop

080056d0 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	460b      	mov	r3, r1
 80056da:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80056dc:	f107 0208 	add.w	r2, r7, #8
 80056e0:	2301      	movs	r3, #1
 80056e2:	2111      	movs	r1, #17
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7ff fed7 	bl	8005498 <lsm6dsl_read_reg>
 80056ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10f      	bne.n	8005712 <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 80056f2:	78fb      	ldrb	r3, [r7, #3]
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	7a3b      	ldrb	r3, [r7, #8]
 80056fc:	f362 0343 	bfi	r3, r2, #1, #3
 8005700:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005702:	f107 0208 	add.w	r2, r7, #8
 8005706:	2301      	movs	r3, #1
 8005708:	2111      	movs	r1, #17
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7ff fedc 	bl	80054c8 <lsm6dsl_write_reg>
 8005710:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005712:	68fb      	ldr	r3, [r7, #12]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005726:	f107 0208 	add.w	r2, r7, #8
 800572a:	2301      	movs	r3, #1
 800572c:	2111      	movs	r1, #17
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7ff feb2 	bl	8005498 <lsm6dsl_read_reg>
 8005734:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g) {
 8005736:	7a3b      	ldrb	r3, [r7, #8]
 8005738:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b06      	cmp	r3, #6
 8005740:	d824      	bhi.n	800578c <lsm6dsl_gy_full_scale_get+0x70>
 8005742:	a201      	add	r2, pc, #4	; (adr r2, 8005748 <lsm6dsl_gy_full_scale_get+0x2c>)
 8005744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005748:	08005765 	.word	0x08005765
 800574c:	0800576d 	.word	0x0800576d
 8005750:	08005775 	.word	0x08005775
 8005754:	0800578d 	.word	0x0800578d
 8005758:	0800577d 	.word	0x0800577d
 800575c:	0800578d 	.word	0x0800578d
 8005760:	08005785 	.word	0x08005785
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	2200      	movs	r2, #0
 8005768:	701a      	strb	r2, [r3, #0]
      break;
 800576a:	e013      	b.n	8005794 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	2201      	movs	r2, #1
 8005770:	701a      	strb	r2, [r3, #0]
      break;
 8005772:	e00f      	b.n	8005794 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	2202      	movs	r2, #2
 8005778:	701a      	strb	r2, [r3, #0]
      break;
 800577a:	e00b      	b.n	8005794 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	2204      	movs	r2, #4
 8005780:	701a      	strb	r2, [r3, #0]
      break;
 8005782:	e007      	b.n	8005794 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	2206      	movs	r2, #6
 8005788:	701a      	strb	r2, [r3, #0]
      break;
 800578a:	e003      	b.n	8005794 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	2207      	movs	r2, #7
 8005790:	701a      	strb	r2, [r3, #0]
      break;
 8005792:	bf00      	nop
  }

  return ret;
 8005794:	68fb      	ldr	r3, [r7, #12]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop

080057a0 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	460b      	mov	r3, r1
 80057aa:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80057ac:	f107 0208 	add.w	r2, r7, #8
 80057b0:	2301      	movs	r3, #1
 80057b2:	2111      	movs	r1, #17
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f7ff fe6f 	bl	8005498 <lsm6dsl_read_reg>
 80057ba:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10f      	bne.n	80057e2 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 80057c2:	78fb      	ldrb	r3, [r7, #3]
 80057c4:	f003 030f 	and.w	r3, r3, #15
 80057c8:	b2da      	uxtb	r2, r3
 80057ca:	7a3b      	ldrb	r3, [r7, #8]
 80057cc:	f362 1307 	bfi	r3, r2, #4, #4
 80057d0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80057d2:	f107 0208 	add.w	r2, r7, #8
 80057d6:	2301      	movs	r3, #1
 80057d8:	2111      	movs	r1, #17
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7ff fe74 	bl	80054c8 <lsm6dsl_write_reg>
 80057e0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80057e2:	68fb      	ldr	r3, [r7, #12]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80057f6:	f107 0208 	add.w	r2, r7, #8
 80057fa:	2301      	movs	r3, #1
 80057fc:	2111      	movs	r1, #17
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7ff fe4a 	bl	8005498 <lsm6dsl_read_reg>
 8005804:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g) {
 8005806:	7a3b      	ldrb	r3, [r7, #8]
 8005808:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b0a      	cmp	r3, #10
 8005810:	d844      	bhi.n	800589c <lsm6dsl_gy_data_rate_get+0xb0>
 8005812:	a201      	add	r2, pc, #4	; (adr r2, 8005818 <lsm6dsl_gy_data_rate_get+0x2c>)
 8005814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005818:	08005845 	.word	0x08005845
 800581c:	0800584d 	.word	0x0800584d
 8005820:	08005855 	.word	0x08005855
 8005824:	0800585d 	.word	0x0800585d
 8005828:	08005865 	.word	0x08005865
 800582c:	0800586d 	.word	0x0800586d
 8005830:	08005875 	.word	0x08005875
 8005834:	0800587d 	.word	0x0800587d
 8005838:	08005885 	.word	0x08005885
 800583c:	0800588d 	.word	0x0800588d
 8005840:	08005895 	.word	0x08005895
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	2200      	movs	r2, #0
 8005848:	701a      	strb	r2, [r3, #0]
      break;
 800584a:	e02b      	b.n	80058a4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	2201      	movs	r2, #1
 8005850:	701a      	strb	r2, [r3, #0]
      break;
 8005852:	e027      	b.n	80058a4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	2202      	movs	r2, #2
 8005858:	701a      	strb	r2, [r3, #0]
      break;
 800585a:	e023      	b.n	80058a4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	2203      	movs	r2, #3
 8005860:	701a      	strb	r2, [r3, #0]
      break;
 8005862:	e01f      	b.n	80058a4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	2204      	movs	r2, #4
 8005868:	701a      	strb	r2, [r3, #0]
      break;
 800586a:	e01b      	b.n	80058a4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	2205      	movs	r2, #5
 8005870:	701a      	strb	r2, [r3, #0]
      break;
 8005872:	e017      	b.n	80058a4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	2206      	movs	r2, #6
 8005878:	701a      	strb	r2, [r3, #0]
      break;
 800587a:	e013      	b.n	80058a4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2207      	movs	r2, #7
 8005880:	701a      	strb	r2, [r3, #0]
      break;
 8005882:	e00f      	b.n	80058a4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	2208      	movs	r2, #8
 8005888:	701a      	strb	r2, [r3, #0]
      break;
 800588a:	e00b      	b.n	80058a4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	2209      	movs	r2, #9
 8005890:	701a      	strb	r2, [r3, #0]
      break;
 8005892:	e007      	b.n	80058a4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	220a      	movs	r2, #10
 8005898:	701a      	strb	r2, [r3, #0]
      break;
 800589a:	e003      	b.n	80058a4 <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	220b      	movs	r2, #11
 80058a0:	701a      	strb	r2, [r3, #0]
      break;
 80058a2:	bf00      	nop
  }

  return ret;
 80058a4:	68fb      	ldr	r3, [r7, #12]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop

080058b0 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	460b      	mov	r3, r1
 80058ba:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80058bc:	f107 0208 	add.w	r2, r7, #8
 80058c0:	2301      	movs	r3, #1
 80058c2:	2112      	movs	r1, #18
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7ff fde7 	bl	8005498 <lsm6dsl_read_reg>
 80058ca:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10f      	bne.n	80058f2 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 80058d2:	78fb      	ldrb	r3, [r7, #3]
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	b2da      	uxtb	r2, r3
 80058da:	7a3b      	ldrb	r3, [r7, #8]
 80058dc:	f362 1386 	bfi	r3, r2, #6, #1
 80058e0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80058e2:	f107 0208 	add.w	r2, r7, #8
 80058e6:	2301      	movs	r3, #1
 80058e8:	2112      	movs	r1, #18
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7ff fdec 	bl	80054c8 <lsm6dsl_write_reg>
 80058f0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80058f2:	68fb      	ldr	r3, [r7, #12]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8005906:	f107 020c 	add.w	r2, r7, #12
 800590a:	2306      	movs	r3, #6
 800590c:	2122      	movs	r1, #34	; 0x22
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7ff fdc2 	bl	8005498 <lsm6dsl_read_reg>
 8005914:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005916:	7b7b      	ldrb	r3, [r7, #13]
 8005918:	b21a      	sxth	r2, r3
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005924:	b29b      	uxth	r3, r3
 8005926:	021b      	lsls	r3, r3, #8
 8005928:	b29a      	uxth	r2, r3
 800592a:	7b3b      	ldrb	r3, [r7, #12]
 800592c:	b29b      	uxth	r3, r3
 800592e:	4413      	add	r3, r2
 8005930:	b29b      	uxth	r3, r3
 8005932:	b21a      	sxth	r2, r3
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005938:	7bfa      	ldrb	r2, [r7, #15]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	3302      	adds	r3, #2
 800593e:	b212      	sxth	r2, r2
 8005940:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	3302      	adds	r3, #2
 8005946:	f9b3 3000 	ldrsh.w	r3, [r3]
 800594a:	b29b      	uxth	r3, r3
 800594c:	021b      	lsls	r3, r3, #8
 800594e:	b29a      	uxth	r2, r3
 8005950:	7bbb      	ldrb	r3, [r7, #14]
 8005952:	b29b      	uxth	r3, r3
 8005954:	4413      	add	r3, r2
 8005956:	b29a      	uxth	r2, r3
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	3302      	adds	r3, #2
 800595c:	b212      	sxth	r2, r2
 800595e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005960:	7c7a      	ldrb	r2, [r7, #17]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	3304      	adds	r3, #4
 8005966:	b212      	sxth	r2, r2
 8005968:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	3304      	adds	r3, #4
 800596e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005972:	b29b      	uxth	r3, r3
 8005974:	021b      	lsls	r3, r3, #8
 8005976:	b29a      	uxth	r2, r3
 8005978:	7c3b      	ldrb	r3, [r7, #16]
 800597a:	b29b      	uxth	r3, r3
 800597c:	4413      	add	r3, r2
 800597e:	b29a      	uxth	r2, r3
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	3304      	adds	r3, #4
 8005984:	b212      	sxth	r2, r2
 8005986:	801a      	strh	r2, [r3, #0]
  return ret;
 8005988:	697b      	ldr	r3, [r7, #20]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3718      	adds	r7, #24
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b086      	sub	sp, #24
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
 800599a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 800599c:	f107 020c 	add.w	r2, r7, #12
 80059a0:	2306      	movs	r3, #6
 80059a2:	2128      	movs	r1, #40	; 0x28
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f7ff fd77 	bl	8005498 <lsm6dsl_read_reg>
 80059aa:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80059ac:	7b7b      	ldrb	r3, [r7, #13]
 80059ae:	b21a      	sxth	r2, r3
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	021b      	lsls	r3, r3, #8
 80059be:	b29a      	uxth	r2, r3
 80059c0:	7b3b      	ldrb	r3, [r7, #12]
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	4413      	add	r3, r2
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	b21a      	sxth	r2, r3
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80059ce:	7bfa      	ldrb	r2, [r7, #15]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	3302      	adds	r3, #2
 80059d4:	b212      	sxth	r2, r2
 80059d6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	3302      	adds	r3, #2
 80059dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	021b      	lsls	r3, r3, #8
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	7bbb      	ldrb	r3, [r7, #14]
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	4413      	add	r3, r2
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	3302      	adds	r3, #2
 80059f2:	b212      	sxth	r2, r2
 80059f4:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80059f6:	7c7a      	ldrb	r2, [r7, #17]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	3304      	adds	r3, #4
 80059fc:	b212      	sxth	r2, r2
 80059fe:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	3304      	adds	r3, #4
 8005a04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	021b      	lsls	r3, r3, #8
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	7c3b      	ldrb	r3, [r7, #16]
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	4413      	add	r3, r2
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	3304      	adds	r3, #4
 8005a1a:	b212      	sxth	r2, r2
 8005a1c:	801a      	strh	r2, [r3, #0]
  return ret;
 8005a1e:	697b      	ldr	r3, [r7, #20]
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3718      	adds	r7, #24
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8005a32:	2301      	movs	r3, #1
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	210f      	movs	r1, #15
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7ff fd2d 	bl	8005498 <lsm6dsl_read_reg>
 8005a3e:	60f8      	str	r0, [r7, #12]
  return ret;
 8005a40:	68fb      	ldr	r3, [r7, #12]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b084      	sub	sp, #16
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
 8005a52:	460b      	mov	r3, r1
 8005a54:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005a56:	f107 0208 	add.w	r2, r7, #8
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	2112      	movs	r1, #18
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7ff fd1a 	bl	8005498 <lsm6dsl_read_reg>
 8005a64:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10f      	bne.n	8005a8c <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 8005a6c:	78fb      	ldrb	r3, [r7, #3]
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	b2da      	uxtb	r2, r3
 8005a74:	7a3b      	ldrb	r3, [r7, #8]
 8005a76:	f362 0382 	bfi	r3, r2, #2, #1
 8005a7a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005a7c:	f107 0208 	add.w	r2, r7, #8
 8005a80:	2301      	movs	r3, #1
 8005a82:	2112      	movs	r1, #18
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f7ff fd1f 	bl	80054c8 <lsm6dsl_write_reg>
 8005a8a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b084      	sub	sp, #16
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8005aa2:	f107 0208 	add.w	r2, r7, #8
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	210a      	movs	r1, #10
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7ff fcf4 	bl	8005498 <lsm6dsl_read_reg>
 8005ab0:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10f      	bne.n	8005ad8 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8005ab8:	78fb      	ldrb	r3, [r7, #3]
 8005aba:	f003 0307 	and.w	r3, r3, #7
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	7a3b      	ldrb	r3, [r7, #8]
 8005ac2:	f362 0302 	bfi	r3, r2, #0, #3
 8005ac6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8005ac8:	f107 0208 	add.w	r2, r7, #8
 8005acc:	2301      	movs	r3, #1
 8005ace:	210a      	movs	r1, #10
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f7ff fcf9 	bl	80054c8 <lsm6dsl_write_reg>
 8005ad6:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
	...

08005ae4 <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b08e      	sub	sp, #56	; 0x38
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005aee:	2300      	movs	r3, #0
 8005af0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8005af2:	2301      	movs	r3, #1
 8005af4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d06e      	beq.n	8005bde <IKS01A2_MOTION_SENSOR_Init+0xfa>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	f200 809d 	bhi.w	8005c42 <IKS01A2_MOTION_SENSOR_Init+0x15e>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d003      	beq.n	8005b16 <IKS01A2_MOTION_SENSOR_Init+0x32>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d032      	beq.n	8005b7a <IKS01A2_MOTION_SENSOR_Init+0x96>
 8005b14:	e095      	b.n	8005c42 <IKS01A2_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 8005b16:	6838      	ldr	r0, [r7, #0]
 8005b18:	f000 f9f0 	bl	8005efc <LSM6DSL_0_Probe>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d002      	beq.n	8005b28 <IKS01A2_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8005b22:	f04f 33ff 	mov.w	r3, #4294967295
 8005b26:	e0cc      	b.n	8005cc2 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005b28:	4a68      	ldr	r2, [pc, #416]	; (8005ccc <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	4967      	ldr	r1, [pc, #412]	; (8005cd0 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005b3a:	f107 010c 	add.w	r1, r7, #12
 8005b3e:	4610      	mov	r0, r2
 8005b40:	4798      	blx	r3
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d002      	beq.n	8005b4e <IKS01A2_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005b48:	f06f 0306 	mvn.w	r3, #6
 8005b4c:	e0b9      	b.n	8005cc2 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005b4e:	7b3b      	ldrb	r3, [r7, #12]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d103      	bne.n	8005b5c <IKS01A2_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8005b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b56:	f043 0302 	orr.w	r3, r3, #2
 8005b5a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005b5c:	7b7b      	ldrb	r3, [r7, #13]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d103      	bne.n	8005b6a <IKS01A2_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8005b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b64:	f043 0301 	orr.w	r3, r3, #1
 8005b68:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005b6a:	7bbb      	ldrb	r3, [r7, #14]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d16c      	bne.n	8005c4a <IKS01A2_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8005b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b72:	f043 0304 	orr.w	r3, r3, #4
 8005b76:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005b78:	e067      	b.n	8005c4a <IKS01A2_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 8005b7a:	6838      	ldr	r0, [r7, #0]
 8005b7c:	f000 fa7a 	bl	8006074 <LSM303AGR_ACC_0_Probe>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d002      	beq.n	8005b8c <IKS01A2_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8005b86:	f04f 33ff 	mov.w	r3, #4294967295
 8005b8a:	e09a      	b.n	8005cc2 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005b8c:	4a4f      	ldr	r2, [pc, #316]	; (8005ccc <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	494e      	ldr	r1, [pc, #312]	; (8005cd0 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005b9e:	f107 010c 	add.w	r1, r7, #12
 8005ba2:	4610      	mov	r0, r2
 8005ba4:	4798      	blx	r3
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d002      	beq.n	8005bb2 <IKS01A2_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005bac:	f06f 0306 	mvn.w	r3, #6
 8005bb0:	e087      	b.n	8005cc2 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005bb2:	7b3b      	ldrb	r3, [r7, #12]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d103      	bne.n	8005bc0 <IKS01A2_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8005bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bba:	f043 0302 	orr.w	r3, r3, #2
 8005bbe:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005bc0:	7b7b      	ldrb	r3, [r7, #13]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d103      	bne.n	8005bce <IKS01A2_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8005bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc8:	f043 0301 	orr.w	r3, r3, #1
 8005bcc:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005bce:	7bbb      	ldrb	r3, [r7, #14]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d13c      	bne.n	8005c4e <IKS01A2_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8005bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd6:	f043 0304 	orr.w	r3, r3, #4
 8005bda:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005bdc:	e037      	b.n	8005c4e <IKS01A2_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 8005bde:	6838      	ldr	r0, [r7, #0]
 8005be0:	f000 faec 	bl	80061bc <LSM303AGR_MAG_0_Probe>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d002      	beq.n	8005bf0 <IKS01A2_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8005bea:	f04f 33ff 	mov.w	r3, #4294967295
 8005bee:	e068      	b.n	8005cc2 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005bf0:	4a36      	ldr	r2, [pc, #216]	; (8005ccc <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	4935      	ldr	r1, [pc, #212]	; (8005cd0 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005c02:	f107 010c 	add.w	r1, r7, #12
 8005c06:	4610      	mov	r0, r2
 8005c08:	4798      	blx	r3
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d002      	beq.n	8005c16 <IKS01A2_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005c10:	f06f 0306 	mvn.w	r3, #6
 8005c14:	e055      	b.n	8005cc2 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005c16:	7b3b      	ldrb	r3, [r7, #12]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d103      	bne.n	8005c24 <IKS01A2_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8005c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1e:	f043 0302 	orr.w	r3, r3, #2
 8005c22:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005c24:	7b7b      	ldrb	r3, [r7, #13]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d103      	bne.n	8005c32 <IKS01A2_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8005c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2c:	f043 0301 	orr.w	r3, r3, #1
 8005c30:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005c32:	7bbb      	ldrb	r3, [r7, #14]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d10c      	bne.n	8005c52 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8005c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3a:	f043 0304 	orr.w	r3, r3, #4
 8005c3e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005c40:	e007      	b.n	8005c52 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005c42:	f06f 0301 	mvn.w	r3, #1
 8005c46:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005c48:	e004      	b.n	8005c54 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005c4a:	bf00      	nop
 8005c4c:	e002      	b.n	8005c54 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005c4e:	bf00      	nop
 8005c50:	e000      	b.n	8005c54 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005c52:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8005c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <IKS01A2_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8005c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c5c:	e031      	b.n	8005cc2 <IKS01A2_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005c5e:	2300      	movs	r3, #0
 8005c60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c62:	e02a      	b.n	8005cba <IKS01A2_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8005c64:	683a      	ldr	r2, [r7, #0]
 8005c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c68:	4013      	ands	r3, r2
 8005c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d11e      	bne.n	8005cae <IKS01A2_MOTION_SENSOR_Init+0x1ca>
 8005c70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c74:	4013      	ands	r3, r2
 8005c76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d118      	bne.n	8005cae <IKS01A2_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005c7c:	4a15      	ldr	r2, [pc, #84]	; (8005cd4 <IKS01A2_MOTION_SENSOR_Init+0x1f0>)
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c80:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005c84:	4814      	ldr	r0, [pc, #80]	; (8005cd8 <IKS01A2_MOTION_SENSOR_Init+0x1f4>)
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	4613      	mov	r3, r2
 8005c8a:	005b      	lsls	r3, r3, #1
 8005c8c:	4413      	add	r3, r2
 8005c8e:	440b      	add	r3, r1
 8005c90:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	490e      	ldr	r1, [pc, #56]	; (8005cd0 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005c9e:	4610      	mov	r0, r2
 8005ca0:	4798      	blx	r3
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d002      	beq.n	8005cae <IKS01A2_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005ca8:	f06f 0304 	mvn.w	r3, #4
 8005cac:	e009      	b.n	8005cc2 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8005cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb0:	005b      	lsls	r3, r3, #1
 8005cb2:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d9d1      	bls.n	8005c64 <IKS01A2_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8005cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3738      	adds	r7, #56	; 0x38
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	20001110 	.word	0x20001110
 8005cd0:	200014f4 	.word	0x200014f4
 8005cd4:	200000d0 	.word	0x200000d0
 8005cd8:	200010ec 	.word	0x200010ec

08005cdc <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d903      	bls.n	8005cf4 <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005cec:	f06f 0301 	mvn.w	r3, #1
 8005cf0:	60fb      	str	r3, [r7, #12]
 8005cf2:	e028      	b.n	8005d46 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005cf4:	4a16      	ldr	r2, [pc, #88]	; (8005d50 <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	4013      	ands	r3, r2
 8005d00:	683a      	ldr	r2, [r7, #0]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d11c      	bne.n	8005d40 <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005d06:	4a13      	ldr	r2, [pc, #76]	; (8005d54 <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005d0e:	4812      	ldr	r0, [pc, #72]	; (8005d58 <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	4613      	mov	r3, r2
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	4413      	add	r3, r2
 8005d18:	440b      	add	r3, r1
 8005d1a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	490e      	ldr	r1, [pc, #56]	; (8005d5c <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005d28:	4610      	mov	r0, r2
 8005d2a:	4798      	blx	r3
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d32:	f06f 0304 	mvn.w	r3, #4
 8005d36:	60fb      	str	r3, [r7, #12]
 8005d38:	e005      	b.n	8005d46 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60fb      	str	r3, [r7, #12]
 8005d3e:	e002      	b.n	8005d46 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005d40:	f06f 0301 	mvn.w	r3, #1
 8005d44:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005d46:	68fb      	ldr	r3, [r7, #12]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	2000111c 	.word	0x2000111c
 8005d54:	200000d0 	.word	0x200000d0
 8005d58:	200010ec 	.word	0x200010ec
 8005d5c:	200014f4 	.word	0x200014f4

08005d60 <IKS01A2_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d903      	bls.n	8005d7a <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005d72:	f06f 0301 	mvn.w	r3, #1
 8005d76:	617b      	str	r3, [r7, #20]
 8005d78:	e029      	b.n	8005dce <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005d7a:	4a17      	ldr	r2, [pc, #92]	; (8005dd8 <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	4013      	ands	r3, r2
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d11d      	bne.n	8005dc8 <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8005d8c:	4a13      	ldr	r2, [pc, #76]	; (8005ddc <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005d94:	4812      	ldr	r0, [pc, #72]	; (8005de0 <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	4413      	add	r3, r2
 8005d9e:	440b      	add	r3, r1
 8005da0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	490f      	ldr	r1, [pc, #60]	; (8005de4 <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005dae:	6879      	ldr	r1, [r7, #4]
 8005db0:	4610      	mov	r0, r2
 8005db2:	4798      	blx	r3
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005dba:	f06f 0304 	mvn.w	r3, #4
 8005dbe:	617b      	str	r3, [r7, #20]
 8005dc0:	e005      	b.n	8005dce <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	617b      	str	r3, [r7, #20]
 8005dc6:	e002      	b.n	8005dce <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005dc8:	f06f 0301 	mvn.w	r3, #1
 8005dcc:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005dce:	697b      	ldr	r3, [r7, #20]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3718      	adds	r7, #24
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	2000111c 	.word	0x2000111c
 8005ddc:	200000d0 	.word	0x200000d0
 8005de0:	200010ec 	.word	0x200010ec
 8005de4:	200014f4 	.word	0x200014f4

08005de8 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d903      	bls.n	8005e04 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005dfc:	f06f 0301 	mvn.w	r3, #1
 8005e00:	617b      	str	r3, [r7, #20]
 8005e02:	e02a      	b.n	8005e5a <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005e04:	4a17      	ldr	r2, [pc, #92]	; (8005e64 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d11e      	bne.n	8005e54 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8005e16:	4a14      	ldr	r2, [pc, #80]	; (8005e68 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x80>)
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005e1e:	4813      	ldr	r0, [pc, #76]	; (8005e6c <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x84>)
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	4613      	mov	r3, r2
 8005e24:	005b      	lsls	r3, r3, #1
 8005e26:	4413      	add	r3, r2
 8005e28:	440b      	add	r3, r1
 8005e2a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	490f      	ldr	r1, [pc, #60]	; (8005e70 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x88>)
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005e38:	ed97 0a01 	vldr	s0, [r7, #4]
 8005e3c:	4610      	mov	r0, r2
 8005e3e:	4798      	blx	r3
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d003      	beq.n	8005e4e <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e46:	f06f 0304 	mvn.w	r3, #4
 8005e4a:	617b      	str	r3, [r7, #20]
 8005e4c:	e005      	b.n	8005e5a <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	617b      	str	r3, [r7, #20]
 8005e52:	e002      	b.n	8005e5a <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005e54:	f06f 0301 	mvn.w	r3, #1
 8005e58:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005e5a:	697b      	ldr	r3, [r7, #20]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3718      	adds	r7, #24
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	2000111c 	.word	0x2000111c
 8005e68:	200000d0 	.word	0x200000d0
 8005e6c:	200010ec 	.word	0x200010ec
 8005e70:	200014f4 	.word	0x200014f4

08005e74 <IKS01A2_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b086      	sub	sp, #24
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d903      	bls.n	8005e8e <IKS01A2_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005e86:	f06f 0301 	mvn.w	r3, #1
 8005e8a:	617b      	str	r3, [r7, #20]
 8005e8c:	e029      	b.n	8005ee2 <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005e8e:	4a17      	ldr	r2, [pc, #92]	; (8005eec <IKS01A2_MOTION_SENSOR_SetFullScale+0x78>)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	4013      	ands	r3, r2
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d11d      	bne.n	8005edc <IKS01A2_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 8005ea0:	4a13      	ldr	r2, [pc, #76]	; (8005ef0 <IKS01A2_MOTION_SENSOR_SetFullScale+0x7c>)
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005ea8:	4812      	ldr	r0, [pc, #72]	; (8005ef4 <IKS01A2_MOTION_SENSOR_SetFullScale+0x80>)
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	4613      	mov	r3, r2
 8005eae:	005b      	lsls	r3, r3, #1
 8005eb0:	4413      	add	r3, r2
 8005eb2:	440b      	add	r3, r1
 8005eb4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	490f      	ldr	r1, [pc, #60]	; (8005ef8 <IKS01A2_MOTION_SENSOR_SetFullScale+0x84>)
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005ec2:	6879      	ldr	r1, [r7, #4]
 8005ec4:	4610      	mov	r0, r2
 8005ec6:	4798      	blx	r3
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <IKS01A2_MOTION_SENSOR_SetFullScale+0x62>
          Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ece:	f06f 0304 	mvn.w	r3, #4
 8005ed2:	617b      	str	r3, [r7, #20]
 8005ed4:	e005      	b.n	8005ee2 <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	617b      	str	r3, [r7, #20]
 8005eda:	e002      	b.n	8005ee2 <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005edc:	f06f 0301 	mvn.w	r3, #1
 8005ee0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005ee2:	697b      	ldr	r3, [r7, #20]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3718      	adds	r7, #24
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	2000111c 	.word	0x2000111c
 8005ef0:	200000d0 	.word	0x200000d0
 8005ef4:	200010ec 	.word	0x200010ec
 8005ef8:	200014f4 	.word	0x200014f4

08005efc <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b092      	sub	sp, #72	; 0x48
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005f04:	2300      	movs	r3, #0
 8005f06:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 8005f08:	2300      	movs	r3, #0
 8005f0a:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 8005f0c:	23d7      	movs	r3, #215	; 0xd7
 8005f0e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005f12:	4b4a      	ldr	r3, [pc, #296]	; (800603c <LSM6DSL_0_Probe+0x140>)
 8005f14:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005f16:	4b4a      	ldr	r3, [pc, #296]	; (8006040 <LSM6DSL_0_Probe+0x144>)
 8005f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005f1a:	4b4a      	ldr	r3, [pc, #296]	; (8006044 <LSM6DSL_0_Probe+0x148>)
 8005f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005f1e:	4b4a      	ldr	r3, [pc, #296]	; (8006048 <LSM6DSL_0_Probe+0x14c>)
 8005f20:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005f22:	4b4a      	ldr	r3, [pc, #296]	; (800604c <LSM6DSL_0_Probe+0x150>)
 8005f24:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 8005f26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	4848      	ldr	r0, [pc, #288]	; (8006050 <LSM6DSL_0_Probe+0x154>)
 8005f2e:	f7fe fac3 	bl	80044b8 <LSM6DSL_RegisterBusIO>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005f38:	f06f 0306 	mvn.w	r3, #6
 8005f3c:	647b      	str	r3, [r7, #68]	; 0x44
 8005f3e:	e077      	b.n	8006030 <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 8005f40:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005f44:	4619      	mov	r1, r3
 8005f46:	4842      	ldr	r0, [pc, #264]	; (8006050 <LSM6DSL_0_Probe+0x154>)
 8005f48:	f7fe fbac 	bl	80046a4 <LSM6DSL_ReadID>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005f52:	f06f 0306 	mvn.w	r3, #6
 8005f56:	647b      	str	r3, [r7, #68]	; 0x44
 8005f58:	e06a      	b.n	8006030 <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 8005f5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f5e:	2b6a      	cmp	r3, #106	; 0x6a
 8005f60:	d003      	beq.n	8005f6a <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005f62:	f06f 0306 	mvn.w	r3, #6
 8005f66:	647b      	str	r3, [r7, #68]	; 0x44
 8005f68:	e062      	b.n	8006030 <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8005f6a:	f107 0308 	add.w	r3, r7, #8
 8005f6e:	4619      	mov	r1, r3
 8005f70:	4837      	ldr	r0, [pc, #220]	; (8006050 <LSM6DSL_0_Probe+0x154>)
 8005f72:	f7fe fbad 	bl	80046d0 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005f76:	7a7b      	ldrb	r3, [r7, #9]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	7a3b      	ldrb	r3, [r7, #8]
 8005f7c:	005b      	lsls	r3, r3, #1
 8005f7e:	431a      	orrs	r2, r3
 8005f80:	7abb      	ldrb	r3, [r7, #10]
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4313      	orrs	r3, r2
 8005f86:	4a33      	ldr	r2, [pc, #204]	; (8006054 <LSM6DSL_0_Probe+0x158>)
 8005f88:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8005f8a:	4b33      	ldr	r3, [pc, #204]	; (8006058 <LSM6DSL_0_Probe+0x15c>)
 8005f8c:	4a30      	ldr	r2, [pc, #192]	; (8006050 <LSM6DSL_0_Probe+0x154>)
 8005f8e:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 8005f90:	4b32      	ldr	r3, [pc, #200]	; (800605c <LSM6DSL_0_Probe+0x160>)
 8005f92:	4a33      	ldr	r2, [pc, #204]	; (8006060 <LSM6DSL_0_Probe+0x164>)
 8005f94:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005f96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d11d      	bne.n	8005fd8 <LSM6DSL_0_Probe+0xdc>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d018      	beq.n	8005fd8 <LSM6DSL_0_Probe+0xdc>
 8005fa6:	7a7b      	ldrb	r3, [r7, #9]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d115      	bne.n	8005fd8 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8005fac:	4b2d      	ldr	r3, [pc, #180]	; (8006064 <LSM6DSL_0_Probe+0x168>)
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	4a2d      	ldr	r2, [pc, #180]	; (8006068 <LSM6DSL_0_Probe+0x16c>)
 8005fb2:	492e      	ldr	r1, [pc, #184]	; (800606c <LSM6DSL_0_Probe+0x170>)
 8005fb4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005fb8:	4b28      	ldr	r3, [pc, #160]	; (800605c <LSM6DSL_0_Probe+0x160>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a26      	ldr	r2, [pc, #152]	; (8006058 <LSM6DSL_0_Probe+0x15c>)
 8005fc0:	6812      	ldr	r2, [r2, #0]
 8005fc2:	4610      	mov	r0, r2
 8005fc4:	4798      	blx	r3
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d003      	beq.n	8005fd4 <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005fcc:	f06f 0304 	mvn.w	r3, #4
 8005fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8005fd2:	e001      	b.n	8005fd8 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d11d      	bne.n	800601a <LSM6DSL_0_Probe+0x11e>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d018      	beq.n	800601a <LSM6DSL_0_Probe+0x11e>
 8005fe8:	7a3b      	ldrb	r3, [r7, #8]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d115      	bne.n	800601a <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005fee:	4b1d      	ldr	r3, [pc, #116]	; (8006064 <LSM6DSL_0_Probe+0x168>)
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	4a1d      	ldr	r2, [pc, #116]	; (8006068 <LSM6DSL_0_Probe+0x16c>)
 8005ff4:	491e      	ldr	r1, [pc, #120]	; (8006070 <LSM6DSL_0_Probe+0x174>)
 8005ff6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005ffa:	4b18      	ldr	r3, [pc, #96]	; (800605c <LSM6DSL_0_Probe+0x160>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a15      	ldr	r2, [pc, #84]	; (8006058 <LSM6DSL_0_Probe+0x15c>)
 8006002:	6812      	ldr	r2, [r2, #0]
 8006004:	4610      	mov	r0, r2
 8006006:	4798      	blx	r3
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d003      	beq.n	8006016 <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800600e:	f06f 0304 	mvn.w	r3, #4
 8006012:	647b      	str	r3, [r7, #68]	; 0x44
 8006014:	e001      	b.n	800601a <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006016:	2300      	movs	r3, #0
 8006018:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800601a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800601c:	2b00      	cmp	r3, #0
 800601e:	d107      	bne.n	8006030 <LSM6DSL_0_Probe+0x134>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f003 0304 	and.w	r3, r3, #4
 8006026:	2b00      	cmp	r3, #0
 8006028:	d002      	beq.n	8006030 <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800602a:	f06f 0304 	mvn.w	r3, #4
 800602e:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8006030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006032:	4618      	mov	r0, r3
 8006034:	3748      	adds	r7, #72	; 0x48
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	0800271d 	.word	0x0800271d
 8006040:	08002799 	.word	0x08002799
 8006044:	0800284d 	.word	0x0800284d
 8006048:	080027e9 	.word	0x080027e9
 800604c:	080028b1 	.word	0x080028b1
 8006050:	20001128 	.word	0x20001128
 8006054:	2000111c 	.word	0x2000111c
 8006058:	200014f4 	.word	0x200014f4
 800605c:	20001110 	.word	0x20001110
 8006060:	20000078 	.word	0x20000078
 8006064:	200000d0 	.word	0x200000d0
 8006068:	200010ec 	.word	0x200010ec
 800606c:	200000ac 	.word	0x200000ac
 8006070:	20000088 	.word	0x20000088

08006074 <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b092      	sub	sp, #72	; 0x48
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 800607c:	2300      	movs	r3, #0
 800607e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8006080:	2300      	movs	r3, #0
 8006082:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 8006084:	2333      	movs	r3, #51	; 0x33
 8006086:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 800608a:	4b3f      	ldr	r3, [pc, #252]	; (8006188 <LSM303AGR_ACC_0_Probe+0x114>)
 800608c:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800608e:	4b3f      	ldr	r3, [pc, #252]	; (800618c <LSM303AGR_ACC_0_Probe+0x118>)
 8006090:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8006092:	4b3f      	ldr	r3, [pc, #252]	; (8006190 <LSM303AGR_ACC_0_Probe+0x11c>)
 8006094:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8006096:	4b3f      	ldr	r3, [pc, #252]	; (8006194 <LSM303AGR_ACC_0_Probe+0x120>)
 8006098:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 800609a:	4b3f      	ldr	r3, [pc, #252]	; (8006198 <LSM303AGR_ACC_0_Probe+0x124>)
 800609c:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 800609e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060a2:	4619      	mov	r1, r3
 80060a4:	483d      	ldr	r0, [pc, #244]	; (800619c <LSM303AGR_ACC_0_Probe+0x128>)
 80060a6:	f7fc fe51 	bl	8002d4c <LSM303AGR_ACC_RegisterBusIO>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d003      	beq.n	80060b8 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80060b0:	f06f 0306 	mvn.w	r3, #6
 80060b4:	647b      	str	r3, [r7, #68]	; 0x44
 80060b6:	e062      	b.n	800617e <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 80060b8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80060bc:	4619      	mov	r1, r3
 80060be:	4837      	ldr	r0, [pc, #220]	; (800619c <LSM303AGR_ACC_0_Probe+0x128>)
 80060c0:	f7fc ff05 	bl	8002ece <LSM303AGR_ACC_ReadID>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d003      	beq.n	80060d2 <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80060ca:	f06f 0306 	mvn.w	r3, #6
 80060ce:	647b      	str	r3, [r7, #68]	; 0x44
 80060d0:	e055      	b.n	800617e <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 80060d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060d6:	2b33      	cmp	r3, #51	; 0x33
 80060d8:	d003      	beq.n	80060e2 <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80060da:	f06f 0306 	mvn.w	r3, #6
 80060de:	647b      	str	r3, [r7, #68]	; 0x44
 80060e0:	e04d      	b.n	800617e <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 80060e2:	f107 0308 	add.w	r3, r7, #8
 80060e6:	4619      	mov	r1, r3
 80060e8:	482c      	ldr	r0, [pc, #176]	; (800619c <LSM303AGR_ACC_0_Probe+0x128>)
 80060ea:	f7fc ff07 	bl	8002efc <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80060ee:	7a7b      	ldrb	r3, [r7, #9]
 80060f0:	461a      	mov	r2, r3
 80060f2:	7a3b      	ldrb	r3, [r7, #8]
 80060f4:	005b      	lsls	r3, r3, #1
 80060f6:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 80060f8:	7abb      	ldrb	r3, [r7, #10]
 80060fa:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80060fc:	4313      	orrs	r3, r2
 80060fe:	4a28      	ldr	r2, [pc, #160]	; (80061a0 <LSM303AGR_ACC_0_Probe+0x12c>)
 8006100:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 8006102:	4b28      	ldr	r3, [pc, #160]	; (80061a4 <LSM303AGR_ACC_0_Probe+0x130>)
 8006104:	4a25      	ldr	r2, [pc, #148]	; (800619c <LSM303AGR_ACC_0_Probe+0x128>)
 8006106:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 8006108:	4b27      	ldr	r3, [pc, #156]	; (80061a8 <LSM303AGR_ACC_0_Probe+0x134>)
 800610a:	4a28      	ldr	r2, [pc, #160]	; (80061ac <LSM303AGR_ACC_0_Probe+0x138>)
 800610c:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800610e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006110:	2b00      	cmp	r3, #0
 8006112:	d11e      	bne.n	8006152 <LSM303AGR_ACC_0_Probe+0xde>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b00      	cmp	r3, #0
 800611c:	d019      	beq.n	8006152 <LSM303AGR_ACC_0_Probe+0xde>
 800611e:	7a3b      	ldrb	r3, [r7, #8]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d116      	bne.n	8006152 <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006124:	4b22      	ldr	r3, [pc, #136]	; (80061b0 <LSM303AGR_ACC_0_Probe+0x13c>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	4a22      	ldr	r2, [pc, #136]	; (80061b4 <LSM303AGR_ACC_0_Probe+0x140>)
 800612a:	3303      	adds	r3, #3
 800612c:	4922      	ldr	r1, [pc, #136]	; (80061b8 <LSM303AGR_ACC_0_Probe+0x144>)
 800612e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 8006132:	4b1d      	ldr	r3, [pc, #116]	; (80061a8 <LSM303AGR_ACC_0_Probe+0x134>)
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a1a      	ldr	r2, [pc, #104]	; (80061a4 <LSM303AGR_ACC_0_Probe+0x130>)
 800613a:	6852      	ldr	r2, [r2, #4]
 800613c:	4610      	mov	r0, r2
 800613e:	4798      	blx	r3
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006146:	f06f 0304 	mvn.w	r3, #4
 800614a:	647b      	str	r3, [r7, #68]	; 0x44
 800614c:	e001      	b.n	8006152 <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800614e:	2300      	movs	r3, #0
 8006150:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8006152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006154:	2b00      	cmp	r3, #0
 8006156:	d107      	bne.n	8006168 <LSM303AGR_ACC_0_Probe+0xf4>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b00      	cmp	r3, #0
 8006160:	d002      	beq.n	8006168 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006162:	f06f 0304 	mvn.w	r3, #4
 8006166:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8006168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800616a:	2b00      	cmp	r3, #0
 800616c:	d107      	bne.n	800617e <LSM303AGR_ACC_0_Probe+0x10a>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f003 0304 	and.w	r3, r3, #4
 8006174:	2b00      	cmp	r3, #0
 8006176:	d002      	beq.n	800617e <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006178:	f06f 0304 	mvn.w	r3, #4
 800617c:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 800617e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006180:	4618      	mov	r0, r3
 8006182:	3748      	adds	r7, #72	; 0x48
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	0800271d 	.word	0x0800271d
 800618c:	08002799 	.word	0x08002799
 8006190:	0800284d 	.word	0x0800284d
 8006194:	080027e9 	.word	0x080027e9
 8006198:	080028b1 	.word	0x080028b1
 800619c:	20001158 	.word	0x20001158
 80061a0:	2000111c 	.word	0x2000111c
 80061a4:	200014f4 	.word	0x200014f4
 80061a8:	20001110 	.word	0x20001110
 80061ac:	20000010 	.word	0x20000010
 80061b0:	200000d0 	.word	0x200000d0
 80061b4:	200010ec 	.word	0x200010ec
 80061b8:	20000020 	.word	0x20000020

080061bc <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b092      	sub	sp, #72	; 0x48
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 80061c4:	2300      	movs	r3, #0
 80061c6:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 80061c8:	2300      	movs	r3, #0
 80061ca:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 80061cc:	233d      	movs	r3, #61	; 0x3d
 80061ce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 80061d2:	4b3f      	ldr	r3, [pc, #252]	; (80062d0 <LSM303AGR_MAG_0_Probe+0x114>)
 80061d4:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 80061d6:	4b3f      	ldr	r3, [pc, #252]	; (80062d4 <LSM303AGR_MAG_0_Probe+0x118>)
 80061d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 80061da:	4b3f      	ldr	r3, [pc, #252]	; (80062d8 <LSM303AGR_MAG_0_Probe+0x11c>)
 80061dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80061de:	4b3f      	ldr	r3, [pc, #252]	; (80062dc <LSM303AGR_MAG_0_Probe+0x120>)
 80061e0:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 80061e2:	4b3f      	ldr	r3, [pc, #252]	; (80062e0 <LSM303AGR_MAG_0_Probe+0x124>)
 80061e4:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 80061e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80061ea:	4619      	mov	r1, r3
 80061ec:	483d      	ldr	r0, [pc, #244]	; (80062e4 <LSM303AGR_MAG_0_Probe+0x128>)
 80061ee:	f7fd f973 	bl	80034d8 <LSM303AGR_MAG_RegisterBusIO>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d003      	beq.n	8006200 <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80061f8:	f06f 0306 	mvn.w	r3, #6
 80061fc:	647b      	str	r3, [r7, #68]	; 0x44
 80061fe:	e062      	b.n	80062c6 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 8006200:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8006204:	4619      	mov	r1, r3
 8006206:	4837      	ldr	r0, [pc, #220]	; (80062e4 <LSM303AGR_MAG_0_Probe+0x128>)
 8006208:	f7fd fa1d 	bl	8003646 <LSM303AGR_MAG_ReadID>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d003      	beq.n	800621a <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006212:	f06f 0306 	mvn.w	r3, #6
 8006216:	647b      	str	r3, [r7, #68]	; 0x44
 8006218:	e055      	b.n	80062c6 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 800621a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800621e:	2b40      	cmp	r3, #64	; 0x40
 8006220:	d003      	beq.n	800622a <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006222:	f06f 0306 	mvn.w	r3, #6
 8006226:	647b      	str	r3, [r7, #68]	; 0x44
 8006228:	e04d      	b.n	80062c6 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 800622a:	f107 0308 	add.w	r3, r7, #8
 800622e:	4619      	mov	r1, r3
 8006230:	482c      	ldr	r0, [pc, #176]	; (80062e4 <LSM303AGR_MAG_0_Probe+0x128>)
 8006232:	f7fd fa1f 	bl	8003674 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8006236:	7a7b      	ldrb	r3, [r7, #9]
 8006238:	461a      	mov	r2, r3
 800623a:	7a3b      	ldrb	r3, [r7, #8]
 800623c:	005b      	lsls	r3, r3, #1
 800623e:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8006240:	7abb      	ldrb	r3, [r7, #10]
 8006242:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8006244:	4313      	orrs	r3, r2
 8006246:	4a28      	ldr	r2, [pc, #160]	; (80062e8 <LSM303AGR_MAG_0_Probe+0x12c>)
 8006248:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 800624a:	4b28      	ldr	r3, [pc, #160]	; (80062ec <LSM303AGR_MAG_0_Probe+0x130>)
 800624c:	4a25      	ldr	r2, [pc, #148]	; (80062e4 <LSM303AGR_MAG_0_Probe+0x128>)
 800624e:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 8006250:	4b27      	ldr	r3, [pc, #156]	; (80062f0 <LSM303AGR_MAG_0_Probe+0x134>)
 8006252:	4a28      	ldr	r2, [pc, #160]	; (80062f4 <LSM303AGR_MAG_0_Probe+0x138>)
 8006254:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8006256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006258:	2b00      	cmp	r3, #0
 800625a:	d11e      	bne.n	800629a <LSM303AGR_MAG_0_Probe+0xde>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f003 0304 	and.w	r3, r3, #4
 8006262:	2b00      	cmp	r3, #0
 8006264:	d019      	beq.n	800629a <LSM303AGR_MAG_0_Probe+0xde>
 8006266:	7abb      	ldrb	r3, [r7, #10]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d116      	bne.n	800629a <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800626c:	4b22      	ldr	r3, [pc, #136]	; (80062f8 <LSM303AGR_MAG_0_Probe+0x13c>)
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	4a22      	ldr	r2, [pc, #136]	; (80062fc <LSM303AGR_MAG_0_Probe+0x140>)
 8006272:	3306      	adds	r3, #6
 8006274:	4922      	ldr	r1, [pc, #136]	; (8006300 <LSM303AGR_MAG_0_Probe+0x144>)
 8006276:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 800627a:	4b1d      	ldr	r3, [pc, #116]	; (80062f0 <LSM303AGR_MAG_0_Probe+0x134>)
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a1a      	ldr	r2, [pc, #104]	; (80062ec <LSM303AGR_MAG_0_Probe+0x130>)
 8006282:	6892      	ldr	r2, [r2, #8]
 8006284:	4610      	mov	r0, r2
 8006286:	4798      	blx	r3
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d003      	beq.n	8006296 <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800628e:	f06f 0304 	mvn.w	r3, #4
 8006292:	647b      	str	r3, [r7, #68]	; 0x44
 8006294:	e001      	b.n	800629a <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006296:	2300      	movs	r3, #0
 8006298:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800629a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800629c:	2b00      	cmp	r3, #0
 800629e:	d107      	bne.n	80062b0 <LSM303AGR_MAG_0_Probe+0xf4>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80062aa:	f06f 0304 	mvn.w	r3, #4
 80062ae:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80062b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d107      	bne.n	80062c6 <LSM303AGR_MAG_0_Probe+0x10a>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d002      	beq.n	80062c6 <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80062c0:	f06f 0304 	mvn.w	r3, #4
 80062c4:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 80062c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3748      	adds	r7, #72	; 0x48
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	0800271d 	.word	0x0800271d
 80062d4:	08002799 	.word	0x08002799
 80062d8:	0800284d 	.word	0x0800284d
 80062dc:	080027e9 	.word	0x080027e9
 80062e0:	080028b1 	.word	0x080028b1
 80062e4:	20001184 	.word	0x20001184
 80062e8:	2000111c 	.word	0x2000111c
 80062ec:	200014f4 	.word	0x200014f4
 80062f0:	20001110 	.word	0x20001110
 80062f4:	20000044 	.word	0x20000044
 80062f8:	200000d0 	.word	0x200000d0
 80062fc:	200010ec 	.word	0x200010ec
 8006300:	20000054 	.word	0x20000054

08006304 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	4603      	mov	r3, r0
 800630c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800630e:	2300      	movs	r3, #0
 8006310:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8006312:	79fb      	ldrb	r3, [r7, #7]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d903      	bls.n	8006320 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006318:	f06f 0301 	mvn.w	r3, #1
 800631c:	60fb      	str	r3, [r7, #12]
 800631e:	e025      	b.n	800636c <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8006320:	79fb      	ldrb	r3, [r7, #7]
 8006322:	79fa      	ldrb	r2, [r7, #7]
 8006324:	4914      	ldr	r1, [pc, #80]	; (8006378 <BSP_COM_Init+0x74>)
 8006326:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800632a:	4814      	ldr	r0, [pc, #80]	; (800637c <BSP_COM_Init+0x78>)
 800632c:	4613      	mov	r3, r2
 800632e:	015b      	lsls	r3, r3, #5
 8006330:	4413      	add	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	4403      	add	r3, r0
 8006336:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8006338:	79fa      	ldrb	r2, [r7, #7]
 800633a:	4613      	mov	r3, r2
 800633c:	015b      	lsls	r3, r3, #5
 800633e:	4413      	add	r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4a0e      	ldr	r2, [pc, #56]	; (800637c <BSP_COM_Init+0x78>)
 8006344:	4413      	add	r3, r2
 8006346:	4618      	mov	r0, r3
 8006348:	f000 f86a 	bl	8006420 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 800634c:	79fa      	ldrb	r2, [r7, #7]
 800634e:	4613      	mov	r3, r2
 8006350:	015b      	lsls	r3, r3, #5
 8006352:	4413      	add	r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4a09      	ldr	r2, [pc, #36]	; (800637c <BSP_COM_Init+0x78>)
 8006358:	4413      	add	r3, r2
 800635a:	4618      	mov	r0, r3
 800635c:	f000 f810 	bl	8006380 <MX_USART2_UART_Init>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d002      	beq.n	800636c <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006366:	f06f 0303 	mvn.w	r3, #3
 800636a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800636c:	68fb      	ldr	r3, [r7, #12]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	200000e4 	.word	0x200000e4
 800637c:	20001548 	.word	0x20001548

08006380 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006388:	2300      	movs	r3, #0
 800638a:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a15      	ldr	r2, [pc, #84]	; (80063e4 <MX_USART2_UART_Init+0x64>)
 8006390:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 921600;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8006398:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	220c      	movs	r2, #12
 80063b0:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f004 f854 	bl	800a478 <HAL_UART_Init>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80063da:	7bfb      	ldrb	r3, [r7, #15]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	40004400 	.word	0x40004400

080063e8 <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) || (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)) /* For IAR and ARM Compiler 5 and 6*/
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* For IAR and ARM Compiler 5 and 6 */
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 80063f0:	4b09      	ldr	r3, [pc, #36]	; (8006418 <__io_putchar+0x30>)
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	461a      	mov	r2, r3
 80063f6:	4613      	mov	r3, r2
 80063f8:	015b      	lsls	r3, r3, #5
 80063fa:	4413      	add	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	4a07      	ldr	r2, [pc, #28]	; (800641c <__io_putchar+0x34>)
 8006400:	1898      	adds	r0, r3, r2
 8006402:	1d39      	adds	r1, r7, #4
 8006404:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006408:	2201      	movs	r2, #1
 800640a:	f004 f88d 	bl	800a528 <HAL_UART_Transmit>
  return ch;
 800640e:	687b      	ldr	r3, [r7, #4]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3708      	adds	r7, #8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	200011b0 	.word	0x200011b0
 800641c:	20001548 	.word	0x20001548

08006420 <USART2_MspInit>:
 * @retval None
 */
DMA_HandleTypeDef hdma_usart2_rx;

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b08a      	sub	sp, #40	; 0x28
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006428:	4b30      	ldr	r3, [pc, #192]	; (80064ec <USART2_MspInit+0xcc>)
 800642a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800642c:	4a2f      	ldr	r2, [pc, #188]	; (80064ec <USART2_MspInit+0xcc>)
 800642e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006432:	6593      	str	r3, [r2, #88]	; 0x58
 8006434:	4b2d      	ldr	r3, [pc, #180]	; (80064ec <USART2_MspInit+0xcc>)
 8006436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800643c:	613b      	str	r3, [r7, #16]
 800643e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006440:	4b2a      	ldr	r3, [pc, #168]	; (80064ec <USART2_MspInit+0xcc>)
 8006442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006444:	4a29      	ldr	r2, [pc, #164]	; (80064ec <USART2_MspInit+0xcc>)
 8006446:	f043 0301 	orr.w	r3, r3, #1
 800644a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800644c:	4b27      	ldr	r3, [pc, #156]	; (80064ec <USART2_MspInit+0xcc>)
 800644e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	60fb      	str	r3, [r7, #12]
 8006456:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8006458:	2304      	movs	r3, #4
 800645a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800645c:	2302      	movs	r3, #2
 800645e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006460:	2300      	movs	r3, #0
 8006462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006464:	2303      	movs	r3, #3
 8006466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8006468:	2307      	movs	r3, #7
 800646a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800646c:	f107 0314 	add.w	r3, r7, #20
 8006470:	4619      	mov	r1, r3
 8006472:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006476:	f000 fcaf 	bl	8006dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 800647a:	2308      	movs	r3, #8
 800647c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800647e:	2302      	movs	r3, #2
 8006480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006482:	2300      	movs	r3, #0
 8006484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006486:	2303      	movs	r3, #3
 8006488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 800648a:	2307      	movs	r3, #7
 800648c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 800648e:	f107 0314 	add.w	r3, r7, #20
 8006492:	4619      	mov	r1, r3
 8006494:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006498:	f000 fc9e 	bl	8006dd8 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_usart2_rx.Instance = DMA1_Channel6;
 800649c:	4b14      	ldr	r3, [pc, #80]	; (80064f0 <USART2_MspInit+0xd0>)
 800649e:	4a15      	ldr	r2, [pc, #84]	; (80064f4 <USART2_MspInit+0xd4>)
 80064a0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80064a2:	4b13      	ldr	r3, [pc, #76]	; (80064f0 <USART2_MspInit+0xd0>)
 80064a4:	2202      	movs	r2, #2
 80064a6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80064a8:	4b11      	ldr	r3, [pc, #68]	; (80064f0 <USART2_MspInit+0xd0>)
 80064aa:	2200      	movs	r2, #0
 80064ac:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80064ae:	4b10      	ldr	r3, [pc, #64]	; (80064f0 <USART2_MspInit+0xd0>)
 80064b0:	2200      	movs	r2, #0
 80064b2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80064b4:	4b0e      	ldr	r3, [pc, #56]	; (80064f0 <USART2_MspInit+0xd0>)
 80064b6:	2280      	movs	r2, #128	; 0x80
 80064b8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80064ba:	4b0d      	ldr	r3, [pc, #52]	; (80064f0 <USART2_MspInit+0xd0>)
 80064bc:	2200      	movs	r2, #0
 80064be:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80064c0:	4b0b      	ldr	r3, [pc, #44]	; (80064f0 <USART2_MspInit+0xd0>)
 80064c2:	2200      	movs	r2, #0
 80064c4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80064c6:	4b0a      	ldr	r3, [pc, #40]	; (80064f0 <USART2_MspInit+0xd0>)
 80064c8:	2220      	movs	r2, #32
 80064ca:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80064cc:	4b08      	ldr	r3, [pc, #32]	; (80064f0 <USART2_MspInit+0xd0>)
 80064ce:	2200      	movs	r2, #0
 80064d0:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_usart2_rx);
 80064d2:	4807      	ldr	r0, [pc, #28]	; (80064f0 <USART2_MspInit+0xd0>)
 80064d4:	f000 fa88 	bl	80069e8 <HAL_DMA_Init>

  __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a05      	ldr	r2, [pc, #20]	; (80064f0 <USART2_MspInit+0xd0>)
 80064dc:	671a      	str	r2, [r3, #112]	; 0x70
 80064de:	4a04      	ldr	r2, [pc, #16]	; (80064f0 <USART2_MspInit+0xd0>)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 80064e4:	bf00      	nop
 80064e6:	3728      	adds	r7, #40	; 0x28
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	40021000 	.word	0x40021000
 80064f0:	20001500 	.word	0x20001500
 80064f4:	4002006c 	.word	0x4002006c

080064f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80064fe:	2300      	movs	r3, #0
 8006500:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006502:	4b0c      	ldr	r3, [pc, #48]	; (8006534 <HAL_Init+0x3c>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a0b      	ldr	r2, [pc, #44]	; (8006534 <HAL_Init+0x3c>)
 8006508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800650c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800650e:	2003      	movs	r0, #3
 8006510:	f000 f93e 	bl	8006790 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006514:	2000      	movs	r0, #0
 8006516:	f000 f80f 	bl	8006538 <HAL_InitTick>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	71fb      	strb	r3, [r7, #7]
 8006524:	e001      	b.n	800652a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006526:	f7fc f885 	bl	8002634 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800652a:	79fb      	ldrb	r3, [r7, #7]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3708      	adds	r7, #8
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	40022000 	.word	0x40022000

08006538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006540:	2300      	movs	r3, #0
 8006542:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006544:	4b17      	ldr	r3, [pc, #92]	; (80065a4 <HAL_InitTick+0x6c>)
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d023      	beq.n	8006594 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800654c:	4b16      	ldr	r3, [pc, #88]	; (80065a8 <HAL_InitTick+0x70>)
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	4b14      	ldr	r3, [pc, #80]	; (80065a4 <HAL_InitTick+0x6c>)
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	4619      	mov	r1, r3
 8006556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800655a:	fbb3 f3f1 	udiv	r3, r3, r1
 800655e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006562:	4618      	mov	r0, r3
 8006564:	f000 f949 	bl	80067fa <HAL_SYSTICK_Config>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10f      	bne.n	800658e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2b0f      	cmp	r3, #15
 8006572:	d809      	bhi.n	8006588 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006574:	2200      	movs	r2, #0
 8006576:	6879      	ldr	r1, [r7, #4]
 8006578:	f04f 30ff 	mov.w	r0, #4294967295
 800657c:	f000 f913 	bl	80067a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006580:	4a0a      	ldr	r2, [pc, #40]	; (80065ac <HAL_InitTick+0x74>)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6013      	str	r3, [r2, #0]
 8006586:	e007      	b.n	8006598 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	73fb      	strb	r3, [r7, #15]
 800658c:	e004      	b.n	8006598 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	73fb      	strb	r3, [r7, #15]
 8006592:	e001      	b.n	8006598 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006598:	7bfb      	ldrb	r3, [r7, #15]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	200000ec 	.word	0x200000ec
 80065a8:	2000000c 	.word	0x2000000c
 80065ac:	200000e8 	.word	0x200000e8

080065b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80065b0:	b480      	push	{r7}
 80065b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80065b4:	4b06      	ldr	r3, [pc, #24]	; (80065d0 <HAL_IncTick+0x20>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	461a      	mov	r2, r3
 80065ba:	4b06      	ldr	r3, [pc, #24]	; (80065d4 <HAL_IncTick+0x24>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4413      	add	r3, r2
 80065c0:	4a04      	ldr	r2, [pc, #16]	; (80065d4 <HAL_IncTick+0x24>)
 80065c2:	6013      	str	r3, [r2, #0]
}
 80065c4:	bf00      	nop
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	200000ec 	.word	0x200000ec
 80065d4:	200015cc 	.word	0x200015cc

080065d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80065d8:	b480      	push	{r7}
 80065da:	af00      	add	r7, sp, #0
  return uwTick;
 80065dc:	4b03      	ldr	r3, [pc, #12]	; (80065ec <HAL_GetTick+0x14>)
 80065de:	681b      	ldr	r3, [r3, #0]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	200015cc 	.word	0x200015cc

080065f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f003 0307 	and.w	r3, r3, #7
 80065fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006600:	4b0c      	ldr	r3, [pc, #48]	; (8006634 <__NVIC_SetPriorityGrouping+0x44>)
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800660c:	4013      	ands	r3, r2
 800660e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800661c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006622:	4a04      	ldr	r2, [pc, #16]	; (8006634 <__NVIC_SetPriorityGrouping+0x44>)
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	60d3      	str	r3, [r2, #12]
}
 8006628:	bf00      	nop
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	e000ed00 	.word	0xe000ed00

08006638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006638:	b480      	push	{r7}
 800663a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800663c:	4b04      	ldr	r3, [pc, #16]	; (8006650 <__NVIC_GetPriorityGrouping+0x18>)
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	0a1b      	lsrs	r3, r3, #8
 8006642:	f003 0307 	and.w	r3, r3, #7
}
 8006646:	4618      	mov	r0, r3
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr
 8006650:	e000ed00 	.word	0xe000ed00

08006654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	4603      	mov	r3, r0
 800665c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800665e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006662:	2b00      	cmp	r3, #0
 8006664:	db0b      	blt.n	800667e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006666:	79fb      	ldrb	r3, [r7, #7]
 8006668:	f003 021f 	and.w	r2, r3, #31
 800666c:	4907      	ldr	r1, [pc, #28]	; (800668c <__NVIC_EnableIRQ+0x38>)
 800666e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006672:	095b      	lsrs	r3, r3, #5
 8006674:	2001      	movs	r0, #1
 8006676:	fa00 f202 	lsl.w	r2, r0, r2
 800667a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800667e:	bf00      	nop
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	e000e100 	.word	0xe000e100

08006690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	4603      	mov	r3, r0
 8006698:	6039      	str	r1, [r7, #0]
 800669a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800669c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	db0a      	blt.n	80066ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	b2da      	uxtb	r2, r3
 80066a8:	490c      	ldr	r1, [pc, #48]	; (80066dc <__NVIC_SetPriority+0x4c>)
 80066aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066ae:	0112      	lsls	r2, r2, #4
 80066b0:	b2d2      	uxtb	r2, r2
 80066b2:	440b      	add	r3, r1
 80066b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80066b8:	e00a      	b.n	80066d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	b2da      	uxtb	r2, r3
 80066be:	4908      	ldr	r1, [pc, #32]	; (80066e0 <__NVIC_SetPriority+0x50>)
 80066c0:	79fb      	ldrb	r3, [r7, #7]
 80066c2:	f003 030f 	and.w	r3, r3, #15
 80066c6:	3b04      	subs	r3, #4
 80066c8:	0112      	lsls	r2, r2, #4
 80066ca:	b2d2      	uxtb	r2, r2
 80066cc:	440b      	add	r3, r1
 80066ce:	761a      	strb	r2, [r3, #24]
}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr
 80066dc:	e000e100 	.word	0xe000e100
 80066e0:	e000ed00 	.word	0xe000ed00

080066e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b089      	sub	sp, #36	; 0x24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f003 0307 	and.w	r3, r3, #7
 80066f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	f1c3 0307 	rsb	r3, r3, #7
 80066fe:	2b04      	cmp	r3, #4
 8006700:	bf28      	it	cs
 8006702:	2304      	movcs	r3, #4
 8006704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	3304      	adds	r3, #4
 800670a:	2b06      	cmp	r3, #6
 800670c:	d902      	bls.n	8006714 <NVIC_EncodePriority+0x30>
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	3b03      	subs	r3, #3
 8006712:	e000      	b.n	8006716 <NVIC_EncodePriority+0x32>
 8006714:	2300      	movs	r3, #0
 8006716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006718:	f04f 32ff 	mov.w	r2, #4294967295
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	fa02 f303 	lsl.w	r3, r2, r3
 8006722:	43da      	mvns	r2, r3
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	401a      	ands	r2, r3
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800672c:	f04f 31ff 	mov.w	r1, #4294967295
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	fa01 f303 	lsl.w	r3, r1, r3
 8006736:	43d9      	mvns	r1, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800673c:	4313      	orrs	r3, r2
         );
}
 800673e:	4618      	mov	r0, r3
 8006740:	3724      	adds	r7, #36	; 0x24
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
	...

0800674c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3b01      	subs	r3, #1
 8006758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800675c:	d301      	bcc.n	8006762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800675e:	2301      	movs	r3, #1
 8006760:	e00f      	b.n	8006782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006762:	4a0a      	ldr	r2, [pc, #40]	; (800678c <SysTick_Config+0x40>)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	3b01      	subs	r3, #1
 8006768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800676a:	210f      	movs	r1, #15
 800676c:	f04f 30ff 	mov.w	r0, #4294967295
 8006770:	f7ff ff8e 	bl	8006690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006774:	4b05      	ldr	r3, [pc, #20]	; (800678c <SysTick_Config+0x40>)
 8006776:	2200      	movs	r2, #0
 8006778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800677a:	4b04      	ldr	r3, [pc, #16]	; (800678c <SysTick_Config+0x40>)
 800677c:	2207      	movs	r2, #7
 800677e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	e000e010 	.word	0xe000e010

08006790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f7ff ff29 	bl	80065f0 <__NVIC_SetPriorityGrouping>
}
 800679e:	bf00      	nop
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b086      	sub	sp, #24
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	4603      	mov	r3, r0
 80067ae:	60b9      	str	r1, [r7, #8]
 80067b0:	607a      	str	r2, [r7, #4]
 80067b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80067b4:	2300      	movs	r3, #0
 80067b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80067b8:	f7ff ff3e 	bl	8006638 <__NVIC_GetPriorityGrouping>
 80067bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	68b9      	ldr	r1, [r7, #8]
 80067c2:	6978      	ldr	r0, [r7, #20]
 80067c4:	f7ff ff8e 	bl	80066e4 <NVIC_EncodePriority>
 80067c8:	4602      	mov	r2, r0
 80067ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067ce:	4611      	mov	r1, r2
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7ff ff5d 	bl	8006690 <__NVIC_SetPriority>
}
 80067d6:	bf00      	nop
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b082      	sub	sp, #8
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	4603      	mov	r3, r0
 80067e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80067e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7ff ff31 	bl	8006654 <__NVIC_EnableIRQ>
}
 80067f2:	bf00      	nop
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b082      	sub	sp, #8
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7ff ffa2 	bl	800674c <SysTick_Config>
 8006808:	4603      	mov	r3, r0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
	...

08006814 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e054      	b.n	80068d0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	7f5b      	ldrb	r3, [r3, #29]
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b00      	cmp	r3, #0
 800682e:	d105      	bne.n	800683c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7fb faca 	bl	8001dd0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	791b      	ldrb	r3, [r3, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10c      	bne.n	8006864 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a22      	ldr	r2, [pc, #136]	; (80068d8 <HAL_CRC_Init+0xc4>)
 8006850:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	689a      	ldr	r2, [r3, #8]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f022 0218 	bic.w	r2, r2, #24
 8006860:	609a      	str	r2, [r3, #8]
 8006862:	e00c      	b.n	800687e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6899      	ldr	r1, [r3, #8]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	461a      	mov	r2, r3
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 f834 	bl	80068dc <HAL_CRCEx_Polynomial_Set>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d001      	beq.n	800687e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e028      	b.n	80068d0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	795b      	ldrb	r3, [r3, #5]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d105      	bne.n	8006892 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f04f 32ff 	mov.w	r2, #4294967295
 800688e:	611a      	str	r2, [r3, #16]
 8006890:	e004      	b.n	800689c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	6912      	ldr	r2, [r2, #16]
 800689a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	695a      	ldr	r2, [r3, #20]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	430a      	orrs	r2, r1
 80068b0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	699a      	ldr	r2, [r3, #24]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	04c11db7 	.word	0x04c11db7

080068dc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80068dc:	b480      	push	{r7}
 80068de:	b087      	sub	sp, #28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068e8:	2300      	movs	r3, #0
 80068ea:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80068ec:	231f      	movs	r3, #31
 80068ee:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80068f0:	bf00      	nop
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	1e5a      	subs	r2, r3, #1
 80068f6:	613a      	str	r2, [r7, #16]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d009      	beq.n	8006910 <HAL_CRCEx_Polynomial_Set+0x34>
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	f003 031f 	and.w	r3, r3, #31
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	fa22 f303 	lsr.w	r3, r2, r3
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	2b00      	cmp	r3, #0
 800690e:	d0f0      	beq.n	80068f2 <HAL_CRCEx_Polynomial_Set+0x16>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b18      	cmp	r3, #24
 8006914:	d846      	bhi.n	80069a4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8006916:	a201      	add	r2, pc, #4	; (adr r2, 800691c <HAL_CRCEx_Polynomial_Set+0x40>)
 8006918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691c:	080069ab 	.word	0x080069ab
 8006920:	080069a5 	.word	0x080069a5
 8006924:	080069a5 	.word	0x080069a5
 8006928:	080069a5 	.word	0x080069a5
 800692c:	080069a5 	.word	0x080069a5
 8006930:	080069a5 	.word	0x080069a5
 8006934:	080069a5 	.word	0x080069a5
 8006938:	080069a5 	.word	0x080069a5
 800693c:	08006999 	.word	0x08006999
 8006940:	080069a5 	.word	0x080069a5
 8006944:	080069a5 	.word	0x080069a5
 8006948:	080069a5 	.word	0x080069a5
 800694c:	080069a5 	.word	0x080069a5
 8006950:	080069a5 	.word	0x080069a5
 8006954:	080069a5 	.word	0x080069a5
 8006958:	080069a5 	.word	0x080069a5
 800695c:	0800698d 	.word	0x0800698d
 8006960:	080069a5 	.word	0x080069a5
 8006964:	080069a5 	.word	0x080069a5
 8006968:	080069a5 	.word	0x080069a5
 800696c:	080069a5 	.word	0x080069a5
 8006970:	080069a5 	.word	0x080069a5
 8006974:	080069a5 	.word	0x080069a5
 8006978:	080069a5 	.word	0x080069a5
 800697c:	08006981 	.word	0x08006981
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	2b06      	cmp	r3, #6
 8006984:	d913      	bls.n	80069ae <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800698a:	e010      	b.n	80069ae <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	2b07      	cmp	r3, #7
 8006990:	d90f      	bls.n	80069b2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006996:	e00c      	b.n	80069b2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	2b0f      	cmp	r3, #15
 800699c:	d90b      	bls.n	80069b6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80069a2:	e008      	b.n	80069b6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	75fb      	strb	r3, [r7, #23]
      break;
 80069a8:	e006      	b.n	80069b8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80069aa:	bf00      	nop
 80069ac:	e004      	b.n	80069b8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80069ae:	bf00      	nop
 80069b0:	e002      	b.n	80069b8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80069b2:	bf00      	nop
 80069b4:	e000      	b.n	80069b8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80069b6:	bf00      	nop
  }
  if (status == HAL_OK)
 80069b8:	7dfb      	ldrb	r3, [r7, #23]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10d      	bne.n	80069da <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f023 0118 	bic.w	r1, r3, #24
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	430a      	orrs	r2, r1
 80069d8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80069da:	7dfb      	ldrb	r3, [r7, #23]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	371c      	adds	r7, #28
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e098      	b.n	8006b2c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	461a      	mov	r2, r3
 8006a00:	4b4d      	ldr	r3, [pc, #308]	; (8006b38 <HAL_DMA_Init+0x150>)
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d80f      	bhi.n	8006a26 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	4b4b      	ldr	r3, [pc, #300]	; (8006b3c <HAL_DMA_Init+0x154>)
 8006a0e:	4413      	add	r3, r2
 8006a10:	4a4b      	ldr	r2, [pc, #300]	; (8006b40 <HAL_DMA_Init+0x158>)
 8006a12:	fba2 2303 	umull	r2, r3, r2, r3
 8006a16:	091b      	lsrs	r3, r3, #4
 8006a18:	009a      	lsls	r2, r3, #2
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a48      	ldr	r2, [pc, #288]	; (8006b44 <HAL_DMA_Init+0x15c>)
 8006a22:	641a      	str	r2, [r3, #64]	; 0x40
 8006a24:	e00e      	b.n	8006a44 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	4b46      	ldr	r3, [pc, #280]	; (8006b48 <HAL_DMA_Init+0x160>)
 8006a2e:	4413      	add	r3, r2
 8006a30:	4a43      	ldr	r2, [pc, #268]	; (8006b40 <HAL_DMA_Init+0x158>)
 8006a32:	fba2 2303 	umull	r2, r3, r2, r3
 8006a36:	091b      	lsrs	r3, r3, #4
 8006a38:	009a      	lsls	r2, r3, #2
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a42      	ldr	r2, [pc, #264]	; (8006b4c <HAL_DMA_Init+0x164>)
 8006a42:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2202      	movs	r2, #2
 8006a48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a9e:	d039      	beq.n	8006b14 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa4:	4a27      	ldr	r2, [pc, #156]	; (8006b44 <HAL_DMA_Init+0x15c>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d11a      	bne.n	8006ae0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006aaa:	4b29      	ldr	r3, [pc, #164]	; (8006b50 <HAL_DMA_Init+0x168>)
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab2:	f003 031c 	and.w	r3, r3, #28
 8006ab6:	210f      	movs	r1, #15
 8006ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8006abc:	43db      	mvns	r3, r3
 8006abe:	4924      	ldr	r1, [pc, #144]	; (8006b50 <HAL_DMA_Init+0x168>)
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006ac4:	4b22      	ldr	r3, [pc, #136]	; (8006b50 <HAL_DMA_Init+0x168>)
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6859      	ldr	r1, [r3, #4]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad0:	f003 031c 	and.w	r3, r3, #28
 8006ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ad8:	491d      	ldr	r1, [pc, #116]	; (8006b50 <HAL_DMA_Init+0x168>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	600b      	str	r3, [r1, #0]
 8006ade:	e019      	b.n	8006b14 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006ae0:	4b1c      	ldr	r3, [pc, #112]	; (8006b54 <HAL_DMA_Init+0x16c>)
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae8:	f003 031c 	and.w	r3, r3, #28
 8006aec:	210f      	movs	r1, #15
 8006aee:	fa01 f303 	lsl.w	r3, r1, r3
 8006af2:	43db      	mvns	r3, r3
 8006af4:	4917      	ldr	r1, [pc, #92]	; (8006b54 <HAL_DMA_Init+0x16c>)
 8006af6:	4013      	ands	r3, r2
 8006af8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006afa:	4b16      	ldr	r3, [pc, #88]	; (8006b54 <HAL_DMA_Init+0x16c>)
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6859      	ldr	r1, [r3, #4]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b06:	f003 031c 	and.w	r3, r3, #28
 8006b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b0e:	4911      	ldr	r1, [pc, #68]	; (8006b54 <HAL_DMA_Init+0x16c>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3714      	adds	r7, #20
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr
 8006b38:	40020407 	.word	0x40020407
 8006b3c:	bffdfff8 	.word	0xbffdfff8
 8006b40:	cccccccd 	.word	0xcccccccd
 8006b44:	40020000 	.word	0x40020000
 8006b48:	bffdfbf8 	.word	0xbffdfbf8
 8006b4c:	40020400 	.word	0x40020400
 8006b50:	400200a8 	.word	0x400200a8
 8006b54:	400204a8 	.word	0x400204a8

08006b58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b086      	sub	sp, #24
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
 8006b64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d101      	bne.n	8006b78 <HAL_DMA_Start_IT+0x20>
 8006b74:	2302      	movs	r3, #2
 8006b76:	e04b      	b.n	8006c10 <HAL_DMA_Start_IT+0xb8>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d13a      	bne.n	8006c02 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2202      	movs	r2, #2
 8006b90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f022 0201 	bic.w	r2, r2, #1
 8006ba8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	68b9      	ldr	r1, [r7, #8]
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f000 f8e0 	bl	8006d76 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d008      	beq.n	8006bd0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f042 020e 	orr.w	r2, r2, #14
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	e00f      	b.n	8006bf0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 0204 	bic.w	r2, r2, #4
 8006bde:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 020a 	orr.w	r2, r2, #10
 8006bee:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f042 0201 	orr.w	r2, r2, #1
 8006bfe:	601a      	str	r2, [r3, #0]
 8006c00:	e005      	b.n	8006c0e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3718      	adds	r7, #24
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c34:	f003 031c 	and.w	r3, r3, #28
 8006c38:	2204      	movs	r2, #4
 8006c3a:	409a      	lsls	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	4013      	ands	r3, r2
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d026      	beq.n	8006c92 <HAL_DMA_IRQHandler+0x7a>
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	f003 0304 	and.w	r3, r3, #4
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d021      	beq.n	8006c92 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0320 	and.w	r3, r3, #32
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d107      	bne.n	8006c6c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f022 0204 	bic.w	r2, r2, #4
 8006c6a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c70:	f003 021c 	and.w	r2, r3, #28
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c78:	2104      	movs	r1, #4
 8006c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8006c7e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d071      	beq.n	8006d6c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8006c90:	e06c      	b.n	8006d6c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c96:	f003 031c 	and.w	r3, r3, #28
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	409a      	lsls	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d02e      	beq.n	8006d04 <HAL_DMA_IRQHandler+0xec>
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	f003 0302 	and.w	r3, r3, #2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d029      	beq.n	8006d04 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0320 	and.w	r3, r3, #32
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10b      	bne.n	8006cd6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f022 020a 	bic.w	r2, r2, #10
 8006ccc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cda:	f003 021c 	and.w	r2, r3, #28
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce2:	2102      	movs	r1, #2
 8006ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8006ce8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d038      	beq.n	8006d6c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006d02:	e033      	b.n	8006d6c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d08:	f003 031c 	and.w	r3, r3, #28
 8006d0c:	2208      	movs	r2, #8
 8006d0e:	409a      	lsls	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4013      	ands	r3, r2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d02a      	beq.n	8006d6e <HAL_DMA_IRQHandler+0x156>
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	f003 0308 	and.w	r3, r3, #8
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d025      	beq.n	8006d6e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f022 020e 	bic.w	r2, r2, #14
 8006d30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d36:	f003 021c 	and.w	r2, r3, #28
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3e:	2101      	movs	r1, #1
 8006d40:	fa01 f202 	lsl.w	r2, r1, r2
 8006d44:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d004      	beq.n	8006d6e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006d6c:	bf00      	nop
 8006d6e:	bf00      	nop
}
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b085      	sub	sp, #20
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	60f8      	str	r0, [r7, #12]
 8006d7e:	60b9      	str	r1, [r7, #8]
 8006d80:	607a      	str	r2, [r7, #4]
 8006d82:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d88:	f003 021c 	and.w	r2, r3, #28
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d90:	2101      	movs	r1, #1
 8006d92:	fa01 f202 	lsl.w	r2, r1, r2
 8006d96:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	2b10      	cmp	r3, #16
 8006da6:	d108      	bne.n	8006dba <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68ba      	ldr	r2, [r7, #8]
 8006db6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006db8:	e007      	b.n	8006dca <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68ba      	ldr	r2, [r7, #8]
 8006dc0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	60da      	str	r2, [r3, #12]
}
 8006dca:	bf00      	nop
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
	...

08006dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006de2:	2300      	movs	r3, #0
 8006de4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006de6:	e17f      	b.n	80070e8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	2101      	movs	r1, #1
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	fa01 f303 	lsl.w	r3, r1, r3
 8006df4:	4013      	ands	r3, r2
 8006df6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f000 8171 	beq.w	80070e2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f003 0303 	and.w	r3, r3, #3
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d005      	beq.n	8006e18 <HAL_GPIO_Init+0x40>
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f003 0303 	and.w	r3, r3, #3
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d130      	bne.n	8006e7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	005b      	lsls	r3, r3, #1
 8006e22:	2203      	movs	r2, #3
 8006e24:	fa02 f303 	lsl.w	r3, r2, r3
 8006e28:	43db      	mvns	r3, r3
 8006e2a:	693a      	ldr	r2, [r7, #16]
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	68da      	ldr	r2, [r3, #12]
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	005b      	lsls	r3, r3, #1
 8006e38:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006e4e:	2201      	movs	r2, #1
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	fa02 f303 	lsl.w	r3, r2, r3
 8006e56:	43db      	mvns	r3, r3
 8006e58:	693a      	ldr	r2, [r7, #16]
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	091b      	lsrs	r3, r3, #4
 8006e64:	f003 0201 	and.w	r2, r3, #1
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	f003 0303 	and.w	r3, r3, #3
 8006e82:	2b03      	cmp	r3, #3
 8006e84:	d118      	bne.n	8006eb8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	fa02 f303 	lsl.w	r3, r2, r3
 8006e94:	43db      	mvns	r3, r3
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	4013      	ands	r3, r2
 8006e9a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	08db      	lsrs	r3, r3, #3
 8006ea2:	f003 0201 	and.w	r2, r3, #1
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	f003 0303 	and.w	r3, r3, #3
 8006ec0:	2b03      	cmp	r3, #3
 8006ec2:	d017      	beq.n	8006ef4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	005b      	lsls	r3, r3, #1
 8006ece:	2203      	movs	r2, #3
 8006ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed4:	43db      	mvns	r3, r3
 8006ed6:	693a      	ldr	r2, [r7, #16]
 8006ed8:	4013      	ands	r3, r2
 8006eda:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	689a      	ldr	r2, [r3, #8]
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	005b      	lsls	r3, r3, #1
 8006ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	f003 0303 	and.w	r3, r3, #3
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d123      	bne.n	8006f48 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	08da      	lsrs	r2, r3, #3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	3208      	adds	r2, #8
 8006f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f003 0307 	and.w	r3, r3, #7
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	220f      	movs	r2, #15
 8006f18:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1c:	43db      	mvns	r3, r3
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	4013      	ands	r3, r2
 8006f22:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	691a      	ldr	r2, [r3, #16]
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	f003 0307 	and.w	r3, r3, #7
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	fa02 f303 	lsl.w	r3, r2, r3
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	08da      	lsrs	r2, r3, #3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	3208      	adds	r2, #8
 8006f42:	6939      	ldr	r1, [r7, #16]
 8006f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	2203      	movs	r2, #3
 8006f54:	fa02 f303 	lsl.w	r3, r2, r3
 8006f58:	43db      	mvns	r3, r3
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	f003 0203 	and.w	r2, r3, #3
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	005b      	lsls	r3, r3, #1
 8006f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 80ac 	beq.w	80070e2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f8a:	4b5f      	ldr	r3, [pc, #380]	; (8007108 <HAL_GPIO_Init+0x330>)
 8006f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f8e:	4a5e      	ldr	r2, [pc, #376]	; (8007108 <HAL_GPIO_Init+0x330>)
 8006f90:	f043 0301 	orr.w	r3, r3, #1
 8006f94:	6613      	str	r3, [r2, #96]	; 0x60
 8006f96:	4b5c      	ldr	r3, [pc, #368]	; (8007108 <HAL_GPIO_Init+0x330>)
 8006f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	60bb      	str	r3, [r7, #8]
 8006fa0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006fa2:	4a5a      	ldr	r2, [pc, #360]	; (800710c <HAL_GPIO_Init+0x334>)
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	089b      	lsrs	r3, r3, #2
 8006fa8:	3302      	adds	r3, #2
 8006faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	f003 0303 	and.w	r3, r3, #3
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	220f      	movs	r2, #15
 8006fba:	fa02 f303 	lsl.w	r3, r2, r3
 8006fbe:	43db      	mvns	r3, r3
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006fcc:	d025      	beq.n	800701a <HAL_GPIO_Init+0x242>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a4f      	ldr	r2, [pc, #316]	; (8007110 <HAL_GPIO_Init+0x338>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d01f      	beq.n	8007016 <HAL_GPIO_Init+0x23e>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a4e      	ldr	r2, [pc, #312]	; (8007114 <HAL_GPIO_Init+0x33c>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d019      	beq.n	8007012 <HAL_GPIO_Init+0x23a>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a4d      	ldr	r2, [pc, #308]	; (8007118 <HAL_GPIO_Init+0x340>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d013      	beq.n	800700e <HAL_GPIO_Init+0x236>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a4c      	ldr	r2, [pc, #304]	; (800711c <HAL_GPIO_Init+0x344>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d00d      	beq.n	800700a <HAL_GPIO_Init+0x232>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a4b      	ldr	r2, [pc, #300]	; (8007120 <HAL_GPIO_Init+0x348>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d007      	beq.n	8007006 <HAL_GPIO_Init+0x22e>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a4a      	ldr	r2, [pc, #296]	; (8007124 <HAL_GPIO_Init+0x34c>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d101      	bne.n	8007002 <HAL_GPIO_Init+0x22a>
 8006ffe:	2306      	movs	r3, #6
 8007000:	e00c      	b.n	800701c <HAL_GPIO_Init+0x244>
 8007002:	2307      	movs	r3, #7
 8007004:	e00a      	b.n	800701c <HAL_GPIO_Init+0x244>
 8007006:	2305      	movs	r3, #5
 8007008:	e008      	b.n	800701c <HAL_GPIO_Init+0x244>
 800700a:	2304      	movs	r3, #4
 800700c:	e006      	b.n	800701c <HAL_GPIO_Init+0x244>
 800700e:	2303      	movs	r3, #3
 8007010:	e004      	b.n	800701c <HAL_GPIO_Init+0x244>
 8007012:	2302      	movs	r3, #2
 8007014:	e002      	b.n	800701c <HAL_GPIO_Init+0x244>
 8007016:	2301      	movs	r3, #1
 8007018:	e000      	b.n	800701c <HAL_GPIO_Init+0x244>
 800701a:	2300      	movs	r3, #0
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	f002 0203 	and.w	r2, r2, #3
 8007022:	0092      	lsls	r2, r2, #2
 8007024:	4093      	lsls	r3, r2
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	4313      	orrs	r3, r2
 800702a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800702c:	4937      	ldr	r1, [pc, #220]	; (800710c <HAL_GPIO_Init+0x334>)
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	089b      	lsrs	r3, r3, #2
 8007032:	3302      	adds	r3, #2
 8007034:	693a      	ldr	r2, [r7, #16]
 8007036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800703a:	4b3b      	ldr	r3, [pc, #236]	; (8007128 <HAL_GPIO_Init+0x350>)
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	43db      	mvns	r3, r3
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	4013      	ands	r3, r2
 8007048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007052:	2b00      	cmp	r3, #0
 8007054:	d003      	beq.n	800705e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8007056:	693a      	ldr	r2, [r7, #16]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4313      	orrs	r3, r2
 800705c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800705e:	4a32      	ldr	r2, [pc, #200]	; (8007128 <HAL_GPIO_Init+0x350>)
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007064:	4b30      	ldr	r3, [pc, #192]	; (8007128 <HAL_GPIO_Init+0x350>)
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	43db      	mvns	r3, r3
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	4013      	ands	r3, r2
 8007072:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800707c:	2b00      	cmp	r3, #0
 800707e:	d003      	beq.n	8007088 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	4313      	orrs	r3, r2
 8007086:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007088:	4a27      	ldr	r2, [pc, #156]	; (8007128 <HAL_GPIO_Init+0x350>)
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800708e:	4b26      	ldr	r3, [pc, #152]	; (8007128 <HAL_GPIO_Init+0x350>)
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	43db      	mvns	r3, r3
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	4013      	ands	r3, r2
 800709c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d003      	beq.n	80070b2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80070b2:	4a1d      	ldr	r2, [pc, #116]	; (8007128 <HAL_GPIO_Init+0x350>)
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80070b8:	4b1b      	ldr	r3, [pc, #108]	; (8007128 <HAL_GPIO_Init+0x350>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	43db      	mvns	r3, r3
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	4013      	ands	r3, r2
 80070c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d003      	beq.n	80070dc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	4313      	orrs	r3, r2
 80070da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80070dc:	4a12      	ldr	r2, [pc, #72]	; (8007128 <HAL_GPIO_Init+0x350>)
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	3301      	adds	r3, #1
 80070e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	fa22 f303 	lsr.w	r3, r2, r3
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f47f ae78 	bne.w	8006de8 <HAL_GPIO_Init+0x10>
  }
}
 80070f8:	bf00      	nop
 80070fa:	bf00      	nop
 80070fc:	371c      	adds	r7, #28
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	40021000 	.word	0x40021000
 800710c:	40010000 	.word	0x40010000
 8007110:	48000400 	.word	0x48000400
 8007114:	48000800 	.word	0x48000800
 8007118:	48000c00 	.word	0x48000c00
 800711c:	48001000 	.word	0x48001000
 8007120:	48001400 	.word	0x48001400
 8007124:	48001800 	.word	0x48001800
 8007128:	40010400 	.word	0x40010400

0800712c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800712c:	b480      	push	{r7}
 800712e:	b087      	sub	sp, #28
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007136:	2300      	movs	r3, #0
 8007138:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800713a:	e0cd      	b.n	80072d8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800713c:	2201      	movs	r2, #1
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	fa02 f303 	lsl.w	r3, r2, r3
 8007144:	683a      	ldr	r2, [r7, #0]
 8007146:	4013      	ands	r3, r2
 8007148:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	2b00      	cmp	r3, #0
 800714e:	f000 80c0 	beq.w	80072d2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8007152:	4a68      	ldr	r2, [pc, #416]	; (80072f4 <HAL_GPIO_DeInit+0x1c8>)
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	089b      	lsrs	r3, r3, #2
 8007158:	3302      	adds	r3, #2
 800715a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800715e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f003 0303 	and.w	r3, r3, #3
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	220f      	movs	r2, #15
 800716a:	fa02 f303 	lsl.w	r3, r2, r3
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	4013      	ands	r3, r2
 8007172:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800717a:	d025      	beq.n	80071c8 <HAL_GPIO_DeInit+0x9c>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a5e      	ldr	r2, [pc, #376]	; (80072f8 <HAL_GPIO_DeInit+0x1cc>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d01f      	beq.n	80071c4 <HAL_GPIO_DeInit+0x98>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a5d      	ldr	r2, [pc, #372]	; (80072fc <HAL_GPIO_DeInit+0x1d0>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d019      	beq.n	80071c0 <HAL_GPIO_DeInit+0x94>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a5c      	ldr	r2, [pc, #368]	; (8007300 <HAL_GPIO_DeInit+0x1d4>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d013      	beq.n	80071bc <HAL_GPIO_DeInit+0x90>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a5b      	ldr	r2, [pc, #364]	; (8007304 <HAL_GPIO_DeInit+0x1d8>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d00d      	beq.n	80071b8 <HAL_GPIO_DeInit+0x8c>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a5a      	ldr	r2, [pc, #360]	; (8007308 <HAL_GPIO_DeInit+0x1dc>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d007      	beq.n	80071b4 <HAL_GPIO_DeInit+0x88>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a59      	ldr	r2, [pc, #356]	; (800730c <HAL_GPIO_DeInit+0x1e0>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d101      	bne.n	80071b0 <HAL_GPIO_DeInit+0x84>
 80071ac:	2306      	movs	r3, #6
 80071ae:	e00c      	b.n	80071ca <HAL_GPIO_DeInit+0x9e>
 80071b0:	2307      	movs	r3, #7
 80071b2:	e00a      	b.n	80071ca <HAL_GPIO_DeInit+0x9e>
 80071b4:	2305      	movs	r3, #5
 80071b6:	e008      	b.n	80071ca <HAL_GPIO_DeInit+0x9e>
 80071b8:	2304      	movs	r3, #4
 80071ba:	e006      	b.n	80071ca <HAL_GPIO_DeInit+0x9e>
 80071bc:	2303      	movs	r3, #3
 80071be:	e004      	b.n	80071ca <HAL_GPIO_DeInit+0x9e>
 80071c0:	2302      	movs	r3, #2
 80071c2:	e002      	b.n	80071ca <HAL_GPIO_DeInit+0x9e>
 80071c4:	2301      	movs	r3, #1
 80071c6:	e000      	b.n	80071ca <HAL_GPIO_DeInit+0x9e>
 80071c8:	2300      	movs	r3, #0
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	f002 0203 	and.w	r2, r2, #3
 80071d0:	0092      	lsls	r2, r2, #2
 80071d2:	4093      	lsls	r3, r2
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d132      	bne.n	8007240 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80071da:	4b4d      	ldr	r3, [pc, #308]	; (8007310 <HAL_GPIO_DeInit+0x1e4>)
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	43db      	mvns	r3, r3
 80071e2:	494b      	ldr	r1, [pc, #300]	; (8007310 <HAL_GPIO_DeInit+0x1e4>)
 80071e4:	4013      	ands	r3, r2
 80071e6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80071e8:	4b49      	ldr	r3, [pc, #292]	; (8007310 <HAL_GPIO_DeInit+0x1e4>)
 80071ea:	685a      	ldr	r2, [r3, #4]
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	43db      	mvns	r3, r3
 80071f0:	4947      	ldr	r1, [pc, #284]	; (8007310 <HAL_GPIO_DeInit+0x1e4>)
 80071f2:	4013      	ands	r3, r2
 80071f4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80071f6:	4b46      	ldr	r3, [pc, #280]	; (8007310 <HAL_GPIO_DeInit+0x1e4>)
 80071f8:	68da      	ldr	r2, [r3, #12]
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	43db      	mvns	r3, r3
 80071fe:	4944      	ldr	r1, [pc, #272]	; (8007310 <HAL_GPIO_DeInit+0x1e4>)
 8007200:	4013      	ands	r3, r2
 8007202:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8007204:	4b42      	ldr	r3, [pc, #264]	; (8007310 <HAL_GPIO_DeInit+0x1e4>)
 8007206:	689a      	ldr	r2, [r3, #8]
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	43db      	mvns	r3, r3
 800720c:	4940      	ldr	r1, [pc, #256]	; (8007310 <HAL_GPIO_DeInit+0x1e4>)
 800720e:	4013      	ands	r3, r2
 8007210:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	f003 0303 	and.w	r3, r3, #3
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	220f      	movs	r2, #15
 800721c:	fa02 f303 	lsl.w	r3, r2, r3
 8007220:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8007222:	4a34      	ldr	r2, [pc, #208]	; (80072f4 <HAL_GPIO_DeInit+0x1c8>)
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	089b      	lsrs	r3, r3, #2
 8007228:	3302      	adds	r3, #2
 800722a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	43da      	mvns	r2, r3
 8007232:	4830      	ldr	r0, [pc, #192]	; (80072f4 <HAL_GPIO_DeInit+0x1c8>)
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	089b      	lsrs	r3, r3, #2
 8007238:	400a      	ands	r2, r1
 800723a:	3302      	adds	r3, #2
 800723c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	005b      	lsls	r3, r3, #1
 8007248:	2103      	movs	r1, #3
 800724a:	fa01 f303 	lsl.w	r3, r1, r3
 800724e:	431a      	orrs	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	08da      	lsrs	r2, r3, #3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	3208      	adds	r2, #8
 800725c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	f003 0307 	and.w	r3, r3, #7
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	220f      	movs	r2, #15
 800726a:	fa02 f303 	lsl.w	r3, r2, r3
 800726e:	43db      	mvns	r3, r3
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	08d2      	lsrs	r2, r2, #3
 8007274:	4019      	ands	r1, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	3208      	adds	r2, #8
 800727a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	689a      	ldr	r2, [r3, #8]
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	005b      	lsls	r3, r3, #1
 8007286:	2103      	movs	r1, #3
 8007288:	fa01 f303 	lsl.w	r3, r1, r3
 800728c:	43db      	mvns	r3, r3
 800728e:	401a      	ands	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685a      	ldr	r2, [r3, #4]
 8007298:	2101      	movs	r1, #1
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	fa01 f303 	lsl.w	r3, r1, r3
 80072a0:	43db      	mvns	r3, r3
 80072a2:	401a      	ands	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	68da      	ldr	r2, [r3, #12]
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	005b      	lsls	r3, r3, #1
 80072b0:	2103      	movs	r1, #3
 80072b2:	fa01 f303 	lsl.w	r3, r1, r3
 80072b6:	43db      	mvns	r3, r3
 80072b8:	401a      	ands	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c2:	2101      	movs	r1, #1
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	fa01 f303 	lsl.w	r3, r1, r3
 80072ca:	43db      	mvns	r3, r3
 80072cc:	401a      	ands	r2, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	3301      	adds	r3, #1
 80072d6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80072d8:	683a      	ldr	r2, [r7, #0]
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	fa22 f303 	lsr.w	r3, r2, r3
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f47f af2b 	bne.w	800713c <HAL_GPIO_DeInit+0x10>
  }
}
 80072e6:	bf00      	nop
 80072e8:	bf00      	nop
 80072ea:	371c      	adds	r7, #28
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr
 80072f4:	40010000 	.word	0x40010000
 80072f8:	48000400 	.word	0x48000400
 80072fc:	48000800 	.word	0x48000800
 8007300:	48000c00 	.word	0x48000c00
 8007304:	48001000 	.word	0x48001000
 8007308:	48001400 	.word	0x48001400
 800730c:	48001800 	.word	0x48001800
 8007310:	40010400 	.word	0x40010400

08007314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	460b      	mov	r3, r1
 800731e:	807b      	strh	r3, [r7, #2]
 8007320:	4613      	mov	r3, r2
 8007322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007324:	787b      	ldrb	r3, [r7, #1]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d003      	beq.n	8007332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800732a:	887a      	ldrh	r2, [r7, #2]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007330:	e002      	b.n	8007338 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007332:	887a      	ldrh	r2, [r7, #2]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	4603      	mov	r3, r0
 800734c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800734e:	4b08      	ldr	r3, [pc, #32]	; (8007370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007350:	695a      	ldr	r2, [r3, #20]
 8007352:	88fb      	ldrh	r3, [r7, #6]
 8007354:	4013      	ands	r3, r2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d006      	beq.n	8007368 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800735a:	4a05      	ldr	r2, [pc, #20]	; (8007370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800735c:	88fb      	ldrh	r3, [r7, #6]
 800735e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007360:	88fb      	ldrh	r3, [r7, #6]
 8007362:	4618      	mov	r0, r3
 8007364:	f7fa ffe6 	bl	8002334 <HAL_GPIO_EXTI_Callback>
  }
}
 8007368:	bf00      	nop
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	40010400 	.word	0x40010400

08007374 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d101      	bne.n	8007386 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e081      	b.n	800748a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	d106      	bne.n	80073a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7fa fe04 	bl	8001fa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2224      	movs	r2, #36	; 0x24
 80073a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f022 0201 	bic.w	r2, r2, #1
 80073b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80073c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	689a      	ldr	r2, [r3, #8]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80073d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d107      	bne.n	80073ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	689a      	ldr	r2, [r3, #8]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073ea:	609a      	str	r2, [r3, #8]
 80073ec:	e006      	b.n	80073fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	689a      	ldr	r2, [r3, #8]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80073fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	2b02      	cmp	r3, #2
 8007402:	d104      	bne.n	800740e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800740c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	6812      	ldr	r2, [r2, #0]
 8007418:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800741c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007420:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68da      	ldr	r2, [r3, #12]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007430:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	691a      	ldr	r2, [r3, #16]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	695b      	ldr	r3, [r3, #20]
 800743a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	430a      	orrs	r2, r1
 800744a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	69d9      	ldr	r1, [r3, #28]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a1a      	ldr	r2, [r3, #32]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	430a      	orrs	r2, r1
 800745a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f042 0201 	orr.w	r2, r2, #1
 800746a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2220      	movs	r2, #32
 8007476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3708      	adds	r7, #8
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b082      	sub	sp, #8
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d101      	bne.n	80074a4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	e021      	b.n	80074e8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2224      	movs	r2, #36	; 0x24
 80074a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f022 0201 	bic.w	r2, r2, #1
 80074ba:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f7fa fdd1 	bl	8002064 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3708      	adds	r7, #8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b088      	sub	sp, #32
 80074f4:	af02      	add	r7, sp, #8
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	4608      	mov	r0, r1
 80074fa:	4611      	mov	r1, r2
 80074fc:	461a      	mov	r2, r3
 80074fe:	4603      	mov	r3, r0
 8007500:	817b      	strh	r3, [r7, #10]
 8007502:	460b      	mov	r3, r1
 8007504:	813b      	strh	r3, [r7, #8]
 8007506:	4613      	mov	r3, r2
 8007508:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007510:	b2db      	uxtb	r3, r3
 8007512:	2b20      	cmp	r3, #32
 8007514:	f040 80f9 	bne.w	800770a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d002      	beq.n	8007524 <HAL_I2C_Mem_Write+0x34>
 800751e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007520:	2b00      	cmp	r3, #0
 8007522:	d105      	bne.n	8007530 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800752a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e0ed      	b.n	800770c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007536:	2b01      	cmp	r3, #1
 8007538:	d101      	bne.n	800753e <HAL_I2C_Mem_Write+0x4e>
 800753a:	2302      	movs	r3, #2
 800753c:	e0e6      	b.n	800770c <HAL_I2C_Mem_Write+0x21c>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007546:	f7ff f847 	bl	80065d8 <HAL_GetTick>
 800754a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	2319      	movs	r3, #25
 8007552:	2201      	movs	r2, #1
 8007554:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f000 fadd 	bl	8007b18 <I2C_WaitOnFlagUntilTimeout>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d001      	beq.n	8007568 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e0d1      	b.n	800770c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2221      	movs	r2, #33	; 0x21
 800756c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2240      	movs	r2, #64	; 0x40
 8007574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6a3a      	ldr	r2, [r7, #32]
 8007582:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007588:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007590:	88f8      	ldrh	r0, [r7, #6]
 8007592:	893a      	ldrh	r2, [r7, #8]
 8007594:	8979      	ldrh	r1, [r7, #10]
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	9301      	str	r3, [sp, #4]
 800759a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	4603      	mov	r3, r0
 80075a0:	68f8      	ldr	r0, [r7, #12]
 80075a2:	f000 f9ed 	bl	8007980 <I2C_RequestMemoryWrite>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d005      	beq.n	80075b8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e0a9      	b.n	800770c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075bc:	b29b      	uxth	r3, r3
 80075be:	2bff      	cmp	r3, #255	; 0xff
 80075c0:	d90e      	bls.n	80075e0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	22ff      	movs	r2, #255	; 0xff
 80075c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075cc:	b2da      	uxtb	r2, r3
 80075ce:	8979      	ldrh	r1, [r7, #10]
 80075d0:	2300      	movs	r3, #0
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f000 fc45 	bl	8007e68 <I2C_TransferConfig>
 80075de:	e00f      	b.n	8007600 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ee:	b2da      	uxtb	r2, r3
 80075f0:	8979      	ldrh	r1, [r7, #10]
 80075f2:	2300      	movs	r3, #0
 80075f4:	9300      	str	r3, [sp, #0]
 80075f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f000 fc34 	bl	8007e68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007600:	697a      	ldr	r2, [r7, #20]
 8007602:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f000 fac7 	bl	8007b98 <I2C_WaitOnTXISFlagUntilTimeout>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d001      	beq.n	8007614 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	e07b      	b.n	800770c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007618:	781a      	ldrb	r2, [r3, #0]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007624:	1c5a      	adds	r2, r3, #1
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800762e:	b29b      	uxth	r3, r3
 8007630:	3b01      	subs	r3, #1
 8007632:	b29a      	uxth	r2, r3
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800763c:	3b01      	subs	r3, #1
 800763e:	b29a      	uxth	r2, r3
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007648:	b29b      	uxth	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d034      	beq.n	80076b8 <HAL_I2C_Mem_Write+0x1c8>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007652:	2b00      	cmp	r3, #0
 8007654:	d130      	bne.n	80076b8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	9300      	str	r3, [sp, #0]
 800765a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765c:	2200      	movs	r2, #0
 800765e:	2180      	movs	r1, #128	; 0x80
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f000 fa59 	bl	8007b18 <I2C_WaitOnFlagUntilTimeout>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d001      	beq.n	8007670 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	e04d      	b.n	800770c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007674:	b29b      	uxth	r3, r3
 8007676:	2bff      	cmp	r3, #255	; 0xff
 8007678:	d90e      	bls.n	8007698 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	22ff      	movs	r2, #255	; 0xff
 800767e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007684:	b2da      	uxtb	r2, r3
 8007686:	8979      	ldrh	r1, [r7, #10]
 8007688:	2300      	movs	r3, #0
 800768a:	9300      	str	r3, [sp, #0]
 800768c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f000 fbe9 	bl	8007e68 <I2C_TransferConfig>
 8007696:	e00f      	b.n	80076b8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800769c:	b29a      	uxth	r2, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076a6:	b2da      	uxtb	r2, r3
 80076a8:	8979      	ldrh	r1, [r7, #10]
 80076aa:	2300      	movs	r3, #0
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f000 fbd8 	bl	8007e68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076bc:	b29b      	uxth	r3, r3
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d19e      	bne.n	8007600 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f000 faa6 	bl	8007c18 <I2C_WaitOnSTOPFlagUntilTimeout>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e01a      	b.n	800770c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2220      	movs	r2, #32
 80076dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	6859      	ldr	r1, [r3, #4]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	4b0a      	ldr	r3, [pc, #40]	; (8007714 <HAL_I2C_Mem_Write+0x224>)
 80076ea:	400b      	ands	r3, r1
 80076ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2220      	movs	r2, #32
 80076f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007706:	2300      	movs	r3, #0
 8007708:	e000      	b.n	800770c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800770a:	2302      	movs	r3, #2
  }
}
 800770c:	4618      	mov	r0, r3
 800770e:	3718      	adds	r7, #24
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	fe00e800 	.word	0xfe00e800

08007718 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b088      	sub	sp, #32
 800771c:	af02      	add	r7, sp, #8
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	4608      	mov	r0, r1
 8007722:	4611      	mov	r1, r2
 8007724:	461a      	mov	r2, r3
 8007726:	4603      	mov	r3, r0
 8007728:	817b      	strh	r3, [r7, #10]
 800772a:	460b      	mov	r3, r1
 800772c:	813b      	strh	r3, [r7, #8]
 800772e:	4613      	mov	r3, r2
 8007730:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007738:	b2db      	uxtb	r3, r3
 800773a:	2b20      	cmp	r3, #32
 800773c:	f040 80fd 	bne.w	800793a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d002      	beq.n	800774c <HAL_I2C_Mem_Read+0x34>
 8007746:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007748:	2b00      	cmp	r3, #0
 800774a:	d105      	bne.n	8007758 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007752:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e0f1      	b.n	800793c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800775e:	2b01      	cmp	r3, #1
 8007760:	d101      	bne.n	8007766 <HAL_I2C_Mem_Read+0x4e>
 8007762:	2302      	movs	r3, #2
 8007764:	e0ea      	b.n	800793c <HAL_I2C_Mem_Read+0x224>
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800776e:	f7fe ff33 	bl	80065d8 <HAL_GetTick>
 8007772:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	2319      	movs	r3, #25
 800777a:	2201      	movs	r2, #1
 800777c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f000 f9c9 	bl	8007b18 <I2C_WaitOnFlagUntilTimeout>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d001      	beq.n	8007790 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e0d5      	b.n	800793c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2222      	movs	r2, #34	; 0x22
 8007794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2240      	movs	r2, #64	; 0x40
 800779c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6a3a      	ldr	r2, [r7, #32]
 80077aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80077b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80077b8:	88f8      	ldrh	r0, [r7, #6]
 80077ba:	893a      	ldrh	r2, [r7, #8]
 80077bc:	8979      	ldrh	r1, [r7, #10]
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	9301      	str	r3, [sp, #4]
 80077c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c4:	9300      	str	r3, [sp, #0]
 80077c6:	4603      	mov	r3, r0
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f000 f92d 	bl	8007a28 <I2C_RequestMemoryRead>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d005      	beq.n	80077e0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e0ad      	b.n	800793c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	2bff      	cmp	r3, #255	; 0xff
 80077e8:	d90e      	bls.n	8007808 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	22ff      	movs	r2, #255	; 0xff
 80077ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077f4:	b2da      	uxtb	r2, r3
 80077f6:	8979      	ldrh	r1, [r7, #10]
 80077f8:	4b52      	ldr	r3, [pc, #328]	; (8007944 <HAL_I2C_Mem_Read+0x22c>)
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f000 fb31 	bl	8007e68 <I2C_TransferConfig>
 8007806:	e00f      	b.n	8007828 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800780c:	b29a      	uxth	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007816:	b2da      	uxtb	r2, r3
 8007818:	8979      	ldrh	r1, [r7, #10]
 800781a:	4b4a      	ldr	r3, [pc, #296]	; (8007944 <HAL_I2C_Mem_Read+0x22c>)
 800781c:	9300      	str	r3, [sp, #0]
 800781e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f000 fb20 	bl	8007e68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782e:	2200      	movs	r2, #0
 8007830:	2104      	movs	r1, #4
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f000 f970 	bl	8007b18 <I2C_WaitOnFlagUntilTimeout>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d001      	beq.n	8007842 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e07c      	b.n	800793c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784c:	b2d2      	uxtb	r2, r2
 800784e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007854:	1c5a      	adds	r2, r3, #1
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800785e:	3b01      	subs	r3, #1
 8007860:	b29a      	uxth	r2, r3
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800786a:	b29b      	uxth	r3, r3
 800786c:	3b01      	subs	r3, #1
 800786e:	b29a      	uxth	r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007878:	b29b      	uxth	r3, r3
 800787a:	2b00      	cmp	r3, #0
 800787c:	d034      	beq.n	80078e8 <HAL_I2C_Mem_Read+0x1d0>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007882:	2b00      	cmp	r3, #0
 8007884:	d130      	bne.n	80078e8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788c:	2200      	movs	r2, #0
 800788e:	2180      	movs	r1, #128	; 0x80
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 f941 	bl	8007b18 <I2C_WaitOnFlagUntilTimeout>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	e04d      	b.n	800793c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	2bff      	cmp	r3, #255	; 0xff
 80078a8:	d90e      	bls.n	80078c8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	22ff      	movs	r2, #255	; 0xff
 80078ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078b4:	b2da      	uxtb	r2, r3
 80078b6:	8979      	ldrh	r1, [r7, #10]
 80078b8:	2300      	movs	r3, #0
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f000 fad1 	bl	8007e68 <I2C_TransferConfig>
 80078c6:	e00f      	b.n	80078e8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078d6:	b2da      	uxtb	r2, r3
 80078d8:	8979      	ldrh	r1, [r7, #10]
 80078da:	2300      	movs	r3, #0
 80078dc:	9300      	str	r3, [sp, #0]
 80078de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f000 fac0 	bl	8007e68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d19a      	bne.n	8007828 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f000 f98e 	bl	8007c18 <I2C_WaitOnSTOPFlagUntilTimeout>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d001      	beq.n	8007906 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	e01a      	b.n	800793c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2220      	movs	r2, #32
 800790c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	6859      	ldr	r1, [r3, #4]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	4b0b      	ldr	r3, [pc, #44]	; (8007948 <HAL_I2C_Mem_Read+0x230>)
 800791a:	400b      	ands	r3, r1
 800791c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2220      	movs	r2, #32
 8007922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007936:	2300      	movs	r3, #0
 8007938:	e000      	b.n	800793c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800793a:	2302      	movs	r3, #2
  }
}
 800793c:	4618      	mov	r0, r3
 800793e:	3718      	adds	r7, #24
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	80002400 	.word	0x80002400
 8007948:	fe00e800 	.word	0xfe00e800

0800794c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800795a:	b2db      	uxtb	r3, r3
}
 800795c:	4618      	mov	r0, r3
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8007974:	4618      	mov	r0, r3
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af02      	add	r7, sp, #8
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	4608      	mov	r0, r1
 800798a:	4611      	mov	r1, r2
 800798c:	461a      	mov	r2, r3
 800798e:	4603      	mov	r3, r0
 8007990:	817b      	strh	r3, [r7, #10]
 8007992:	460b      	mov	r3, r1
 8007994:	813b      	strh	r3, [r7, #8]
 8007996:	4613      	mov	r3, r2
 8007998:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800799a:	88fb      	ldrh	r3, [r7, #6]
 800799c:	b2da      	uxtb	r2, r3
 800799e:	8979      	ldrh	r1, [r7, #10]
 80079a0:	4b20      	ldr	r3, [pc, #128]	; (8007a24 <I2C_RequestMemoryWrite+0xa4>)
 80079a2:	9300      	str	r3, [sp, #0]
 80079a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f000 fa5d 	bl	8007e68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079ae:	69fa      	ldr	r2, [r7, #28]
 80079b0:	69b9      	ldr	r1, [r7, #24]
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f000 f8f0 	bl	8007b98 <I2C_WaitOnTXISFlagUntilTimeout>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d001      	beq.n	80079c2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e02c      	b.n	8007a1c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80079c2:	88fb      	ldrh	r3, [r7, #6]
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d105      	bne.n	80079d4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80079c8:	893b      	ldrh	r3, [r7, #8]
 80079ca:	b2da      	uxtb	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	629a      	str	r2, [r3, #40]	; 0x28
 80079d2:	e015      	b.n	8007a00 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80079d4:	893b      	ldrh	r3, [r7, #8]
 80079d6:	0a1b      	lsrs	r3, r3, #8
 80079d8:	b29b      	uxth	r3, r3
 80079da:	b2da      	uxtb	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079e2:	69fa      	ldr	r2, [r7, #28]
 80079e4:	69b9      	ldr	r1, [r7, #24]
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f000 f8d6 	bl	8007b98 <I2C_WaitOnTXISFlagUntilTimeout>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d001      	beq.n	80079f6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e012      	b.n	8007a1c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80079f6:	893b      	ldrh	r3, [r7, #8]
 80079f8:	b2da      	uxtb	r2, r3
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	9300      	str	r3, [sp, #0]
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	2200      	movs	r2, #0
 8007a08:	2180      	movs	r1, #128	; 0x80
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	f000 f884 	bl	8007b18 <I2C_WaitOnFlagUntilTimeout>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d001      	beq.n	8007a1a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e000      	b.n	8007a1c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	80002000 	.word	0x80002000

08007a28 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b086      	sub	sp, #24
 8007a2c:	af02      	add	r7, sp, #8
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	4608      	mov	r0, r1
 8007a32:	4611      	mov	r1, r2
 8007a34:	461a      	mov	r2, r3
 8007a36:	4603      	mov	r3, r0
 8007a38:	817b      	strh	r3, [r7, #10]
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	813b      	strh	r3, [r7, #8]
 8007a3e:	4613      	mov	r3, r2
 8007a40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007a42:	88fb      	ldrh	r3, [r7, #6]
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	8979      	ldrh	r1, [r7, #10]
 8007a48:	4b20      	ldr	r3, [pc, #128]	; (8007acc <I2C_RequestMemoryRead+0xa4>)
 8007a4a:	9300      	str	r3, [sp, #0]
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f000 fa0a 	bl	8007e68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a54:	69fa      	ldr	r2, [r7, #28]
 8007a56:	69b9      	ldr	r1, [r7, #24]
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f000 f89d 	bl	8007b98 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d001      	beq.n	8007a68 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	e02c      	b.n	8007ac2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a68:	88fb      	ldrh	r3, [r7, #6]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d105      	bne.n	8007a7a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a6e:	893b      	ldrh	r3, [r7, #8]
 8007a70:	b2da      	uxtb	r2, r3
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	629a      	str	r2, [r3, #40]	; 0x28
 8007a78:	e015      	b.n	8007aa6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007a7a:	893b      	ldrh	r3, [r7, #8]
 8007a7c:	0a1b      	lsrs	r3, r3, #8
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	b2da      	uxtb	r2, r3
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a88:	69fa      	ldr	r2, [r7, #28]
 8007a8a:	69b9      	ldr	r1, [r7, #24]
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f000 f883 	bl	8007b98 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d001      	beq.n	8007a9c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e012      	b.n	8007ac2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a9c:	893b      	ldrh	r3, [r7, #8]
 8007a9e:	b2da      	uxtb	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	2200      	movs	r2, #0
 8007aae:	2140      	movs	r1, #64	; 0x40
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f000 f831 	bl	8007b18 <I2C_WaitOnFlagUntilTimeout>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d001      	beq.n	8007ac0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e000      	b.n	8007ac2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	80002000 	.word	0x80002000

08007ad0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	f003 0302 	and.w	r3, r3, #2
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d103      	bne.n	8007aee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2200      	movs	r2, #0
 8007aec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	699b      	ldr	r3, [r3, #24]
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d007      	beq.n	8007b0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	699a      	ldr	r2, [r3, #24]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f042 0201 	orr.w	r2, r2, #1
 8007b0a:	619a      	str	r2, [r3, #24]
  }
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	603b      	str	r3, [r7, #0]
 8007b24:	4613      	mov	r3, r2
 8007b26:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b28:	e022      	b.n	8007b70 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b30:	d01e      	beq.n	8007b70 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b32:	f7fe fd51 	bl	80065d8 <HAL_GetTick>
 8007b36:	4602      	mov	r2, r0
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	683a      	ldr	r2, [r7, #0]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d302      	bcc.n	8007b48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d113      	bne.n	8007b70 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b4c:	f043 0220 	orr.w	r2, r3, #32
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2220      	movs	r2, #32
 8007b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e00f      	b.n	8007b90 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	699a      	ldr	r2, [r3, #24]
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	4013      	ands	r3, r2
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	bf0c      	ite	eq
 8007b80:	2301      	moveq	r3, #1
 8007b82:	2300      	movne	r3, #0
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	461a      	mov	r2, r3
 8007b88:	79fb      	ldrb	r3, [r7, #7]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d0cd      	beq.n	8007b2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007ba4:	e02c      	b.n	8007c00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	68b9      	ldr	r1, [r7, #8]
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f000 f870 	bl	8007c90 <I2C_IsErrorOccurred>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d001      	beq.n	8007bba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e02a      	b.n	8007c10 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc0:	d01e      	beq.n	8007c00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bc2:	f7fe fd09 	bl	80065d8 <HAL_GetTick>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	1ad3      	subs	r3, r2, r3
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d302      	bcc.n	8007bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d113      	bne.n	8007c00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bdc:	f043 0220 	orr.w	r2, r3, #32
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2220      	movs	r2, #32
 8007be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e007      	b.n	8007c10 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	f003 0302 	and.w	r3, r3, #2
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d1cb      	bne.n	8007ba6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c24:	e028      	b.n	8007c78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	68b9      	ldr	r1, [r7, #8]
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f000 f830 	bl	8007c90 <I2C_IsErrorOccurred>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d001      	beq.n	8007c3a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e026      	b.n	8007c88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c3a:	f7fe fccd 	bl	80065d8 <HAL_GetTick>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	1ad3      	subs	r3, r2, r3
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d302      	bcc.n	8007c50 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d113      	bne.n	8007c78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c54:	f043 0220 	orr.w	r2, r3, #32
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2220      	movs	r2, #32
 8007c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e007      	b.n	8007c88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	f003 0320 	and.w	r3, r3, #32
 8007c82:	2b20      	cmp	r3, #32
 8007c84:	d1cf      	bne.n	8007c26 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b08a      	sub	sp, #40	; 0x28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007caa:	2300      	movs	r3, #0
 8007cac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	f003 0310 	and.w	r3, r3, #16
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d075      	beq.n	8007da8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2210      	movs	r2, #16
 8007cc2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007cc4:	e056      	b.n	8007d74 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ccc:	d052      	beq.n	8007d74 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007cce:	f7fe fc83 	bl	80065d8 <HAL_GetTick>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d302      	bcc.n	8007ce4 <I2C_IsErrorOccurred+0x54>
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d147      	bne.n	8007d74 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007cf6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d06:	d12e      	bne.n	8007d66 <I2C_IsErrorOccurred+0xd6>
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d0e:	d02a      	beq.n	8007d66 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007d10:	7cfb      	ldrb	r3, [r7, #19]
 8007d12:	2b20      	cmp	r3, #32
 8007d14:	d027      	beq.n	8007d66 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	685a      	ldr	r2, [r3, #4]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d24:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007d26:	f7fe fc57 	bl	80065d8 <HAL_GetTick>
 8007d2a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d2c:	e01b      	b.n	8007d66 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007d2e:	f7fe fc53 	bl	80065d8 <HAL_GetTick>
 8007d32:	4602      	mov	r2, r0
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	1ad3      	subs	r3, r2, r3
 8007d38:	2b19      	cmp	r3, #25
 8007d3a:	d914      	bls.n	8007d66 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d40:	f043 0220 	orr.w	r2, r3, #32
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2220      	movs	r2, #32
 8007d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	f003 0320 	and.w	r3, r3, #32
 8007d70:	2b20      	cmp	r3, #32
 8007d72:	d1dc      	bne.n	8007d2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	699b      	ldr	r3, [r3, #24]
 8007d7a:	f003 0320 	and.w	r3, r3, #32
 8007d7e:	2b20      	cmp	r3, #32
 8007d80:	d003      	beq.n	8007d8a <I2C_IsErrorOccurred+0xfa>
 8007d82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d09d      	beq.n	8007cc6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007d8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d103      	bne.n	8007d9a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2220      	movs	r2, #32
 8007d98:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	f043 0304 	orr.w	r3, r3, #4
 8007da0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	699b      	ldr	r3, [r3, #24]
 8007dae:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00b      	beq.n	8007dd2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007dba:	6a3b      	ldr	r3, [r7, #32]
 8007dbc:	f043 0301 	orr.w	r3, r3, #1
 8007dc0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007dca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00b      	beq.n	8007df4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	f043 0308 	orr.w	r3, r3, #8
 8007de2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007dec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00b      	beq.n	8007e16 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007dfe:	6a3b      	ldr	r3, [r7, #32]
 8007e00:	f043 0302 	orr.w	r3, r3, #2
 8007e04:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007e16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d01c      	beq.n	8007e58 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f7ff fe56 	bl	8007ad0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	6859      	ldr	r1, [r3, #4]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	4b0d      	ldr	r3, [pc, #52]	; (8007e64 <I2C_IsErrorOccurred+0x1d4>)
 8007e30:	400b      	ands	r3, r1
 8007e32:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e38:	6a3b      	ldr	r3, [r7, #32]
 8007e3a:	431a      	orrs	r2, r3
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2220      	movs	r2, #32
 8007e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3728      	adds	r7, #40	; 0x28
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	fe00e800 	.word	0xfe00e800

08007e68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b087      	sub	sp, #28
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	607b      	str	r3, [r7, #4]
 8007e72:	460b      	mov	r3, r1
 8007e74:	817b      	strh	r3, [r7, #10]
 8007e76:	4613      	mov	r3, r2
 8007e78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e7a:	897b      	ldrh	r3, [r7, #10]
 8007e7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007e80:	7a7b      	ldrb	r3, [r7, #9]
 8007e82:	041b      	lsls	r3, r3, #16
 8007e84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e88:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e8e:	6a3b      	ldr	r3, [r7, #32]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e96:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	685a      	ldr	r2, [r3, #4]
 8007e9e:	6a3b      	ldr	r3, [r7, #32]
 8007ea0:	0d5b      	lsrs	r3, r3, #21
 8007ea2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007ea6:	4b08      	ldr	r3, [pc, #32]	; (8007ec8 <I2C_TransferConfig+0x60>)
 8007ea8:	430b      	orrs	r3, r1
 8007eaa:	43db      	mvns	r3, r3
 8007eac:	ea02 0103 	and.w	r1, r2, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	697a      	ldr	r2, [r7, #20]
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007eba:	bf00      	nop
 8007ebc:	371c      	adds	r7, #28
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	03ff63ff 	.word	0x03ff63ff

08007ecc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b20      	cmp	r3, #32
 8007ee0:	d138      	bne.n	8007f54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d101      	bne.n	8007ef0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007eec:	2302      	movs	r3, #2
 8007eee:	e032      	b.n	8007f56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2224      	movs	r2, #36	; 0x24
 8007efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f022 0201 	bic.w	r2, r2, #1
 8007f0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007f1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6819      	ldr	r1, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	683a      	ldr	r2, [r7, #0]
 8007f2c:	430a      	orrs	r2, r1
 8007f2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f042 0201 	orr.w	r2, r2, #1
 8007f3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2220      	movs	r2, #32
 8007f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	e000      	b.n	8007f56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007f54:	2302      	movs	r3, #2
  }
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	370c      	adds	r7, #12
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr

08007f62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007f62:	b480      	push	{r7}
 8007f64:	b085      	sub	sp, #20
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
 8007f6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	2b20      	cmp	r3, #32
 8007f76:	d139      	bne.n	8007fec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d101      	bne.n	8007f86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007f82:	2302      	movs	r3, #2
 8007f84:	e033      	b.n	8007fee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2224      	movs	r2, #36	; 0x24
 8007f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f022 0201 	bic.w	r2, r2, #1
 8007fa4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007fb4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	021b      	lsls	r3, r3, #8
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f042 0201 	orr.w	r2, r2, #1
 8007fd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2220      	movs	r2, #32
 8007fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	e000      	b.n	8007fee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007fec:	2302      	movs	r3, #2
  }
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3714      	adds	r7, #20
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
	...

08007ffc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008000:	4b04      	ldr	r3, [pc, #16]	; (8008014 <HAL_PWREx_GetVoltageRange+0x18>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8008008:	4618      	mov	r0, r3
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	40007000 	.word	0x40007000

08008018 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008026:	d130      	bne.n	800808a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008028:	4b23      	ldr	r3, [pc, #140]	; (80080b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008034:	d038      	beq.n	80080a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008036:	4b20      	ldr	r3, [pc, #128]	; (80080b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800803e:	4a1e      	ldr	r2, [pc, #120]	; (80080b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008040:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008044:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008046:	4b1d      	ldr	r3, [pc, #116]	; (80080bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2232      	movs	r2, #50	; 0x32
 800804c:	fb02 f303 	mul.w	r3, r2, r3
 8008050:	4a1b      	ldr	r2, [pc, #108]	; (80080c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008052:	fba2 2303 	umull	r2, r3, r2, r3
 8008056:	0c9b      	lsrs	r3, r3, #18
 8008058:	3301      	adds	r3, #1
 800805a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800805c:	e002      	b.n	8008064 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	3b01      	subs	r3, #1
 8008062:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008064:	4b14      	ldr	r3, [pc, #80]	; (80080b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008066:	695b      	ldr	r3, [r3, #20]
 8008068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800806c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008070:	d102      	bne.n	8008078 <HAL_PWREx_ControlVoltageScaling+0x60>
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d1f2      	bne.n	800805e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008078:	4b0f      	ldr	r3, [pc, #60]	; (80080b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800807a:	695b      	ldr	r3, [r3, #20]
 800807c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008084:	d110      	bne.n	80080a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e00f      	b.n	80080aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800808a:	4b0b      	ldr	r3, [pc, #44]	; (80080b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008096:	d007      	beq.n	80080a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008098:	4b07      	ldr	r3, [pc, #28]	; (80080b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80080a0:	4a05      	ldr	r2, [pc, #20]	; (80080b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80080a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80080a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3714      	adds	r7, #20
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop
 80080b8:	40007000 	.word	0x40007000
 80080bc:	2000000c 	.word	0x2000000c
 80080c0:	431bde83 	.word	0x431bde83

080080c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b088      	sub	sp, #32
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d101      	bne.n	80080d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	e3d4      	b.n	8008880 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080d6:	4ba1      	ldr	r3, [pc, #644]	; (800835c <HAL_RCC_OscConfig+0x298>)
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f003 030c 	and.w	r3, r3, #12
 80080de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80080e0:	4b9e      	ldr	r3, [pc, #632]	; (800835c <HAL_RCC_OscConfig+0x298>)
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	f003 0303 	and.w	r3, r3, #3
 80080e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f003 0310 	and.w	r3, r3, #16
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f000 80e4 	beq.w	80082c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d007      	beq.n	800810e <HAL_RCC_OscConfig+0x4a>
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	2b0c      	cmp	r3, #12
 8008102:	f040 808b 	bne.w	800821c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	2b01      	cmp	r3, #1
 800810a:	f040 8087 	bne.w	800821c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800810e:	4b93      	ldr	r3, [pc, #588]	; (800835c <HAL_RCC_OscConfig+0x298>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 0302 	and.w	r3, r3, #2
 8008116:	2b00      	cmp	r3, #0
 8008118:	d005      	beq.n	8008126 <HAL_RCC_OscConfig+0x62>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	699b      	ldr	r3, [r3, #24]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e3ac      	b.n	8008880 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a1a      	ldr	r2, [r3, #32]
 800812a:	4b8c      	ldr	r3, [pc, #560]	; (800835c <HAL_RCC_OscConfig+0x298>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 0308 	and.w	r3, r3, #8
 8008132:	2b00      	cmp	r3, #0
 8008134:	d004      	beq.n	8008140 <HAL_RCC_OscConfig+0x7c>
 8008136:	4b89      	ldr	r3, [pc, #548]	; (800835c <HAL_RCC_OscConfig+0x298>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800813e:	e005      	b.n	800814c <HAL_RCC_OscConfig+0x88>
 8008140:	4b86      	ldr	r3, [pc, #536]	; (800835c <HAL_RCC_OscConfig+0x298>)
 8008142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008146:	091b      	lsrs	r3, r3, #4
 8008148:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800814c:	4293      	cmp	r3, r2
 800814e:	d223      	bcs.n	8008198 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a1b      	ldr	r3, [r3, #32]
 8008154:	4618      	mov	r0, r3
 8008156:	f000 fd41 	bl	8008bdc <RCC_SetFlashLatencyFromMSIRange>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d001      	beq.n	8008164 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	e38d      	b.n	8008880 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008164:	4b7d      	ldr	r3, [pc, #500]	; (800835c <HAL_RCC_OscConfig+0x298>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a7c      	ldr	r2, [pc, #496]	; (800835c <HAL_RCC_OscConfig+0x298>)
 800816a:	f043 0308 	orr.w	r3, r3, #8
 800816e:	6013      	str	r3, [r2, #0]
 8008170:	4b7a      	ldr	r3, [pc, #488]	; (800835c <HAL_RCC_OscConfig+0x298>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6a1b      	ldr	r3, [r3, #32]
 800817c:	4977      	ldr	r1, [pc, #476]	; (800835c <HAL_RCC_OscConfig+0x298>)
 800817e:	4313      	orrs	r3, r2
 8008180:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008182:	4b76      	ldr	r3, [pc, #472]	; (800835c <HAL_RCC_OscConfig+0x298>)
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	69db      	ldr	r3, [r3, #28]
 800818e:	021b      	lsls	r3, r3, #8
 8008190:	4972      	ldr	r1, [pc, #456]	; (800835c <HAL_RCC_OscConfig+0x298>)
 8008192:	4313      	orrs	r3, r2
 8008194:	604b      	str	r3, [r1, #4]
 8008196:	e025      	b.n	80081e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008198:	4b70      	ldr	r3, [pc, #448]	; (800835c <HAL_RCC_OscConfig+0x298>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a6f      	ldr	r2, [pc, #444]	; (800835c <HAL_RCC_OscConfig+0x298>)
 800819e:	f043 0308 	orr.w	r3, r3, #8
 80081a2:	6013      	str	r3, [r2, #0]
 80081a4:	4b6d      	ldr	r3, [pc, #436]	; (800835c <HAL_RCC_OscConfig+0x298>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a1b      	ldr	r3, [r3, #32]
 80081b0:	496a      	ldr	r1, [pc, #424]	; (800835c <HAL_RCC_OscConfig+0x298>)
 80081b2:	4313      	orrs	r3, r2
 80081b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80081b6:	4b69      	ldr	r3, [pc, #420]	; (800835c <HAL_RCC_OscConfig+0x298>)
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	69db      	ldr	r3, [r3, #28]
 80081c2:	021b      	lsls	r3, r3, #8
 80081c4:	4965      	ldr	r1, [pc, #404]	; (800835c <HAL_RCC_OscConfig+0x298>)
 80081c6:	4313      	orrs	r3, r2
 80081c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d109      	bne.n	80081e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a1b      	ldr	r3, [r3, #32]
 80081d4:	4618      	mov	r0, r3
 80081d6:	f000 fd01 	bl	8008bdc <RCC_SetFlashLatencyFromMSIRange>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d001      	beq.n	80081e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	e34d      	b.n	8008880 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80081e4:	f000 fc36 	bl	8008a54 <HAL_RCC_GetSysClockFreq>
 80081e8:	4602      	mov	r2, r0
 80081ea:	4b5c      	ldr	r3, [pc, #368]	; (800835c <HAL_RCC_OscConfig+0x298>)
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	091b      	lsrs	r3, r3, #4
 80081f0:	f003 030f 	and.w	r3, r3, #15
 80081f4:	495a      	ldr	r1, [pc, #360]	; (8008360 <HAL_RCC_OscConfig+0x29c>)
 80081f6:	5ccb      	ldrb	r3, [r1, r3]
 80081f8:	f003 031f 	and.w	r3, r3, #31
 80081fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008200:	4a58      	ldr	r2, [pc, #352]	; (8008364 <HAL_RCC_OscConfig+0x2a0>)
 8008202:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008204:	4b58      	ldr	r3, [pc, #352]	; (8008368 <HAL_RCC_OscConfig+0x2a4>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4618      	mov	r0, r3
 800820a:	f7fe f995 	bl	8006538 <HAL_InitTick>
 800820e:	4603      	mov	r3, r0
 8008210:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008212:	7bfb      	ldrb	r3, [r7, #15]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d052      	beq.n	80082be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8008218:	7bfb      	ldrb	r3, [r7, #15]
 800821a:	e331      	b.n	8008880 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d032      	beq.n	800828a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008224:	4b4d      	ldr	r3, [pc, #308]	; (800835c <HAL_RCC_OscConfig+0x298>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a4c      	ldr	r2, [pc, #304]	; (800835c <HAL_RCC_OscConfig+0x298>)
 800822a:	f043 0301 	orr.w	r3, r3, #1
 800822e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008230:	f7fe f9d2 	bl	80065d8 <HAL_GetTick>
 8008234:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008236:	e008      	b.n	800824a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008238:	f7fe f9ce 	bl	80065d8 <HAL_GetTick>
 800823c:	4602      	mov	r2, r0
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	1ad3      	subs	r3, r2, r3
 8008242:	2b02      	cmp	r3, #2
 8008244:	d901      	bls.n	800824a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	e31a      	b.n	8008880 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800824a:	4b44      	ldr	r3, [pc, #272]	; (800835c <HAL_RCC_OscConfig+0x298>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0302 	and.w	r3, r3, #2
 8008252:	2b00      	cmp	r3, #0
 8008254:	d0f0      	beq.n	8008238 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008256:	4b41      	ldr	r3, [pc, #260]	; (800835c <HAL_RCC_OscConfig+0x298>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a40      	ldr	r2, [pc, #256]	; (800835c <HAL_RCC_OscConfig+0x298>)
 800825c:	f043 0308 	orr.w	r3, r3, #8
 8008260:	6013      	str	r3, [r2, #0]
 8008262:	4b3e      	ldr	r3, [pc, #248]	; (800835c <HAL_RCC_OscConfig+0x298>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a1b      	ldr	r3, [r3, #32]
 800826e:	493b      	ldr	r1, [pc, #236]	; (800835c <HAL_RCC_OscConfig+0x298>)
 8008270:	4313      	orrs	r3, r2
 8008272:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008274:	4b39      	ldr	r3, [pc, #228]	; (800835c <HAL_RCC_OscConfig+0x298>)
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	69db      	ldr	r3, [r3, #28]
 8008280:	021b      	lsls	r3, r3, #8
 8008282:	4936      	ldr	r1, [pc, #216]	; (800835c <HAL_RCC_OscConfig+0x298>)
 8008284:	4313      	orrs	r3, r2
 8008286:	604b      	str	r3, [r1, #4]
 8008288:	e01a      	b.n	80082c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800828a:	4b34      	ldr	r3, [pc, #208]	; (800835c <HAL_RCC_OscConfig+0x298>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a33      	ldr	r2, [pc, #204]	; (800835c <HAL_RCC_OscConfig+0x298>)
 8008290:	f023 0301 	bic.w	r3, r3, #1
 8008294:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008296:	f7fe f99f 	bl	80065d8 <HAL_GetTick>
 800829a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800829c:	e008      	b.n	80082b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800829e:	f7fe f99b 	bl	80065d8 <HAL_GetTick>
 80082a2:	4602      	mov	r2, r0
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	1ad3      	subs	r3, r2, r3
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d901      	bls.n	80082b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e2e7      	b.n	8008880 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80082b0:	4b2a      	ldr	r3, [pc, #168]	; (800835c <HAL_RCC_OscConfig+0x298>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0302 	and.w	r3, r3, #2
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1f0      	bne.n	800829e <HAL_RCC_OscConfig+0x1da>
 80082bc:	e000      	b.n	80082c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80082be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 0301 	and.w	r3, r3, #1
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d074      	beq.n	80083b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	2b08      	cmp	r3, #8
 80082d0:	d005      	beq.n	80082de <HAL_RCC_OscConfig+0x21a>
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	2b0c      	cmp	r3, #12
 80082d6:	d10e      	bne.n	80082f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	2b03      	cmp	r3, #3
 80082dc:	d10b      	bne.n	80082f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082de:	4b1f      	ldr	r3, [pc, #124]	; (800835c <HAL_RCC_OscConfig+0x298>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d064      	beq.n	80083b4 <HAL_RCC_OscConfig+0x2f0>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d160      	bne.n	80083b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e2c4      	b.n	8008880 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082fe:	d106      	bne.n	800830e <HAL_RCC_OscConfig+0x24a>
 8008300:	4b16      	ldr	r3, [pc, #88]	; (800835c <HAL_RCC_OscConfig+0x298>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a15      	ldr	r2, [pc, #84]	; (800835c <HAL_RCC_OscConfig+0x298>)
 8008306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800830a:	6013      	str	r3, [r2, #0]
 800830c:	e01d      	b.n	800834a <HAL_RCC_OscConfig+0x286>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008316:	d10c      	bne.n	8008332 <HAL_RCC_OscConfig+0x26e>
 8008318:	4b10      	ldr	r3, [pc, #64]	; (800835c <HAL_RCC_OscConfig+0x298>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a0f      	ldr	r2, [pc, #60]	; (800835c <HAL_RCC_OscConfig+0x298>)
 800831e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008322:	6013      	str	r3, [r2, #0]
 8008324:	4b0d      	ldr	r3, [pc, #52]	; (800835c <HAL_RCC_OscConfig+0x298>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a0c      	ldr	r2, [pc, #48]	; (800835c <HAL_RCC_OscConfig+0x298>)
 800832a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800832e:	6013      	str	r3, [r2, #0]
 8008330:	e00b      	b.n	800834a <HAL_RCC_OscConfig+0x286>
 8008332:	4b0a      	ldr	r3, [pc, #40]	; (800835c <HAL_RCC_OscConfig+0x298>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a09      	ldr	r2, [pc, #36]	; (800835c <HAL_RCC_OscConfig+0x298>)
 8008338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800833c:	6013      	str	r3, [r2, #0]
 800833e:	4b07      	ldr	r3, [pc, #28]	; (800835c <HAL_RCC_OscConfig+0x298>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a06      	ldr	r2, [pc, #24]	; (800835c <HAL_RCC_OscConfig+0x298>)
 8008344:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008348:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d01c      	beq.n	800838c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008352:	f7fe f941 	bl	80065d8 <HAL_GetTick>
 8008356:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008358:	e011      	b.n	800837e <HAL_RCC_OscConfig+0x2ba>
 800835a:	bf00      	nop
 800835c:	40021000 	.word	0x40021000
 8008360:	0801a934 	.word	0x0801a934
 8008364:	2000000c 	.word	0x2000000c
 8008368:	200000e8 	.word	0x200000e8
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800836c:	f7fe f934 	bl	80065d8 <HAL_GetTick>
 8008370:	4602      	mov	r2, r0
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	2b64      	cmp	r3, #100	; 0x64
 8008378:	d901      	bls.n	800837e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800837a:	2303      	movs	r3, #3
 800837c:	e280      	b.n	8008880 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800837e:	4baf      	ldr	r3, [pc, #700]	; (800863c <HAL_RCC_OscConfig+0x578>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008386:	2b00      	cmp	r3, #0
 8008388:	d0f0      	beq.n	800836c <HAL_RCC_OscConfig+0x2a8>
 800838a:	e014      	b.n	80083b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800838c:	f7fe f924 	bl	80065d8 <HAL_GetTick>
 8008390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008392:	e008      	b.n	80083a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008394:	f7fe f920 	bl	80065d8 <HAL_GetTick>
 8008398:	4602      	mov	r2, r0
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	1ad3      	subs	r3, r2, r3
 800839e:	2b64      	cmp	r3, #100	; 0x64
 80083a0:	d901      	bls.n	80083a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e26c      	b.n	8008880 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80083a6:	4ba5      	ldr	r3, [pc, #660]	; (800863c <HAL_RCC_OscConfig+0x578>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1f0      	bne.n	8008394 <HAL_RCC_OscConfig+0x2d0>
 80083b2:	e000      	b.n	80083b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f003 0302 	and.w	r3, r3, #2
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d060      	beq.n	8008484 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	2b04      	cmp	r3, #4
 80083c6:	d005      	beq.n	80083d4 <HAL_RCC_OscConfig+0x310>
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	2b0c      	cmp	r3, #12
 80083cc:	d119      	bne.n	8008402 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d116      	bne.n	8008402 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083d4:	4b99      	ldr	r3, [pc, #612]	; (800863c <HAL_RCC_OscConfig+0x578>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d005      	beq.n	80083ec <HAL_RCC_OscConfig+0x328>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d101      	bne.n	80083ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e249      	b.n	8008880 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083ec:	4b93      	ldr	r3, [pc, #588]	; (800863c <HAL_RCC_OscConfig+0x578>)
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	061b      	lsls	r3, r3, #24
 80083fa:	4990      	ldr	r1, [pc, #576]	; (800863c <HAL_RCC_OscConfig+0x578>)
 80083fc:	4313      	orrs	r3, r2
 80083fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008400:	e040      	b.n	8008484 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d023      	beq.n	8008452 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800840a:	4b8c      	ldr	r3, [pc, #560]	; (800863c <HAL_RCC_OscConfig+0x578>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a8b      	ldr	r2, [pc, #556]	; (800863c <HAL_RCC_OscConfig+0x578>)
 8008410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008416:	f7fe f8df 	bl	80065d8 <HAL_GetTick>
 800841a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800841c:	e008      	b.n	8008430 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800841e:	f7fe f8db 	bl	80065d8 <HAL_GetTick>
 8008422:	4602      	mov	r2, r0
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	1ad3      	subs	r3, r2, r3
 8008428:	2b02      	cmp	r3, #2
 800842a:	d901      	bls.n	8008430 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800842c:	2303      	movs	r3, #3
 800842e:	e227      	b.n	8008880 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008430:	4b82      	ldr	r3, [pc, #520]	; (800863c <HAL_RCC_OscConfig+0x578>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008438:	2b00      	cmp	r3, #0
 800843a:	d0f0      	beq.n	800841e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800843c:	4b7f      	ldr	r3, [pc, #508]	; (800863c <HAL_RCC_OscConfig+0x578>)
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	061b      	lsls	r3, r3, #24
 800844a:	497c      	ldr	r1, [pc, #496]	; (800863c <HAL_RCC_OscConfig+0x578>)
 800844c:	4313      	orrs	r3, r2
 800844e:	604b      	str	r3, [r1, #4]
 8008450:	e018      	b.n	8008484 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008452:	4b7a      	ldr	r3, [pc, #488]	; (800863c <HAL_RCC_OscConfig+0x578>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a79      	ldr	r2, [pc, #484]	; (800863c <HAL_RCC_OscConfig+0x578>)
 8008458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800845c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800845e:	f7fe f8bb 	bl	80065d8 <HAL_GetTick>
 8008462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008464:	e008      	b.n	8008478 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008466:	f7fe f8b7 	bl	80065d8 <HAL_GetTick>
 800846a:	4602      	mov	r2, r0
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	1ad3      	subs	r3, r2, r3
 8008470:	2b02      	cmp	r3, #2
 8008472:	d901      	bls.n	8008478 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008474:	2303      	movs	r3, #3
 8008476:	e203      	b.n	8008880 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008478:	4b70      	ldr	r3, [pc, #448]	; (800863c <HAL_RCC_OscConfig+0x578>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008480:	2b00      	cmp	r3, #0
 8008482:	d1f0      	bne.n	8008466 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 0308 	and.w	r3, r3, #8
 800848c:	2b00      	cmp	r3, #0
 800848e:	d03c      	beq.n	800850a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	695b      	ldr	r3, [r3, #20]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d01c      	beq.n	80084d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008498:	4b68      	ldr	r3, [pc, #416]	; (800863c <HAL_RCC_OscConfig+0x578>)
 800849a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800849e:	4a67      	ldr	r2, [pc, #412]	; (800863c <HAL_RCC_OscConfig+0x578>)
 80084a0:	f043 0301 	orr.w	r3, r3, #1
 80084a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084a8:	f7fe f896 	bl	80065d8 <HAL_GetTick>
 80084ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80084ae:	e008      	b.n	80084c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084b0:	f7fe f892 	bl	80065d8 <HAL_GetTick>
 80084b4:	4602      	mov	r2, r0
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d901      	bls.n	80084c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	e1de      	b.n	8008880 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80084c2:	4b5e      	ldr	r3, [pc, #376]	; (800863c <HAL_RCC_OscConfig+0x578>)
 80084c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084c8:	f003 0302 	and.w	r3, r3, #2
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d0ef      	beq.n	80084b0 <HAL_RCC_OscConfig+0x3ec>
 80084d0:	e01b      	b.n	800850a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084d2:	4b5a      	ldr	r3, [pc, #360]	; (800863c <HAL_RCC_OscConfig+0x578>)
 80084d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084d8:	4a58      	ldr	r2, [pc, #352]	; (800863c <HAL_RCC_OscConfig+0x578>)
 80084da:	f023 0301 	bic.w	r3, r3, #1
 80084de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084e2:	f7fe f879 	bl	80065d8 <HAL_GetTick>
 80084e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80084e8:	e008      	b.n	80084fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084ea:	f7fe f875 	bl	80065d8 <HAL_GetTick>
 80084ee:	4602      	mov	r2, r0
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	1ad3      	subs	r3, r2, r3
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	d901      	bls.n	80084fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80084f8:	2303      	movs	r3, #3
 80084fa:	e1c1      	b.n	8008880 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80084fc:	4b4f      	ldr	r3, [pc, #316]	; (800863c <HAL_RCC_OscConfig+0x578>)
 80084fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008502:	f003 0302 	and.w	r3, r3, #2
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1ef      	bne.n	80084ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 0304 	and.w	r3, r3, #4
 8008512:	2b00      	cmp	r3, #0
 8008514:	f000 80a6 	beq.w	8008664 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008518:	2300      	movs	r3, #0
 800851a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800851c:	4b47      	ldr	r3, [pc, #284]	; (800863c <HAL_RCC_OscConfig+0x578>)
 800851e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d10d      	bne.n	8008544 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008528:	4b44      	ldr	r3, [pc, #272]	; (800863c <HAL_RCC_OscConfig+0x578>)
 800852a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800852c:	4a43      	ldr	r2, [pc, #268]	; (800863c <HAL_RCC_OscConfig+0x578>)
 800852e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008532:	6593      	str	r3, [r2, #88]	; 0x58
 8008534:	4b41      	ldr	r3, [pc, #260]	; (800863c <HAL_RCC_OscConfig+0x578>)
 8008536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800853c:	60bb      	str	r3, [r7, #8]
 800853e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008540:	2301      	movs	r3, #1
 8008542:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008544:	4b3e      	ldr	r3, [pc, #248]	; (8008640 <HAL_RCC_OscConfig+0x57c>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800854c:	2b00      	cmp	r3, #0
 800854e:	d118      	bne.n	8008582 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008550:	4b3b      	ldr	r3, [pc, #236]	; (8008640 <HAL_RCC_OscConfig+0x57c>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a3a      	ldr	r2, [pc, #232]	; (8008640 <HAL_RCC_OscConfig+0x57c>)
 8008556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800855a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800855c:	f7fe f83c 	bl	80065d8 <HAL_GetTick>
 8008560:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008562:	e008      	b.n	8008576 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008564:	f7fe f838 	bl	80065d8 <HAL_GetTick>
 8008568:	4602      	mov	r2, r0
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	2b02      	cmp	r3, #2
 8008570:	d901      	bls.n	8008576 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008572:	2303      	movs	r3, #3
 8008574:	e184      	b.n	8008880 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008576:	4b32      	ldr	r3, [pc, #200]	; (8008640 <HAL_RCC_OscConfig+0x57c>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800857e:	2b00      	cmp	r3, #0
 8008580:	d0f0      	beq.n	8008564 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	2b01      	cmp	r3, #1
 8008588:	d108      	bne.n	800859c <HAL_RCC_OscConfig+0x4d8>
 800858a:	4b2c      	ldr	r3, [pc, #176]	; (800863c <HAL_RCC_OscConfig+0x578>)
 800858c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008590:	4a2a      	ldr	r2, [pc, #168]	; (800863c <HAL_RCC_OscConfig+0x578>)
 8008592:	f043 0301 	orr.w	r3, r3, #1
 8008596:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800859a:	e024      	b.n	80085e6 <HAL_RCC_OscConfig+0x522>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	2b05      	cmp	r3, #5
 80085a2:	d110      	bne.n	80085c6 <HAL_RCC_OscConfig+0x502>
 80085a4:	4b25      	ldr	r3, [pc, #148]	; (800863c <HAL_RCC_OscConfig+0x578>)
 80085a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085aa:	4a24      	ldr	r2, [pc, #144]	; (800863c <HAL_RCC_OscConfig+0x578>)
 80085ac:	f043 0304 	orr.w	r3, r3, #4
 80085b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80085b4:	4b21      	ldr	r3, [pc, #132]	; (800863c <HAL_RCC_OscConfig+0x578>)
 80085b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ba:	4a20      	ldr	r2, [pc, #128]	; (800863c <HAL_RCC_OscConfig+0x578>)
 80085bc:	f043 0301 	orr.w	r3, r3, #1
 80085c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80085c4:	e00f      	b.n	80085e6 <HAL_RCC_OscConfig+0x522>
 80085c6:	4b1d      	ldr	r3, [pc, #116]	; (800863c <HAL_RCC_OscConfig+0x578>)
 80085c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085cc:	4a1b      	ldr	r2, [pc, #108]	; (800863c <HAL_RCC_OscConfig+0x578>)
 80085ce:	f023 0301 	bic.w	r3, r3, #1
 80085d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80085d6:	4b19      	ldr	r3, [pc, #100]	; (800863c <HAL_RCC_OscConfig+0x578>)
 80085d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085dc:	4a17      	ldr	r2, [pc, #92]	; (800863c <HAL_RCC_OscConfig+0x578>)
 80085de:	f023 0304 	bic.w	r3, r3, #4
 80085e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d016      	beq.n	800861c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085ee:	f7fd fff3 	bl	80065d8 <HAL_GetTick>
 80085f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80085f4:	e00a      	b.n	800860c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085f6:	f7fd ffef 	bl	80065d8 <HAL_GetTick>
 80085fa:	4602      	mov	r2, r0
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	f241 3288 	movw	r2, #5000	; 0x1388
 8008604:	4293      	cmp	r3, r2
 8008606:	d901      	bls.n	800860c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8008608:	2303      	movs	r3, #3
 800860a:	e139      	b.n	8008880 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800860c:	4b0b      	ldr	r3, [pc, #44]	; (800863c <HAL_RCC_OscConfig+0x578>)
 800860e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008612:	f003 0302 	and.w	r3, r3, #2
 8008616:	2b00      	cmp	r3, #0
 8008618:	d0ed      	beq.n	80085f6 <HAL_RCC_OscConfig+0x532>
 800861a:	e01a      	b.n	8008652 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800861c:	f7fd ffdc 	bl	80065d8 <HAL_GetTick>
 8008620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008622:	e00f      	b.n	8008644 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008624:	f7fd ffd8 	bl	80065d8 <HAL_GetTick>
 8008628:	4602      	mov	r2, r0
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008632:	4293      	cmp	r3, r2
 8008634:	d906      	bls.n	8008644 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008636:	2303      	movs	r3, #3
 8008638:	e122      	b.n	8008880 <HAL_RCC_OscConfig+0x7bc>
 800863a:	bf00      	nop
 800863c:	40021000 	.word	0x40021000
 8008640:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008644:	4b90      	ldr	r3, [pc, #576]	; (8008888 <HAL_RCC_OscConfig+0x7c4>)
 8008646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800864a:	f003 0302 	and.w	r3, r3, #2
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1e8      	bne.n	8008624 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008652:	7ffb      	ldrb	r3, [r7, #31]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d105      	bne.n	8008664 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008658:	4b8b      	ldr	r3, [pc, #556]	; (8008888 <HAL_RCC_OscConfig+0x7c4>)
 800865a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800865c:	4a8a      	ldr	r2, [pc, #552]	; (8008888 <HAL_RCC_OscConfig+0x7c4>)
 800865e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008662:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008668:	2b00      	cmp	r3, #0
 800866a:	f000 8108 	beq.w	800887e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008672:	2b02      	cmp	r3, #2
 8008674:	f040 80d0 	bne.w	8008818 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008678:	4b83      	ldr	r3, [pc, #524]	; (8008888 <HAL_RCC_OscConfig+0x7c4>)
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	f003 0203 	and.w	r2, r3, #3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008688:	429a      	cmp	r2, r3
 800868a:	d130      	bne.n	80086ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008696:	3b01      	subs	r3, #1
 8008698:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800869a:	429a      	cmp	r2, r3
 800869c:	d127      	bne.n	80086ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d11f      	bne.n	80086ee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80086b8:	2a07      	cmp	r2, #7
 80086ba:	bf14      	ite	ne
 80086bc:	2201      	movne	r2, #1
 80086be:	2200      	moveq	r2, #0
 80086c0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d113      	bne.n	80086ee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086d0:	085b      	lsrs	r3, r3, #1
 80086d2:	3b01      	subs	r3, #1
 80086d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d109      	bne.n	80086ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e4:	085b      	lsrs	r3, r3, #1
 80086e6:	3b01      	subs	r3, #1
 80086e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d06e      	beq.n	80087cc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80086ee:	69bb      	ldr	r3, [r7, #24]
 80086f0:	2b0c      	cmp	r3, #12
 80086f2:	d069      	beq.n	80087c8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80086f4:	4b64      	ldr	r3, [pc, #400]	; (8008888 <HAL_RCC_OscConfig+0x7c4>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d105      	bne.n	800870c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008700:	4b61      	ldr	r3, [pc, #388]	; (8008888 <HAL_RCC_OscConfig+0x7c4>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008708:	2b00      	cmp	r3, #0
 800870a:	d001      	beq.n	8008710 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	e0b7      	b.n	8008880 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008710:	4b5d      	ldr	r3, [pc, #372]	; (8008888 <HAL_RCC_OscConfig+0x7c4>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a5c      	ldr	r2, [pc, #368]	; (8008888 <HAL_RCC_OscConfig+0x7c4>)
 8008716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800871a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800871c:	f7fd ff5c 	bl	80065d8 <HAL_GetTick>
 8008720:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008722:	e008      	b.n	8008736 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008724:	f7fd ff58 	bl	80065d8 <HAL_GetTick>
 8008728:	4602      	mov	r2, r0
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	2b02      	cmp	r3, #2
 8008730:	d901      	bls.n	8008736 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8008732:	2303      	movs	r3, #3
 8008734:	e0a4      	b.n	8008880 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008736:	4b54      	ldr	r3, [pc, #336]	; (8008888 <HAL_RCC_OscConfig+0x7c4>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1f0      	bne.n	8008724 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008742:	4b51      	ldr	r3, [pc, #324]	; (8008888 <HAL_RCC_OscConfig+0x7c4>)
 8008744:	68da      	ldr	r2, [r3, #12]
 8008746:	4b51      	ldr	r3, [pc, #324]	; (800888c <HAL_RCC_OscConfig+0x7c8>)
 8008748:	4013      	ands	r3, r2
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008752:	3a01      	subs	r2, #1
 8008754:	0112      	lsls	r2, r2, #4
 8008756:	4311      	orrs	r1, r2
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800875c:	0212      	lsls	r2, r2, #8
 800875e:	4311      	orrs	r1, r2
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008764:	0852      	lsrs	r2, r2, #1
 8008766:	3a01      	subs	r2, #1
 8008768:	0552      	lsls	r2, r2, #21
 800876a:	4311      	orrs	r1, r2
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008770:	0852      	lsrs	r2, r2, #1
 8008772:	3a01      	subs	r2, #1
 8008774:	0652      	lsls	r2, r2, #25
 8008776:	4311      	orrs	r1, r2
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800877c:	0912      	lsrs	r2, r2, #4
 800877e:	0452      	lsls	r2, r2, #17
 8008780:	430a      	orrs	r2, r1
 8008782:	4941      	ldr	r1, [pc, #260]	; (8008888 <HAL_RCC_OscConfig+0x7c4>)
 8008784:	4313      	orrs	r3, r2
 8008786:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008788:	4b3f      	ldr	r3, [pc, #252]	; (8008888 <HAL_RCC_OscConfig+0x7c4>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a3e      	ldr	r2, [pc, #248]	; (8008888 <HAL_RCC_OscConfig+0x7c4>)
 800878e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008792:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008794:	4b3c      	ldr	r3, [pc, #240]	; (8008888 <HAL_RCC_OscConfig+0x7c4>)
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	4a3b      	ldr	r2, [pc, #236]	; (8008888 <HAL_RCC_OscConfig+0x7c4>)
 800879a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800879e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80087a0:	f7fd ff1a 	bl	80065d8 <HAL_GetTick>
 80087a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087a6:	e008      	b.n	80087ba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087a8:	f7fd ff16 	bl	80065d8 <HAL_GetTick>
 80087ac:	4602      	mov	r2, r0
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	d901      	bls.n	80087ba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80087b6:	2303      	movs	r3, #3
 80087b8:	e062      	b.n	8008880 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087ba:	4b33      	ldr	r3, [pc, #204]	; (8008888 <HAL_RCC_OscConfig+0x7c4>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d0f0      	beq.n	80087a8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80087c6:	e05a      	b.n	800887e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	e059      	b.n	8008880 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087cc:	4b2e      	ldr	r3, [pc, #184]	; (8008888 <HAL_RCC_OscConfig+0x7c4>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d152      	bne.n	800887e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80087d8:	4b2b      	ldr	r3, [pc, #172]	; (8008888 <HAL_RCC_OscConfig+0x7c4>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a2a      	ldr	r2, [pc, #168]	; (8008888 <HAL_RCC_OscConfig+0x7c4>)
 80087de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80087e4:	4b28      	ldr	r3, [pc, #160]	; (8008888 <HAL_RCC_OscConfig+0x7c4>)
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	4a27      	ldr	r2, [pc, #156]	; (8008888 <HAL_RCC_OscConfig+0x7c4>)
 80087ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80087f0:	f7fd fef2 	bl	80065d8 <HAL_GetTick>
 80087f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087f6:	e008      	b.n	800880a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087f8:	f7fd feee 	bl	80065d8 <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	2b02      	cmp	r3, #2
 8008804:	d901      	bls.n	800880a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8008806:	2303      	movs	r3, #3
 8008808:	e03a      	b.n	8008880 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800880a:	4b1f      	ldr	r3, [pc, #124]	; (8008888 <HAL_RCC_OscConfig+0x7c4>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008812:	2b00      	cmp	r3, #0
 8008814:	d0f0      	beq.n	80087f8 <HAL_RCC_OscConfig+0x734>
 8008816:	e032      	b.n	800887e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	2b0c      	cmp	r3, #12
 800881c:	d02d      	beq.n	800887a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800881e:	4b1a      	ldr	r3, [pc, #104]	; (8008888 <HAL_RCC_OscConfig+0x7c4>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a19      	ldr	r2, [pc, #100]	; (8008888 <HAL_RCC_OscConfig+0x7c4>)
 8008824:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008828:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800882a:	4b17      	ldr	r3, [pc, #92]	; (8008888 <HAL_RCC_OscConfig+0x7c4>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8008832:	2b00      	cmp	r3, #0
 8008834:	d105      	bne.n	8008842 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008836:	4b14      	ldr	r3, [pc, #80]	; (8008888 <HAL_RCC_OscConfig+0x7c4>)
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	4a13      	ldr	r2, [pc, #76]	; (8008888 <HAL_RCC_OscConfig+0x7c4>)
 800883c:	f023 0303 	bic.w	r3, r3, #3
 8008840:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008842:	4b11      	ldr	r3, [pc, #68]	; (8008888 <HAL_RCC_OscConfig+0x7c4>)
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	4a10      	ldr	r2, [pc, #64]	; (8008888 <HAL_RCC_OscConfig+0x7c4>)
 8008848:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800884c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008850:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008852:	f7fd fec1 	bl	80065d8 <HAL_GetTick>
 8008856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008858:	e008      	b.n	800886c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800885a:	f7fd febd 	bl	80065d8 <HAL_GetTick>
 800885e:	4602      	mov	r2, r0
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	1ad3      	subs	r3, r2, r3
 8008864:	2b02      	cmp	r3, #2
 8008866:	d901      	bls.n	800886c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8008868:	2303      	movs	r3, #3
 800886a:	e009      	b.n	8008880 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800886c:	4b06      	ldr	r3, [pc, #24]	; (8008888 <HAL_RCC_OscConfig+0x7c4>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1f0      	bne.n	800885a <HAL_RCC_OscConfig+0x796>
 8008878:	e001      	b.n	800887e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	e000      	b.n	8008880 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3720      	adds	r7, #32
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	40021000 	.word	0x40021000
 800888c:	f99d808c 	.word	0xf99d808c

08008890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d101      	bne.n	80088a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	e0c8      	b.n	8008a36 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80088a4:	4b66      	ldr	r3, [pc, #408]	; (8008a40 <HAL_RCC_ClockConfig+0x1b0>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 0307 	and.w	r3, r3, #7
 80088ac:	683a      	ldr	r2, [r7, #0]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d910      	bls.n	80088d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088b2:	4b63      	ldr	r3, [pc, #396]	; (8008a40 <HAL_RCC_ClockConfig+0x1b0>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f023 0207 	bic.w	r2, r3, #7
 80088ba:	4961      	ldr	r1, [pc, #388]	; (8008a40 <HAL_RCC_ClockConfig+0x1b0>)
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	4313      	orrs	r3, r2
 80088c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088c2:	4b5f      	ldr	r3, [pc, #380]	; (8008a40 <HAL_RCC_ClockConfig+0x1b0>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 0307 	and.w	r3, r3, #7
 80088ca:	683a      	ldr	r2, [r7, #0]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d001      	beq.n	80088d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	e0b0      	b.n	8008a36 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f003 0301 	and.w	r3, r3, #1
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d04c      	beq.n	800897a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	2b03      	cmp	r3, #3
 80088e6:	d107      	bne.n	80088f8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80088e8:	4b56      	ldr	r3, [pc, #344]	; (8008a44 <HAL_RCC_ClockConfig+0x1b4>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d121      	bne.n	8008938 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	e09e      	b.n	8008a36 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	d107      	bne.n	8008910 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008900:	4b50      	ldr	r3, [pc, #320]	; (8008a44 <HAL_RCC_ClockConfig+0x1b4>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008908:	2b00      	cmp	r3, #0
 800890a:	d115      	bne.n	8008938 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	e092      	b.n	8008a36 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d107      	bne.n	8008928 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008918:	4b4a      	ldr	r3, [pc, #296]	; (8008a44 <HAL_RCC_ClockConfig+0x1b4>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f003 0302 	and.w	r3, r3, #2
 8008920:	2b00      	cmp	r3, #0
 8008922:	d109      	bne.n	8008938 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	e086      	b.n	8008a36 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008928:	4b46      	ldr	r3, [pc, #280]	; (8008a44 <HAL_RCC_ClockConfig+0x1b4>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008930:	2b00      	cmp	r3, #0
 8008932:	d101      	bne.n	8008938 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	e07e      	b.n	8008a36 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008938:	4b42      	ldr	r3, [pc, #264]	; (8008a44 <HAL_RCC_ClockConfig+0x1b4>)
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	f023 0203 	bic.w	r2, r3, #3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	493f      	ldr	r1, [pc, #252]	; (8008a44 <HAL_RCC_ClockConfig+0x1b4>)
 8008946:	4313      	orrs	r3, r2
 8008948:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800894a:	f7fd fe45 	bl	80065d8 <HAL_GetTick>
 800894e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008950:	e00a      	b.n	8008968 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008952:	f7fd fe41 	bl	80065d8 <HAL_GetTick>
 8008956:	4602      	mov	r2, r0
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008960:	4293      	cmp	r3, r2
 8008962:	d901      	bls.n	8008968 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8008964:	2303      	movs	r3, #3
 8008966:	e066      	b.n	8008a36 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008968:	4b36      	ldr	r3, [pc, #216]	; (8008a44 <HAL_RCC_ClockConfig+0x1b4>)
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	f003 020c 	and.w	r2, r3, #12
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	429a      	cmp	r2, r3
 8008978:	d1eb      	bne.n	8008952 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f003 0302 	and.w	r3, r3, #2
 8008982:	2b00      	cmp	r3, #0
 8008984:	d008      	beq.n	8008998 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008986:	4b2f      	ldr	r3, [pc, #188]	; (8008a44 <HAL_RCC_ClockConfig+0x1b4>)
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	492c      	ldr	r1, [pc, #176]	; (8008a44 <HAL_RCC_ClockConfig+0x1b4>)
 8008994:	4313      	orrs	r3, r2
 8008996:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008998:	4b29      	ldr	r3, [pc, #164]	; (8008a40 <HAL_RCC_ClockConfig+0x1b0>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f003 0307 	and.w	r3, r3, #7
 80089a0:	683a      	ldr	r2, [r7, #0]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d210      	bcs.n	80089c8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089a6:	4b26      	ldr	r3, [pc, #152]	; (8008a40 <HAL_RCC_ClockConfig+0x1b0>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f023 0207 	bic.w	r2, r3, #7
 80089ae:	4924      	ldr	r1, [pc, #144]	; (8008a40 <HAL_RCC_ClockConfig+0x1b0>)
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089b6:	4b22      	ldr	r3, [pc, #136]	; (8008a40 <HAL_RCC_ClockConfig+0x1b0>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f003 0307 	and.w	r3, r3, #7
 80089be:	683a      	ldr	r2, [r7, #0]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d001      	beq.n	80089c8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	e036      	b.n	8008a36 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f003 0304 	and.w	r3, r3, #4
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d008      	beq.n	80089e6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80089d4:	4b1b      	ldr	r3, [pc, #108]	; (8008a44 <HAL_RCC_ClockConfig+0x1b4>)
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	4918      	ldr	r1, [pc, #96]	; (8008a44 <HAL_RCC_ClockConfig+0x1b4>)
 80089e2:	4313      	orrs	r3, r2
 80089e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 0308 	and.w	r3, r3, #8
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d009      	beq.n	8008a06 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80089f2:	4b14      	ldr	r3, [pc, #80]	; (8008a44 <HAL_RCC_ClockConfig+0x1b4>)
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	00db      	lsls	r3, r3, #3
 8008a00:	4910      	ldr	r1, [pc, #64]	; (8008a44 <HAL_RCC_ClockConfig+0x1b4>)
 8008a02:	4313      	orrs	r3, r2
 8008a04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008a06:	f000 f825 	bl	8008a54 <HAL_RCC_GetSysClockFreq>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	4b0d      	ldr	r3, [pc, #52]	; (8008a44 <HAL_RCC_ClockConfig+0x1b4>)
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	091b      	lsrs	r3, r3, #4
 8008a12:	f003 030f 	and.w	r3, r3, #15
 8008a16:	490c      	ldr	r1, [pc, #48]	; (8008a48 <HAL_RCC_ClockConfig+0x1b8>)
 8008a18:	5ccb      	ldrb	r3, [r1, r3]
 8008a1a:	f003 031f 	and.w	r3, r3, #31
 8008a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a22:	4a0a      	ldr	r2, [pc, #40]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 8008a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008a26:	4b0a      	ldr	r3, [pc, #40]	; (8008a50 <HAL_RCC_ClockConfig+0x1c0>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fd fd84 	bl	8006538 <HAL_InitTick>
 8008a30:	4603      	mov	r3, r0
 8008a32:	72fb      	strb	r3, [r7, #11]

  return status;
 8008a34:	7afb      	ldrb	r3, [r7, #11]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	40022000 	.word	0x40022000
 8008a44:	40021000 	.word	0x40021000
 8008a48:	0801a934 	.word	0x0801a934
 8008a4c:	2000000c 	.word	0x2000000c
 8008a50:	200000e8 	.word	0x200000e8

08008a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b089      	sub	sp, #36	; 0x24
 8008a58:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	61fb      	str	r3, [r7, #28]
 8008a5e:	2300      	movs	r3, #0
 8008a60:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a62:	4b3e      	ldr	r3, [pc, #248]	; (8008b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	f003 030c 	and.w	r3, r3, #12
 8008a6a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008a6c:	4b3b      	ldr	r3, [pc, #236]	; (8008b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8008a6e:	68db      	ldr	r3, [r3, #12]
 8008a70:	f003 0303 	and.w	r3, r3, #3
 8008a74:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d005      	beq.n	8008a88 <HAL_RCC_GetSysClockFreq+0x34>
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	2b0c      	cmp	r3, #12
 8008a80:	d121      	bne.n	8008ac6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d11e      	bne.n	8008ac6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008a88:	4b34      	ldr	r3, [pc, #208]	; (8008b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 0308 	and.w	r3, r3, #8
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d107      	bne.n	8008aa4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008a94:	4b31      	ldr	r3, [pc, #196]	; (8008b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8008a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a9a:	0a1b      	lsrs	r3, r3, #8
 8008a9c:	f003 030f 	and.w	r3, r3, #15
 8008aa0:	61fb      	str	r3, [r7, #28]
 8008aa2:	e005      	b.n	8008ab0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008aa4:	4b2d      	ldr	r3, [pc, #180]	; (8008b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	091b      	lsrs	r3, r3, #4
 8008aaa:	f003 030f 	and.w	r3, r3, #15
 8008aae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008ab0:	4a2b      	ldr	r2, [pc, #172]	; (8008b60 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ab8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d10d      	bne.n	8008adc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008ac4:	e00a      	b.n	8008adc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	2b04      	cmp	r3, #4
 8008aca:	d102      	bne.n	8008ad2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008acc:	4b25      	ldr	r3, [pc, #148]	; (8008b64 <HAL_RCC_GetSysClockFreq+0x110>)
 8008ace:	61bb      	str	r3, [r7, #24]
 8008ad0:	e004      	b.n	8008adc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	2b08      	cmp	r3, #8
 8008ad6:	d101      	bne.n	8008adc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008ad8:	4b23      	ldr	r3, [pc, #140]	; (8008b68 <HAL_RCC_GetSysClockFreq+0x114>)
 8008ada:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	2b0c      	cmp	r3, #12
 8008ae0:	d134      	bne.n	8008b4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008ae2:	4b1e      	ldr	r3, [pc, #120]	; (8008b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	f003 0303 	and.w	r3, r3, #3
 8008aea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d003      	beq.n	8008afa <HAL_RCC_GetSysClockFreq+0xa6>
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	2b03      	cmp	r3, #3
 8008af6:	d003      	beq.n	8008b00 <HAL_RCC_GetSysClockFreq+0xac>
 8008af8:	e005      	b.n	8008b06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008afa:	4b1a      	ldr	r3, [pc, #104]	; (8008b64 <HAL_RCC_GetSysClockFreq+0x110>)
 8008afc:	617b      	str	r3, [r7, #20]
      break;
 8008afe:	e005      	b.n	8008b0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008b00:	4b19      	ldr	r3, [pc, #100]	; (8008b68 <HAL_RCC_GetSysClockFreq+0x114>)
 8008b02:	617b      	str	r3, [r7, #20]
      break;
 8008b04:	e002      	b.n	8008b0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	617b      	str	r3, [r7, #20]
      break;
 8008b0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008b0c:	4b13      	ldr	r3, [pc, #76]	; (8008b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	091b      	lsrs	r3, r3, #4
 8008b12:	f003 0307 	and.w	r3, r3, #7
 8008b16:	3301      	adds	r3, #1
 8008b18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008b1a:	4b10      	ldr	r3, [pc, #64]	; (8008b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	0a1b      	lsrs	r3, r3, #8
 8008b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b24:	697a      	ldr	r2, [r7, #20]
 8008b26:	fb02 f203 	mul.w	r2, r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008b32:	4b0a      	ldr	r3, [pc, #40]	; (8008b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	0e5b      	lsrs	r3, r3, #25
 8008b38:	f003 0303 	and.w	r3, r3, #3
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	005b      	lsls	r3, r3, #1
 8008b40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008b42:	697a      	ldr	r2, [r7, #20]
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008b4c:	69bb      	ldr	r3, [r7, #24]
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3724      	adds	r7, #36	; 0x24
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	40021000 	.word	0x40021000
 8008b60:	0801a94c 	.word	0x0801a94c
 8008b64:	00f42400 	.word	0x00f42400
 8008b68:	007a1200 	.word	0x007a1200

08008b6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b70:	4b03      	ldr	r3, [pc, #12]	; (8008b80 <HAL_RCC_GetHCLKFreq+0x14>)
 8008b72:	681b      	ldr	r3, [r3, #0]
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr
 8008b7e:	bf00      	nop
 8008b80:	2000000c 	.word	0x2000000c

08008b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008b88:	f7ff fff0 	bl	8008b6c <HAL_RCC_GetHCLKFreq>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	4b06      	ldr	r3, [pc, #24]	; (8008ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	0a1b      	lsrs	r3, r3, #8
 8008b94:	f003 0307 	and.w	r3, r3, #7
 8008b98:	4904      	ldr	r1, [pc, #16]	; (8008bac <HAL_RCC_GetPCLK1Freq+0x28>)
 8008b9a:	5ccb      	ldrb	r3, [r1, r3]
 8008b9c:	f003 031f 	and.w	r3, r3, #31
 8008ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	40021000 	.word	0x40021000
 8008bac:	0801a944 	.word	0x0801a944

08008bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008bb4:	f7ff ffda 	bl	8008b6c <HAL_RCC_GetHCLKFreq>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	4b06      	ldr	r3, [pc, #24]	; (8008bd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	0adb      	lsrs	r3, r3, #11
 8008bc0:	f003 0307 	and.w	r3, r3, #7
 8008bc4:	4904      	ldr	r1, [pc, #16]	; (8008bd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008bc6:	5ccb      	ldrb	r3, [r1, r3]
 8008bc8:	f003 031f 	and.w	r3, r3, #31
 8008bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	40021000 	.word	0x40021000
 8008bd8:	0801a944 	.word	0x0801a944

08008bdc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b086      	sub	sp, #24
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008be4:	2300      	movs	r3, #0
 8008be6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008be8:	4b2a      	ldr	r3, [pc, #168]	; (8008c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d003      	beq.n	8008bfc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008bf4:	f7ff fa02 	bl	8007ffc <HAL_PWREx_GetVoltageRange>
 8008bf8:	6178      	str	r0, [r7, #20]
 8008bfa:	e014      	b.n	8008c26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008bfc:	4b25      	ldr	r3, [pc, #148]	; (8008c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c00:	4a24      	ldr	r2, [pc, #144]	; (8008c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c06:	6593      	str	r3, [r2, #88]	; 0x58
 8008c08:	4b22      	ldr	r3, [pc, #136]	; (8008c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c10:	60fb      	str	r3, [r7, #12]
 8008c12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008c14:	f7ff f9f2 	bl	8007ffc <HAL_PWREx_GetVoltageRange>
 8008c18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008c1a:	4b1e      	ldr	r3, [pc, #120]	; (8008c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c1e:	4a1d      	ldr	r2, [pc, #116]	; (8008c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008c20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c2c:	d10b      	bne.n	8008c46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2b80      	cmp	r3, #128	; 0x80
 8008c32:	d919      	bls.n	8008c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2ba0      	cmp	r3, #160	; 0xa0
 8008c38:	d902      	bls.n	8008c40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008c3a:	2302      	movs	r3, #2
 8008c3c:	613b      	str	r3, [r7, #16]
 8008c3e:	e013      	b.n	8008c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008c40:	2301      	movs	r3, #1
 8008c42:	613b      	str	r3, [r7, #16]
 8008c44:	e010      	b.n	8008c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2b80      	cmp	r3, #128	; 0x80
 8008c4a:	d902      	bls.n	8008c52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	613b      	str	r3, [r7, #16]
 8008c50:	e00a      	b.n	8008c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2b80      	cmp	r3, #128	; 0x80
 8008c56:	d102      	bne.n	8008c5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008c58:	2302      	movs	r3, #2
 8008c5a:	613b      	str	r3, [r7, #16]
 8008c5c:	e004      	b.n	8008c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2b70      	cmp	r3, #112	; 0x70
 8008c62:	d101      	bne.n	8008c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008c64:	2301      	movs	r3, #1
 8008c66:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008c68:	4b0b      	ldr	r3, [pc, #44]	; (8008c98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f023 0207 	bic.w	r2, r3, #7
 8008c70:	4909      	ldr	r1, [pc, #36]	; (8008c98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	4313      	orrs	r3, r2
 8008c76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008c78:	4b07      	ldr	r3, [pc, #28]	; (8008c98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f003 0307 	and.w	r3, r3, #7
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d001      	beq.n	8008c8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e000      	b.n	8008c8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3718      	adds	r7, #24
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	40021000 	.word	0x40021000
 8008c98:	40022000 	.word	0x40022000

08008c9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b086      	sub	sp, #24
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008ca8:	2300      	movs	r3, #0
 8008caa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d041      	beq.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cbc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008cc0:	d02a      	beq.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008cc2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008cc6:	d824      	bhi.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008cc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ccc:	d008      	beq.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008cce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008cd2:	d81e      	bhi.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00a      	beq.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008cd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cdc:	d010      	beq.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008cde:	e018      	b.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008ce0:	4b86      	ldr	r3, [pc, #536]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	4a85      	ldr	r2, [pc, #532]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008cec:	e015      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	3304      	adds	r3, #4
 8008cf2:	2100      	movs	r1, #0
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f000 fabb 	bl	8009270 <RCCEx_PLLSAI1_Config>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008cfe:	e00c      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	3320      	adds	r3, #32
 8008d04:	2100      	movs	r1, #0
 8008d06:	4618      	mov	r0, r3
 8008d08:	f000 fba6 	bl	8009458 <RCCEx_PLLSAI2_Config>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008d10:	e003      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	74fb      	strb	r3, [r7, #19]
      break;
 8008d16:	e000      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008d18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d1a:	7cfb      	ldrb	r3, [r7, #19]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d10b      	bne.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008d20:	4b76      	ldr	r3, [pc, #472]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d2e:	4973      	ldr	r1, [pc, #460]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d30:	4313      	orrs	r3, r2
 8008d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008d36:	e001      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d38:	7cfb      	ldrb	r3, [r7, #19]
 8008d3a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d041      	beq.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d50:	d02a      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8008d52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d56:	d824      	bhi.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008d58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d5c:	d008      	beq.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008d5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d62:	d81e      	bhi.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00a      	beq.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8008d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d6c:	d010      	beq.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008d6e:	e018      	b.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008d70:	4b62      	ldr	r3, [pc, #392]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	4a61      	ldr	r2, [pc, #388]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d7a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008d7c:	e015      	b.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	3304      	adds	r3, #4
 8008d82:	2100      	movs	r1, #0
 8008d84:	4618      	mov	r0, r3
 8008d86:	f000 fa73 	bl	8009270 <RCCEx_PLLSAI1_Config>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008d8e:	e00c      	b.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	3320      	adds	r3, #32
 8008d94:	2100      	movs	r1, #0
 8008d96:	4618      	mov	r0, r3
 8008d98:	f000 fb5e 	bl	8009458 <RCCEx_PLLSAI2_Config>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008da0:	e003      	b.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	74fb      	strb	r3, [r7, #19]
      break;
 8008da6:	e000      	b.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8008da8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008daa:	7cfb      	ldrb	r3, [r7, #19]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10b      	bne.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008db0:	4b52      	ldr	r3, [pc, #328]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008db6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008dbe:	494f      	ldr	r1, [pc, #316]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008dc6:	e001      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dc8:	7cfb      	ldrb	r3, [r7, #19]
 8008dca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	f000 80a0 	beq.w	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008dde:	4b47      	ldr	r3, [pc, #284]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d101      	bne.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x152>
 8008dea:	2301      	movs	r3, #1
 8008dec:	e000      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8008dee:	2300      	movs	r3, #0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d00d      	beq.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008df4:	4b41      	ldr	r3, [pc, #260]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008df8:	4a40      	ldr	r2, [pc, #256]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dfe:	6593      	str	r3, [r2, #88]	; 0x58
 8008e00:	4b3e      	ldr	r3, [pc, #248]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e08:	60bb      	str	r3, [r7, #8]
 8008e0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008e10:	4b3b      	ldr	r3, [pc, #236]	; (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a3a      	ldr	r2, [pc, #232]	; (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008e1c:	f7fd fbdc 	bl	80065d8 <HAL_GetTick>
 8008e20:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008e22:	e009      	b.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e24:	f7fd fbd8 	bl	80065d8 <HAL_GetTick>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	1ad3      	subs	r3, r2, r3
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d902      	bls.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8008e32:	2303      	movs	r3, #3
 8008e34:	74fb      	strb	r3, [r7, #19]
        break;
 8008e36:	e005      	b.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008e38:	4b31      	ldr	r3, [pc, #196]	; (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d0ef      	beq.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8008e44:	7cfb      	ldrb	r3, [r7, #19]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d15c      	bne.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008e4a:	4b2c      	ldr	r3, [pc, #176]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e54:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d01f      	beq.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e62:	697a      	ldr	r2, [r7, #20]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d019      	beq.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008e68:	4b24      	ldr	r3, [pc, #144]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008e74:	4b21      	ldr	r3, [pc, #132]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e7a:	4a20      	ldr	r2, [pc, #128]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008e84:	4b1d      	ldr	r3, [pc, #116]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e8a:	4a1c      	ldr	r2, [pc, #112]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008e94:	4a19      	ldr	r2, [pc, #100]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	f003 0301 	and.w	r3, r3, #1
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d016      	beq.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ea6:	f7fd fb97 	bl	80065d8 <HAL_GetTick>
 8008eaa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008eac:	e00b      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008eae:	f7fd fb93 	bl	80065d8 <HAL_GetTick>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	1ad3      	subs	r3, r2, r3
 8008eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d902      	bls.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	74fb      	strb	r3, [r7, #19]
            break;
 8008ec4:	e006      	b.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008ec6:	4b0d      	ldr	r3, [pc, #52]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ecc:	f003 0302 	and.w	r3, r3, #2
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d0ec      	beq.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8008ed4:	7cfb      	ldrb	r3, [r7, #19]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d10c      	bne.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008eda:	4b08      	ldr	r3, [pc, #32]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ee0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008eea:	4904      	ldr	r1, [pc, #16]	; (8008efc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008eec:	4313      	orrs	r3, r2
 8008eee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008ef2:	e009      	b.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008ef4:	7cfb      	ldrb	r3, [r7, #19]
 8008ef6:	74bb      	strb	r3, [r7, #18]
 8008ef8:	e006      	b.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8008efa:	bf00      	nop
 8008efc:	40021000 	.word	0x40021000
 8008f00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f04:	7cfb      	ldrb	r3, [r7, #19]
 8008f06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008f08:	7c7b      	ldrb	r3, [r7, #17]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d105      	bne.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f0e:	4b9e      	ldr	r3, [pc, #632]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f12:	4a9d      	ldr	r2, [pc, #628]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f003 0301 	and.w	r3, r3, #1
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00a      	beq.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008f26:	4b98      	ldr	r3, [pc, #608]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f2c:	f023 0203 	bic.w	r2, r3, #3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f34:	4994      	ldr	r1, [pc, #592]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f36:	4313      	orrs	r3, r2
 8008f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f003 0302 	and.w	r3, r3, #2
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d00a      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008f48:	4b8f      	ldr	r3, [pc, #572]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f4e:	f023 020c 	bic.w	r2, r3, #12
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f56:	498c      	ldr	r1, [pc, #560]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f003 0304 	and.w	r3, r3, #4
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00a      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008f6a:	4b87      	ldr	r3, [pc, #540]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f78:	4983      	ldr	r1, [pc, #524]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 0308 	and.w	r3, r3, #8
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00a      	beq.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008f8c:	4b7e      	ldr	r3, [pc, #504]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f9a:	497b      	ldr	r1, [pc, #492]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f003 0310 	and.w	r3, r3, #16
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00a      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008fae:	4b76      	ldr	r3, [pc, #472]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fbc:	4972      	ldr	r1, [pc, #456]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f003 0320 	and.w	r3, r3, #32
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00a      	beq.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008fd0:	4b6d      	ldr	r3, [pc, #436]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fd6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fde:	496a      	ldr	r1, [pc, #424]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00a      	beq.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ff2:	4b65      	ldr	r3, [pc, #404]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ff8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009000:	4961      	ldr	r1, [pc, #388]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009002:	4313      	orrs	r3, r2
 8009004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00a      	beq.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009014:	4b5c      	ldr	r3, [pc, #368]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800901a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009022:	4959      	ldr	r1, [pc, #356]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009024:	4313      	orrs	r3, r2
 8009026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00a      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009036:	4b54      	ldr	r3, [pc, #336]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800903c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009044:	4950      	ldr	r1, [pc, #320]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009046:	4313      	orrs	r3, r2
 8009048:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00a      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009058:	4b4b      	ldr	r3, [pc, #300]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800905a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800905e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009066:	4948      	ldr	r1, [pc, #288]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009068:	4313      	orrs	r3, r2
 800906a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00a      	beq.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800907a:	4b43      	ldr	r3, [pc, #268]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800907c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009080:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009088:	493f      	ldr	r1, [pc, #252]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800908a:	4313      	orrs	r3, r2
 800908c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009098:	2b00      	cmp	r3, #0
 800909a:	d028      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800909c:	4b3a      	ldr	r3, [pc, #232]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800909e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090aa:	4937      	ldr	r1, [pc, #220]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80090ac:	4313      	orrs	r3, r2
 80090ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090ba:	d106      	bne.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80090bc:	4b32      	ldr	r3, [pc, #200]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	4a31      	ldr	r2, [pc, #196]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80090c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090c6:	60d3      	str	r3, [r2, #12]
 80090c8:	e011      	b.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80090d2:	d10c      	bne.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	3304      	adds	r3, #4
 80090d8:	2101      	movs	r1, #1
 80090da:	4618      	mov	r0, r3
 80090dc:	f000 f8c8 	bl	8009270 <RCCEx_PLLSAI1_Config>
 80090e0:	4603      	mov	r3, r0
 80090e2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80090e4:	7cfb      	ldrb	r3, [r7, #19]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d001      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80090ea:	7cfb      	ldrb	r3, [r7, #19]
 80090ec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d028      	beq.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80090fa:	4b23      	ldr	r3, [pc, #140]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80090fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009100:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009108:	491f      	ldr	r1, [pc, #124]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800910a:	4313      	orrs	r3, r2
 800910c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009114:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009118:	d106      	bne.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800911a:	4b1b      	ldr	r3, [pc, #108]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	4a1a      	ldr	r2, [pc, #104]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009120:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009124:	60d3      	str	r3, [r2, #12]
 8009126:	e011      	b.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800912c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009130:	d10c      	bne.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	3304      	adds	r3, #4
 8009136:	2101      	movs	r1, #1
 8009138:	4618      	mov	r0, r3
 800913a:	f000 f899 	bl	8009270 <RCCEx_PLLSAI1_Config>
 800913e:	4603      	mov	r3, r0
 8009140:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009142:	7cfb      	ldrb	r3, [r7, #19]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d001      	beq.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8009148:	7cfb      	ldrb	r3, [r7, #19]
 800914a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009154:	2b00      	cmp	r3, #0
 8009156:	d02b      	beq.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009158:	4b0b      	ldr	r3, [pc, #44]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800915a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800915e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009166:	4908      	ldr	r1, [pc, #32]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009168:	4313      	orrs	r3, r2
 800916a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009172:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009176:	d109      	bne.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009178:	4b03      	ldr	r3, [pc, #12]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	4a02      	ldr	r2, [pc, #8]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800917e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009182:	60d3      	str	r3, [r2, #12]
 8009184:	e014      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8009186:	bf00      	nop
 8009188:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009190:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009194:	d10c      	bne.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	3304      	adds	r3, #4
 800919a:	2101      	movs	r1, #1
 800919c:	4618      	mov	r0, r3
 800919e:	f000 f867 	bl	8009270 <RCCEx_PLLSAI1_Config>
 80091a2:	4603      	mov	r3, r0
 80091a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80091a6:	7cfb      	ldrb	r3, [r7, #19]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d001      	beq.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80091ac:	7cfb      	ldrb	r3, [r7, #19]
 80091ae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d02f      	beq.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80091bc:	4b2b      	ldr	r3, [pc, #172]	; (800926c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80091be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091ca:	4928      	ldr	r1, [pc, #160]	; (800926c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80091cc:	4313      	orrs	r3, r2
 80091ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091da:	d10d      	bne.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	3304      	adds	r3, #4
 80091e0:	2102      	movs	r1, #2
 80091e2:	4618      	mov	r0, r3
 80091e4:	f000 f844 	bl	8009270 <RCCEx_PLLSAI1_Config>
 80091e8:	4603      	mov	r3, r0
 80091ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80091ec:	7cfb      	ldrb	r3, [r7, #19]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d014      	beq.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80091f2:	7cfb      	ldrb	r3, [r7, #19]
 80091f4:	74bb      	strb	r3, [r7, #18]
 80091f6:	e011      	b.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009200:	d10c      	bne.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	3320      	adds	r3, #32
 8009206:	2102      	movs	r1, #2
 8009208:	4618      	mov	r0, r3
 800920a:	f000 f925 	bl	8009458 <RCCEx_PLLSAI2_Config>
 800920e:	4603      	mov	r3, r0
 8009210:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009212:	7cfb      	ldrb	r3, [r7, #19]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d001      	beq.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8009218:	7cfb      	ldrb	r3, [r7, #19]
 800921a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009224:	2b00      	cmp	r3, #0
 8009226:	d00a      	beq.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009228:	4b10      	ldr	r3, [pc, #64]	; (800926c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800922a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800922e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009236:	490d      	ldr	r1, [pc, #52]	; (800926c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009238:	4313      	orrs	r3, r2
 800923a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00b      	beq.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800924a:	4b08      	ldr	r3, [pc, #32]	; (800926c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800924c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009250:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800925a:	4904      	ldr	r1, [pc, #16]	; (800926c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800925c:	4313      	orrs	r3, r2
 800925e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009262:	7cbb      	ldrb	r3, [r7, #18]
}
 8009264:	4618      	mov	r0, r3
 8009266:	3718      	adds	r7, #24
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	40021000 	.word	0x40021000

08009270 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800927a:	2300      	movs	r3, #0
 800927c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800927e:	4b75      	ldr	r3, [pc, #468]	; (8009454 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	f003 0303 	and.w	r3, r3, #3
 8009286:	2b00      	cmp	r3, #0
 8009288:	d018      	beq.n	80092bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800928a:	4b72      	ldr	r3, [pc, #456]	; (8009454 <RCCEx_PLLSAI1_Config+0x1e4>)
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	f003 0203 	and.w	r2, r3, #3
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	429a      	cmp	r2, r3
 8009298:	d10d      	bne.n	80092b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
       ||
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d009      	beq.n	80092b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80092a2:	4b6c      	ldr	r3, [pc, #432]	; (8009454 <RCCEx_PLLSAI1_Config+0x1e4>)
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	091b      	lsrs	r3, r3, #4
 80092a8:	f003 0307 	and.w	r3, r3, #7
 80092ac:	1c5a      	adds	r2, r3, #1
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	685b      	ldr	r3, [r3, #4]
       ||
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d047      	beq.n	8009346 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	73fb      	strb	r3, [r7, #15]
 80092ba:	e044      	b.n	8009346 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2b03      	cmp	r3, #3
 80092c2:	d018      	beq.n	80092f6 <RCCEx_PLLSAI1_Config+0x86>
 80092c4:	2b03      	cmp	r3, #3
 80092c6:	d825      	bhi.n	8009314 <RCCEx_PLLSAI1_Config+0xa4>
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d002      	beq.n	80092d2 <RCCEx_PLLSAI1_Config+0x62>
 80092cc:	2b02      	cmp	r3, #2
 80092ce:	d009      	beq.n	80092e4 <RCCEx_PLLSAI1_Config+0x74>
 80092d0:	e020      	b.n	8009314 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80092d2:	4b60      	ldr	r3, [pc, #384]	; (8009454 <RCCEx_PLLSAI1_Config+0x1e4>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f003 0302 	and.w	r3, r3, #2
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d11d      	bne.n	800931a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80092de:	2301      	movs	r3, #1
 80092e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80092e2:	e01a      	b.n	800931a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80092e4:	4b5b      	ldr	r3, [pc, #364]	; (8009454 <RCCEx_PLLSAI1_Config+0x1e4>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d116      	bne.n	800931e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80092f4:	e013      	b.n	800931e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80092f6:	4b57      	ldr	r3, [pc, #348]	; (8009454 <RCCEx_PLLSAI1_Config+0x1e4>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d10f      	bne.n	8009322 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009302:	4b54      	ldr	r3, [pc, #336]	; (8009454 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800930a:	2b00      	cmp	r3, #0
 800930c:	d109      	bne.n	8009322 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800930e:	2301      	movs	r3, #1
 8009310:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009312:	e006      	b.n	8009322 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	73fb      	strb	r3, [r7, #15]
      break;
 8009318:	e004      	b.n	8009324 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800931a:	bf00      	nop
 800931c:	e002      	b.n	8009324 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800931e:	bf00      	nop
 8009320:	e000      	b.n	8009324 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009322:	bf00      	nop
    }

    if(status == HAL_OK)
 8009324:	7bfb      	ldrb	r3, [r7, #15]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d10d      	bne.n	8009346 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800932a:	4b4a      	ldr	r3, [pc, #296]	; (8009454 <RCCEx_PLLSAI1_Config+0x1e4>)
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6819      	ldr	r1, [r3, #0]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	3b01      	subs	r3, #1
 800933c:	011b      	lsls	r3, r3, #4
 800933e:	430b      	orrs	r3, r1
 8009340:	4944      	ldr	r1, [pc, #272]	; (8009454 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009342:	4313      	orrs	r3, r2
 8009344:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009346:	7bfb      	ldrb	r3, [r7, #15]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d17d      	bne.n	8009448 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800934c:	4b41      	ldr	r3, [pc, #260]	; (8009454 <RCCEx_PLLSAI1_Config+0x1e4>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a40      	ldr	r2, [pc, #256]	; (8009454 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009352:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009356:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009358:	f7fd f93e 	bl	80065d8 <HAL_GetTick>
 800935c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800935e:	e009      	b.n	8009374 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009360:	f7fd f93a 	bl	80065d8 <HAL_GetTick>
 8009364:	4602      	mov	r2, r0
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	1ad3      	subs	r3, r2, r3
 800936a:	2b02      	cmp	r3, #2
 800936c:	d902      	bls.n	8009374 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800936e:	2303      	movs	r3, #3
 8009370:	73fb      	strb	r3, [r7, #15]
        break;
 8009372:	e005      	b.n	8009380 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009374:	4b37      	ldr	r3, [pc, #220]	; (8009454 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1ef      	bne.n	8009360 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009380:	7bfb      	ldrb	r3, [r7, #15]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d160      	bne.n	8009448 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d111      	bne.n	80093b0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800938c:	4b31      	ldr	r3, [pc, #196]	; (8009454 <RCCEx_PLLSAI1_Config+0x1e4>)
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8009394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	6892      	ldr	r2, [r2, #8]
 800939c:	0211      	lsls	r1, r2, #8
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	68d2      	ldr	r2, [r2, #12]
 80093a2:	0912      	lsrs	r2, r2, #4
 80093a4:	0452      	lsls	r2, r2, #17
 80093a6:	430a      	orrs	r2, r1
 80093a8:	492a      	ldr	r1, [pc, #168]	; (8009454 <RCCEx_PLLSAI1_Config+0x1e4>)
 80093aa:	4313      	orrs	r3, r2
 80093ac:	610b      	str	r3, [r1, #16]
 80093ae:	e027      	b.n	8009400 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d112      	bne.n	80093dc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80093b6:	4b27      	ldr	r3, [pc, #156]	; (8009454 <RCCEx_PLLSAI1_Config+0x1e4>)
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80093be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	6892      	ldr	r2, [r2, #8]
 80093c6:	0211      	lsls	r1, r2, #8
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	6912      	ldr	r2, [r2, #16]
 80093cc:	0852      	lsrs	r2, r2, #1
 80093ce:	3a01      	subs	r2, #1
 80093d0:	0552      	lsls	r2, r2, #21
 80093d2:	430a      	orrs	r2, r1
 80093d4:	491f      	ldr	r1, [pc, #124]	; (8009454 <RCCEx_PLLSAI1_Config+0x1e4>)
 80093d6:	4313      	orrs	r3, r2
 80093d8:	610b      	str	r3, [r1, #16]
 80093da:	e011      	b.n	8009400 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80093dc:	4b1d      	ldr	r3, [pc, #116]	; (8009454 <RCCEx_PLLSAI1_Config+0x1e4>)
 80093de:	691b      	ldr	r3, [r3, #16]
 80093e0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80093e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	6892      	ldr	r2, [r2, #8]
 80093ec:	0211      	lsls	r1, r2, #8
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	6952      	ldr	r2, [r2, #20]
 80093f2:	0852      	lsrs	r2, r2, #1
 80093f4:	3a01      	subs	r2, #1
 80093f6:	0652      	lsls	r2, r2, #25
 80093f8:	430a      	orrs	r2, r1
 80093fa:	4916      	ldr	r1, [pc, #88]	; (8009454 <RCCEx_PLLSAI1_Config+0x1e4>)
 80093fc:	4313      	orrs	r3, r2
 80093fe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009400:	4b14      	ldr	r3, [pc, #80]	; (8009454 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a13      	ldr	r2, [pc, #76]	; (8009454 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009406:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800940a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800940c:	f7fd f8e4 	bl	80065d8 <HAL_GetTick>
 8009410:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009412:	e009      	b.n	8009428 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009414:	f7fd f8e0 	bl	80065d8 <HAL_GetTick>
 8009418:	4602      	mov	r2, r0
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	1ad3      	subs	r3, r2, r3
 800941e:	2b02      	cmp	r3, #2
 8009420:	d902      	bls.n	8009428 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8009422:	2303      	movs	r3, #3
 8009424:	73fb      	strb	r3, [r7, #15]
          break;
 8009426:	e005      	b.n	8009434 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009428:	4b0a      	ldr	r3, [pc, #40]	; (8009454 <RCCEx_PLLSAI1_Config+0x1e4>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009430:	2b00      	cmp	r3, #0
 8009432:	d0ef      	beq.n	8009414 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8009434:	7bfb      	ldrb	r3, [r7, #15]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d106      	bne.n	8009448 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800943a:	4b06      	ldr	r3, [pc, #24]	; (8009454 <RCCEx_PLLSAI1_Config+0x1e4>)
 800943c:	691a      	ldr	r2, [r3, #16]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	699b      	ldr	r3, [r3, #24]
 8009442:	4904      	ldr	r1, [pc, #16]	; (8009454 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009444:	4313      	orrs	r3, r2
 8009446:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009448:	7bfb      	ldrb	r3, [r7, #15]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	40021000 	.word	0x40021000

08009458 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009462:	2300      	movs	r3, #0
 8009464:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009466:	4b6a      	ldr	r3, [pc, #424]	; (8009610 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	f003 0303 	and.w	r3, r3, #3
 800946e:	2b00      	cmp	r3, #0
 8009470:	d018      	beq.n	80094a4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8009472:	4b67      	ldr	r3, [pc, #412]	; (8009610 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	f003 0203 	and.w	r2, r3, #3
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	429a      	cmp	r2, r3
 8009480:	d10d      	bne.n	800949e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
       ||
 8009486:	2b00      	cmp	r3, #0
 8009488:	d009      	beq.n	800949e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800948a:	4b61      	ldr	r3, [pc, #388]	; (8009610 <RCCEx_PLLSAI2_Config+0x1b8>)
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	091b      	lsrs	r3, r3, #4
 8009490:	f003 0307 	and.w	r3, r3, #7
 8009494:	1c5a      	adds	r2, r3, #1
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	685b      	ldr	r3, [r3, #4]
       ||
 800949a:	429a      	cmp	r2, r3
 800949c:	d047      	beq.n	800952e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	73fb      	strb	r3, [r7, #15]
 80094a2:	e044      	b.n	800952e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	2b03      	cmp	r3, #3
 80094aa:	d018      	beq.n	80094de <RCCEx_PLLSAI2_Config+0x86>
 80094ac:	2b03      	cmp	r3, #3
 80094ae:	d825      	bhi.n	80094fc <RCCEx_PLLSAI2_Config+0xa4>
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d002      	beq.n	80094ba <RCCEx_PLLSAI2_Config+0x62>
 80094b4:	2b02      	cmp	r3, #2
 80094b6:	d009      	beq.n	80094cc <RCCEx_PLLSAI2_Config+0x74>
 80094b8:	e020      	b.n	80094fc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80094ba:	4b55      	ldr	r3, [pc, #340]	; (8009610 <RCCEx_PLLSAI2_Config+0x1b8>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f003 0302 	and.w	r3, r3, #2
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d11d      	bne.n	8009502 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80094ca:	e01a      	b.n	8009502 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80094cc:	4b50      	ldr	r3, [pc, #320]	; (8009610 <RCCEx_PLLSAI2_Config+0x1b8>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d116      	bne.n	8009506 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80094d8:	2301      	movs	r3, #1
 80094da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80094dc:	e013      	b.n	8009506 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80094de:	4b4c      	ldr	r3, [pc, #304]	; (8009610 <RCCEx_PLLSAI2_Config+0x1b8>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d10f      	bne.n	800950a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80094ea:	4b49      	ldr	r3, [pc, #292]	; (8009610 <RCCEx_PLLSAI2_Config+0x1b8>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d109      	bne.n	800950a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80094fa:	e006      	b.n	800950a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009500:	e004      	b.n	800950c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009502:	bf00      	nop
 8009504:	e002      	b.n	800950c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009506:	bf00      	nop
 8009508:	e000      	b.n	800950c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800950a:	bf00      	nop
    }

    if(status == HAL_OK)
 800950c:	7bfb      	ldrb	r3, [r7, #15]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d10d      	bne.n	800952e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009512:	4b3f      	ldr	r3, [pc, #252]	; (8009610 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6819      	ldr	r1, [r3, #0]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	3b01      	subs	r3, #1
 8009524:	011b      	lsls	r3, r3, #4
 8009526:	430b      	orrs	r3, r1
 8009528:	4939      	ldr	r1, [pc, #228]	; (8009610 <RCCEx_PLLSAI2_Config+0x1b8>)
 800952a:	4313      	orrs	r3, r2
 800952c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800952e:	7bfb      	ldrb	r3, [r7, #15]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d167      	bne.n	8009604 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009534:	4b36      	ldr	r3, [pc, #216]	; (8009610 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a35      	ldr	r2, [pc, #212]	; (8009610 <RCCEx_PLLSAI2_Config+0x1b8>)
 800953a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800953e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009540:	f7fd f84a 	bl	80065d8 <HAL_GetTick>
 8009544:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009546:	e009      	b.n	800955c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009548:	f7fd f846 	bl	80065d8 <HAL_GetTick>
 800954c:	4602      	mov	r2, r0
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	1ad3      	subs	r3, r2, r3
 8009552:	2b02      	cmp	r3, #2
 8009554:	d902      	bls.n	800955c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009556:	2303      	movs	r3, #3
 8009558:	73fb      	strb	r3, [r7, #15]
        break;
 800955a:	e005      	b.n	8009568 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800955c:	4b2c      	ldr	r3, [pc, #176]	; (8009610 <RCCEx_PLLSAI2_Config+0x1b8>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009564:	2b00      	cmp	r3, #0
 8009566:	d1ef      	bne.n	8009548 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009568:	7bfb      	ldrb	r3, [r7, #15]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d14a      	bne.n	8009604 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d111      	bne.n	8009598 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009574:	4b26      	ldr	r3, [pc, #152]	; (8009610 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009576:	695b      	ldr	r3, [r3, #20]
 8009578:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800957c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	6892      	ldr	r2, [r2, #8]
 8009584:	0211      	lsls	r1, r2, #8
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	68d2      	ldr	r2, [r2, #12]
 800958a:	0912      	lsrs	r2, r2, #4
 800958c:	0452      	lsls	r2, r2, #17
 800958e:	430a      	orrs	r2, r1
 8009590:	491f      	ldr	r1, [pc, #124]	; (8009610 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009592:	4313      	orrs	r3, r2
 8009594:	614b      	str	r3, [r1, #20]
 8009596:	e011      	b.n	80095bc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009598:	4b1d      	ldr	r3, [pc, #116]	; (8009610 <RCCEx_PLLSAI2_Config+0x1b8>)
 800959a:	695b      	ldr	r3, [r3, #20]
 800959c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80095a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	6892      	ldr	r2, [r2, #8]
 80095a8:	0211      	lsls	r1, r2, #8
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	6912      	ldr	r2, [r2, #16]
 80095ae:	0852      	lsrs	r2, r2, #1
 80095b0:	3a01      	subs	r2, #1
 80095b2:	0652      	lsls	r2, r2, #25
 80095b4:	430a      	orrs	r2, r1
 80095b6:	4916      	ldr	r1, [pc, #88]	; (8009610 <RCCEx_PLLSAI2_Config+0x1b8>)
 80095b8:	4313      	orrs	r3, r2
 80095ba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80095bc:	4b14      	ldr	r3, [pc, #80]	; (8009610 <RCCEx_PLLSAI2_Config+0x1b8>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a13      	ldr	r2, [pc, #76]	; (8009610 <RCCEx_PLLSAI2_Config+0x1b8>)
 80095c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095c8:	f7fd f806 	bl	80065d8 <HAL_GetTick>
 80095cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80095ce:	e009      	b.n	80095e4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80095d0:	f7fd f802 	bl	80065d8 <HAL_GetTick>
 80095d4:	4602      	mov	r2, r0
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	1ad3      	subs	r3, r2, r3
 80095da:	2b02      	cmp	r3, #2
 80095dc:	d902      	bls.n	80095e4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80095de:	2303      	movs	r3, #3
 80095e0:	73fb      	strb	r3, [r7, #15]
          break;
 80095e2:	e005      	b.n	80095f0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80095e4:	4b0a      	ldr	r3, [pc, #40]	; (8009610 <RCCEx_PLLSAI2_Config+0x1b8>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d0ef      	beq.n	80095d0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80095f0:	7bfb      	ldrb	r3, [r7, #15]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d106      	bne.n	8009604 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80095f6:	4b06      	ldr	r3, [pc, #24]	; (8009610 <RCCEx_PLLSAI2_Config+0x1b8>)
 80095f8:	695a      	ldr	r2, [r3, #20]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	695b      	ldr	r3, [r3, #20]
 80095fe:	4904      	ldr	r1, [pc, #16]	; (8009610 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009600:	4313      	orrs	r3, r2
 8009602:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009604:	7bfb      	ldrb	r3, [r7, #15]
}
 8009606:	4618      	mov	r0, r3
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	40021000 	.word	0x40021000

08009614 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800961c:	2301      	movs	r3, #1
 800961e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d06c      	beq.n	8009700 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800962c:	b2db      	uxtb	r3, r3
 800962e:	2b00      	cmp	r3, #0
 8009630:	d106      	bne.n	8009640 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2200      	movs	r2, #0
 8009636:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f7f8 ffc8 	bl	80025d0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2202      	movs	r2, #2
 8009644:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	22ca      	movs	r2, #202	; 0xca
 800964e:	625a      	str	r2, [r3, #36]	; 0x24
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2253      	movs	r2, #83	; 0x53
 8009656:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 f9a0 	bl	800999e <RTC_EnterInitMode>
 800965e:	4603      	mov	r3, r0
 8009660:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009662:	7bfb      	ldrb	r3, [r7, #15]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d14b      	bne.n	8009700 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	6812      	ldr	r2, [r2, #0]
 8009672:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009676:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800967a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	6899      	ldr	r1, [r3, #8]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	685a      	ldr	r2, [r3, #4]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	431a      	orrs	r2, r3
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	699b      	ldr	r3, [r3, #24]
 8009690:	431a      	orrs	r2, r3
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	430a      	orrs	r2, r1
 8009698:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	68d2      	ldr	r2, [r2, #12]
 80096a2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	6919      	ldr	r1, [r3, #16]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	041a      	lsls	r2, r3, #16
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	430a      	orrs	r2, r1
 80096b6:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 f9a3 	bl	8009a04 <RTC_ExitInitMode>
 80096be:	4603      	mov	r3, r0
 80096c0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80096c2:	7bfb      	ldrb	r3, [r7, #15]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d11b      	bne.n	8009700 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f022 0203 	bic.w	r2, r2, #3
 80096d6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	69da      	ldr	r2, [r3, #28]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	695b      	ldr	r3, [r3, #20]
 80096e6:	431a      	orrs	r2, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	430a      	orrs	r2, r1
 80096ee:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	22ff      	movs	r2, #255	; 0xff
 80096f6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8009700:	7bfb      	ldrb	r3, [r7, #15]
}
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800970a:	b590      	push	{r4, r7, lr}
 800970c:	b087      	sub	sp, #28
 800970e:	af00      	add	r7, sp, #0
 8009710:	60f8      	str	r0, [r7, #12]
 8009712:	60b9      	str	r1, [r7, #8]
 8009714:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f893 3020 	ldrb.w	r3, [r3, #32]
 800971c:	2b01      	cmp	r3, #1
 800971e:	d101      	bne.n	8009724 <HAL_RTC_SetTime+0x1a>
 8009720:	2302      	movs	r3, #2
 8009722:	e08b      	b.n	800983c <HAL_RTC_SetTime+0x132>
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2201      	movs	r2, #1
 8009728:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2202      	movs	r2, #2
 8009730:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	22ca      	movs	r2, #202	; 0xca
 800973a:	625a      	str	r2, [r3, #36]	; 0x24
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2253      	movs	r2, #83	; 0x53
 8009742:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009744:	68f8      	ldr	r0, [r7, #12]
 8009746:	f000 f92a 	bl	800999e <RTC_EnterInitMode>
 800974a:	4603      	mov	r3, r0
 800974c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800974e:	7cfb      	ldrb	r3, [r7, #19]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d163      	bne.n	800981c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d126      	bne.n	80097a8 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009764:	2b00      	cmp	r3, #0
 8009766:	d102      	bne.n	800976e <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	2200      	movs	r2, #0
 800976c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	4618      	mov	r0, r3
 8009774:	f000 f984 	bl	8009a80 <RTC_ByteToBcd2>
 8009778:	4603      	mov	r3, r0
 800977a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	785b      	ldrb	r3, [r3, #1]
 8009780:	4618      	mov	r0, r3
 8009782:	f000 f97d 	bl	8009a80 <RTC_ByteToBcd2>
 8009786:	4603      	mov	r3, r0
 8009788:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800978a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	789b      	ldrb	r3, [r3, #2]
 8009790:	4618      	mov	r0, r3
 8009792:	f000 f975 	bl	8009a80 <RTC_ByteToBcd2>
 8009796:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009798:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	78db      	ldrb	r3, [r3, #3]
 80097a0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80097a2:	4313      	orrs	r3, r2
 80097a4:	617b      	str	r3, [r7, #20]
 80097a6:	e018      	b.n	80097da <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d102      	bne.n	80097bc <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	2200      	movs	r2, #0
 80097ba:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	785b      	ldrb	r3, [r3, #1]
 80097c6:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80097c8:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80097ca:	68ba      	ldr	r2, [r7, #8]
 80097cc:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80097ce:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	78db      	ldrb	r3, [r3, #3]
 80097d4:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80097d6:	4313      	orrs	r3, r2
 80097d8:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80097e4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80097e8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	689a      	ldr	r2, [r3, #8]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80097f8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	6899      	ldr	r1, [r3, #8]
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	68da      	ldr	r2, [r3, #12]
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	691b      	ldr	r3, [r3, #16]
 8009808:	431a      	orrs	r2, r3
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	430a      	orrs	r2, r1
 8009810:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f000 f8f6 	bl	8009a04 <RTC_ExitInitMode>
 8009818:	4603      	mov	r3, r0
 800981a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	22ff      	movs	r2, #255	; 0xff
 8009822:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009824:	7cfb      	ldrb	r3, [r7, #19]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d103      	bne.n	8009832 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2201      	movs	r2, #1
 800982e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2200      	movs	r2, #0
 8009836:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800983a:	7cfb      	ldrb	r3, [r7, #19]
}
 800983c:	4618      	mov	r0, r3
 800983e:	371c      	adds	r7, #28
 8009840:	46bd      	mov	sp, r7
 8009842:	bd90      	pop	{r4, r7, pc}

08009844 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009844:	b590      	push	{r4, r7, lr}
 8009846:	b087      	sub	sp, #28
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009856:	2b01      	cmp	r3, #1
 8009858:	d101      	bne.n	800985e <HAL_RTC_SetDate+0x1a>
 800985a:	2302      	movs	r3, #2
 800985c:	e075      	b.n	800994a <HAL_RTC_SetDate+0x106>
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2201      	movs	r2, #1
 8009862:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2202      	movs	r2, #2
 800986a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d10e      	bne.n	8009892 <HAL_RTC_SetDate+0x4e>
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	785b      	ldrb	r3, [r3, #1]
 8009878:	f003 0310 	and.w	r3, r3, #16
 800987c:	2b00      	cmp	r3, #0
 800987e:	d008      	beq.n	8009892 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	785b      	ldrb	r3, [r3, #1]
 8009884:	f023 0310 	bic.w	r3, r3, #16
 8009888:	b2db      	uxtb	r3, r3
 800988a:	330a      	adds	r3, #10
 800988c:	b2da      	uxtb	r2, r3
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d11c      	bne.n	80098d2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	78db      	ldrb	r3, [r3, #3]
 800989c:	4618      	mov	r0, r3
 800989e:	f000 f8ef 	bl	8009a80 <RTC_ByteToBcd2>
 80098a2:	4603      	mov	r3, r0
 80098a4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	785b      	ldrb	r3, [r3, #1]
 80098aa:	4618      	mov	r0, r3
 80098ac:	f000 f8e8 	bl	8009a80 <RTC_ByteToBcd2>
 80098b0:	4603      	mov	r3, r0
 80098b2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80098b4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	789b      	ldrb	r3, [r3, #2]
 80098ba:	4618      	mov	r0, r3
 80098bc:	f000 f8e0 	bl	8009a80 <RTC_ByteToBcd2>
 80098c0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80098c2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80098cc:	4313      	orrs	r3, r2
 80098ce:	617b      	str	r3, [r7, #20]
 80098d0:	e00e      	b.n	80098f0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	78db      	ldrb	r3, [r3, #3]
 80098d6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	785b      	ldrb	r3, [r3, #1]
 80098dc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80098de:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80098e0:	68ba      	ldr	r2, [r7, #8]
 80098e2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80098e4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80098ec:	4313      	orrs	r3, r2
 80098ee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	22ca      	movs	r2, #202	; 0xca
 80098f6:	625a      	str	r2, [r3, #36]	; 0x24
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2253      	movs	r2, #83	; 0x53
 80098fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009900:	68f8      	ldr	r0, [r7, #12]
 8009902:	f000 f84c 	bl	800999e <RTC_EnterInitMode>
 8009906:	4603      	mov	r3, r0
 8009908:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800990a:	7cfb      	ldrb	r3, [r7, #19]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d10c      	bne.n	800992a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800991a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800991e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	f000 f86f 	bl	8009a04 <RTC_ExitInitMode>
 8009926:	4603      	mov	r3, r0
 8009928:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	22ff      	movs	r2, #255	; 0xff
 8009930:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009932:	7cfb      	ldrb	r3, [r7, #19]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d103      	bne.n	8009940 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2201      	movs	r2, #1
 800993c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2200      	movs	r2, #0
 8009944:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009948:	7cfb      	ldrb	r3, [r7, #19]
}
 800994a:	4618      	mov	r0, r3
 800994c:	371c      	adds	r7, #28
 800994e:	46bd      	mov	sp, r7
 8009950:	bd90      	pop	{r4, r7, pc}

08009952 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009952:	b580      	push	{r7, lr}
 8009954:	b084      	sub	sp, #16
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68da      	ldr	r2, [r3, #12]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009968:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800996a:	f7fc fe35 	bl	80065d8 <HAL_GetTick>
 800996e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009970:	e009      	b.n	8009986 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009972:	f7fc fe31 	bl	80065d8 <HAL_GetTick>
 8009976:	4602      	mov	r2, r0
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	1ad3      	subs	r3, r2, r3
 800997c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009980:	d901      	bls.n	8009986 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009982:	2303      	movs	r3, #3
 8009984:	e007      	b.n	8009996 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	68db      	ldr	r3, [r3, #12]
 800998c:	f003 0320 	and.w	r3, r3, #32
 8009990:	2b00      	cmp	r3, #0
 8009992:	d0ee      	beq.n	8009972 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	3710      	adds	r7, #16
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b084      	sub	sp, #16
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80099a6:	2300      	movs	r3, #0
 80099a8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d120      	bne.n	80099fa <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f04f 32ff 	mov.w	r2, #4294967295
 80099c0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80099c2:	f7fc fe09 	bl	80065d8 <HAL_GetTick>
 80099c6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80099c8:	e00d      	b.n	80099e6 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80099ca:	f7fc fe05 	bl	80065d8 <HAL_GetTick>
 80099ce:	4602      	mov	r2, r0
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	1ad3      	subs	r3, r2, r3
 80099d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80099d8:	d905      	bls.n	80099e6 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80099da:	2303      	movs	r3, #3
 80099dc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2203      	movs	r2, #3
 80099e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d102      	bne.n	80099fa <RTC_EnterInitMode+0x5c>
 80099f4:	7bfb      	ldrb	r3, [r7, #15]
 80099f6:	2b03      	cmp	r3, #3
 80099f8:	d1e7      	bne.n	80099ca <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80099fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3710      	adds	r7, #16
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8009a10:	4b1a      	ldr	r3, [pc, #104]	; (8009a7c <RTC_ExitInitMode+0x78>)
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	4a19      	ldr	r2, [pc, #100]	; (8009a7c <RTC_ExitInitMode+0x78>)
 8009a16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a1a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009a1c:	4b17      	ldr	r3, [pc, #92]	; (8009a7c <RTC_ExitInitMode+0x78>)
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	f003 0320 	and.w	r3, r3, #32
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d10c      	bne.n	8009a42 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f7ff ff92 	bl	8009952 <HAL_RTC_WaitForSynchro>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d01e      	beq.n	8009a72 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2203      	movs	r2, #3
 8009a38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009a3c:	2303      	movs	r3, #3
 8009a3e:	73fb      	strb	r3, [r7, #15]
 8009a40:	e017      	b.n	8009a72 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009a42:	4b0e      	ldr	r3, [pc, #56]	; (8009a7c <RTC_ExitInitMode+0x78>)
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	4a0d      	ldr	r2, [pc, #52]	; (8009a7c <RTC_ExitInitMode+0x78>)
 8009a48:	f023 0320 	bic.w	r3, r3, #32
 8009a4c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f7ff ff7f 	bl	8009952 <HAL_RTC_WaitForSynchro>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d005      	beq.n	8009a66 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2203      	movs	r2, #3
 8009a5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009a62:	2303      	movs	r3, #3
 8009a64:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009a66:	4b05      	ldr	r3, [pc, #20]	; (8009a7c <RTC_ExitInitMode+0x78>)
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	4a04      	ldr	r2, [pc, #16]	; (8009a7c <RTC_ExitInitMode+0x78>)
 8009a6c:	f043 0320 	orr.w	r3, r3, #32
 8009a70:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3710      	adds	r7, #16
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	40002800 	.word	0x40002800

08009a80 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b085      	sub	sp, #20
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	4603      	mov	r3, r0
 8009a88:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8009a8e:	79fb      	ldrb	r3, [r7, #7]
 8009a90:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8009a92:	e005      	b.n	8009aa0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	3301      	adds	r3, #1
 8009a98:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8009a9a:	7afb      	ldrb	r3, [r7, #11]
 8009a9c:	3b0a      	subs	r3, #10
 8009a9e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8009aa0:	7afb      	ldrb	r3, [r7, #11]
 8009aa2:	2b09      	cmp	r3, #9
 8009aa4:	d8f6      	bhi.n	8009a94 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	011b      	lsls	r3, r3, #4
 8009aac:	b2da      	uxtb	r2, r3
 8009aae:	7afb      	ldrb	r3, [r7, #11]
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	b2db      	uxtb	r3, r3
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3714      	adds	r7, #20
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b082      	sub	sp, #8
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d101      	bne.n	8009ad2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e049      	b.n	8009b66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d106      	bne.n	8009aec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f7f9 f8c4 	bl	8002c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2202      	movs	r2, #2
 8009af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	3304      	adds	r3, #4
 8009afc:	4619      	mov	r1, r3
 8009afe:	4610      	mov	r0, r2
 8009b00:	f000 fae0 	bl	800a0c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2201      	movs	r2, #1
 8009b58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3708      	adds	r7, #8
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
	...

08009b70 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b085      	sub	sp, #20
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d001      	beq.n	8009b88 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009b84:	2301      	movs	r3, #1
 8009b86:	e047      	b.n	8009c18 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2202      	movs	r2, #2
 8009b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a23      	ldr	r2, [pc, #140]	; (8009c24 <HAL_TIM_Base_Start+0xb4>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d01d      	beq.n	8009bd6 <HAL_TIM_Base_Start+0x66>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ba2:	d018      	beq.n	8009bd6 <HAL_TIM_Base_Start+0x66>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a1f      	ldr	r2, [pc, #124]	; (8009c28 <HAL_TIM_Base_Start+0xb8>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d013      	beq.n	8009bd6 <HAL_TIM_Base_Start+0x66>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a1e      	ldr	r2, [pc, #120]	; (8009c2c <HAL_TIM_Base_Start+0xbc>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d00e      	beq.n	8009bd6 <HAL_TIM_Base_Start+0x66>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a1c      	ldr	r2, [pc, #112]	; (8009c30 <HAL_TIM_Base_Start+0xc0>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d009      	beq.n	8009bd6 <HAL_TIM_Base_Start+0x66>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a1b      	ldr	r2, [pc, #108]	; (8009c34 <HAL_TIM_Base_Start+0xc4>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d004      	beq.n	8009bd6 <HAL_TIM_Base_Start+0x66>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a19      	ldr	r2, [pc, #100]	; (8009c38 <HAL_TIM_Base_Start+0xc8>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d115      	bne.n	8009c02 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	689a      	ldr	r2, [r3, #8]
 8009bdc:	4b17      	ldr	r3, [pc, #92]	; (8009c3c <HAL_TIM_Base_Start+0xcc>)
 8009bde:	4013      	ands	r3, r2
 8009be0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2b06      	cmp	r3, #6
 8009be6:	d015      	beq.n	8009c14 <HAL_TIM_Base_Start+0xa4>
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bee:	d011      	beq.n	8009c14 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f042 0201 	orr.w	r2, r2, #1
 8009bfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c00:	e008      	b.n	8009c14 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f042 0201 	orr.w	r2, r2, #1
 8009c10:	601a      	str	r2, [r3, #0]
 8009c12:	e000      	b.n	8009c16 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c14:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009c16:	2300      	movs	r3, #0
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3714      	adds	r7, #20
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr
 8009c24:	40012c00 	.word	0x40012c00
 8009c28:	40000400 	.word	0x40000400
 8009c2c:	40000800 	.word	0x40000800
 8009c30:	40000c00 	.word	0x40000c00
 8009c34:	40013400 	.word	0x40013400
 8009c38:	40014000 	.word	0x40014000
 8009c3c:	00010007 	.word	0x00010007

08009c40 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	6a1a      	ldr	r2, [r3, #32]
 8009c4e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009c52:	4013      	ands	r3, r2
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d10f      	bne.n	8009c78 <HAL_TIM_Base_Stop+0x38>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	6a1a      	ldr	r2, [r3, #32]
 8009c5e:	f240 4344 	movw	r3, #1092	; 0x444
 8009c62:	4013      	ands	r3, r2
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d107      	bne.n	8009c78 <HAL_TIM_Base_Stop+0x38>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f022 0201 	bic.w	r2, r2, #1
 8009c76:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	370c      	adds	r7, #12
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr

08009c8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c8e:	b580      	push	{r7, lr}
 8009c90:	b082      	sub	sp, #8
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	691b      	ldr	r3, [r3, #16]
 8009c9c:	f003 0302 	and.w	r3, r3, #2
 8009ca0:	2b02      	cmp	r3, #2
 8009ca2:	d122      	bne.n	8009cea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	f003 0302 	and.w	r3, r3, #2
 8009cae:	2b02      	cmp	r3, #2
 8009cb0:	d11b      	bne.n	8009cea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f06f 0202 	mvn.w	r2, #2
 8009cba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	699b      	ldr	r3, [r3, #24]
 8009cc8:	f003 0303 	and.w	r3, r3, #3
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d003      	beq.n	8009cd8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 f9d8 	bl	800a086 <HAL_TIM_IC_CaptureCallback>
 8009cd6:	e005      	b.n	8009ce4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 f9ca 	bl	800a072 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 f9db 	bl	800a09a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	691b      	ldr	r3, [r3, #16]
 8009cf0:	f003 0304 	and.w	r3, r3, #4
 8009cf4:	2b04      	cmp	r3, #4
 8009cf6:	d122      	bne.n	8009d3e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	68db      	ldr	r3, [r3, #12]
 8009cfe:	f003 0304 	and.w	r3, r3, #4
 8009d02:	2b04      	cmp	r3, #4
 8009d04:	d11b      	bne.n	8009d3e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f06f 0204 	mvn.w	r2, #4
 8009d0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2202      	movs	r2, #2
 8009d14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	699b      	ldr	r3, [r3, #24]
 8009d1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d003      	beq.n	8009d2c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 f9ae 	bl	800a086 <HAL_TIM_IC_CaptureCallback>
 8009d2a:	e005      	b.n	8009d38 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 f9a0 	bl	800a072 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 f9b1 	bl	800a09a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	f003 0308 	and.w	r3, r3, #8
 8009d48:	2b08      	cmp	r3, #8
 8009d4a:	d122      	bne.n	8009d92 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	f003 0308 	and.w	r3, r3, #8
 8009d56:	2b08      	cmp	r3, #8
 8009d58:	d11b      	bne.n	8009d92 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f06f 0208 	mvn.w	r2, #8
 8009d62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2204      	movs	r2, #4
 8009d68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	69db      	ldr	r3, [r3, #28]
 8009d70:	f003 0303 	and.w	r3, r3, #3
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d003      	beq.n	8009d80 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 f984 	bl	800a086 <HAL_TIM_IC_CaptureCallback>
 8009d7e:	e005      	b.n	8009d8c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 f976 	bl	800a072 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 f987 	bl	800a09a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	691b      	ldr	r3, [r3, #16]
 8009d98:	f003 0310 	and.w	r3, r3, #16
 8009d9c:	2b10      	cmp	r3, #16
 8009d9e:	d122      	bne.n	8009de6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	f003 0310 	and.w	r3, r3, #16
 8009daa:	2b10      	cmp	r3, #16
 8009dac:	d11b      	bne.n	8009de6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f06f 0210 	mvn.w	r2, #16
 8009db6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2208      	movs	r2, #8
 8009dbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	69db      	ldr	r3, [r3, #28]
 8009dc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d003      	beq.n	8009dd4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 f95a 	bl	800a086 <HAL_TIM_IC_CaptureCallback>
 8009dd2:	e005      	b.n	8009de0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 f94c 	bl	800a072 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f95d 	bl	800a09a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2200      	movs	r2, #0
 8009de4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	f003 0301 	and.w	r3, r3, #1
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d10e      	bne.n	8009e12 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	f003 0301 	and.w	r3, r3, #1
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d107      	bne.n	8009e12 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f06f 0201 	mvn.w	r2, #1
 8009e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 f926 	bl	800a05e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	691b      	ldr	r3, [r3, #16]
 8009e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e1c:	2b80      	cmp	r3, #128	; 0x80
 8009e1e:	d10e      	bne.n	8009e3e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e2a:	2b80      	cmp	r3, #128	; 0x80
 8009e2c:	d107      	bne.n	8009e3e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 fb09 	bl	800a450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	691b      	ldr	r3, [r3, #16]
 8009e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e4c:	d10e      	bne.n	8009e6c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	68db      	ldr	r3, [r3, #12]
 8009e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e58:	2b80      	cmp	r3, #128	; 0x80
 8009e5a:	d107      	bne.n	8009e6c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 fafc 	bl	800a464 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	691b      	ldr	r3, [r3, #16]
 8009e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e76:	2b40      	cmp	r3, #64	; 0x40
 8009e78:	d10e      	bne.n	8009e98 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e84:	2b40      	cmp	r3, #64	; 0x40
 8009e86:	d107      	bne.n	8009e98 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 f90b 	bl	800a0ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	691b      	ldr	r3, [r3, #16]
 8009e9e:	f003 0320 	and.w	r3, r3, #32
 8009ea2:	2b20      	cmp	r3, #32
 8009ea4:	d10e      	bne.n	8009ec4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	f003 0320 	and.w	r3, r3, #32
 8009eb0:	2b20      	cmp	r3, #32
 8009eb2:	d107      	bne.n	8009ec4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f06f 0220 	mvn.w	r2, #32
 8009ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 fabc 	bl	800a43c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ec4:	bf00      	nop
 8009ec6:	3708      	adds	r7, #8
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d101      	bne.n	8009ee8 <HAL_TIM_ConfigClockSource+0x1c>
 8009ee4:	2302      	movs	r3, #2
 8009ee6:	e0b6      	b.n	800a056 <HAL_TIM_ConfigClockSource+0x18a>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2201      	movs	r2, #1
 8009eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2202      	movs	r2, #2
 8009ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009f0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	68ba      	ldr	r2, [r7, #8]
 8009f1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f24:	d03e      	beq.n	8009fa4 <HAL_TIM_ConfigClockSource+0xd8>
 8009f26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f2a:	f200 8087 	bhi.w	800a03c <HAL_TIM_ConfigClockSource+0x170>
 8009f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f32:	f000 8086 	beq.w	800a042 <HAL_TIM_ConfigClockSource+0x176>
 8009f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f3a:	d87f      	bhi.n	800a03c <HAL_TIM_ConfigClockSource+0x170>
 8009f3c:	2b70      	cmp	r3, #112	; 0x70
 8009f3e:	d01a      	beq.n	8009f76 <HAL_TIM_ConfigClockSource+0xaa>
 8009f40:	2b70      	cmp	r3, #112	; 0x70
 8009f42:	d87b      	bhi.n	800a03c <HAL_TIM_ConfigClockSource+0x170>
 8009f44:	2b60      	cmp	r3, #96	; 0x60
 8009f46:	d050      	beq.n	8009fea <HAL_TIM_ConfigClockSource+0x11e>
 8009f48:	2b60      	cmp	r3, #96	; 0x60
 8009f4a:	d877      	bhi.n	800a03c <HAL_TIM_ConfigClockSource+0x170>
 8009f4c:	2b50      	cmp	r3, #80	; 0x50
 8009f4e:	d03c      	beq.n	8009fca <HAL_TIM_ConfigClockSource+0xfe>
 8009f50:	2b50      	cmp	r3, #80	; 0x50
 8009f52:	d873      	bhi.n	800a03c <HAL_TIM_ConfigClockSource+0x170>
 8009f54:	2b40      	cmp	r3, #64	; 0x40
 8009f56:	d058      	beq.n	800a00a <HAL_TIM_ConfigClockSource+0x13e>
 8009f58:	2b40      	cmp	r3, #64	; 0x40
 8009f5a:	d86f      	bhi.n	800a03c <HAL_TIM_ConfigClockSource+0x170>
 8009f5c:	2b30      	cmp	r3, #48	; 0x30
 8009f5e:	d064      	beq.n	800a02a <HAL_TIM_ConfigClockSource+0x15e>
 8009f60:	2b30      	cmp	r3, #48	; 0x30
 8009f62:	d86b      	bhi.n	800a03c <HAL_TIM_ConfigClockSource+0x170>
 8009f64:	2b20      	cmp	r3, #32
 8009f66:	d060      	beq.n	800a02a <HAL_TIM_ConfigClockSource+0x15e>
 8009f68:	2b20      	cmp	r3, #32
 8009f6a:	d867      	bhi.n	800a03c <HAL_TIM_ConfigClockSource+0x170>
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d05c      	beq.n	800a02a <HAL_TIM_ConfigClockSource+0x15e>
 8009f70:	2b10      	cmp	r3, #16
 8009f72:	d05a      	beq.n	800a02a <HAL_TIM_ConfigClockSource+0x15e>
 8009f74:	e062      	b.n	800a03c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6818      	ldr	r0, [r3, #0]
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	6899      	ldr	r1, [r3, #8]
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	685a      	ldr	r2, [r3, #4]
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	f000 f9b1 	bl	800a2ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009f98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	68ba      	ldr	r2, [r7, #8]
 8009fa0:	609a      	str	r2, [r3, #8]
      break;
 8009fa2:	e04f      	b.n	800a044 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6818      	ldr	r0, [r3, #0]
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	6899      	ldr	r1, [r3, #8]
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	685a      	ldr	r2, [r3, #4]
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	68db      	ldr	r3, [r3, #12]
 8009fb4:	f000 f99a 	bl	800a2ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	689a      	ldr	r2, [r3, #8]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009fc6:	609a      	str	r2, [r3, #8]
      break;
 8009fc8:	e03c      	b.n	800a044 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6818      	ldr	r0, [r3, #0]
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	6859      	ldr	r1, [r3, #4]
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	f000 f90e 	bl	800a1f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	2150      	movs	r1, #80	; 0x50
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f000 f967 	bl	800a2b6 <TIM_ITRx_SetConfig>
      break;
 8009fe8:	e02c      	b.n	800a044 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6818      	ldr	r0, [r3, #0]
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	6859      	ldr	r1, [r3, #4]
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	f000 f92d 	bl	800a256 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	2160      	movs	r1, #96	; 0x60
 800a002:	4618      	mov	r0, r3
 800a004:	f000 f957 	bl	800a2b6 <TIM_ITRx_SetConfig>
      break;
 800a008:	e01c      	b.n	800a044 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6818      	ldr	r0, [r3, #0]
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	6859      	ldr	r1, [r3, #4]
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	68db      	ldr	r3, [r3, #12]
 800a016:	461a      	mov	r2, r3
 800a018:	f000 f8ee 	bl	800a1f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2140      	movs	r1, #64	; 0x40
 800a022:	4618      	mov	r0, r3
 800a024:	f000 f947 	bl	800a2b6 <TIM_ITRx_SetConfig>
      break;
 800a028:	e00c      	b.n	800a044 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4619      	mov	r1, r3
 800a034:	4610      	mov	r0, r2
 800a036:	f000 f93e 	bl	800a2b6 <TIM_ITRx_SetConfig>
      break;
 800a03a:	e003      	b.n	800a044 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
 800a03e:	73fb      	strb	r3, [r7, #15]
      break;
 800a040:	e000      	b.n	800a044 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a042:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2201      	movs	r2, #1
 800a048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a054:	7bfb      	ldrb	r3, [r7, #15]
}
 800a056:	4618      	mov	r0, r3
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a05e:	b480      	push	{r7}
 800a060:	b083      	sub	sp, #12
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a066:	bf00      	nop
 800a068:	370c      	adds	r7, #12
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr

0800a072 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a072:	b480      	push	{r7}
 800a074:	b083      	sub	sp, #12
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a07a:	bf00      	nop
 800a07c:	370c      	adds	r7, #12
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr

0800a086 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a086:	b480      	push	{r7}
 800a088:	b083      	sub	sp, #12
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a08e:	bf00      	nop
 800a090:	370c      	adds	r7, #12
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr

0800a09a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a09a:	b480      	push	{r7}
 800a09c:	b083      	sub	sp, #12
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a0a2:	bf00      	nop
 800a0a4:	370c      	adds	r7, #12
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr

0800a0ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a0ae:	b480      	push	{r7}
 800a0b0:	b083      	sub	sp, #12
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a0b6:	bf00      	nop
 800a0b8:	370c      	adds	r7, #12
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr
	...

0800a0c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b085      	sub	sp, #20
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4a40      	ldr	r2, [pc, #256]	; (800a1d8 <TIM_Base_SetConfig+0x114>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d013      	beq.n	800a104 <TIM_Base_SetConfig+0x40>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0e2:	d00f      	beq.n	800a104 <TIM_Base_SetConfig+0x40>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4a3d      	ldr	r2, [pc, #244]	; (800a1dc <TIM_Base_SetConfig+0x118>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d00b      	beq.n	800a104 <TIM_Base_SetConfig+0x40>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	4a3c      	ldr	r2, [pc, #240]	; (800a1e0 <TIM_Base_SetConfig+0x11c>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d007      	beq.n	800a104 <TIM_Base_SetConfig+0x40>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	4a3b      	ldr	r2, [pc, #236]	; (800a1e4 <TIM_Base_SetConfig+0x120>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d003      	beq.n	800a104 <TIM_Base_SetConfig+0x40>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4a3a      	ldr	r2, [pc, #232]	; (800a1e8 <TIM_Base_SetConfig+0x124>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d108      	bne.n	800a116 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a10a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	4313      	orrs	r3, r2
 800a114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	4a2f      	ldr	r2, [pc, #188]	; (800a1d8 <TIM_Base_SetConfig+0x114>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d01f      	beq.n	800a15e <TIM_Base_SetConfig+0x9a>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a124:	d01b      	beq.n	800a15e <TIM_Base_SetConfig+0x9a>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	4a2c      	ldr	r2, [pc, #176]	; (800a1dc <TIM_Base_SetConfig+0x118>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d017      	beq.n	800a15e <TIM_Base_SetConfig+0x9a>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4a2b      	ldr	r2, [pc, #172]	; (800a1e0 <TIM_Base_SetConfig+0x11c>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d013      	beq.n	800a15e <TIM_Base_SetConfig+0x9a>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4a2a      	ldr	r2, [pc, #168]	; (800a1e4 <TIM_Base_SetConfig+0x120>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d00f      	beq.n	800a15e <TIM_Base_SetConfig+0x9a>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4a29      	ldr	r2, [pc, #164]	; (800a1e8 <TIM_Base_SetConfig+0x124>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d00b      	beq.n	800a15e <TIM_Base_SetConfig+0x9a>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	4a28      	ldr	r2, [pc, #160]	; (800a1ec <TIM_Base_SetConfig+0x128>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d007      	beq.n	800a15e <TIM_Base_SetConfig+0x9a>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4a27      	ldr	r2, [pc, #156]	; (800a1f0 <TIM_Base_SetConfig+0x12c>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d003      	beq.n	800a15e <TIM_Base_SetConfig+0x9a>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4a26      	ldr	r2, [pc, #152]	; (800a1f4 <TIM_Base_SetConfig+0x130>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d108      	bne.n	800a170 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	68fa      	ldr	r2, [r7, #12]
 800a16c:	4313      	orrs	r3, r2
 800a16e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	695b      	ldr	r3, [r3, #20]
 800a17a:	4313      	orrs	r3, r2
 800a17c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	68fa      	ldr	r2, [r7, #12]
 800a182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	689a      	ldr	r2, [r3, #8]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	4a10      	ldr	r2, [pc, #64]	; (800a1d8 <TIM_Base_SetConfig+0x114>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d00f      	beq.n	800a1bc <TIM_Base_SetConfig+0xf8>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	4a12      	ldr	r2, [pc, #72]	; (800a1e8 <TIM_Base_SetConfig+0x124>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d00b      	beq.n	800a1bc <TIM_Base_SetConfig+0xf8>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	4a11      	ldr	r2, [pc, #68]	; (800a1ec <TIM_Base_SetConfig+0x128>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d007      	beq.n	800a1bc <TIM_Base_SetConfig+0xf8>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	4a10      	ldr	r2, [pc, #64]	; (800a1f0 <TIM_Base_SetConfig+0x12c>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d003      	beq.n	800a1bc <TIM_Base_SetConfig+0xf8>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4a0f      	ldr	r2, [pc, #60]	; (800a1f4 <TIM_Base_SetConfig+0x130>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d103      	bne.n	800a1c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	691a      	ldr	r2, [r3, #16]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	615a      	str	r2, [r3, #20]
}
 800a1ca:	bf00      	nop
 800a1cc:	3714      	adds	r7, #20
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr
 800a1d6:	bf00      	nop
 800a1d8:	40012c00 	.word	0x40012c00
 800a1dc:	40000400 	.word	0x40000400
 800a1e0:	40000800 	.word	0x40000800
 800a1e4:	40000c00 	.word	0x40000c00
 800a1e8:	40013400 	.word	0x40013400
 800a1ec:	40014000 	.word	0x40014000
 800a1f0:	40014400 	.word	0x40014400
 800a1f4:	40014800 	.word	0x40014800

0800a1f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b087      	sub	sp, #28
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	60b9      	str	r1, [r7, #8]
 800a202:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6a1b      	ldr	r3, [r3, #32]
 800a208:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6a1b      	ldr	r3, [r3, #32]
 800a20e:	f023 0201 	bic.w	r2, r3, #1
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	699b      	ldr	r3, [r3, #24]
 800a21a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a222:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	011b      	lsls	r3, r3, #4
 800a228:	693a      	ldr	r2, [r7, #16]
 800a22a:	4313      	orrs	r3, r2
 800a22c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	f023 030a 	bic.w	r3, r3, #10
 800a234:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a236:	697a      	ldr	r2, [r7, #20]
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	4313      	orrs	r3, r2
 800a23c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	693a      	ldr	r2, [r7, #16]
 800a242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	697a      	ldr	r2, [r7, #20]
 800a248:	621a      	str	r2, [r3, #32]
}
 800a24a:	bf00      	nop
 800a24c:	371c      	adds	r7, #28
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr

0800a256 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a256:	b480      	push	{r7}
 800a258:	b087      	sub	sp, #28
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	60f8      	str	r0, [r7, #12]
 800a25e:	60b9      	str	r1, [r7, #8]
 800a260:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6a1b      	ldr	r3, [r3, #32]
 800a266:	f023 0210 	bic.w	r2, r3, #16
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	699b      	ldr	r3, [r3, #24]
 800a272:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	6a1b      	ldr	r3, [r3, #32]
 800a278:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a280:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	031b      	lsls	r3, r3, #12
 800a286:	697a      	ldr	r2, [r7, #20]
 800a288:	4313      	orrs	r3, r2
 800a28a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a292:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	011b      	lsls	r3, r3, #4
 800a298:	693a      	ldr	r2, [r7, #16]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	697a      	ldr	r2, [r7, #20]
 800a2a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	693a      	ldr	r2, [r7, #16]
 800a2a8:	621a      	str	r2, [r3, #32]
}
 800a2aa:	bf00      	nop
 800a2ac:	371c      	adds	r7, #28
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr

0800a2b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a2b6:	b480      	push	{r7}
 800a2b8:	b085      	sub	sp, #20
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
 800a2be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a2ce:	683a      	ldr	r2, [r7, #0]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	f043 0307 	orr.w	r3, r3, #7
 800a2d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	68fa      	ldr	r2, [r7, #12]
 800a2de:	609a      	str	r2, [r3, #8]
}
 800a2e0:	bf00      	nop
 800a2e2:	3714      	adds	r7, #20
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b087      	sub	sp, #28
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	60b9      	str	r1, [r7, #8]
 800a2f6:	607a      	str	r2, [r7, #4]
 800a2f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	689b      	ldr	r3, [r3, #8]
 800a2fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a306:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	021a      	lsls	r2, r3, #8
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	431a      	orrs	r2, r3
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	4313      	orrs	r3, r2
 800a314:	697a      	ldr	r2, [r7, #20]
 800a316:	4313      	orrs	r3, r2
 800a318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	697a      	ldr	r2, [r7, #20]
 800a31e:	609a      	str	r2, [r3, #8]
}
 800a320:	bf00      	nop
 800a322:	371c      	adds	r7, #28
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b085      	sub	sp, #20
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d101      	bne.n	800a344 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a340:	2302      	movs	r3, #2
 800a342:	e068      	b.n	800a416 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2201      	movs	r2, #1
 800a348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2202      	movs	r2, #2
 800a350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a2e      	ldr	r2, [pc, #184]	; (800a424 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d004      	beq.n	800a378 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4a2d      	ldr	r2, [pc, #180]	; (800a428 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d108      	bne.n	800a38a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a37e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	68fa      	ldr	r2, [r7, #12]
 800a386:	4313      	orrs	r3, r2
 800a388:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a390:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	68fa      	ldr	r2, [r7, #12]
 800a398:	4313      	orrs	r3, r2
 800a39a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	68fa      	ldr	r2, [r7, #12]
 800a3a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a1e      	ldr	r2, [pc, #120]	; (800a424 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d01d      	beq.n	800a3ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3b6:	d018      	beq.n	800a3ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a1b      	ldr	r2, [pc, #108]	; (800a42c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d013      	beq.n	800a3ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a1a      	ldr	r2, [pc, #104]	; (800a430 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d00e      	beq.n	800a3ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a18      	ldr	r2, [pc, #96]	; (800a434 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d009      	beq.n	800a3ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a13      	ldr	r2, [pc, #76]	; (800a428 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d004      	beq.n	800a3ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a14      	ldr	r2, [pc, #80]	; (800a438 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d10c      	bne.n	800a404 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	689b      	ldr	r3, [r3, #8]
 800a3f6:	68ba      	ldr	r2, [r7, #8]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	68ba      	ldr	r2, [r7, #8]
 800a402:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2201      	movs	r2, #1
 800a408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a414:	2300      	movs	r3, #0
}
 800a416:	4618      	mov	r0, r3
 800a418:	3714      	adds	r7, #20
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop
 800a424:	40012c00 	.word	0x40012c00
 800a428:	40013400 	.word	0x40013400
 800a42c:	40000400 	.word	0x40000400
 800a430:	40000800 	.word	0x40000800
 800a434:	40000c00 	.word	0x40000c00
 800a438:	40014000 	.word	0x40014000

0800a43c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a444:	bf00      	nop
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a458:	bf00      	nop
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a46c:	bf00      	nop
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d101      	bne.n	800a48a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	e040      	b.n	800a50c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d106      	bne.n	800a4a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2200      	movs	r2, #0
 800a496:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 f83a 	bl	800a514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2224      	movs	r2, #36	; 0x24
 800a4a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f022 0201 	bic.w	r2, r2, #1
 800a4b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 f94a 	bl	800a750 <UART_SetConfig>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d101      	bne.n	800a4c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e022      	b.n	800a50c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d002      	beq.n	800a4d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 fbc8 	bl	800ac64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	685a      	ldr	r2, [r3, #4]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a4e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	689a      	ldr	r2, [r3, #8]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a4f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f042 0201 	orr.w	r2, r2, #1
 800a502:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 fc4f 	bl	800ada8 <UART_CheckIdleState>
 800a50a:	4603      	mov	r3, r0
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3708      	adds	r7, #8
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}

0800a514 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800a51c:	bf00      	nop
 800a51e:	370c      	adds	r7, #12
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b08a      	sub	sp, #40	; 0x28
 800a52c:	af02      	add	r7, sp, #8
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	603b      	str	r3, [r7, #0]
 800a534:	4613      	mov	r3, r2
 800a536:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a53c:	2b20      	cmp	r3, #32
 800a53e:	f040 8082 	bne.w	800a646 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d002      	beq.n	800a54e <HAL_UART_Transmit+0x26>
 800a548:	88fb      	ldrh	r3, [r7, #6]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d101      	bne.n	800a552 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a54e:	2301      	movs	r3, #1
 800a550:	e07a      	b.n	800a648 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d101      	bne.n	800a560 <HAL_UART_Transmit+0x38>
 800a55c:	2302      	movs	r3, #2
 800a55e:	e073      	b.n	800a648 <HAL_UART_Transmit+0x120>
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2201      	movs	r2, #1
 800a564:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2221      	movs	r2, #33	; 0x21
 800a574:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a576:	f7fc f82f 	bl	80065d8 <HAL_GetTick>
 800a57a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	88fa      	ldrh	r2, [r7, #6]
 800a580:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	88fa      	ldrh	r2, [r7, #6]
 800a588:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a594:	d108      	bne.n	800a5a8 <HAL_UART_Transmit+0x80>
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	691b      	ldr	r3, [r3, #16]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d104      	bne.n	800a5a8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	61bb      	str	r3, [r7, #24]
 800a5a6:	e003      	b.n	800a5b0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a5b8:	e02d      	b.n	800a616 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	2180      	movs	r1, #128	; 0x80
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	f000 fc38 	bl	800ae3a <UART_WaitOnFlagUntilTimeout>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d001      	beq.n	800a5d4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a5d0:	2303      	movs	r3, #3
 800a5d2:	e039      	b.n	800a648 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d10b      	bne.n	800a5f2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	881a      	ldrh	r2, [r3, #0]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a5e6:	b292      	uxth	r2, r2
 800a5e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a5ea:	69bb      	ldr	r3, [r7, #24]
 800a5ec:	3302      	adds	r3, #2
 800a5ee:	61bb      	str	r3, [r7, #24]
 800a5f0:	e008      	b.n	800a604 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a5f2:	69fb      	ldr	r3, [r7, #28]
 800a5f4:	781a      	ldrb	r2, [r3, #0]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	b292      	uxth	r2, r2
 800a5fc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	3301      	adds	r3, #1
 800a602:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	3b01      	subs	r3, #1
 800a60e:	b29a      	uxth	r2, r3
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d1cb      	bne.n	800a5ba <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	9300      	str	r3, [sp, #0]
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	2200      	movs	r2, #0
 800a62a:	2140      	movs	r1, #64	; 0x40
 800a62c:	68f8      	ldr	r0, [r7, #12]
 800a62e:	f000 fc04 	bl	800ae3a <UART_WaitOnFlagUntilTimeout>
 800a632:	4603      	mov	r3, r0
 800a634:	2b00      	cmp	r3, #0
 800a636:	d001      	beq.n	800a63c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a638:	2303      	movs	r3, #3
 800a63a:	e005      	b.n	800a648 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2220      	movs	r2, #32
 800a640:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a642:	2300      	movs	r3, #0
 800a644:	e000      	b.n	800a648 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800a646:	2302      	movs	r3, #2
  }
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3720      	adds	r7, #32
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b08a      	sub	sp, #40	; 0x28
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	4613      	mov	r3, r2
 800a65c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a662:	2b20      	cmp	r3, #32
 800a664:	d142      	bne.n	800a6ec <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d002      	beq.n	800a672 <HAL_UART_Receive_DMA+0x22>
 800a66c:	88fb      	ldrh	r3, [r7, #6]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d101      	bne.n	800a676 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800a672:	2301      	movs	r3, #1
 800a674:	e03b      	b.n	800a6ee <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d101      	bne.n	800a684 <HAL_UART_Receive_DMA+0x34>
 800a680:	2302      	movs	r3, #2
 800a682:	e034      	b.n	800a6ee <HAL_UART_Receive_DMA+0x9e>
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2201      	movs	r2, #1
 800a688:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2200      	movs	r2, #0
 800a690:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a18      	ldr	r2, [pc, #96]	; (800a6f8 <HAL_UART_Receive_DMA+0xa8>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d01f      	beq.n	800a6dc <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d018      	beq.n	800a6dc <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	e853 3f00 	ldrex	r3, [r3]
 800a6b6:	613b      	str	r3, [r7, #16]
   return(result);
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a6be:	627b      	str	r3, [r7, #36]	; 0x24
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c8:	623b      	str	r3, [r7, #32]
 800a6ca:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6cc:	69f9      	ldr	r1, [r7, #28]
 800a6ce:	6a3a      	ldr	r2, [r7, #32]
 800a6d0:	e841 2300 	strex	r3, r2, [r1]
 800a6d4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6d6:	69bb      	ldr	r3, [r7, #24]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d1e6      	bne.n	800a6aa <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a6dc:	88fb      	ldrh	r3, [r7, #6]
 800a6de:	461a      	mov	r2, r3
 800a6e0:	68b9      	ldr	r1, [r7, #8]
 800a6e2:	68f8      	ldr	r0, [r7, #12]
 800a6e4:	f000 fc6e 	bl	800afc4 <UART_Start_Receive_DMA>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	e000      	b.n	800a6ee <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a6ec:	2302      	movs	r3, #2
  }
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3728      	adds	r7, #40	; 0x28
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
 800a6f6:	bf00      	nop
 800a6f8:	40008000 	.word	0x40008000

0800a6fc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a704:	bf00      	nop
 800a706:	370c      	adds	r7, #12
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a710:	b480      	push	{r7}
 800a712:	b083      	sub	sp, #12
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a718:	bf00      	nop
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a72c:	bf00      	nop
 800a72e:	370c      	adds	r7, #12
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	460b      	mov	r3, r1
 800a742:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a744:	bf00      	nop
 800a746:	370c      	adds	r7, #12
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a750:	b5b0      	push	{r4, r5, r7, lr}
 800a752:	b088      	sub	sp, #32
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a758:	2300      	movs	r3, #0
 800a75a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	689a      	ldr	r2, [r3, #8]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	691b      	ldr	r3, [r3, #16]
 800a764:	431a      	orrs	r2, r3
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	695b      	ldr	r3, [r3, #20]
 800a76a:	431a      	orrs	r2, r3
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	69db      	ldr	r3, [r3, #28]
 800a770:	4313      	orrs	r3, r2
 800a772:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	4bad      	ldr	r3, [pc, #692]	; (800aa30 <UART_SetConfig+0x2e0>)
 800a77c:	4013      	ands	r3, r2
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	6812      	ldr	r2, [r2, #0]
 800a782:	69f9      	ldr	r1, [r7, #28]
 800a784:	430b      	orrs	r3, r1
 800a786:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	68da      	ldr	r2, [r3, #12]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	430a      	orrs	r2, r1
 800a79c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	699b      	ldr	r3, [r3, #24]
 800a7a2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4aa2      	ldr	r2, [pc, #648]	; (800aa34 <UART_SetConfig+0x2e4>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d004      	beq.n	800a7b8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6a1b      	ldr	r3, [r3, #32]
 800a7b2:	69fa      	ldr	r2, [r7, #28]
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	689b      	ldr	r3, [r3, #8]
 800a7be:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	69fa      	ldr	r2, [r7, #28]
 800a7c8:	430a      	orrs	r2, r1
 800a7ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a99      	ldr	r2, [pc, #612]	; (800aa38 <UART_SetConfig+0x2e8>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d121      	bne.n	800a81a <UART_SetConfig+0xca>
 800a7d6:	4b99      	ldr	r3, [pc, #612]	; (800aa3c <UART_SetConfig+0x2ec>)
 800a7d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7dc:	f003 0303 	and.w	r3, r3, #3
 800a7e0:	2b03      	cmp	r3, #3
 800a7e2:	d817      	bhi.n	800a814 <UART_SetConfig+0xc4>
 800a7e4:	a201      	add	r2, pc, #4	; (adr r2, 800a7ec <UART_SetConfig+0x9c>)
 800a7e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ea:	bf00      	nop
 800a7ec:	0800a7fd 	.word	0x0800a7fd
 800a7f0:	0800a809 	.word	0x0800a809
 800a7f4:	0800a803 	.word	0x0800a803
 800a7f8:	0800a80f 	.word	0x0800a80f
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	76fb      	strb	r3, [r7, #27]
 800a800:	e0e7      	b.n	800a9d2 <UART_SetConfig+0x282>
 800a802:	2302      	movs	r3, #2
 800a804:	76fb      	strb	r3, [r7, #27]
 800a806:	e0e4      	b.n	800a9d2 <UART_SetConfig+0x282>
 800a808:	2304      	movs	r3, #4
 800a80a:	76fb      	strb	r3, [r7, #27]
 800a80c:	e0e1      	b.n	800a9d2 <UART_SetConfig+0x282>
 800a80e:	2308      	movs	r3, #8
 800a810:	76fb      	strb	r3, [r7, #27]
 800a812:	e0de      	b.n	800a9d2 <UART_SetConfig+0x282>
 800a814:	2310      	movs	r3, #16
 800a816:	76fb      	strb	r3, [r7, #27]
 800a818:	e0db      	b.n	800a9d2 <UART_SetConfig+0x282>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a88      	ldr	r2, [pc, #544]	; (800aa40 <UART_SetConfig+0x2f0>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d132      	bne.n	800a88a <UART_SetConfig+0x13a>
 800a824:	4b85      	ldr	r3, [pc, #532]	; (800aa3c <UART_SetConfig+0x2ec>)
 800a826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a82a:	f003 030c 	and.w	r3, r3, #12
 800a82e:	2b0c      	cmp	r3, #12
 800a830:	d828      	bhi.n	800a884 <UART_SetConfig+0x134>
 800a832:	a201      	add	r2, pc, #4	; (adr r2, 800a838 <UART_SetConfig+0xe8>)
 800a834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a838:	0800a86d 	.word	0x0800a86d
 800a83c:	0800a885 	.word	0x0800a885
 800a840:	0800a885 	.word	0x0800a885
 800a844:	0800a885 	.word	0x0800a885
 800a848:	0800a879 	.word	0x0800a879
 800a84c:	0800a885 	.word	0x0800a885
 800a850:	0800a885 	.word	0x0800a885
 800a854:	0800a885 	.word	0x0800a885
 800a858:	0800a873 	.word	0x0800a873
 800a85c:	0800a885 	.word	0x0800a885
 800a860:	0800a885 	.word	0x0800a885
 800a864:	0800a885 	.word	0x0800a885
 800a868:	0800a87f 	.word	0x0800a87f
 800a86c:	2300      	movs	r3, #0
 800a86e:	76fb      	strb	r3, [r7, #27]
 800a870:	e0af      	b.n	800a9d2 <UART_SetConfig+0x282>
 800a872:	2302      	movs	r3, #2
 800a874:	76fb      	strb	r3, [r7, #27]
 800a876:	e0ac      	b.n	800a9d2 <UART_SetConfig+0x282>
 800a878:	2304      	movs	r3, #4
 800a87a:	76fb      	strb	r3, [r7, #27]
 800a87c:	e0a9      	b.n	800a9d2 <UART_SetConfig+0x282>
 800a87e:	2308      	movs	r3, #8
 800a880:	76fb      	strb	r3, [r7, #27]
 800a882:	e0a6      	b.n	800a9d2 <UART_SetConfig+0x282>
 800a884:	2310      	movs	r3, #16
 800a886:	76fb      	strb	r3, [r7, #27]
 800a888:	e0a3      	b.n	800a9d2 <UART_SetConfig+0x282>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	4a6d      	ldr	r2, [pc, #436]	; (800aa44 <UART_SetConfig+0x2f4>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d120      	bne.n	800a8d6 <UART_SetConfig+0x186>
 800a894:	4b69      	ldr	r3, [pc, #420]	; (800aa3c <UART_SetConfig+0x2ec>)
 800a896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a89a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a89e:	2b30      	cmp	r3, #48	; 0x30
 800a8a0:	d013      	beq.n	800a8ca <UART_SetConfig+0x17a>
 800a8a2:	2b30      	cmp	r3, #48	; 0x30
 800a8a4:	d814      	bhi.n	800a8d0 <UART_SetConfig+0x180>
 800a8a6:	2b20      	cmp	r3, #32
 800a8a8:	d009      	beq.n	800a8be <UART_SetConfig+0x16e>
 800a8aa:	2b20      	cmp	r3, #32
 800a8ac:	d810      	bhi.n	800a8d0 <UART_SetConfig+0x180>
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d002      	beq.n	800a8b8 <UART_SetConfig+0x168>
 800a8b2:	2b10      	cmp	r3, #16
 800a8b4:	d006      	beq.n	800a8c4 <UART_SetConfig+0x174>
 800a8b6:	e00b      	b.n	800a8d0 <UART_SetConfig+0x180>
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	76fb      	strb	r3, [r7, #27]
 800a8bc:	e089      	b.n	800a9d2 <UART_SetConfig+0x282>
 800a8be:	2302      	movs	r3, #2
 800a8c0:	76fb      	strb	r3, [r7, #27]
 800a8c2:	e086      	b.n	800a9d2 <UART_SetConfig+0x282>
 800a8c4:	2304      	movs	r3, #4
 800a8c6:	76fb      	strb	r3, [r7, #27]
 800a8c8:	e083      	b.n	800a9d2 <UART_SetConfig+0x282>
 800a8ca:	2308      	movs	r3, #8
 800a8cc:	76fb      	strb	r3, [r7, #27]
 800a8ce:	e080      	b.n	800a9d2 <UART_SetConfig+0x282>
 800a8d0:	2310      	movs	r3, #16
 800a8d2:	76fb      	strb	r3, [r7, #27]
 800a8d4:	e07d      	b.n	800a9d2 <UART_SetConfig+0x282>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a5b      	ldr	r2, [pc, #364]	; (800aa48 <UART_SetConfig+0x2f8>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d120      	bne.n	800a922 <UART_SetConfig+0x1d2>
 800a8e0:	4b56      	ldr	r3, [pc, #344]	; (800aa3c <UART_SetConfig+0x2ec>)
 800a8e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a8ea:	2bc0      	cmp	r3, #192	; 0xc0
 800a8ec:	d013      	beq.n	800a916 <UART_SetConfig+0x1c6>
 800a8ee:	2bc0      	cmp	r3, #192	; 0xc0
 800a8f0:	d814      	bhi.n	800a91c <UART_SetConfig+0x1cc>
 800a8f2:	2b80      	cmp	r3, #128	; 0x80
 800a8f4:	d009      	beq.n	800a90a <UART_SetConfig+0x1ba>
 800a8f6:	2b80      	cmp	r3, #128	; 0x80
 800a8f8:	d810      	bhi.n	800a91c <UART_SetConfig+0x1cc>
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d002      	beq.n	800a904 <UART_SetConfig+0x1b4>
 800a8fe:	2b40      	cmp	r3, #64	; 0x40
 800a900:	d006      	beq.n	800a910 <UART_SetConfig+0x1c0>
 800a902:	e00b      	b.n	800a91c <UART_SetConfig+0x1cc>
 800a904:	2300      	movs	r3, #0
 800a906:	76fb      	strb	r3, [r7, #27]
 800a908:	e063      	b.n	800a9d2 <UART_SetConfig+0x282>
 800a90a:	2302      	movs	r3, #2
 800a90c:	76fb      	strb	r3, [r7, #27]
 800a90e:	e060      	b.n	800a9d2 <UART_SetConfig+0x282>
 800a910:	2304      	movs	r3, #4
 800a912:	76fb      	strb	r3, [r7, #27]
 800a914:	e05d      	b.n	800a9d2 <UART_SetConfig+0x282>
 800a916:	2308      	movs	r3, #8
 800a918:	76fb      	strb	r3, [r7, #27]
 800a91a:	e05a      	b.n	800a9d2 <UART_SetConfig+0x282>
 800a91c:	2310      	movs	r3, #16
 800a91e:	76fb      	strb	r3, [r7, #27]
 800a920:	e057      	b.n	800a9d2 <UART_SetConfig+0x282>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4a49      	ldr	r2, [pc, #292]	; (800aa4c <UART_SetConfig+0x2fc>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d125      	bne.n	800a978 <UART_SetConfig+0x228>
 800a92c:	4b43      	ldr	r3, [pc, #268]	; (800aa3c <UART_SetConfig+0x2ec>)
 800a92e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a936:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a93a:	d017      	beq.n	800a96c <UART_SetConfig+0x21c>
 800a93c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a940:	d817      	bhi.n	800a972 <UART_SetConfig+0x222>
 800a942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a946:	d00b      	beq.n	800a960 <UART_SetConfig+0x210>
 800a948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a94c:	d811      	bhi.n	800a972 <UART_SetConfig+0x222>
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d003      	beq.n	800a95a <UART_SetConfig+0x20a>
 800a952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a956:	d006      	beq.n	800a966 <UART_SetConfig+0x216>
 800a958:	e00b      	b.n	800a972 <UART_SetConfig+0x222>
 800a95a:	2300      	movs	r3, #0
 800a95c:	76fb      	strb	r3, [r7, #27]
 800a95e:	e038      	b.n	800a9d2 <UART_SetConfig+0x282>
 800a960:	2302      	movs	r3, #2
 800a962:	76fb      	strb	r3, [r7, #27]
 800a964:	e035      	b.n	800a9d2 <UART_SetConfig+0x282>
 800a966:	2304      	movs	r3, #4
 800a968:	76fb      	strb	r3, [r7, #27]
 800a96a:	e032      	b.n	800a9d2 <UART_SetConfig+0x282>
 800a96c:	2308      	movs	r3, #8
 800a96e:	76fb      	strb	r3, [r7, #27]
 800a970:	e02f      	b.n	800a9d2 <UART_SetConfig+0x282>
 800a972:	2310      	movs	r3, #16
 800a974:	76fb      	strb	r3, [r7, #27]
 800a976:	e02c      	b.n	800a9d2 <UART_SetConfig+0x282>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4a2d      	ldr	r2, [pc, #180]	; (800aa34 <UART_SetConfig+0x2e4>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d125      	bne.n	800a9ce <UART_SetConfig+0x27e>
 800a982:	4b2e      	ldr	r3, [pc, #184]	; (800aa3c <UART_SetConfig+0x2ec>)
 800a984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a988:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a98c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a990:	d017      	beq.n	800a9c2 <UART_SetConfig+0x272>
 800a992:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a996:	d817      	bhi.n	800a9c8 <UART_SetConfig+0x278>
 800a998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a99c:	d00b      	beq.n	800a9b6 <UART_SetConfig+0x266>
 800a99e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9a2:	d811      	bhi.n	800a9c8 <UART_SetConfig+0x278>
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d003      	beq.n	800a9b0 <UART_SetConfig+0x260>
 800a9a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9ac:	d006      	beq.n	800a9bc <UART_SetConfig+0x26c>
 800a9ae:	e00b      	b.n	800a9c8 <UART_SetConfig+0x278>
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	76fb      	strb	r3, [r7, #27]
 800a9b4:	e00d      	b.n	800a9d2 <UART_SetConfig+0x282>
 800a9b6:	2302      	movs	r3, #2
 800a9b8:	76fb      	strb	r3, [r7, #27]
 800a9ba:	e00a      	b.n	800a9d2 <UART_SetConfig+0x282>
 800a9bc:	2304      	movs	r3, #4
 800a9be:	76fb      	strb	r3, [r7, #27]
 800a9c0:	e007      	b.n	800a9d2 <UART_SetConfig+0x282>
 800a9c2:	2308      	movs	r3, #8
 800a9c4:	76fb      	strb	r3, [r7, #27]
 800a9c6:	e004      	b.n	800a9d2 <UART_SetConfig+0x282>
 800a9c8:	2310      	movs	r3, #16
 800a9ca:	76fb      	strb	r3, [r7, #27]
 800a9cc:	e001      	b.n	800a9d2 <UART_SetConfig+0x282>
 800a9ce:	2310      	movs	r3, #16
 800a9d0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4a17      	ldr	r2, [pc, #92]	; (800aa34 <UART_SetConfig+0x2e4>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	f040 8087 	bne.w	800aaec <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a9de:	7efb      	ldrb	r3, [r7, #27]
 800a9e0:	2b08      	cmp	r3, #8
 800a9e2:	d837      	bhi.n	800aa54 <UART_SetConfig+0x304>
 800a9e4:	a201      	add	r2, pc, #4	; (adr r2, 800a9ec <UART_SetConfig+0x29c>)
 800a9e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ea:	bf00      	nop
 800a9ec:	0800aa11 	.word	0x0800aa11
 800a9f0:	0800aa55 	.word	0x0800aa55
 800a9f4:	0800aa19 	.word	0x0800aa19
 800a9f8:	0800aa55 	.word	0x0800aa55
 800a9fc:	0800aa1f 	.word	0x0800aa1f
 800aa00:	0800aa55 	.word	0x0800aa55
 800aa04:	0800aa55 	.word	0x0800aa55
 800aa08:	0800aa55 	.word	0x0800aa55
 800aa0c:	0800aa27 	.word	0x0800aa27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa10:	f7fe f8b8 	bl	8008b84 <HAL_RCC_GetPCLK1Freq>
 800aa14:	6178      	str	r0, [r7, #20]
        break;
 800aa16:	e022      	b.n	800aa5e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa18:	4b0d      	ldr	r3, [pc, #52]	; (800aa50 <UART_SetConfig+0x300>)
 800aa1a:	617b      	str	r3, [r7, #20]
        break;
 800aa1c:	e01f      	b.n	800aa5e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa1e:	f7fe f819 	bl	8008a54 <HAL_RCC_GetSysClockFreq>
 800aa22:	6178      	str	r0, [r7, #20]
        break;
 800aa24:	e01b      	b.n	800aa5e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa2a:	617b      	str	r3, [r7, #20]
        break;
 800aa2c:	e017      	b.n	800aa5e <UART_SetConfig+0x30e>
 800aa2e:	bf00      	nop
 800aa30:	efff69f3 	.word	0xefff69f3
 800aa34:	40008000 	.word	0x40008000
 800aa38:	40013800 	.word	0x40013800
 800aa3c:	40021000 	.word	0x40021000
 800aa40:	40004400 	.word	0x40004400
 800aa44:	40004800 	.word	0x40004800
 800aa48:	40004c00 	.word	0x40004c00
 800aa4c:	40005000 	.word	0x40005000
 800aa50:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800aa54:	2300      	movs	r3, #0
 800aa56:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	76bb      	strb	r3, [r7, #26]
        break;
 800aa5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	f000 80f1 	beq.w	800ac48 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	685a      	ldr	r2, [r3, #4]
 800aa6a:	4613      	mov	r3, r2
 800aa6c:	005b      	lsls	r3, r3, #1
 800aa6e:	4413      	add	r3, r2
 800aa70:	697a      	ldr	r2, [r7, #20]
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d305      	bcc.n	800aa82 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800aa7c:	697a      	ldr	r2, [r7, #20]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d902      	bls.n	800aa88 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800aa82:	2301      	movs	r3, #1
 800aa84:	76bb      	strb	r3, [r7, #26]
 800aa86:	e0df      	b.n	800ac48 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f04f 0100 	mov.w	r1, #0
 800aa90:	f04f 0200 	mov.w	r2, #0
 800aa94:	f04f 0300 	mov.w	r3, #0
 800aa98:	020b      	lsls	r3, r1, #8
 800aa9a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aa9e:	0202      	lsls	r2, r0, #8
 800aaa0:	6879      	ldr	r1, [r7, #4]
 800aaa2:	6849      	ldr	r1, [r1, #4]
 800aaa4:	0849      	lsrs	r1, r1, #1
 800aaa6:	4608      	mov	r0, r1
 800aaa8:	f04f 0100 	mov.w	r1, #0
 800aaac:	1814      	adds	r4, r2, r0
 800aaae:	eb43 0501 	adc.w	r5, r3, r1
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	461a      	mov	r2, r3
 800aab8:	f04f 0300 	mov.w	r3, #0
 800aabc:	4620      	mov	r0, r4
 800aabe:	4629      	mov	r1, r5
 800aac0:	f7f6 f8c2 	bl	8000c48 <__aeabi_uldivmod>
 800aac4:	4602      	mov	r2, r0
 800aac6:	460b      	mov	r3, r1
 800aac8:	4613      	mov	r3, r2
 800aaca:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aad2:	d308      	bcc.n	800aae6 <UART_SetConfig+0x396>
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aada:	d204      	bcs.n	800aae6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	693a      	ldr	r2, [r7, #16]
 800aae2:	60da      	str	r2, [r3, #12]
 800aae4:	e0b0      	b.n	800ac48 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800aae6:	2301      	movs	r3, #1
 800aae8:	76bb      	strb	r3, [r7, #26]
 800aaea:	e0ad      	b.n	800ac48 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	69db      	ldr	r3, [r3, #28]
 800aaf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aaf4:	d15b      	bne.n	800abae <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800aaf6:	7efb      	ldrb	r3, [r7, #27]
 800aaf8:	2b08      	cmp	r3, #8
 800aafa:	d828      	bhi.n	800ab4e <UART_SetConfig+0x3fe>
 800aafc:	a201      	add	r2, pc, #4	; (adr r2, 800ab04 <UART_SetConfig+0x3b4>)
 800aafe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab02:	bf00      	nop
 800ab04:	0800ab29 	.word	0x0800ab29
 800ab08:	0800ab31 	.word	0x0800ab31
 800ab0c:	0800ab39 	.word	0x0800ab39
 800ab10:	0800ab4f 	.word	0x0800ab4f
 800ab14:	0800ab3f 	.word	0x0800ab3f
 800ab18:	0800ab4f 	.word	0x0800ab4f
 800ab1c:	0800ab4f 	.word	0x0800ab4f
 800ab20:	0800ab4f 	.word	0x0800ab4f
 800ab24:	0800ab47 	.word	0x0800ab47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab28:	f7fe f82c 	bl	8008b84 <HAL_RCC_GetPCLK1Freq>
 800ab2c:	6178      	str	r0, [r7, #20]
        break;
 800ab2e:	e013      	b.n	800ab58 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab30:	f7fe f83e 	bl	8008bb0 <HAL_RCC_GetPCLK2Freq>
 800ab34:	6178      	str	r0, [r7, #20]
        break;
 800ab36:	e00f      	b.n	800ab58 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab38:	4b49      	ldr	r3, [pc, #292]	; (800ac60 <UART_SetConfig+0x510>)
 800ab3a:	617b      	str	r3, [r7, #20]
        break;
 800ab3c:	e00c      	b.n	800ab58 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab3e:	f7fd ff89 	bl	8008a54 <HAL_RCC_GetSysClockFreq>
 800ab42:	6178      	str	r0, [r7, #20]
        break;
 800ab44:	e008      	b.n	800ab58 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab4a:	617b      	str	r3, [r7, #20]
        break;
 800ab4c:	e004      	b.n	800ab58 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800ab52:	2301      	movs	r3, #1
 800ab54:	76bb      	strb	r3, [r7, #26]
        break;
 800ab56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d074      	beq.n	800ac48 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	005a      	lsls	r2, r3, #1
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	085b      	lsrs	r3, r3, #1
 800ab68:	441a      	add	r2, r3
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab72:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	2b0f      	cmp	r3, #15
 800ab78:	d916      	bls.n	800aba8 <UART_SetConfig+0x458>
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab80:	d212      	bcs.n	800aba8 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	b29b      	uxth	r3, r3
 800ab86:	f023 030f 	bic.w	r3, r3, #15
 800ab8a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	085b      	lsrs	r3, r3, #1
 800ab90:	b29b      	uxth	r3, r3
 800ab92:	f003 0307 	and.w	r3, r3, #7
 800ab96:	b29a      	uxth	r2, r3
 800ab98:	89fb      	ldrh	r3, [r7, #14]
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	89fa      	ldrh	r2, [r7, #14]
 800aba4:	60da      	str	r2, [r3, #12]
 800aba6:	e04f      	b.n	800ac48 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800aba8:	2301      	movs	r3, #1
 800abaa:	76bb      	strb	r3, [r7, #26]
 800abac:	e04c      	b.n	800ac48 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800abae:	7efb      	ldrb	r3, [r7, #27]
 800abb0:	2b08      	cmp	r3, #8
 800abb2:	d828      	bhi.n	800ac06 <UART_SetConfig+0x4b6>
 800abb4:	a201      	add	r2, pc, #4	; (adr r2, 800abbc <UART_SetConfig+0x46c>)
 800abb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abba:	bf00      	nop
 800abbc:	0800abe1 	.word	0x0800abe1
 800abc0:	0800abe9 	.word	0x0800abe9
 800abc4:	0800abf1 	.word	0x0800abf1
 800abc8:	0800ac07 	.word	0x0800ac07
 800abcc:	0800abf7 	.word	0x0800abf7
 800abd0:	0800ac07 	.word	0x0800ac07
 800abd4:	0800ac07 	.word	0x0800ac07
 800abd8:	0800ac07 	.word	0x0800ac07
 800abdc:	0800abff 	.word	0x0800abff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abe0:	f7fd ffd0 	bl	8008b84 <HAL_RCC_GetPCLK1Freq>
 800abe4:	6178      	str	r0, [r7, #20]
        break;
 800abe6:	e013      	b.n	800ac10 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abe8:	f7fd ffe2 	bl	8008bb0 <HAL_RCC_GetPCLK2Freq>
 800abec:	6178      	str	r0, [r7, #20]
        break;
 800abee:	e00f      	b.n	800ac10 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800abf0:	4b1b      	ldr	r3, [pc, #108]	; (800ac60 <UART_SetConfig+0x510>)
 800abf2:	617b      	str	r3, [r7, #20]
        break;
 800abf4:	e00c      	b.n	800ac10 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800abf6:	f7fd ff2d 	bl	8008a54 <HAL_RCC_GetSysClockFreq>
 800abfa:	6178      	str	r0, [r7, #20]
        break;
 800abfc:	e008      	b.n	800ac10 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac02:	617b      	str	r3, [r7, #20]
        break;
 800ac04:	e004      	b.n	800ac10 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800ac06:	2300      	movs	r3, #0
 800ac08:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	76bb      	strb	r3, [r7, #26]
        break;
 800ac0e:	bf00      	nop
    }

    if (pclk != 0U)
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d018      	beq.n	800ac48 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	085a      	lsrs	r2, r3, #1
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	441a      	add	r2, r3
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac28:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	2b0f      	cmp	r3, #15
 800ac2e:	d909      	bls.n	800ac44 <UART_SetConfig+0x4f4>
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac36:	d205      	bcs.n	800ac44 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	b29a      	uxth	r2, r3
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	60da      	str	r2, [r3, #12]
 800ac42:	e001      	b.n	800ac48 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800ac44:	2301      	movs	r3, #1
 800ac46:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2200      	movs	r2, #0
 800ac52:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800ac54:	7ebb      	ldrb	r3, [r7, #26]
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3720      	adds	r7, #32
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bdb0      	pop	{r4, r5, r7, pc}
 800ac5e:	bf00      	nop
 800ac60:	00f42400 	.word	0x00f42400

0800ac64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b083      	sub	sp, #12
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac70:	f003 0301 	and.w	r3, r3, #1
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d00a      	beq.n	800ac8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	430a      	orrs	r2, r1
 800ac8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac92:	f003 0302 	and.w	r3, r3, #2
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d00a      	beq.n	800acb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	430a      	orrs	r2, r1
 800acae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb4:	f003 0304 	and.w	r3, r3, #4
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d00a      	beq.n	800acd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	430a      	orrs	r2, r1
 800acd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd6:	f003 0308 	and.w	r3, r3, #8
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00a      	beq.n	800acf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	430a      	orrs	r2, r1
 800acf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acf8:	f003 0310 	and.w	r3, r3, #16
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d00a      	beq.n	800ad16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	430a      	orrs	r2, r1
 800ad14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad1a:	f003 0320 	and.w	r3, r3, #32
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00a      	beq.n	800ad38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	689b      	ldr	r3, [r3, #8]
 800ad28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	430a      	orrs	r2, r1
 800ad36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d01a      	beq.n	800ad7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	430a      	orrs	r2, r1
 800ad58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad62:	d10a      	bne.n	800ad7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	430a      	orrs	r2, r1
 800ad78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d00a      	beq.n	800ad9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	430a      	orrs	r2, r1
 800ad9a:	605a      	str	r2, [r3, #4]
  }
}
 800ad9c:	bf00      	nop
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b086      	sub	sp, #24
 800adac:	af02      	add	r7, sp, #8
 800adae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2200      	movs	r2, #0
 800adb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800adb8:	f7fb fc0e 	bl	80065d8 <HAL_GetTick>
 800adbc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f003 0308 	and.w	r3, r3, #8
 800adc8:	2b08      	cmp	r3, #8
 800adca:	d10e      	bne.n	800adea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800adcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800add0:	9300      	str	r3, [sp, #0]
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2200      	movs	r2, #0
 800add6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 f82d 	bl	800ae3a <UART_WaitOnFlagUntilTimeout>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d001      	beq.n	800adea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ade6:	2303      	movs	r3, #3
 800ade8:	e023      	b.n	800ae32 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f003 0304 	and.w	r3, r3, #4
 800adf4:	2b04      	cmp	r3, #4
 800adf6:	d10e      	bne.n	800ae16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800adf8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800adfc:	9300      	str	r3, [sp, #0]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2200      	movs	r2, #0
 800ae02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 f817 	bl	800ae3a <UART_WaitOnFlagUntilTimeout>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d001      	beq.n	800ae16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae12:	2303      	movs	r3, #3
 800ae14:	e00d      	b.n	800ae32 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2220      	movs	r2, #32
 800ae1a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2220      	movs	r2, #32
 800ae20:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2200      	movs	r2, #0
 800ae26:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800ae30:	2300      	movs	r3, #0
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3710      	adds	r7, #16
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}

0800ae3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae3a:	b580      	push	{r7, lr}
 800ae3c:	b09c      	sub	sp, #112	; 0x70
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	60f8      	str	r0, [r7, #12]
 800ae42:	60b9      	str	r1, [r7, #8]
 800ae44:	603b      	str	r3, [r7, #0]
 800ae46:	4613      	mov	r3, r2
 800ae48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae4a:	e0a5      	b.n	800af98 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae52:	f000 80a1 	beq.w	800af98 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae56:	f7fb fbbf 	bl	80065d8 <HAL_GetTick>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	1ad3      	subs	r3, r2, r3
 800ae60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d302      	bcc.n	800ae6c <UART_WaitOnFlagUntilTimeout+0x32>
 800ae66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d13e      	bne.n	800aeea <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae74:	e853 3f00 	ldrex	r3, [r3]
 800ae78:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ae7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ae80:	667b      	str	r3, [r7, #100]	; 0x64
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	461a      	mov	r2, r3
 800ae88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae8c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ae90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ae92:	e841 2300 	strex	r3, r2, [r1]
 800ae96:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ae98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d1e6      	bne.n	800ae6c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	3308      	adds	r3, #8
 800aea4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aea8:	e853 3f00 	ldrex	r3, [r3]
 800aeac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aeae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb0:	f023 0301 	bic.w	r3, r3, #1
 800aeb4:	663b      	str	r3, [r7, #96]	; 0x60
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	3308      	adds	r3, #8
 800aebc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aebe:	64ba      	str	r2, [r7, #72]	; 0x48
 800aec0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aec4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aec6:	e841 2300 	strex	r3, r2, [r1]
 800aeca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d1e5      	bne.n	800ae9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2220      	movs	r2, #32
 800aed6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2220      	movs	r2, #32
 800aedc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2200      	movs	r2, #0
 800aee2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800aee6:	2303      	movs	r3, #3
 800aee8:	e067      	b.n	800afba <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f003 0304 	and.w	r3, r3, #4
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d04f      	beq.n	800af98 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	69db      	ldr	r3, [r3, #28]
 800aefe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af06:	d147      	bne.n	800af98 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af10:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af1a:	e853 3f00 	ldrex	r3, [r3]
 800af1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af22:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800af26:	66fb      	str	r3, [r7, #108]	; 0x6c
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	461a      	mov	r2, r3
 800af2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af30:	637b      	str	r3, [r7, #52]	; 0x34
 800af32:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800af36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af38:	e841 2300 	strex	r3, r2, [r1]
 800af3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800af3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af40:	2b00      	cmp	r3, #0
 800af42:	d1e6      	bne.n	800af12 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	3308      	adds	r3, #8
 800af4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	e853 3f00 	ldrex	r3, [r3]
 800af52:	613b      	str	r3, [r7, #16]
   return(result);
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	f023 0301 	bic.w	r3, r3, #1
 800af5a:	66bb      	str	r3, [r7, #104]	; 0x68
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	3308      	adds	r3, #8
 800af62:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800af64:	623a      	str	r2, [r7, #32]
 800af66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af68:	69f9      	ldr	r1, [r7, #28]
 800af6a:	6a3a      	ldr	r2, [r7, #32]
 800af6c:	e841 2300 	strex	r3, r2, [r1]
 800af70:	61bb      	str	r3, [r7, #24]
   return(result);
 800af72:	69bb      	ldr	r3, [r7, #24]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d1e5      	bne.n	800af44 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2220      	movs	r2, #32
 800af7c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2220      	movs	r2, #32
 800af82:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2220      	movs	r2, #32
 800af88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2200      	movs	r2, #0
 800af90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800af94:	2303      	movs	r3, #3
 800af96:	e010      	b.n	800afba <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	69da      	ldr	r2, [r3, #28]
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	4013      	ands	r3, r2
 800afa2:	68ba      	ldr	r2, [r7, #8]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	bf0c      	ite	eq
 800afa8:	2301      	moveq	r3, #1
 800afaa:	2300      	movne	r3, #0
 800afac:	b2db      	uxtb	r3, r3
 800afae:	461a      	mov	r2, r3
 800afb0:	79fb      	ldrb	r3, [r7, #7]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	f43f af4a 	beq.w	800ae4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800afb8:	2300      	movs	r3, #0
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3770      	adds	r7, #112	; 0x70
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
	...

0800afc4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b096      	sub	sp, #88	; 0x58
 800afc8:	af00      	add	r7, sp, #0
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	4613      	mov	r3, r2
 800afd0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	68ba      	ldr	r2, [r7, #8]
 800afd6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	88fa      	ldrh	r2, [r7, #6]
 800afdc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2200      	movs	r2, #0
 800afe4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2222      	movs	r2, #34	; 0x22
 800afec:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d02b      	beq.n	800b04e <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800affa:	4a42      	ldr	r2, [pc, #264]	; (800b104 <UART_Start_Receive_DMA+0x140>)
 800affc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b002:	4a41      	ldr	r2, [pc, #260]	; (800b108 <UART_Start_Receive_DMA+0x144>)
 800b004:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b00a:	4a40      	ldr	r2, [pc, #256]	; (800b10c <UART_Start_Receive_DMA+0x148>)
 800b00c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b012:	2200      	movs	r2, #0
 800b014:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	3324      	adds	r3, #36	; 0x24
 800b020:	4619      	mov	r1, r3
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b026:	461a      	mov	r2, r3
 800b028:	88fb      	ldrh	r3, [r7, #6]
 800b02a:	f7fb fd95 	bl	8006b58 <HAL_DMA_Start_IT>
 800b02e:	4603      	mov	r3, r0
 800b030:	2b00      	cmp	r3, #0
 800b032:	d00c      	beq.n	800b04e <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2210      	movs	r2, #16
 800b038:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2200      	movs	r2, #0
 800b040:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2220      	movs	r2, #32
 800b048:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800b04a:	2301      	movs	r3, #1
 800b04c:	e055      	b.n	800b0fa <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2200      	movs	r2, #0
 800b052:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	691b      	ldr	r3, [r3, #16]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d018      	beq.n	800b090 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b066:	e853 3f00 	ldrex	r3, [r3]
 800b06a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b072:	657b      	str	r3, [r7, #84]	; 0x54
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	461a      	mov	r2, r3
 800b07a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b07c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b07e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b080:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b082:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b084:	e841 2300 	strex	r3, r2, [r1]
 800b088:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b08a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d1e6      	bne.n	800b05e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	3308      	adds	r3, #8
 800b096:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b09a:	e853 3f00 	ldrex	r3, [r3]
 800b09e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a2:	f043 0301 	orr.w	r3, r3, #1
 800b0a6:	653b      	str	r3, [r7, #80]	; 0x50
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	3308      	adds	r3, #8
 800b0ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b0b0:	637a      	str	r2, [r7, #52]	; 0x34
 800b0b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b0b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0b8:	e841 2300 	strex	r3, r2, [r1]
 800b0bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d1e5      	bne.n	800b090 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	3308      	adds	r3, #8
 800b0ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	e853 3f00 	ldrex	r3, [r3]
 800b0d2:	613b      	str	r3, [r7, #16]
   return(result);
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0da:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	3308      	adds	r3, #8
 800b0e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b0e4:	623a      	str	r2, [r7, #32]
 800b0e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0e8:	69f9      	ldr	r1, [r7, #28]
 800b0ea:	6a3a      	ldr	r2, [r7, #32]
 800b0ec:	e841 2300 	strex	r3, r2, [r1]
 800b0f0:	61bb      	str	r3, [r7, #24]
   return(result);
 800b0f2:	69bb      	ldr	r3, [r7, #24]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d1e5      	bne.n	800b0c4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b0f8:	2300      	movs	r3, #0
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3758      	adds	r7, #88	; 0x58
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	0800b223 	.word	0x0800b223
 800b108:	0800b347 	.word	0x0800b347
 800b10c:	0800b37f 	.word	0x0800b37f

0800b110 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b110:	b480      	push	{r7}
 800b112:	b089      	sub	sp, #36	; 0x24
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	e853 3f00 	ldrex	r3, [r3]
 800b124:	60bb      	str	r3, [r7, #8]
   return(result);
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b12c:	61fb      	str	r3, [r7, #28]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	461a      	mov	r2, r3
 800b134:	69fb      	ldr	r3, [r7, #28]
 800b136:	61bb      	str	r3, [r7, #24]
 800b138:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b13a:	6979      	ldr	r1, [r7, #20]
 800b13c:	69ba      	ldr	r2, [r7, #24]
 800b13e:	e841 2300 	strex	r3, r2, [r1]
 800b142:	613b      	str	r3, [r7, #16]
   return(result);
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d1e6      	bne.n	800b118 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2220      	movs	r2, #32
 800b14e:	679a      	str	r2, [r3, #120]	; 0x78
}
 800b150:	bf00      	nop
 800b152:	3724      	adds	r7, #36	; 0x24
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr

0800b15c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b095      	sub	sp, #84	; 0x54
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b16a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b16c:	e853 3f00 	ldrex	r3, [r3]
 800b170:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b174:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b178:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	461a      	mov	r2, r3
 800b180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b182:	643b      	str	r3, [r7, #64]	; 0x40
 800b184:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b186:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b188:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b18a:	e841 2300 	strex	r3, r2, [r1]
 800b18e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b192:	2b00      	cmp	r3, #0
 800b194:	d1e6      	bne.n	800b164 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	3308      	adds	r3, #8
 800b19c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b19e:	6a3b      	ldr	r3, [r7, #32]
 800b1a0:	e853 3f00 	ldrex	r3, [r3]
 800b1a4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1a6:	69fb      	ldr	r3, [r7, #28]
 800b1a8:	f023 0301 	bic.w	r3, r3, #1
 800b1ac:	64bb      	str	r3, [r7, #72]	; 0x48
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	3308      	adds	r3, #8
 800b1b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b1b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b1bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1be:	e841 2300 	strex	r3, r2, [r1]
 800b1c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d1e5      	bne.n	800b196 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	d118      	bne.n	800b204 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	e853 3f00 	ldrex	r3, [r3]
 800b1de:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	f023 0310 	bic.w	r3, r3, #16
 800b1e6:	647b      	str	r3, [r7, #68]	; 0x44
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1f0:	61bb      	str	r3, [r7, #24]
 800b1f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f4:	6979      	ldr	r1, [r7, #20]
 800b1f6:	69ba      	ldr	r2, [r7, #24]
 800b1f8:	e841 2300 	strex	r3, r2, [r1]
 800b1fc:	613b      	str	r3, [r7, #16]
   return(result);
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d1e6      	bne.n	800b1d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2220      	movs	r2, #32
 800b208:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	665a      	str	r2, [r3, #100]	; 0x64
}
 800b216:	bf00      	nop
 800b218:	3754      	adds	r7, #84	; 0x54
 800b21a:	46bd      	mov	sp, r7
 800b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b220:	4770      	bx	lr

0800b222 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b222:	b580      	push	{r7, lr}
 800b224:	b09c      	sub	sp, #112	; 0x70
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b22e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f003 0320 	and.w	r3, r3, #32
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d170      	bne.n	800b320 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800b23e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b240:	2200      	movs	r2, #0
 800b242:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b24c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b24e:	e853 3f00 	ldrex	r3, [r3]
 800b252:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b256:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b25a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b25c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	461a      	mov	r2, r3
 800b262:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b264:	65bb      	str	r3, [r7, #88]	; 0x58
 800b266:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b268:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b26a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b26c:	e841 2300 	strex	r3, r2, [r1]
 800b270:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b274:	2b00      	cmp	r3, #0
 800b276:	d1e6      	bne.n	800b246 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	3308      	adds	r3, #8
 800b27e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b282:	e853 3f00 	ldrex	r3, [r3]
 800b286:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b28a:	f023 0301 	bic.w	r3, r3, #1
 800b28e:	667b      	str	r3, [r7, #100]	; 0x64
 800b290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	3308      	adds	r3, #8
 800b296:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b298:	647a      	str	r2, [r7, #68]	; 0x44
 800b29a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b29c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b29e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b2a0:	e841 2300 	strex	r3, r2, [r1]
 800b2a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b2a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d1e5      	bne.n	800b278 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	3308      	adds	r3, #8
 800b2b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b6:	e853 3f00 	ldrex	r3, [r3]
 800b2ba:	623b      	str	r3, [r7, #32]
   return(result);
 800b2bc:	6a3b      	ldr	r3, [r7, #32]
 800b2be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2c2:	663b      	str	r3, [r7, #96]	; 0x60
 800b2c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	3308      	adds	r3, #8
 800b2ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b2cc:	633a      	str	r2, [r7, #48]	; 0x30
 800b2ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b2d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2d4:	e841 2300 	strex	r3, r2, [r1]
 800b2d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d1e5      	bne.n	800b2ac <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b2e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2e2:	2220      	movs	r2, #32
 800b2e4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d118      	bne.n	800b320 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	e853 3f00 	ldrex	r3, [r3]
 800b2fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	f023 0310 	bic.w	r3, r3, #16
 800b302:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	461a      	mov	r2, r3
 800b30a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b30c:	61fb      	str	r3, [r7, #28]
 800b30e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b310:	69b9      	ldr	r1, [r7, #24]
 800b312:	69fa      	ldr	r2, [r7, #28]
 800b314:	e841 2300 	strex	r3, r2, [r1]
 800b318:	617b      	str	r3, [r7, #20]
   return(result);
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d1e6      	bne.n	800b2ee <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b324:	2b01      	cmp	r3, #1
 800b326:	d107      	bne.n	800b338 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b32a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b32e:	4619      	mov	r1, r3
 800b330:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b332:	f7ff fa01 	bl	800a738 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b336:	e002      	b.n	800b33e <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800b338:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b33a:	f7ff f9df 	bl	800a6fc <HAL_UART_RxCpltCallback>
}
 800b33e:	bf00      	nop
 800b340:	3770      	adds	r7, #112	; 0x70
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b346:	b580      	push	{r7, lr}
 800b348:	b084      	sub	sp, #16
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b352:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d109      	bne.n	800b370 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b362:	085b      	lsrs	r3, r3, #1
 800b364:	b29b      	uxth	r3, r3
 800b366:	4619      	mov	r1, r3
 800b368:	68f8      	ldr	r0, [r7, #12]
 800b36a:	f7ff f9e5 	bl	800a738 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b36e:	e002      	b.n	800b376 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800b370:	68f8      	ldr	r0, [r7, #12]
 800b372:	f7ff f9cd 	bl	800a710 <HAL_UART_RxHalfCpltCallback>
}
 800b376:	bf00      	nop
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}

0800b37e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b37e:	b580      	push	{r7, lr}
 800b380:	b086      	sub	sp, #24
 800b382:	af00      	add	r7, sp, #0
 800b384:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b38a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b390:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b396:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	689b      	ldr	r3, [r3, #8]
 800b39e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3a2:	2b80      	cmp	r3, #128	; 0x80
 800b3a4:	d109      	bne.n	800b3ba <UART_DMAError+0x3c>
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	2b21      	cmp	r3, #33	; 0x21
 800b3aa:	d106      	bne.n	800b3ba <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800b3b4:	6978      	ldr	r0, [r7, #20]
 800b3b6:	f7ff feab 	bl	800b110 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	689b      	ldr	r3, [r3, #8]
 800b3c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3c4:	2b40      	cmp	r3, #64	; 0x40
 800b3c6:	d109      	bne.n	800b3dc <UART_DMAError+0x5e>
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2b22      	cmp	r3, #34	; 0x22
 800b3cc:	d106      	bne.n	800b3dc <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800b3d6:	6978      	ldr	r0, [r7, #20]
 800b3d8:	f7ff fec0 	bl	800b15c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b3e2:	f043 0210 	orr.w	r2, r3, #16
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b3ec:	6978      	ldr	r0, [r7, #20]
 800b3ee:	f7ff f999 	bl	800a724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3f2:	bf00      	nop
 800b3f4:	3718      	adds	r7, #24
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
	...

0800b3fc <DataHist_parameters>:
 800b3fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b400:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b402:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b404:	7020      	strb	r0, [r4, #0]
 800b406:	6808      	ldr	r0, [r1, #0]
 800b408:	6060      	str	r0, [r4, #4]
 800b40a:	6848      	ldr	r0, [r1, #4]
 800b40c:	60a0      	str	r0, [r4, #8]
 800b40e:	6888      	ldr	r0, [r1, #8]
 800b410:	60e0      	str	r0, [r4, #12]
 800b412:	68c8      	ldr	r0, [r1, #12]
 800b414:	6120      	str	r0, [r4, #16]
 800b416:	6908      	ldr	r0, [r1, #16]
 800b418:	6160      	str	r0, [r4, #20]
 800b41a:	6948      	ldr	r0, [r1, #20]
 800b41c:	61a0      	str	r0, [r4, #24]
 800b41e:	6988      	ldr	r0, [r1, #24]
 800b420:	61e0      	str	r0, [r4, #28]
 800b422:	69c8      	ldr	r0, [r1, #28]
 800b424:	6220      	str	r0, [r4, #32]
 800b426:	6a09      	ldr	r1, [r1, #32]
 800b428:	6261      	str	r1, [r4, #36]	; 0x24
 800b42a:	e9dd 7607 	ldrd	r7, r6, [sp, #28]
 800b42e:	8811      	ldrh	r1, [r2, #0]
 800b430:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800b434:	8521      	strh	r1, [r4, #40]	; 0x28
 800b436:	f102 0c80 	add.w	ip, r2, #128	; 0x80
 800b43a:	f104 0830 	add.w	r8, r4, #48	; 0x30
 800b43e:	f04f 0e00 	mov.w	lr, #0
 800b442:	f1ac 0278 	sub.w	r2, ip, #120	; 0x78
 800b446:	4641      	mov	r1, r8
 800b448:	f852 0b04 	ldr.w	r0, [r2], #4
 800b44c:	f841 0b04 	str.w	r0, [r1], #4
 800b450:	4562      	cmp	r2, ip
 800b452:	d1f9      	bne.n	800b448 <DataHist_parameters+0x4c>
 800b454:	f10e 0e1e 	add.w	lr, lr, #30
 800b458:	f1be 0f5a 	cmp.w	lr, #90	; 0x5a
 800b45c:	f108 0878 	add.w	r8, r8, #120	; 0x78
 800b460:	f102 0c78 	add.w	ip, r2, #120	; 0x78
 800b464:	d1ed      	bne.n	800b442 <DataHist_parameters+0x46>
 800b466:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 800b46a:	881a      	ldrh	r2, [r3, #0]
 800b46c:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800b470:	f8a4 2198 	strh.w	r2, [r4, #408]	; 0x198
 800b474:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800b478:	f504 7ed0 	add.w	lr, r4, #416	; 0x1a0
 800b47c:	f04f 0c00 	mov.w	ip, #0
 800b480:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 800b484:	4672      	mov	r2, lr
 800b486:	f853 1b04 	ldr.w	r1, [r3], #4
 800b48a:	f842 1b04 	str.w	r1, [r2], #4
 800b48e:	4283      	cmp	r3, r0
 800b490:	d1f9      	bne.n	800b486 <DataHist_parameters+0x8a>
 800b492:	f10c 0c1e 	add.w	ip, ip, #30
 800b496:	f1bc 0f5a 	cmp.w	ip, #90	; 0x5a
 800b49a:	f10e 0e78 	add.w	lr, lr, #120	; 0x78
 800b49e:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800b4a2:	d1ed      	bne.n	800b480 <DataHist_parameters+0x84>
 800b4a4:	f8c4 819c 	str.w	r8, [r4, #412]	; 0x19c
 800b4a8:	883b      	ldrh	r3, [r7, #0]
 800b4aa:	f8d7 e004 	ldr.w	lr, [r7, #4]
 800b4ae:	f8a4 3308 	strh.w	r3, [r4, #776]	; 0x308
 800b4b2:	3780      	adds	r7, #128	; 0x80
 800b4b4:	f504 7c44 	add.w	ip, r4, #784	; 0x310
 800b4b8:	2000      	movs	r0, #0
 800b4ba:	f1a7 0378 	sub.w	r3, r7, #120	; 0x78
 800b4be:	4662      	mov	r2, ip
 800b4c0:	f853 1b04 	ldr.w	r1, [r3], #4
 800b4c4:	f842 1b04 	str.w	r1, [r2], #4
 800b4c8:	42bb      	cmp	r3, r7
 800b4ca:	d1f9      	bne.n	800b4c0 <DataHist_parameters+0xc4>
 800b4cc:	301e      	adds	r0, #30
 800b4ce:	285a      	cmp	r0, #90	; 0x5a
 800b4d0:	f10c 0c78 	add.w	ip, ip, #120	; 0x78
 800b4d4:	f103 0778 	add.w	r7, r3, #120	; 0x78
 800b4d8:	d1ef      	bne.n	800b4ba <DataHist_parameters+0xbe>
 800b4da:	f8c4 e30c 	str.w	lr, [r4, #780]	; 0x30c
 800b4de:	8833      	ldrh	r3, [r6, #0]
 800b4e0:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800b4e4:	f8a4 3478 	strh.w	r3, [r4, #1144]	; 0x478
 800b4e8:	3680      	adds	r6, #128	; 0x80
 800b4ea:	f504 6790 	add.w	r7, r4, #1152	; 0x480
 800b4ee:	2000      	movs	r0, #0
 800b4f0:	f1a6 0378 	sub.w	r3, r6, #120	; 0x78
 800b4f4:	463a      	mov	r2, r7
 800b4f6:	f853 1b04 	ldr.w	r1, [r3], #4
 800b4fa:	f842 1b04 	str.w	r1, [r2], #4
 800b4fe:	429e      	cmp	r6, r3
 800b500:	d1f9      	bne.n	800b4f6 <DataHist_parameters+0xfa>
 800b502:	301e      	adds	r0, #30
 800b504:	285a      	cmp	r0, #90	; 0x5a
 800b506:	f107 0778 	add.w	r7, r7, #120	; 0x78
 800b50a:	f106 0678 	add.w	r6, r6, #120	; 0x78
 800b50e:	d1ef      	bne.n	800b4f0 <DataHist_parameters+0xf4>
 800b510:	f504 638f 	add.w	r3, r4, #1144	; 0x478
 800b514:	69aa      	ldr	r2, [r5, #24]
 800b516:	f8c3 c004 	str.w	ip, [r3, #4]
 800b51a:	782b      	ldrb	r3, [r5, #0]
 800b51c:	f884 35e8 	strb.w	r3, [r4, #1512]	; 0x5e8
 800b520:	f504 63bd 	add.w	r3, r4, #1512	; 0x5e8
 800b524:	619a      	str	r2, [r3, #24]
 800b526:	686a      	ldr	r2, [r5, #4]
 800b528:	605a      	str	r2, [r3, #4]
 800b52a:	f504 62be 	add.w	r2, r4, #1520	; 0x5f0
 800b52e:	68a9      	ldr	r1, [r5, #8]
 800b530:	6011      	str	r1, [r2, #0]
 800b532:	f204 52f4 	addw	r2, r4, #1524	; 0x5f4
 800b536:	68e9      	ldr	r1, [r5, #12]
 800b538:	6011      	str	r1, [r2, #0]
 800b53a:	f504 62bf 	add.w	r2, r4, #1528	; 0x5f8
 800b53e:	6929      	ldr	r1, [r5, #16]
 800b540:	6011      	str	r1, [r2, #0]
 800b542:	f204 52fc 	addw	r2, r4, #1532	; 0x5fc
 800b546:	6969      	ldr	r1, [r5, #20]
 800b548:	6011      	str	r1, [r2, #0]
 800b54a:	69ea      	ldr	r2, [r5, #28]
 800b54c:	61da      	str	r2, [r3, #28]
 800b54e:	f504 63c1 	add.w	r3, r4, #1544	; 0x608
 800b552:	6a2a      	ldr	r2, [r5, #32]
 800b554:	601a      	str	r2, [r3, #0]
 800b556:	f204 630c 	addw	r3, r4, #1548	; 0x60c
 800b55a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800b55c:	601a      	str	r2, [r3, #0]
 800b55e:	f504 63c2 	add.w	r3, r4, #1552	; 0x610
 800b562:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800b564:	601a      	str	r2, [r3, #0]
 800b566:	f204 6414 	addw	r4, r4, #1556	; 0x614
 800b56a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b56c:	6023      	str	r3, [r4, #0]
 800b56e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b572:	bf00      	nop

0800b574 <rotVect>:
 800b574:	f991 3001 	ldrsb.w	r3, [r1, #1]
 800b578:	ed92 5a01 	vldr	s10, [r2, #4]
 800b57c:	edd2 5a00 	vldr	s11, [r2]
 800b580:	ed92 6a02 	vldr	s12, [r2, #8]
 800b584:	ee07 3a90 	vmov	s15, r3
 800b588:	f991 3000 	ldrsb.w	r3, [r1]
 800b58c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b590:	ee06 3a90 	vmov	s13, r3
 800b594:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b598:	f991 3002 	ldrsb.w	r3, [r1, #2]
 800b59c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b5a0:	ee07 3a10 	vmov	s14, r3
 800b5a4:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800b5a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b5ac:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b5b0:	edc0 7a00 	vstr	s15, [r0]
 800b5b4:	f991 3004 	ldrsb.w	r3, [r1, #4]
 800b5b8:	ed92 5a01 	vldr	s10, [r2, #4]
 800b5bc:	edd2 5a00 	vldr	s11, [r2]
 800b5c0:	ed92 6a02 	vldr	s12, [r2, #8]
 800b5c4:	ee07 3a90 	vmov	s15, r3
 800b5c8:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800b5cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b5d0:	ee06 3a90 	vmov	s13, r3
 800b5d4:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b5d8:	f991 3005 	ldrsb.w	r3, [r1, #5]
 800b5dc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b5e0:	ee07 3a10 	vmov	s14, r3
 800b5e4:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800b5e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b5ec:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b5f0:	edc0 7a01 	vstr	s15, [r0, #4]
 800b5f4:	f991 3007 	ldrsb.w	r3, [r1, #7]
 800b5f8:	ed92 5a01 	vldr	s10, [r2, #4]
 800b5fc:	edd2 5a00 	vldr	s11, [r2]
 800b600:	ed92 6a02 	vldr	s12, [r2, #8]
 800b604:	ee07 3a90 	vmov	s15, r3
 800b608:	f991 3006 	ldrsb.w	r3, [r1, #6]
 800b60c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b610:	ee06 3a90 	vmov	s13, r3
 800b614:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b618:	f991 3008 	ldrsb.w	r3, [r1, #8]
 800b61c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b620:	ee07 3a10 	vmov	s14, r3
 800b624:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800b628:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b62c:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b630:	edc0 7a02 	vstr	s15, [r0, #8]
 800b634:	4770      	bx	lr
 800b636:	bf00      	nop

0800b638 <findAxis>:
 800b638:	f990 3000 	ldrsb.w	r3, [r0]
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d027      	beq.n	800b690 <findAxis+0x58>
 800b640:	3301      	adds	r3, #1
 800b642:	d00e      	beq.n	800b662 <findAxis+0x2a>
 800b644:	f990 3003 	ldrsb.w	r3, [r0, #3]
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d053      	beq.n	800b6f4 <findAxis+0xbc>
 800b64c:	3301      	adds	r3, #1
 800b64e:	d048      	beq.n	800b6e2 <findAxis+0xaa>
 800b650:	f990 3006 	ldrsb.w	r3, [r0, #6]
 800b654:	2b01      	cmp	r3, #1
 800b656:	d053      	beq.n	800b700 <findAxis+0xc8>
 800b658:	3301      	adds	r3, #1
 800b65a:	d104      	bne.n	800b666 <findAxis+0x2e>
 800b65c:	2364      	movs	r3, #100	; 0x64
 800b65e:	700b      	strb	r3, [r1, #0]
 800b660:	e001      	b.n	800b666 <findAxis+0x2e>
 800b662:	2377      	movs	r3, #119	; 0x77
 800b664:	700b      	strb	r3, [r1, #0]
 800b666:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800b66a:	2b01      	cmp	r3, #1
 800b66c:	d016      	beq.n	800b69c <findAxis+0x64>
 800b66e:	3301      	adds	r3, #1
 800b670:	d02e      	beq.n	800b6d0 <findAxis+0x98>
 800b672:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800b676:	2b01      	cmp	r3, #1
 800b678:	d039      	beq.n	800b6ee <findAxis+0xb6>
 800b67a:	3301      	adds	r3, #1
 800b67c:	d034      	beq.n	800b6e8 <findAxis+0xb0>
 800b67e:	f990 3007 	ldrsb.w	r3, [r0, #7]
 800b682:	2b01      	cmp	r3, #1
 800b684:	d03f      	beq.n	800b706 <findAxis+0xce>
 800b686:	3301      	adds	r3, #1
 800b688:	d10a      	bne.n	800b6a0 <findAxis+0x68>
 800b68a:	2364      	movs	r3, #100	; 0x64
 800b68c:	704b      	strb	r3, [r1, #1]
 800b68e:	e007      	b.n	800b6a0 <findAxis+0x68>
 800b690:	2365      	movs	r3, #101	; 0x65
 800b692:	700b      	strb	r3, [r1, #0]
 800b694:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800b698:	2b01      	cmp	r3, #1
 800b69a:	d1e8      	bne.n	800b66e <findAxis+0x36>
 800b69c:	2365      	movs	r3, #101	; 0x65
 800b69e:	704b      	strb	r3, [r1, #1]
 800b6a0:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	d010      	beq.n	800b6ca <findAxis+0x92>
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	d014      	beq.n	800b6d6 <findAxis+0x9e>
 800b6ac:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d022      	beq.n	800b6fa <findAxis+0xc2>
 800b6b4:	3301      	adds	r3, #1
 800b6b6:	d011      	beq.n	800b6dc <findAxis+0xa4>
 800b6b8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d025      	beq.n	800b70c <findAxis+0xd4>
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	bf04      	itt	eq
 800b6c4:	2364      	moveq	r3, #100	; 0x64
 800b6c6:	708b      	strbeq	r3, [r1, #2]
 800b6c8:	4770      	bx	lr
 800b6ca:	2365      	movs	r3, #101	; 0x65
 800b6cc:	708b      	strb	r3, [r1, #2]
 800b6ce:	4770      	bx	lr
 800b6d0:	2377      	movs	r3, #119	; 0x77
 800b6d2:	704b      	strb	r3, [r1, #1]
 800b6d4:	e7e4      	b.n	800b6a0 <findAxis+0x68>
 800b6d6:	2377      	movs	r3, #119	; 0x77
 800b6d8:	708b      	strb	r3, [r1, #2]
 800b6da:	4770      	bx	lr
 800b6dc:	2373      	movs	r3, #115	; 0x73
 800b6de:	708b      	strb	r3, [r1, #2]
 800b6e0:	4770      	bx	lr
 800b6e2:	2373      	movs	r3, #115	; 0x73
 800b6e4:	700b      	strb	r3, [r1, #0]
 800b6e6:	e7be      	b.n	800b666 <findAxis+0x2e>
 800b6e8:	2373      	movs	r3, #115	; 0x73
 800b6ea:	704b      	strb	r3, [r1, #1]
 800b6ec:	e7d8      	b.n	800b6a0 <findAxis+0x68>
 800b6ee:	236e      	movs	r3, #110	; 0x6e
 800b6f0:	704b      	strb	r3, [r1, #1]
 800b6f2:	e7d5      	b.n	800b6a0 <findAxis+0x68>
 800b6f4:	236e      	movs	r3, #110	; 0x6e
 800b6f6:	700b      	strb	r3, [r1, #0]
 800b6f8:	e7b5      	b.n	800b666 <findAxis+0x2e>
 800b6fa:	236e      	movs	r3, #110	; 0x6e
 800b6fc:	708b      	strb	r3, [r1, #2]
 800b6fe:	4770      	bx	lr
 800b700:	2375      	movs	r3, #117	; 0x75
 800b702:	700b      	strb	r3, [r1, #0]
 800b704:	e7af      	b.n	800b666 <findAxis+0x2e>
 800b706:	2375      	movs	r3, #117	; 0x75
 800b708:	704b      	strb	r3, [r1, #1]
 800b70a:	e7c9      	b.n	800b6a0 <findAxis+0x68>
 800b70c:	2375      	movs	r3, #117	; 0x75
 800b70e:	708b      	strb	r3, [r1, #2]
 800b710:	4770      	bx	lr
 800b712:	bf00      	nop
 800b714:	0000      	movs	r0, r0
	...

0800b718 <findDirection>:
 800b718:	b5d0      	push	{r4, r6, r7, lr}
 800b71a:	ed2d 8b04 	vpush	{d8-d9}
 800b71e:	eef0 8ac0 	vabs.f32	s17, s0
 800b722:	eeb0 8ae0 	vabs.f32	s16, s1
 800b726:	eef4 8ac8 	vcmpe.f32	s17, s16
 800b72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b72e:	4604      	mov	r4, r0
 800b730:	eeb0 9ac1 	vabs.f32	s18, s2
 800b734:	dd36      	ble.n	800b7a4 <findDirection+0x8c>
 800b736:	eef4 8ac9 	vcmpe.f32	s17, s18
 800b73a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b73e:	dd31      	ble.n	800b7a4 <findDirection+0x8c>
 800b740:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b748:	ee18 0a90 	vmov	r0, s17
 800b74c:	f340 8094 	ble.w	800b878 <findDirection+0x160>
 800b750:	f7f4 fefa 	bl	8000548 <__aeabi_f2d>
 800b754:	4606      	mov	r6, r0
 800b756:	ee18 0a10 	vmov	r0, s16
 800b75a:	460f      	mov	r7, r1
 800b75c:	f7f4 fef4 	bl	8000548 <__aeabi_f2d>
 800b760:	a387      	add	r3, pc, #540	; (adr r3, 800b980 <findDirection+0x268>)
 800b762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b766:	f7f4 ff47 	bl	80005f8 <__aeabi_dmul>
 800b76a:	4602      	mov	r2, r0
 800b76c:	460b      	mov	r3, r1
 800b76e:	4630      	mov	r0, r6
 800b770:	4639      	mov	r1, r7
 800b772:	f7f5 f9d1 	bl	8000b18 <__aeabi_dcmpgt>
 800b776:	b188      	cbz	r0, 800b79c <findDirection+0x84>
 800b778:	ee19 0a10 	vmov	r0, s18
 800b77c:	f7f4 fee4 	bl	8000548 <__aeabi_f2d>
 800b780:	a37f      	add	r3, pc, #508	; (adr r3, 800b980 <findDirection+0x268>)
 800b782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b786:	f7f4 ff37 	bl	80005f8 <__aeabi_dmul>
 800b78a:	4602      	mov	r2, r0
 800b78c:	460b      	mov	r3, r1
 800b78e:	4630      	mov	r0, r6
 800b790:	4639      	mov	r1, r7
 800b792:	f7f5 f9c1 	bl	8000b18 <__aeabi_dcmpgt>
 800b796:	2800      	cmp	r0, #0
 800b798:	bf18      	it	ne
 800b79a:	2404      	movne	r4, #4
 800b79c:	ecbd 8b04 	vpop	{d8-d9}
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	bdd0      	pop	{r4, r6, r7, pc}
 800b7a4:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800b7a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7ac:	dd32      	ble.n	800b814 <findDirection+0xfc>
 800b7ae:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800b7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7b6:	ee18 0a10 	vmov	r0, s16
 800b7ba:	f340 8086 	ble.w	800b8ca <findDirection+0x1b2>
 800b7be:	f7f4 fec3 	bl	8000548 <__aeabi_f2d>
 800b7c2:	4606      	mov	r6, r0
 800b7c4:	ee18 0a90 	vmov	r0, s17
 800b7c8:	460f      	mov	r7, r1
 800b7ca:	f7f4 febd 	bl	8000548 <__aeabi_f2d>
 800b7ce:	a36c      	add	r3, pc, #432	; (adr r3, 800b980 <findDirection+0x268>)
 800b7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d4:	f7f4 ff10 	bl	80005f8 <__aeabi_dmul>
 800b7d8:	4602      	mov	r2, r0
 800b7da:	460b      	mov	r3, r1
 800b7dc:	4630      	mov	r0, r6
 800b7de:	4639      	mov	r1, r7
 800b7e0:	f7f5 f99a 	bl	8000b18 <__aeabi_dcmpgt>
 800b7e4:	2800      	cmp	r0, #0
 800b7e6:	d0d9      	beq.n	800b79c <findDirection+0x84>
 800b7e8:	ee19 0a10 	vmov	r0, s18
 800b7ec:	f7f4 feac 	bl	8000548 <__aeabi_f2d>
 800b7f0:	a363      	add	r3, pc, #396	; (adr r3, 800b980 <findDirection+0x268>)
 800b7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f6:	f7f4 feff 	bl	80005f8 <__aeabi_dmul>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	4630      	mov	r0, r6
 800b800:	4639      	mov	r1, r7
 800b802:	f7f5 f989 	bl	8000b18 <__aeabi_dcmpgt>
 800b806:	ecbd 8b04 	vpop	{d8-d9}
 800b80a:	2800      	cmp	r0, #0
 800b80c:	bf18      	it	ne
 800b80e:	2401      	movne	r4, #1
 800b810:	4620      	mov	r0, r4
 800b812:	bdd0      	pop	{r4, r6, r7, pc}
 800b814:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800b818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b81c:	ee19 0a10 	vmov	r0, s18
 800b820:	dd7f      	ble.n	800b922 <findDirection+0x20a>
 800b822:	f7f4 fe91 	bl	8000548 <__aeabi_f2d>
 800b826:	4606      	mov	r6, r0
 800b828:	ee18 0a10 	vmov	r0, s16
 800b82c:	460f      	mov	r7, r1
 800b82e:	f7f4 fe8b 	bl	8000548 <__aeabi_f2d>
 800b832:	a353      	add	r3, pc, #332	; (adr r3, 800b980 <findDirection+0x268>)
 800b834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b838:	f7f4 fede 	bl	80005f8 <__aeabi_dmul>
 800b83c:	4602      	mov	r2, r0
 800b83e:	460b      	mov	r3, r1
 800b840:	4630      	mov	r0, r6
 800b842:	4639      	mov	r1, r7
 800b844:	f7f5 f968 	bl	8000b18 <__aeabi_dcmpgt>
 800b848:	2800      	cmp	r0, #0
 800b84a:	d0a7      	beq.n	800b79c <findDirection+0x84>
 800b84c:	ee18 0a90 	vmov	r0, s17
 800b850:	f7f4 fe7a 	bl	8000548 <__aeabi_f2d>
 800b854:	a34a      	add	r3, pc, #296	; (adr r3, 800b980 <findDirection+0x268>)
 800b856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85a:	f7f4 fecd 	bl	80005f8 <__aeabi_dmul>
 800b85e:	4602      	mov	r2, r0
 800b860:	460b      	mov	r3, r1
 800b862:	4630      	mov	r0, r6
 800b864:	4639      	mov	r1, r7
 800b866:	f7f5 f957 	bl	8000b18 <__aeabi_dcmpgt>
 800b86a:	ecbd 8b04 	vpop	{d8-d9}
 800b86e:	2800      	cmp	r0, #0
 800b870:	bf18      	it	ne
 800b872:	2400      	movne	r4, #0
 800b874:	4620      	mov	r0, r4
 800b876:	bdd0      	pop	{r4, r6, r7, pc}
 800b878:	f7f4 fe66 	bl	8000548 <__aeabi_f2d>
 800b87c:	4606      	mov	r6, r0
 800b87e:	ee18 0a10 	vmov	r0, s16
 800b882:	460f      	mov	r7, r1
 800b884:	f7f4 fe60 	bl	8000548 <__aeabi_f2d>
 800b888:	a33d      	add	r3, pc, #244	; (adr r3, 800b980 <findDirection+0x268>)
 800b88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88e:	f7f4 feb3 	bl	80005f8 <__aeabi_dmul>
 800b892:	4602      	mov	r2, r0
 800b894:	460b      	mov	r3, r1
 800b896:	4630      	mov	r0, r6
 800b898:	4639      	mov	r1, r7
 800b89a:	f7f5 f93d 	bl	8000b18 <__aeabi_dcmpgt>
 800b89e:	2800      	cmp	r0, #0
 800b8a0:	f43f af7c 	beq.w	800b79c <findDirection+0x84>
 800b8a4:	ee19 0a10 	vmov	r0, s18
 800b8a8:	f7f4 fe4e 	bl	8000548 <__aeabi_f2d>
 800b8ac:	a334      	add	r3, pc, #208	; (adr r3, 800b980 <findDirection+0x268>)
 800b8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b2:	f7f4 fea1 	bl	80005f8 <__aeabi_dmul>
 800b8b6:	4602      	mov	r2, r0
 800b8b8:	460b      	mov	r3, r1
 800b8ba:	4630      	mov	r0, r6
 800b8bc:	4639      	mov	r1, r7
 800b8be:	f7f5 f92b 	bl	8000b18 <__aeabi_dcmpgt>
 800b8c2:	2800      	cmp	r0, #0
 800b8c4:	bf18      	it	ne
 800b8c6:	2405      	movne	r4, #5
 800b8c8:	e768      	b.n	800b79c <findDirection+0x84>
 800b8ca:	f7f4 fe3d 	bl	8000548 <__aeabi_f2d>
 800b8ce:	4606      	mov	r6, r0
 800b8d0:	ee18 0a90 	vmov	r0, s17
 800b8d4:	460f      	mov	r7, r1
 800b8d6:	f7f4 fe37 	bl	8000548 <__aeabi_f2d>
 800b8da:	a329      	add	r3, pc, #164	; (adr r3, 800b980 <findDirection+0x268>)
 800b8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e0:	f7f4 fe8a 	bl	80005f8 <__aeabi_dmul>
 800b8e4:	4602      	mov	r2, r0
 800b8e6:	460b      	mov	r3, r1
 800b8e8:	4630      	mov	r0, r6
 800b8ea:	4639      	mov	r1, r7
 800b8ec:	f7f5 f914 	bl	8000b18 <__aeabi_dcmpgt>
 800b8f0:	2800      	cmp	r0, #0
 800b8f2:	f43f af53 	beq.w	800b79c <findDirection+0x84>
 800b8f6:	ee19 0a10 	vmov	r0, s18
 800b8fa:	f7f4 fe25 	bl	8000548 <__aeabi_f2d>
 800b8fe:	a320      	add	r3, pc, #128	; (adr r3, 800b980 <findDirection+0x268>)
 800b900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b904:	f7f4 fe78 	bl	80005f8 <__aeabi_dmul>
 800b908:	4602      	mov	r2, r0
 800b90a:	460b      	mov	r3, r1
 800b90c:	4630      	mov	r0, r6
 800b90e:	4639      	mov	r1, r7
 800b910:	f7f5 f902 	bl	8000b18 <__aeabi_dcmpgt>
 800b914:	ecbd 8b04 	vpop	{d8-d9}
 800b918:	2800      	cmp	r0, #0
 800b91a:	bf18      	it	ne
 800b91c:	2403      	movne	r4, #3
 800b91e:	4620      	mov	r0, r4
 800b920:	bdd0      	pop	{r4, r6, r7, pc}
 800b922:	f7f4 fe11 	bl	8000548 <__aeabi_f2d>
 800b926:	4606      	mov	r6, r0
 800b928:	ee18 0a10 	vmov	r0, s16
 800b92c:	460f      	mov	r7, r1
 800b92e:	f7f4 fe0b 	bl	8000548 <__aeabi_f2d>
 800b932:	a313      	add	r3, pc, #76	; (adr r3, 800b980 <findDirection+0x268>)
 800b934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b938:	f7f4 fe5e 	bl	80005f8 <__aeabi_dmul>
 800b93c:	4602      	mov	r2, r0
 800b93e:	460b      	mov	r3, r1
 800b940:	4630      	mov	r0, r6
 800b942:	4639      	mov	r1, r7
 800b944:	f7f5 f8e8 	bl	8000b18 <__aeabi_dcmpgt>
 800b948:	2800      	cmp	r0, #0
 800b94a:	f43f af27 	beq.w	800b79c <findDirection+0x84>
 800b94e:	ee18 0a90 	vmov	r0, s17
 800b952:	f7f4 fdf9 	bl	8000548 <__aeabi_f2d>
 800b956:	a30a      	add	r3, pc, #40	; (adr r3, 800b980 <findDirection+0x268>)
 800b958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95c:	f7f4 fe4c 	bl	80005f8 <__aeabi_dmul>
 800b960:	4602      	mov	r2, r0
 800b962:	460b      	mov	r3, r1
 800b964:	4630      	mov	r0, r6
 800b966:	4639      	mov	r1, r7
 800b968:	f7f5 f8d6 	bl	8000b18 <__aeabi_dcmpgt>
 800b96c:	ecbd 8b04 	vpop	{d8-d9}
 800b970:	2800      	cmp	r0, #0
 800b972:	bf18      	it	ne
 800b974:	2402      	movne	r4, #2
 800b976:	4620      	mov	r0, r4
 800b978:	bdd0      	pop	{r4, r6, r7, pc}
 800b97a:	bf00      	nop
 800b97c:	f3af 8000 	nop.w
 800b980:	e0000000 	.word	0xe0000000
 800b984:	3ff6b851 	.word	0x3ff6b851

0800b988 <updateOrientation>:
 800b988:	b410      	push	{r4}
 800b98a:	2300      	movs	r3, #0
 800b98c:	6003      	str	r3, [r0, #0]
 800b98e:	6043      	str	r3, [r0, #4]
 800b990:	7203      	strb	r3, [r0, #8]
 800b992:	780c      	ldrb	r4, [r1, #0]
 800b994:	784a      	ldrb	r2, [r1, #1]
 800b996:	f1a4 0342 	sub.w	r3, r4, #66	; 0x42
 800b99a:	2b17      	cmp	r3, #23
 800b99c:	bf98      	it	ls
 800b99e:	3420      	addls	r4, #32
 800b9a0:	f1a2 0342 	sub.w	r3, r2, #66	; 0x42
 800b9a4:	bf98      	it	ls
 800b9a6:	b2e4      	uxtbls	r4, r4
 800b9a8:	2b17      	cmp	r3, #23
 800b9aa:	788b      	ldrb	r3, [r1, #2]
 800b9ac:	bf98      	it	ls
 800b9ae:	3220      	addls	r2, #32
 800b9b0:	f1a3 0142 	sub.w	r1, r3, #66	; 0x42
 800b9b4:	bf98      	it	ls
 800b9b6:	b2d2      	uxtbls	r2, r2
 800b9b8:	2917      	cmp	r1, #23
 800b9ba:	bf98      	it	ls
 800b9bc:	3320      	addls	r3, #32
 800b9be:	f1a4 0464 	sub.w	r4, r4, #100	; 0x64
 800b9c2:	bf98      	it	ls
 800b9c4:	b2db      	uxtbls	r3, r3
 800b9c6:	2c13      	cmp	r4, #19
 800b9c8:	d80d      	bhi.n	800b9e6 <updateOrientation+0x5e>
 800b9ca:	e8df f004 	tbb	[pc, r4]
 800b9ce:	0a36      	.short	0x0a36
 800b9d0:	0c0c0c0c 	.word	0x0c0c0c0c
 800b9d4:	0c0c0c0c 	.word	0x0c0c0c0c
 800b9d8:	0c0c0c39 	.word	0x0c0c0c39
 800b9dc:	3f0c3c0c 	.word	0x3f0c3c0c
 800b9e0:	420c      	.short	0x420c
 800b9e2:	2101      	movs	r1, #1
 800b9e4:	7001      	strb	r1, [r0, #0]
 800b9e6:	3a64      	subs	r2, #100	; 0x64
 800b9e8:	2a13      	cmp	r2, #19
 800b9ea:	d80d      	bhi.n	800ba08 <updateOrientation+0x80>
 800b9ec:	e8df f002 	tbb	[pc, r2]
 800b9f0:	0c0c0a34 	.word	0x0c0c0a34
 800b9f4:	0c0c0c0c 	.word	0x0c0c0c0c
 800b9f8:	0c370c0c 	.word	0x0c370c0c
 800b9fc:	3a0c0c0c 	.word	0x3a0c0c0c
 800ba00:	400c3d0c 	.word	0x400c3d0c
 800ba04:	2201      	movs	r2, #1
 800ba06:	7042      	strb	r2, [r0, #1]
 800ba08:	3b64      	subs	r3, #100	; 0x64
 800ba0a:	2b13      	cmp	r3, #19
 800ba0c:	d80d      	bhi.n	800ba2a <updateOrientation+0xa2>
 800ba0e:	e8df f003 	tbb	[pc, r3]
 800ba12:	320a      	.short	0x320a
 800ba14:	0c0c0c0c 	.word	0x0c0c0c0c
 800ba18:	0c0c0c0c 	.word	0x0c0c0c0c
 800ba1c:	0c0c0c37 	.word	0x0c0c0c37
 800ba20:	410c3c0c 	.word	0x410c3c0c
 800ba24:	0f0c      	.short	0x0f0c
 800ba26:	23ff      	movs	r3, #255	; 0xff
 800ba28:	7203      	strb	r3, [r0, #8]
 800ba2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba2e:	4770      	bx	lr
 800ba30:	23ff      	movs	r3, #255	; 0xff
 800ba32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba36:	7083      	strb	r3, [r0, #2]
 800ba38:	4770      	bx	lr
 800ba3a:	21ff      	movs	r1, #255	; 0xff
 800ba3c:	7181      	strb	r1, [r0, #6]
 800ba3e:	e7d2      	b.n	800b9e6 <updateOrientation+0x5e>
 800ba40:	2101      	movs	r1, #1
 800ba42:	70c1      	strb	r1, [r0, #3]
 800ba44:	e7cf      	b.n	800b9e6 <updateOrientation+0x5e>
 800ba46:	21ff      	movs	r1, #255	; 0xff
 800ba48:	70c1      	strb	r1, [r0, #3]
 800ba4a:	e7cc      	b.n	800b9e6 <updateOrientation+0x5e>
 800ba4c:	2101      	movs	r1, #1
 800ba4e:	7181      	strb	r1, [r0, #6]
 800ba50:	e7c9      	b.n	800b9e6 <updateOrientation+0x5e>
 800ba52:	21ff      	movs	r1, #255	; 0xff
 800ba54:	7001      	strb	r1, [r0, #0]
 800ba56:	e7c6      	b.n	800b9e6 <updateOrientation+0x5e>
 800ba58:	22ff      	movs	r2, #255	; 0xff
 800ba5a:	71c2      	strb	r2, [r0, #7]
 800ba5c:	e7d4      	b.n	800ba08 <updateOrientation+0x80>
 800ba5e:	2201      	movs	r2, #1
 800ba60:	7102      	strb	r2, [r0, #4]
 800ba62:	e7d1      	b.n	800ba08 <updateOrientation+0x80>
 800ba64:	22ff      	movs	r2, #255	; 0xff
 800ba66:	7102      	strb	r2, [r0, #4]
 800ba68:	e7ce      	b.n	800ba08 <updateOrientation+0x80>
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	71c2      	strb	r2, [r0, #7]
 800ba6e:	e7cb      	b.n	800ba08 <updateOrientation+0x80>
 800ba70:	22ff      	movs	r2, #255	; 0xff
 800ba72:	7042      	strb	r2, [r0, #1]
 800ba74:	e7c8      	b.n	800ba08 <updateOrientation+0x80>
 800ba76:	2301      	movs	r3, #1
 800ba78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba7c:	7083      	strb	r3, [r0, #2]
 800ba7e:	4770      	bx	lr
 800ba80:	2301      	movs	r3, #1
 800ba82:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba86:	7143      	strb	r3, [r0, #5]
 800ba88:	4770      	bx	lr
 800ba8a:	23ff      	movs	r3, #255	; 0xff
 800ba8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba90:	7143      	strb	r3, [r0, #5]
 800ba92:	4770      	bx	lr
 800ba94:	2301      	movs	r3, #1
 800ba96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba9a:	7203      	strb	r3, [r0, #8]
 800ba9c:	4770      	bx	lr
 800ba9e:	bf00      	nop

0800baa0 <qmult>:
 800baa0:	ed91 2a03 	vldr	s4, [r1, #12]
 800baa4:	ed90 3a01 	vldr	s6, [r0, #4]
 800baa8:	edd0 5a02 	vldr	s11, [r0, #8]
 800baac:	edd1 4a01 	vldr	s9, [r1, #4]
 800bab0:	ed90 4a00 	vldr	s8, [r0]
 800bab4:	edd1 3a00 	vldr	s7, [r1]
 800bab8:	ed91 5a02 	vldr	s10, [r1, #8]
 800babc:	edd0 2a03 	vldr	s5, [r0, #12]
 800bac0:	ee25 6aa4 	vmul.f32	s12, s11, s9
 800bac4:	ee62 6a03 	vmul.f32	s13, s4, s6
 800bac8:	ee22 7a25 	vmul.f32	s14, s4, s11
 800bacc:	ee64 7ac3 	vnmul.f32	s15, s9, s6
 800bad0:	eea4 6a02 	vfma.f32	s12, s8, s4
 800bad4:	eee4 6a05 	vfma.f32	s13, s8, s10
 800bad8:	eea3 7a23 	vfma.f32	s14, s6, s7
 800badc:	eee4 7a63 	vfms.f32	s15, s8, s7
 800bae0:	eea2 6aa3 	vfma.f32	s12, s5, s7
 800bae4:	eee4 6aa2 	vfma.f32	s13, s9, s5
 800bae8:	eea5 7a22 	vfma.f32	s14, s10, s5
 800baec:	eee2 7a22 	vfma.f32	s15, s4, s5
 800baf0:	eea3 6a45 	vfms.f32	s12, s6, s10
 800baf4:	eee5 6ae3 	vfms.f32	s13, s11, s7
 800baf8:	eea4 7a64 	vfms.f32	s14, s8, s9
 800bafc:	eee5 7a65 	vfms.f32	s15, s10, s11
 800bb00:	ed82 6a00 	vstr	s12, [r2]
 800bb04:	edc2 6a01 	vstr	s13, [r2, #4]
 800bb08:	ed82 7a02 	vstr	s14, [r2, #8]
 800bb0c:	edc2 7a03 	vstr	s15, [r2, #12]
 800bb10:	4770      	bx	lr
 800bb12:	bf00      	nop

0800bb14 <MEMS_setMagIndexToOne>:
 800bb14:	291f      	cmp	r1, #31
 800bb16:	b430      	push	{r4, r5}
 800bb18:	d920      	bls.n	800bb5c <MEMS_setMagIndexToOne+0x48>
 800bb1a:	6885      	ldr	r5, [r0, #8]
 800bb1c:	3920      	subs	r1, #32
 800bb1e:	2401      	movs	r4, #1
 800bb20:	fa04 f101 	lsl.w	r1, r4, r1
 800bb24:	ea21 0105 	bic.w	r1, r1, r5
 800bb28:	4069      	eors	r1, r5
 800bb2a:	2a1f      	cmp	r2, #31
 800bb2c:	6081      	str	r1, [r0, #8]
 800bb2e:	d91f      	bls.n	800bb70 <MEMS_setMagIndexToOne+0x5c>
 800bb30:	6901      	ldr	r1, [r0, #16]
 800bb32:	f1a2 0420 	sub.w	r4, r2, #32
 800bb36:	2201      	movs	r2, #1
 800bb38:	40a2      	lsls	r2, r4
 800bb3a:	ea22 0201 	bic.w	r2, r2, r1
 800bb3e:	404a      	eors	r2, r1
 800bb40:	2b1f      	cmp	r3, #31
 800bb42:	6102      	str	r2, [r0, #16]
 800bb44:	d91e      	bls.n	800bb84 <MEMS_setMagIndexToOne+0x70>
 800bb46:	69c2      	ldr	r2, [r0, #28]
 800bb48:	f1a3 0120 	sub.w	r1, r3, #32
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	408b      	lsls	r3, r1
 800bb50:	ea23 0302 	bic.w	r3, r3, r2
 800bb54:	4053      	eors	r3, r2
 800bb56:	bc30      	pop	{r4, r5}
 800bb58:	61c3      	str	r3, [r0, #28]
 800bb5a:	4770      	bx	lr
 800bb5c:	68c5      	ldr	r5, [r0, #12]
 800bb5e:	2401      	movs	r4, #1
 800bb60:	fa04 f101 	lsl.w	r1, r4, r1
 800bb64:	ea21 0105 	bic.w	r1, r1, r5
 800bb68:	4069      	eors	r1, r5
 800bb6a:	2a1f      	cmp	r2, #31
 800bb6c:	60c1      	str	r1, [r0, #12]
 800bb6e:	d8df      	bhi.n	800bb30 <MEMS_setMagIndexToOne+0x1c>
 800bb70:	6944      	ldr	r4, [r0, #20]
 800bb72:	2101      	movs	r1, #1
 800bb74:	fa01 f202 	lsl.w	r2, r1, r2
 800bb78:	ea22 0204 	bic.w	r2, r2, r4
 800bb7c:	4062      	eors	r2, r4
 800bb7e:	2b1f      	cmp	r3, #31
 800bb80:	6142      	str	r2, [r0, #20]
 800bb82:	d8e0      	bhi.n	800bb46 <MEMS_setMagIndexToOne+0x32>
 800bb84:	6981      	ldr	r1, [r0, #24]
 800bb86:	2201      	movs	r2, #1
 800bb88:	fa02 f303 	lsl.w	r3, r2, r3
 800bb8c:	ea23 0301 	bic.w	r3, r3, r1
 800bb90:	404b      	eors	r3, r1
 800bb92:	bc30      	pop	{r4, r5}
 800bb94:	6183      	str	r3, [r0, #24]
 800bb96:	4770      	bx	lr

0800bb98 <getRotationMatrix>:
 800bb98:	b538      	push	{r3, r4, r5, lr}
 800bb9a:	4605      	mov	r5, r0
 800bb9c:	460c      	mov	r4, r1
 800bb9e:	4610      	mov	r0, r2
 800bba0:	2100      	movs	r1, #0
 800bba2:	2224      	movs	r2, #36	; 0x24
 800bba4:	f00b fea6 	bl	80178f4 <memset>
 800bba8:	edd5 5a00 	vldr	s11, [r5]
 800bbac:	ed9f 3a49 	vldr	s6, [pc, #292]	; 800bcd4 <getRotationMatrix+0x13c>
 800bbb0:	edc0 5a02 	vstr	s11, [r0, #8]
 800bbb4:	ed95 7a01 	vldr	s14, [r5, #4]
 800bbb8:	ed80 7a05 	vstr	s14, [r0, #20]
 800bbbc:	ed95 5a02 	vldr	s10, [r5, #8]
 800bbc0:	ed80 5a08 	vstr	s10, [r0, #32]
 800bbc4:	ed94 4a02 	vldr	s8, [r4, #8]
 800bbc8:	edd4 3a01 	vldr	s7, [r4, #4]
 800bbcc:	edd4 4a00 	vldr	s9, [r4]
 800bbd0:	ee67 7a44 	vnmul.f32	s15, s14, s8
 800bbd4:	ee65 6ae3 	vnmul.f32	s13, s11, s7
 800bbd8:	eee3 7a85 	vfma.f32	s15, s7, s10
 800bbdc:	4603      	mov	r3, r0
 800bbde:	eee4 6a87 	vfma.f32	s13, s9, s14
 800bbe2:	eeb0 7ae7 	vabs.f32	s14, s15
 800bbe6:	eeb4 7ac3 	vcmpe.f32	s14, s6
 800bbea:	ee25 6a64 	vnmul.f32	s12, s10, s9
 800bbee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbf2:	eea4 6a25 	vfma.f32	s12, s8, s11
 800bbf6:	bfdc      	itt	le
 800bbf8:	eec7 5a83 	vdivle.f32	s11, s15, s6
 800bbfc:	eeb0 7a43 	vmovle.f32	s14, s6
 800bc00:	eeb0 5ac6 	vabs.f32	s10, s12
 800bc04:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800bc08:	edc0 6a06 	vstr	s13, [r0, #24]
 800bc0c:	bfd4      	ite	le
 800bc0e:	ee65 6aa5 	vmulle.f32	s13, s11, s11
 800bc12:	eef7 6a00 	vmovgt.f32	s13, #112	; 0x3f800000  1.0
 800bc16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc1a:	ed80 6a03 	vstr	s12, [r0, #12]
 800bc1e:	edc0 7a00 	vstr	s15, [r0]
 800bc22:	d447      	bmi.n	800bcb4 <getRotationMatrix+0x11c>
 800bc24:	eec6 5a07 	vdiv.f32	s11, s12, s14
 800bc28:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800bc2c:	eef0 5a66 	vmov.f32	s11, s13
 800bc30:	edd3 6a06 	vldr	s13, [r3, #24]
 800bc34:	eeb0 5ae6 	vabs.f32	s10, s13
 800bc38:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800bc3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc40:	d543      	bpl.n	800bcca <getRotationMatrix+0x132>
 800bc42:	eec7 4a05 	vdiv.f32	s9, s14, s10
 800bc46:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800bc4a:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800bc4e:	eeb0 7a45 	vmov.f32	s14, s10
 800bc52:	eea5 4aa4 	vfma.f32	s8, s11, s9
 800bc56:	eef0 5a44 	vmov.f32	s11, s8
 800bc5a:	eeb1 5ae5 	vsqrt.f32	s10, s11
 800bc5e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 800bc62:	ee65 5a07 	vmul.f32	s11, s10, s14
 800bc66:	edd3 3a08 	vldr	s7, [r3, #32]
 800bc6a:	edd3 4a02 	vldr	s9, [r3, #8]
 800bc6e:	ed93 4a05 	vldr	s8, [r3, #20]
 800bc72:	ee83 7a25 	vdiv.f32	s14, s6, s11
 800bc76:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc7a:	ee26 6a07 	vmul.f32	s12, s12, s14
 800bc7e:	ee26 7a87 	vmul.f32	s14, s13, s14
 800bc82:	ee66 5a63 	vnmul.f32	s11, s12, s7
 800bc86:	ee24 5ac7 	vnmul.f32	s10, s9, s14
 800bc8a:	ee67 6ac4 	vnmul.f32	s13, s15, s8
 800bc8e:	eea3 5aa7 	vfma.f32	s10, s7, s15
 800bc92:	eee4 5a07 	vfma.f32	s11, s8, s14
 800bc96:	eee6 6a24 	vfma.f32	s13, s12, s9
 800bc9a:	edc3 7a00 	vstr	s15, [r3]
 800bc9e:	ed83 6a03 	vstr	s12, [r3, #12]
 800bca2:	ed83 7a06 	vstr	s14, [r3, #24]
 800bca6:	ed83 5a04 	vstr	s10, [r3, #16]
 800bcaa:	edc3 5a01 	vstr	s11, [r3, #4]
 800bcae:	edc3 6a07 	vstr	s13, [r3, #28]
 800bcb2:	bd38      	pop	{r3, r4, r5, pc}
 800bcb4:	eec7 4a05 	vdiv.f32	s9, s14, s10
 800bcb8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800bcbc:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800bcc0:	eeb0 7a45 	vmov.f32	s14, s10
 800bcc4:	eee6 5aa4 	vfma.f32	s11, s13, s9
 800bcc8:	e7b2      	b.n	800bc30 <getRotationMatrix+0x98>
 800bcca:	ee86 5a87 	vdiv.f32	s10, s13, s14
 800bcce:	eee5 5a05 	vfma.f32	s11, s10, s10
 800bcd2:	e7c2      	b.n	800bc5a <getRotationMatrix+0xc2>
 800bcd4:	00000000 	.word	0x00000000

0800bcd8 <b_dcm2q>:
 800bcd8:	ed90 5a08 	vldr	s10, [r0, #32]
 800bcdc:	edd0 7a00 	vldr	s15, [r0]
 800bce0:	edd0 6a04 	vldr	s13, [r0, #16]
 800bce4:	ee37 7a85 	vadd.f32	s14, s15, s10
 800bce8:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 800bcec:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800bcf0:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800bcf4:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800bcf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcfc:	bfc5      	ittet	gt
 800bcfe:	eeb7 6a00 	vmovgt.f32	s12, #112	; 0x3f800000  1.0
 800bd02:	ee37 7a06 	vaddgt.f32	s14, s14, s12
 800bd06:	eddf 5a43 	vldrle	s11, [pc, #268]	; 800be14 <b_dcm2q+0x13c>
 800bd0a:	eef1 5ac7 	vsqrtgt.f32	s11, s14
 800bd0e:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800bd12:	ee35 6a47 	vsub.f32	s12, s10, s14
 800bd16:	ee35 7a07 	vadd.f32	s14, s10, s14
 800bd1a:	eeb4 6ae4 	vcmpe.f32	s12, s9
 800bd1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd22:	bfc5      	ittet	gt
 800bd24:	eef7 4a00 	vmovgt.f32	s9, #112	; 0x3f800000  1.0
 800bd28:	ee76 4a24 	vaddgt.f32	s9, s12, s9
 800bd2c:	ed9f 6a39 	vldrle	s12, [pc, #228]	; 800be14 <b_dcm2q+0x13c>
 800bd30:	eeb1 6ae4 	vsqrtgt.f32	s12, s9
 800bd34:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800bd38:	eeb4 7ae4 	vcmpe.f32	s14, s9
 800bd3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd40:	dd5b      	ble.n	800bdfa <b_dcm2q+0x122>
 800bd42:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800bd46:	ee37 7a24 	vadd.f32	s14, s14, s9
 800bd4a:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800bd4e:	eef1 4ac7 	vsqrt.f32	s9, s14
 800bd52:	ee64 4a84 	vmul.f32	s9, s9, s8
 800bd56:	ee76 6a85 	vadd.f32	s13, s13, s10
 800bd5a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800bd5e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bd62:	edd0 6a07 	vldr	s13, [r0, #28]
 800bd66:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bd6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd6e:	bf85      	ittet	hi
 800bd70:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 800bd74:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 800bd78:	ed9f 7a26 	vldrls	s14, [pc, #152]	; 800be14 <b_dcm2q+0x13c>
 800bd7c:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 800bd80:	edd0 7a05 	vldr	s15, [r0, #20]
 800bd84:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bd88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bd8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd90:	d43c      	bmi.n	800be0c <b_dcm2q+0x134>
 800bd92:	bfd8      	it	le
 800bd94:	ee27 7a27 	vmulle.f32	s14, s14, s15
 800bd98:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bd9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bda0:	ed81 7a00 	vstr	s14, [r1]
 800bda4:	edd0 7a06 	vldr	s15, [r0, #24]
 800bda8:	ed90 7a02 	vldr	s14, [r0, #8]
 800bdac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bdb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bdb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdb8:	d425      	bmi.n	800be06 <b_dcm2q+0x12e>
 800bdba:	bfd8      	it	le
 800bdbc:	ee65 5aa7 	vmulle.f32	s11, s11, s15
 800bdc0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bdc4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800bdc8:	edc1 5a01 	vstr	s11, [r1, #4]
 800bdcc:	edd0 7a01 	vldr	s15, [r0, #4]
 800bdd0:	ed90 7a03 	vldr	s14, [r0, #12]
 800bdd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bdd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bde0:	d40e      	bmi.n	800be00 <b_dcm2q+0x128>
 800bde2:	bfd8      	it	le
 800bde4:	ee26 6a27 	vmulle.f32	s12, s12, s15
 800bde8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bdec:	ee26 6a27 	vmul.f32	s12, s12, s15
 800bdf0:	edc1 4a03 	vstr	s9, [r1, #12]
 800bdf4:	ed81 6a02 	vstr	s12, [r1, #8]
 800bdf8:	4770      	bx	lr
 800bdfa:	eddf 4a06 	vldr	s9, [pc, #24]	; 800be14 <b_dcm2q+0x13c>
 800bdfe:	e7aa      	b.n	800bd56 <b_dcm2q+0x7e>
 800be00:	eeb1 6a46 	vneg.f32	s12, s12
 800be04:	e7f0      	b.n	800bde8 <b_dcm2q+0x110>
 800be06:	eef1 5a65 	vneg.f32	s11, s11
 800be0a:	e7d9      	b.n	800bdc0 <b_dcm2q+0xe8>
 800be0c:	eeb1 7a47 	vneg.f32	s14, s14
 800be10:	e7c2      	b.n	800bd98 <b_dcm2q+0xc0>
 800be12:	bf00      	nop
 800be14:	00000000 	.word	0x00000000

0800be18 <q2hpr>:
 800be18:	b510      	push	{r4, lr}
 800be1a:	ed90 7a00 	vldr	s14, [r0]
 800be1e:	edd0 6a01 	vldr	s13, [r0, #4]
 800be22:	edd0 7a02 	vldr	s15, [r0, #8]
 800be26:	ed90 5a03 	vldr	s10, [r0, #12]
 800be2a:	ed2d 8b0a 	vpush	{d8-d12}
 800be2e:	ee27 0a27 	vmul.f32	s0, s14, s15
 800be32:	ee27 8a26 	vmul.f32	s16, s14, s13
 800be36:	ee66 5aa7 	vmul.f32	s11, s13, s15
 800be3a:	ee67 0a07 	vmul.f32	s1, s14, s14
 800be3e:	ee26 aaa6 	vmul.f32	s20, s13, s13
 800be42:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800be46:	ee27 7a05 	vmul.f32	s14, s14, s10
 800be4a:	ee66 6a85 	vmul.f32	s13, s13, s10
 800be4e:	ee67 7a85 	vmul.f32	s15, s15, s10
 800be52:	ee78 aa08 	vadd.f32	s21, s16, s16
 800be56:	ee70 9aa0 	vadd.f32	s19, s1, s1
 800be5a:	ee3a aa0a 	vadd.f32	s20, s20, s20
 800be5e:	ee30 ca00 	vadd.f32	s24, s0, s0
 800be62:	ee36 ba06 	vadd.f32	s22, s12, s12
 800be66:	ee77 8a07 	vadd.f32	s17, s14, s14
 800be6a:	ee75 baa5 	vadd.f32	s23, s11, s11
 800be6e:	ee36 9aa6 	vadd.f32	s18, s13, s13
 800be72:	ee37 8aa7 	vadd.f32	s16, s15, s15
 800be76:	460c      	mov	r4, r1
 800be78:	bb8a      	cbnz	r2, 800bede <q2hpr+0xc6>
 800be7a:	ee79 0a8b 	vadd.f32	s1, s19, s22
 800be7e:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 800be82:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800be86:	ee3a 0ac8 	vsub.f32	s0, s21, s16
 800be8a:	f00a f833 	bl	8015ef4 <atan2f>
 800be8e:	eeb0 8a40 	vmov.f32	s16, s0
 800be92:	ed84 8a00 	vstr	s16, [r4]
 800be96:	ee38 0aab 	vadd.f32	s0, s17, s23
 800be9a:	f009 fff9 	bl	8015e90 <asinf>
 800be9e:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800bea2:	eef0 8a40 	vmov.f32	s17, s0
 800bea6:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800beaa:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800beae:	f00a f821 	bl	8015ef4 <atan2f>
 800beb2:	eef1 8a68 	vneg.f32	s17, s17
 800beb6:	eeb0 9a40 	vmov.f32	s18, s0
 800beba:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bec2:	ed84 9a02 	vstr	s18, [r4, #8]
 800bec6:	edc4 8a01 	vstr	s17, [r4, #4]
 800beca:	d505      	bpl.n	800bed8 <q2hpr+0xc0>
 800becc:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800bf24 <q2hpr+0x10c>
 800bed0:	ee38 8a00 	vadd.f32	s16, s16, s0
 800bed4:	ed84 8a00 	vstr	s16, [r4]
 800bed8:	ecbd 8b0a 	vpop	{d8-d12}
 800bedc:	bd10      	pop	{r4, pc}
 800bede:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800bee2:	f009 ffd5 	bl	8015e90 <asinf>
 800bee6:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800beea:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 800beee:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800bef2:	eeb0 9a40 	vmov.f32	s18, s0
 800bef6:	ee38 0aab 	vadd.f32	s0, s17, s23
 800befa:	f009 fffb 	bl	8015ef4 <atan2f>
 800befe:	ee3a 8a88 	vadd.f32	s16, s21, s16
 800bf02:	ee7a 0a0b 	vadd.f32	s1, s20, s22
 800bf06:	eef0 8a40 	vmov.f32	s17, s0
 800bf0a:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800bf0e:	eeb1 0a48 	vneg.f32	s0, s16
 800bf12:	f009 ffef 	bl	8015ef4 <atan2f>
 800bf16:	eef1 8a68 	vneg.f32	s17, s17
 800bf1a:	eeb0 8a40 	vmov.f32	s16, s0
 800bf1e:	ed84 0a00 	vstr	s0, [r4]
 800bf22:	e7ca      	b.n	800beba <q2hpr+0xa2>
 800bf24:	40c90fdb 	.word	0x40c90fdb

0800bf28 <llEvaluate.constprop.0>:
 800bf28:	edd2 0a00 	vldr	s1, [r2]
 800bf2c:	ed90 1a00 	vldr	s2, [r0]
 800bf30:	edd0 1a04 	vldr	s3, [r0, #16]
 800bf34:	edd2 5a01 	vldr	s11, [r2, #4]
 800bf38:	ed90 6a08 	vldr	s12, [r0, #32]
 800bf3c:	ed90 2a05 	vldr	s4, [r0, #20]
 800bf40:	ed92 7a02 	vldr	s14, [r2, #8]
 800bf44:	ed90 3a09 	vldr	s6, [r0, #36]	; 0x24
 800bf48:	ed90 4a0a 	vldr	s8, [r0, #40]	; 0x28
 800bf4c:	edd0 2a0c 	vldr	s5, [r0, #48]	; 0x30
 800bf50:	edd2 7a03 	vldr	s15, [r2, #12]
 800bf54:	edd0 3a0d 	vldr	s7, [r0, #52]	; 0x34
 800bf58:	edd0 4a0e 	vldr	s9, [r0, #56]	; 0x38
 800bf5c:	ed90 5a0f 	vldr	s10, [r0, #60]	; 0x3c
 800bf60:	eec0 6a81 	vdiv.f32	s13, s1, s2
 800bf64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf68:	b084      	sub	sp, #16
 800bf6a:	f10d 0810 	add.w	r8, sp, #16
 800bf6e:	2704      	movs	r7, #4
 800bf70:	f101 0510 	add.w	r5, r1, #16
 800bf74:	2f04      	cmp	r7, #4
 800bf76:	4686      	mov	lr, r0
 800bf78:	f04f 0c03 	mov.w	ip, #3
 800bf7c:	b27b      	sxtb	r3, r7
 800bf7e:	eee1 5ae6 	vfms.f32	s11, s3, s13
 800bf82:	eea6 7ac6 	vfms.f32	s14, s13, s12
 800bf86:	ee85 6a82 	vdiv.f32	s12, s11, s4
 800bf8a:	eee6 7ae2 	vfms.f32	s15, s13, s5
 800bf8e:	eea6 7a43 	vfms.f32	s14, s12, s6
 800bf92:	edcd 6a00 	vstr	s13, [sp]
 800bf96:	eec7 6a04 	vdiv.f32	s13, s14, s8
 800bf9a:	eee6 7a63 	vfms.f32	s15, s12, s7
 800bf9e:	ed8d 6a01 	vstr	s12, [sp, #4]
 800bfa2:	eee6 7ae4 	vfms.f32	s15, s13, s9
 800bfa6:	edcd 6a02 	vstr	s13, [sp, #8]
 800bfaa:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800bfae:	ed8d 7a03 	vstr	s14, [sp, #12]
 800bfb2:	ed78 7a01 	vldmdb	r8!, {s15}
 800bfb6:	ed65 7a01 	vstmdb	r5!, {s15}
 800bfba:	d029      	beq.n	800c010 <llEvaluate.constprop.0+0xe8>
 800bfbc:	ea4f 068c 	mov.w	r6, ip, lsl #2
 800bfc0:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 800bfc4:	4432      	add	r2, r6
 800bfc6:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 800bfca:	edd2 6a00 	vldr	s13, [r2]
 800bfce:	ed94 7a00 	vldr	s14, [r4]
 800bfd2:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	b2da      	uxtb	r2, r3
 800bfda:	2a04      	cmp	r2, #4
 800bfdc:	b25b      	sxtb	r3, r3
 800bfde:	edc5 7a00 	vstr	s15, [r5]
 800bfe2:	d1ed      	bne.n	800bfc0 <llEvaluate.constprop.0+0x98>
 800bfe4:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 800bfe8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800bfec:	f01c 0fff 	tst.w	ip, #255	; 0xff
 800bff0:	ed85 7a00 	vstr	s14, [r5]
 800bff4:	d013      	beq.n	800c01e <llEvaluate.constprop.0+0xf6>
 800bff6:	3f01      	subs	r7, #1
 800bff8:	b2ff      	uxtb	r7, r7
 800bffa:	ed78 7a01 	vldmdb	r8!, {s15}
 800bffe:	2f04      	cmp	r7, #4
 800c000:	f1ae 0e14 	sub.w	lr, lr, #20
 800c004:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c008:	b27b      	sxtb	r3, r7
 800c00a:	ed65 7a01 	vstmdb	r5!, {s15}
 800c00e:	d1d5      	bne.n	800bfbc <llEvaluate.constprop.0+0x94>
 800c010:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 800c014:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c018:	ed85 7a00 	vstr	s14, [r5]
 800c01c:	e7eb      	b.n	800bff6 <llEvaluate.constprop.0+0xce>
 800c01e:	b004      	add	sp, #16
 800c020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c024 <MEMS_updateMagBufferIndex>:
 800c024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c028:	ed2d 8b02 	vpush	{d8}
 800c02c:	7804      	ldrb	r4, [r0, #0]
 800c02e:	7842      	ldrb	r2, [r0, #1]
 800c030:	4606      	mov	r6, r0
 800c032:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800c036:	2300      	movs	r3, #0
 800c038:	4294      	cmp	r4, r2
 800c03a:	e9c6 3302 	strd	r3, r3, [r6, #8]
 800c03e:	e9c6 3304 	strd	r3, r3, [r6, #16]
 800c042:	e9c6 3306 	strd	r3, r3, [r6, #24]
 800c046:	b083      	sub	sp, #12
 800c048:	460d      	mov	r5, r1
 800c04a:	f100 0001 	add.w	r0, r0, #1
 800c04e:	f000 8083 	beq.w	800c158 <MEMS_updateMagBufferIndex+0x134>
 800c052:	1b00      	subs	r0, r0, r4
 800c054:	fb90 f8f2 	sdiv	r8, r0, r2
 800c058:	fb02 0018 	mls	r0, r2, r8, r0
 800c05c:	2800      	cmp	r0, #0
 800c05e:	bfb6      	itet	lt
 800c060:	eb02 0800 	addlt.w	r8, r2, r0
 800c064:	fa0f f880 	sxthge.w	r8, r0
 800c068:	fa0f f888 	sxthlt.w	r8, r8
 800c06c:	b934      	cbnz	r4, 800c07c <MEMS_updateMagBufferIndex+0x58>
 800c06e:	23ff      	movs	r3, #255	; 0xff
 800c070:	70b3      	strb	r3, [r6, #2]
 800c072:	b003      	add	sp, #12
 800c074:	ecbd 8b02 	vpop	{d8}
 800c078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c07c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c080:	2700      	movs	r7, #0
 800c082:	ee87 8a80 	vdiv.f32	s16, s15, s0
 800c086:	463b      	mov	r3, r7
 800c088:	e000      	b.n	800c08c <MEMS_updateMagBufferIndex+0x68>
 800c08a:	7872      	ldrb	r2, [r6, #1]
 800c08c:	4443      	add	r3, r8
 800c08e:	fb93 f4f2 	sdiv	r4, r3, r2
 800c092:	fb02 3314 	mls	r3, r2, r4, r3
 800c096:	b2dc      	uxtb	r4, r3
 800c098:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 800c09c:	3701      	adds	r7, #1
 800c09e:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 800c0a2:	fb92 f3f5 	sdiv	r3, r2, r5
 800c0a6:	fb05 2313 	mls	r3, r5, r3, r2
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	bfb8      	it	lt
 800c0ae:	195b      	addlt	r3, r3, r5
 800c0b0:	b21b      	sxth	r3, r3
 800c0b2:	ee00 3a10 	vmov	s0, r3
 800c0b6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800c0ba:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c0be:	f009 fdef 	bl	8015ca0 <roundf>
 800c0c2:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
 800c0c6:	fb92 f3f5 	sdiv	r3, r2, r5
 800c0ca:	fb05 2313 	mls	r3, r5, r3, r2
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	bfb8      	it	lt
 800c0d2:	195b      	addlt	r3, r3, r5
 800c0d4:	b21b      	sxth	r3, r3
 800c0d6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800c0da:	ee00 3a10 	vmov	s0, r3
 800c0de:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800c0e2:	edcd 7a01 	vstr	s15, [sp, #4]
 800c0e6:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c0ea:	f009 fdd9 	bl	8015ca0 <roundf>
 800c0ee:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
 800c0f2:	fb92 f3f5 	sdiv	r3, r2, r5
 800c0f6:	fb05 2313 	mls	r3, r5, r3, r2
 800c0fa:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800c0fe:	18ea      	adds	r2, r5, r3
 800c100:	b219      	sxth	r1, r3
 800c102:	b212      	sxth	r2, r2
 800c104:	f89d 9004 	ldrb.w	r9, [sp, #4]
 800c108:	edcd 7a01 	vstr	s15, [sp, #4]
 800c10c:	ee00 1a10 	vmov	s0, r1
 800c110:	ee07 2a90 	vmov	s15, r2
 800c114:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800c118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c122:	bfb8      	it	lt
 800c124:	ee27 0a88 	vmullt.f32	s0, s15, s16
 800c128:	f009 fdba 	bl	8015ca0 <roundf>
 800c12c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800c130:	f89d 4004 	ldrb.w	r4, [sp, #4]
 800c134:	edcd 7a01 	vstr	s15, [sp, #4]
 800c138:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c13c:	4622      	mov	r2, r4
 800c13e:	4649      	mov	r1, r9
 800c140:	4630      	mov	r0, r6
 800c142:	f7ff fce7 	bl	800bb14 <MEMS_setMagIndexToOne>
 800c146:	7832      	ldrb	r2, [r6, #0]
 800c148:	b2fb      	uxtb	r3, r7
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d89d      	bhi.n	800c08a <MEMS_updateMagBufferIndex+0x66>
 800c14e:	b003      	add	sp, #12
 800c150:	ecbd 8b02 	vpop	{d8}
 800c154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c158:	fb90 f8f4 	sdiv	r8, r0, r4
 800c15c:	fb04 0018 	mls	r0, r4, r8, r0
 800c160:	fa0f f880 	sxth.w	r8, r0
 800c164:	e782      	b.n	800c06c <MEMS_updateMagBufferIndex+0x48>
 800c166:	bf00      	nop

0800c168 <getMagStats.constprop.0>:
 800c168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c16c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c16e:	2400      	movs	r4, #0
 800c170:	4607      	mov	r7, r0
 800c172:	6034      	str	r4, [r6, #0]
 800c174:	601c      	str	r4, [r3, #0]
 800c176:	7800      	ldrb	r0, [r0, #0]
 800c178:	787d      	ldrb	r5, [r7, #1]
 800c17a:	f997 4002 	ldrsb.w	r4, [r7, #2]
 800c17e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c182:	42a8      	cmp	r0, r5
 800c184:	eec7 5a80 	vdiv.f32	s11, s15, s0
 800c188:	f000 80c0 	beq.w	800c30c <getMagStats.constprop.0+0x1a4>
 800c18c:	3401      	adds	r4, #1
 800c18e:	eba4 0c00 	sub.w	ip, r4, r0
 800c192:	fb9c f4f5 	sdiv	r4, ip, r5
 800c196:	fb05 c414 	mls	r4, r5, r4, ip
 800c19a:	2c00      	cmp	r4, #0
 800c19c:	bfb8      	it	lt
 800c19e:	1964      	addlt	r4, r4, r5
 800c1a0:	b224      	sxth	r4, r4
 800c1a2:	ee04 0a90 	vmov	s9, r0
 800c1a6:	ed9f 5a60 	vldr	s10, [pc, #384]	; 800c328 <getMagStats.constprop.0+0x1c0>
 800c1aa:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800c1ae:	ee25 5a85 	vmul.f32	s10, s11, s10
 800c1b2:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800c1b6:	2800      	cmp	r0, #0
 800c1b8:	f000 80b2 	beq.w	800c320 <getMagStats.constprop.0+0x1b8>
 800c1bc:	3801      	subs	r0, #1
 800c1be:	fa54 fc80 	uxtab	ip, r4, r0
 800c1c2:	f8b1 9000 	ldrh.w	r9, [r1]
 800c1c6:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 800c1ca:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 800c1ce:	ed9f 3a57 	vldr	s6, [pc, #348]	; 800c32c <getMagStats.constprop.0+0x1c4>
 800c1d2:	2000      	movs	r0, #0
 800c1d4:	e002      	b.n	800c1dc <getMagStats.constprop.0+0x74>
 800c1d6:	ed93 3a00 	vldr	s6, [r3]
 800c1da:	3401      	adds	r4, #1
 800c1dc:	fb94 f1f5 	sdiv	r1, r4, r5
 800c1e0:	fb05 4111 	mls	r1, r5, r1, r4
 800c1e4:	b2c9      	uxtb	r1, r1
 800c1e6:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800c1ea:	edd2 3a00 	vldr	s7, [r2]
 800c1ee:	f8b1 a022 	ldrh.w	sl, [r1, #34]	; 0x22
 800c1f2:	f8b1 b024 	ldrh.w	fp, [r1, #36]	; 0x24
 800c1f6:	8cc9      	ldrh	r1, [r1, #38]	; 0x26
 800c1f8:	ed92 4a04 	vldr	s8, [r2, #16]
 800c1fc:	ed92 6a08 	vldr	s12, [r2, #32]
 800c200:	ebaa 0a09 	sub.w	sl, sl, r9
 800c204:	ebab 0b08 	sub.w	fp, fp, r8
 800c208:	fa0f fa8a 	sxth.w	sl, sl
 800c20c:	ee07 aa10 	vmov	s14, sl
 800c210:	fa0f fa8b 	sxth.w	sl, fp
 800c214:	ee06 aa90 	vmov	s13, sl
 800c218:	eba1 010e 	sub.w	r1, r1, lr
 800c21c:	b209      	sxth	r1, r1
 800c21e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c222:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c226:	ee07 1a90 	vmov	s15, r1
 800c22a:	ee27 7a23 	vmul.f32	s14, s14, s7
 800c22e:	ee66 6a84 	vmul.f32	s13, s13, s8
 800c232:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c236:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800c23a:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800c23e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c242:	ee16 1a90 	vmov	r1, s13
 800c246:	ee17 aa10 	vmov	sl, s14
 800c24a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c24e:	fb11 f101 	smulbb	r1, r1, r1
 800c252:	fa0f fa8a 	sxth.w	sl, sl
 800c256:	fb0a 1a0a 	mla	sl, sl, sl, r1
 800c25a:	ee17 1a90 	vmov	r1, s15
 800c25e:	b209      	sxth	r1, r1
 800c260:	fb01 a101 	mla	r1, r1, r1, sl
 800c264:	ee07 1a90 	vmov	s15, r1
 800c268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c26c:	f100 0a01 	add.w	sl, r0, #1
 800c270:	eef1 6ae7 	vsqrt.f32	s13, s15
 800c274:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800c278:	ee17 1a90 	vmov	r1, s15
 800c27c:	b209      	sxth	r1, r1
 800c27e:	ee07 1a10 	vmov	s14, r1
 800c282:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c286:	ee77 7a45 	vsub.f32	s15, s14, s10
 800c28a:	ee37 7a03 	vadd.f32	s14, s14, s6
 800c28e:	eef0 7ae7 	vabs.f32	s15, s15
 800c292:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c296:	ed83 7a00 	vstr	s14, [r3]
 800c29a:	ee17 1a90 	vmov	r1, s15
 800c29e:	b209      	sxth	r1, r1
 800c2a0:	fb01 fb01 	mul.w	fp, r1, r1
 800c2a4:	ee07 ba90 	vmov	s15, fp
 800c2a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c2ac:	ee07 1a90 	vmov	s15, r1
 800c2b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c2b4:	eef4 5ae7 	vcmpe.f32	s11, s15
 800c2b8:	edd6 7a00 	vldr	s15, [r6]
 800c2bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2c4:	bf48      	it	mi
 800c2c6:	fa5f f08a 	uxtbmi.w	r0, sl
 800c2ca:	45a4      	cmp	ip, r4
 800c2cc:	edc6 7a00 	vstr	s15, [r6]
 800c2d0:	d181      	bne.n	800c1d6 <getMagStats.constprop.0+0x6e>
 800c2d2:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 800c2d6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800c330 <getMagStats.constprop.0+0x1c8>
 800c2da:	eec7 6aa4 	vdiv.f32	s13, s15, s9
 800c2de:	eef1 7ae6 	vsqrt.f32	s15, s13
 800c2e2:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c2e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c2ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2ee:	bfb8      	it	lt
 800c2f0:	eef0 7a47 	vmovlt.f32	s15, s14
 800c2f4:	edc6 7a00 	vstr	s15, [r6]
 800c2f8:	edd3 7a00 	vldr	s15, [r3]
 800c2fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c300:	eec0 7a24 	vdiv.f32	s15, s0, s9
 800c304:	edc3 7a00 	vstr	s15, [r3]
 800c308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c30c:	1c65      	adds	r5, r4, #1
 800c30e:	fb95 f4f0 	sdiv	r4, r5, r0
 800c312:	fb00 5414 	mls	r4, r0, r4, r5
 800c316:	ee04 0a90 	vmov	s9, r0
 800c31a:	b224      	sxth	r4, r4
 800c31c:	4605      	mov	r5, r0
 800c31e:	e742      	b.n	800c1a6 <getMagStats.constprop.0+0x3e>
 800c320:	edd6 7a00 	vldr	s15, [r6]
 800c324:	e7d5      	b.n	800c2d2 <getMagStats.constprop.0+0x16a>
 800c326:	bf00      	nop
 800c328:	423c0000 	.word	0x423c0000
 800c32c:	00000000 	.word	0x00000000
 800c330:	3f59999a 	.word	0x3f59999a

0800c334 <MFX_emptyAttitude>:
 800c334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c338:	ed2d 8b10 	vpush	{d8-d15}
 800c33c:	f6ad 6d34 	subw	sp, sp, #3636	; 0xe34
 800c340:	f60d 0418 	addw	r4, sp, #2072	; 0x818
 800c344:	f04f 0a00 	mov.w	sl, #0
 800c348:	4fef      	ldr	r7, [pc, #956]	; (800c708 <MFX_emptyAttitude+0x3d4>)
 800c34a:	f8c4 a008 	str.w	sl, [r4, #8]
 800c34e:	e9c4 aa00 	strd	sl, sl, [r4]
 800c352:	f837 3b04 	ldrh.w	r3, [r7], #4
 800c356:	f8ad 36a8 	strh.w	r3, [sp, #1704]	; 0x6a8
 800c35a:	f88d a6aa 	strb.w	sl, [sp, #1706]	; 0x6aa
 800c35e:	4680      	mov	r8, r0
 800c360:	f8dd 36a8 	ldr.w	r3, [sp, #1704]	; 0x6a8
 800c364:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
 800c368:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c36c:	0c1b      	lsrs	r3, r3, #16
 800c36e:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
 800c372:	ab27      	add	r3, sp, #156	; 0x9c
 800c374:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c378:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 800c37c:	ab2d      	add	r3, sp, #180	; 0xb4
 800c37e:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 800c382:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c386:	ab30      	add	r3, sp, #192	; 0xc0
 800c388:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c38c:	ab33      	add	r3, sp, #204	; 0xcc
 800c38e:	f50d 65d5 	add.w	r5, sp, #1704	; 0x6a8
 800c392:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c396:	f04f 0c00 	mov.w	ip, #0
 800c39a:	ab36      	add	r3, sp, #216	; 0xd8
 800c39c:	f04f 0b00 	mov.w	fp, #0
 800c3a0:	e9cd bc22 	strd	fp, ip, [sp, #136]	; 0x88
 800c3a4:	e9cd bc24 	strd	fp, ip, [sp, #144]	; 0x90
 800c3a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c3ac:	4628      	mov	r0, r5
 800c3ae:	2224      	movs	r2, #36	; 0x24
 800c3b0:	f00b faa0 	bl	80178f4 <memset>
 800c3b4:	4651      	mov	r1, sl
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800c3bc:	ed9f bad3 	vldr	s22, [pc, #844]	; 800c70c <MFX_emptyAttitude+0x3d8>
 800c3c0:	eddf ead3 	vldr	s29, [pc, #844]	; 800c710 <MFX_emptyAttitude+0x3dc>
 800c3c4:	f00b fa96 	bl	80178f4 <memset>
 800c3c8:	edd5 4a00 	vldr	s9, [r5]
 800c3cc:	ed95 5a01 	vldr	s10, [r5, #4]
 800c3d0:	edd5 5a02 	vldr	s11, [r5, #8]
 800c3d4:	edcd 4a3c 	vstr	s9, [sp, #240]	; 0xf0
 800c3d8:	edcd 4a0b 	vstr	s9, [sp, #44]	; 0x2c
 800c3dc:	ed8d 5a3d 	vstr	s10, [sp, #244]	; 0xf4
 800c3e0:	ed8d 5a0a 	vstr	s10, [sp, #40]	; 0x28
 800c3e4:	edcd 5a3e 	vstr	s11, [sp, #248]	; 0xf8
 800c3e8:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 800c3ec:	edcd ea45 	vstr	s29, [sp, #276]	; 0x114
 800c3f0:	edcd ea4f 	vstr	s29, [sp, #316]	; 0x13c
 800c3f4:	edcd ea59 	vstr	s29, [sp, #356]	; 0x164
 800c3f8:	ed8d ba46 	vstr	s22, [sp, #280]	; 0x118
 800c3fc:	ed8d ba47 	vstr	s22, [sp, #284]	; 0x11c
 800c400:	ed8d ba48 	vstr	s22, [sp, #288]	; 0x120
 800c404:	ed8d ba49 	vstr	s22, [sp, #292]	; 0x124
 800c408:	ed8d ba4a 	vstr	s22, [sp, #296]	; 0x128
 800c40c:	ed8d ba4b 	vstr	s22, [sp, #300]	; 0x12c
 800c410:	ed8d ba4c 	vstr	s22, [sp, #304]	; 0x130
 800c414:	ed8d ba4d 	vstr	s22, [sp, #308]	; 0x134
 800c418:	ed8d ba4e 	vstr	s22, [sp, #312]	; 0x138
 800c41c:	ed8d ba50 	vstr	s22, [sp, #320]	; 0x140
 800c420:	ed8d ba51 	vstr	s22, [sp, #324]	; 0x144
 800c424:	ed8d ba52 	vstr	s22, [sp, #328]	; 0x148
 800c428:	ed8d ba53 	vstr	s22, [sp, #332]	; 0x14c
 800c42c:	ed8d ba54 	vstr	s22, [sp, #336]	; 0x150
 800c430:	ed8d ba55 	vstr	s22, [sp, #340]	; 0x154
 800c434:	ed8d ba56 	vstr	s22, [sp, #344]	; 0x158
 800c438:	ed8d ba57 	vstr	s22, [sp, #348]	; 0x15c
 800c43c:	ed8d ba58 	vstr	s22, [sp, #352]	; 0x160
 800c440:	ed8d ba5a 	vstr	s22, [sp, #360]	; 0x168
 800c444:	ed8d ba5b 	vstr	s22, [sp, #364]	; 0x16c
 800c448:	ed8d ba5c 	vstr	s22, [sp, #368]	; 0x170
 800c44c:	ed95 6a03 	vldr	s12, [r5, #12]
 800c450:	edd5 6a04 	vldr	s13, [r5, #16]
 800c454:	ed95 7a05 	vldr	s14, [r5, #20]
 800c458:	ed8d 6a3f 	vstr	s12, [sp, #252]	; 0xfc
 800c45c:	ed8d 6a08 	vstr	s12, [sp, #32]
 800c460:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800c464:	edcd 6a07 	vstr	s13, [sp, #28]
 800c468:	ed8d 7a41 	vstr	s14, [sp, #260]	; 0x104
 800c46c:	ed8d 7a06 	vstr	s14, [sp, #24]
 800c470:	ed8d ba5d 	vstr	s22, [sp, #372]	; 0x174
 800c474:	ed8d ba5e 	vstr	s22, [sp, #376]	; 0x178
 800c478:	ed8d ba5f 	vstr	s22, [sp, #380]	; 0x17c
 800c47c:	edcd ea63 	vstr	s29, [sp, #396]	; 0x18c
 800c480:	edcd ea6d 	vstr	s29, [sp, #436]	; 0x1b4
 800c484:	edcd ea77 	vstr	s29, [sp, #476]	; 0x1dc
 800c488:	ed8d ba60 	vstr	s22, [sp, #384]	; 0x180
 800c48c:	ed8d ba61 	vstr	s22, [sp, #388]	; 0x184
 800c490:	ed8d ba62 	vstr	s22, [sp, #392]	; 0x188
 800c494:	ed8d ba64 	vstr	s22, [sp, #400]	; 0x190
 800c498:	ed8d ba65 	vstr	s22, [sp, #404]	; 0x194
 800c49c:	ed8d ba66 	vstr	s22, [sp, #408]	; 0x198
 800c4a0:	ed8d ba67 	vstr	s22, [sp, #412]	; 0x19c
 800c4a4:	ed8d ba68 	vstr	s22, [sp, #416]	; 0x1a0
 800c4a8:	ed8d ba69 	vstr	s22, [sp, #420]	; 0x1a4
 800c4ac:	ed8d ba6a 	vstr	s22, [sp, #424]	; 0x1a8
 800c4b0:	ed8d ba6b 	vstr	s22, [sp, #428]	; 0x1ac
 800c4b4:	ed8d ba6c 	vstr	s22, [sp, #432]	; 0x1b0
 800c4b8:	ed8d ba6e 	vstr	s22, [sp, #440]	; 0x1b8
 800c4bc:	ed8d ba6f 	vstr	s22, [sp, #444]	; 0x1bc
 800c4c0:	ed8d ba70 	vstr	s22, [sp, #448]	; 0x1c0
 800c4c4:	ed8d ba71 	vstr	s22, [sp, #452]	; 0x1c4
 800c4c8:	ed8d ba72 	vstr	s22, [sp, #456]	; 0x1c8
 800c4cc:	ed8d ba73 	vstr	s22, [sp, #460]	; 0x1cc
 800c4d0:	edd5 7a06 	vldr	s15, [r5, #24]
 800c4d4:	edd5 fa07 	vldr	s31, [r5, #28]
 800c4d8:	ed95 fa08 	vldr	s30, [r5, #32]
 800c4dc:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 800c4e0:	edcd 7a05 	vstr	s15, [sp, #20]
 800c4e4:	ed8d ba74 	vstr	s22, [sp, #464]	; 0x1d0
 800c4e8:	ed8d ba75 	vstr	s22, [sp, #468]	; 0x1d4
 800c4ec:	ed8d ba76 	vstr	s22, [sp, #472]	; 0x1d8
 800c4f0:	ed8d ba78 	vstr	s22, [sp, #480]	; 0x1e0
 800c4f4:	ed8d ba79 	vstr	s22, [sp, #484]	; 0x1e4
 800c4f8:	ed8d ba7a 	vstr	s22, [sp, #488]	; 0x1e8
 800c4fc:	edcd ea81 	vstr	s29, [sp, #516]	; 0x204
 800c500:	edcd ea8b 	vstr	s29, [sp, #556]	; 0x22c
 800c504:	edcd fa43 	vstr	s31, [sp, #268]	; 0x10c
 800c508:	ed8d fa44 	vstr	s30, [sp, #272]	; 0x110
 800c50c:	ed8d ba7b 	vstr	s22, [sp, #492]	; 0x1ec
 800c510:	ed8d ba7c 	vstr	s22, [sp, #496]	; 0x1f0
 800c514:	ed8d ba7d 	vstr	s22, [sp, #500]	; 0x1f4
 800c518:	ed8d ba7e 	vstr	s22, [sp, #504]	; 0x1f8
 800c51c:	ed8d ba7f 	vstr	s22, [sp, #508]	; 0x1fc
 800c520:	ed8d ba80 	vstr	s22, [sp, #512]	; 0x200
 800c524:	ed8d ba82 	vstr	s22, [sp, #520]	; 0x208
 800c528:	ed8d ba83 	vstr	s22, [sp, #524]	; 0x20c
 800c52c:	ed8d ba84 	vstr	s22, [sp, #528]	; 0x210
 800c530:	ed8d ba85 	vstr	s22, [sp, #532]	; 0x214
 800c534:	ed8d ba86 	vstr	s22, [sp, #536]	; 0x218
 800c538:	ed8d ba87 	vstr	s22, [sp, #540]	; 0x21c
 800c53c:	ed8d ba88 	vstr	s22, [sp, #544]	; 0x220
 800c540:	ed8d ba89 	vstr	s22, [sp, #548]	; 0x224
 800c544:	ed8d ba8a 	vstr	s22, [sp, #552]	; 0x228
 800c548:	ed8d ba8c 	vstr	s22, [sp, #560]	; 0x230
 800c54c:	ed8d ba8d 	vstr	s22, [sp, #564]	; 0x234
 800c550:	ed8d ba8e 	vstr	s22, [sp, #568]	; 0x238
 800c554:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c556:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 800c55a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c55e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c560:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	f8cc 3000 	str.w	r3, [ip]
 800c56a:	4651      	mov	r1, sl
 800c56c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c570:	4620      	mov	r0, r4
 800c572:	f44f 57f0 	mov.w	r7, #7680	; 0x1e00
 800c576:	ed8d ba8f 	vstr	s22, [sp, #572]	; 0x23c
 800c57a:	ed8d ba90 	vstr	s22, [sp, #576]	; 0x240
 800c57e:	ed8d ba91 	vstr	s22, [sp, #580]	; 0x244
 800c582:	ed8d ba92 	vstr	s22, [sp, #584]	; 0x248
 800c586:	f00b f9b5 	bl	80178f4 <memset>
 800c58a:	4621      	mov	r1, r4
 800c58c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c590:	a898      	add	r0, sp, #608	; 0x260
 800c592:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800c596:	f8ad 7258 	strh.w	r7, [sp, #600]	; 0x258
 800c59a:	f00b f983 	bl	80178a4 <memcpy>
 800c59e:	4651      	mov	r1, sl
 800c5a0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c5a4:	4620      	mov	r0, r4
 800c5a6:	f50d 66a7 	add.w	r6, sp, #1336	; 0x538
 800c5aa:	ed8d 8a97 	vstr	s16, [sp, #604]	; 0x25c
 800c5ae:	f00b f9a1 	bl	80178f4 <memset>
 800c5b2:	4621      	mov	r1, r4
 800c5b4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c5b8:	a8f4      	add	r0, sp, #976	; 0x3d0
 800c5ba:	f8ad 73c8 	strh.w	r7, [sp, #968]	; 0x3c8
 800c5be:	f00b f971 	bl	80178a4 <memcpy>
 800c5c2:	4651      	mov	r1, sl
 800c5c4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c5c8:	4620      	mov	r0, r4
 800c5ca:	ed8d 8af3 	vstr	s16, [sp, #972]	; 0x3cc
 800c5ce:	f00b f991 	bl	80178f4 <memset>
 800c5d2:	4621      	mov	r1, r4
 800c5d4:	8037      	strh	r7, [r6, #0]
 800c5d6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c5da:	f50d 60a8 	add.w	r0, sp, #1344	; 0x540
 800c5de:	f00b f961 	bl	80178a4 <memcpy>
 800c5e2:	4651      	mov	r1, sl
 800c5e4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c5e8:	4620      	mov	r0, r4
 800c5ea:	ed86 8a01 	vstr	s16, [r6, #4]
 800c5ee:	f00b f981 	bl	80178f4 <memset>
 800c5f2:	4621      	mov	r1, r4
 800c5f4:	802f      	strh	r7, [r5, #0]
 800c5f6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c5fa:	f50d 60d6 	add.w	r0, sp, #1712	; 0x6b0
 800c5fe:	f00b f951 	bl	80178a4 <memcpy>
 800c602:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 800c606:	e9cd 5c01 	strd	r5, ip, [sp, #4]
 800c60a:	2701      	movs	r7, #1
 800c60c:	9600      	str	r6, [sp, #0]
 800c60e:	9403      	str	r4, [sp, #12]
 800c610:	eddf 3a40 	vldr	s7, [pc, #256]	; 800c714 <MFX_emptyAttitude+0x3e0>
 800c614:	ed9f 4a40 	vldr	s8, [pc, #256]	; 800c718 <MFX_emptyAttitude+0x3e4>
 800c618:	ed85 8a01 	vstr	s16, [r5, #4]
 800c61c:	483f      	ldr	r0, [pc, #252]	; (800c71c <MFX_emptyAttitude+0x3e8>)
 800c61e:	4d40      	ldr	r5, [pc, #256]	; (800c720 <MFX_emptyAttitude+0x3ec>)
 800c620:	f8df e120 	ldr.w	lr, [pc, #288]	; 800c744 <MFX_emptyAttitude+0x410>
 800c624:	951c      	str	r5, [sp, #112]	; 0x70
 800c626:	abf2      	add	r3, sp, #968	; 0x3c8
 800c628:	aa96      	add	r2, sp, #600	; 0x258
 800c62a:	a90d      	add	r1, sp, #52	; 0x34
 800c62c:	9017      	str	r0, [sp, #92]	; 0x5c
 800c62e:	4d3d      	ldr	r5, [pc, #244]	; (800c724 <MFX_emptyAttitude+0x3f0>)
 800c630:	edcd 3a18 	vstr	s7, [sp, #96]	; 0x60
 800c634:	4638      	mov	r0, r7
 800c636:	ae27      	add	r6, sp, #156	; 0x9c
 800c638:	ed8d 4a19 	vstr	s8, [sp, #100]	; 0x64
 800c63c:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
 800c640:	951b      	str	r5, [sp, #108]	; 0x6c
 800c642:	f88d 7058 	strb.w	r7, [sp, #88]	; 0x58
 800c646:	ed8d ba1d 	vstr	s22, [sp, #116]	; 0x74
 800c64a:	ed8d ba1e 	vstr	s22, [sp, #120]	; 0x78
 800c64e:	ed8d ba1f 	vstr	s22, [sp, #124]	; 0x7c
 800c652:	ed8d ba20 	vstr	s22, [sp, #128]	; 0x80
 800c656:	ed8d ba21 	vstr	s22, [sp, #132]	; 0x84
 800c65a:	f7fe fecf 	bl	800b3fc <DataHist_parameters>
 800c65e:	ce07      	ldmia	r6!, {r0, r1, r2}
 800c660:	4b31      	ldr	r3, [pc, #196]	; (800c728 <MFX_emptyAttitude+0x3f4>)
 800c662:	f8c8 0074 	str.w	r0, [r8, #116]	; 0x74
 800c666:	f8c8 1078 	str.w	r1, [r8, #120]	; 0x78
 800c66a:	f8c8 207c 	str.w	r2, [r8, #124]	; 0x7c
 800c66e:	e8b9 0007 	ldmia.w	r9!, {r0, r1, r2}
 800c672:	f8c8 300c 	str.w	r3, [r8, #12]
 800c676:	4b2d      	ldr	r3, [pc, #180]	; (800c72c <MFX_emptyAttitude+0x3f8>)
 800c678:	f8c8 3014 	str.w	r3, [r8, #20]
 800c67c:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
 800c680:	eddf 2a2b 	vldr	s5, [pc, #172]	; 800c730 <MFX_emptyAttitude+0x3fc>
 800c684:	ed9f 3a2b 	vldr	s6, [pc, #172]	; 800c734 <MFX_emptyAttitude+0x400>
 800c688:	eddf 3a2b 	vldr	s7, [pc, #172]	; 800c738 <MFX_emptyAttitude+0x404>
 800c68c:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 800c73c <MFX_emptyAttitude+0x408>
 800c690:	ed9f 4a2b 	vldr	s8, [pc, #172]	; 800c740 <MFX_emptyAttitude+0x40c>
 800c694:	f8bd 6098 	ldrh.w	r6, [sp, #152]	; 0x98
 800c698:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800c748 <MFX_emptyAttitude+0x414>
 800c69c:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 800c74c <MFX_emptyAttitude+0x418>
 800c6a0:	edc8 2a06 	vstr	s5, [r8, #24]
 800c6a4:	f04f 0b00 	mov.w	fp, #0
 800c6a8:	f04f 0c00 	mov.w	ip, #0
 800c6ac:	e9c8 bc16 	strd	fp, ip, [r8, #88]	; 0x58
 800c6b0:	e9c8 bc18 	strd	fp, ip, [r8, #96]	; 0x60
 800c6b4:	e9c8 bc1a 	strd	fp, ip, [r8, #104]	; 0x68
 800c6b8:	ad2d      	add	r5, sp, #180	; 0xb4
 800c6ba:	469b      	mov	fp, r3
 800c6bc:	f8df c090 	ldr.w	ip, [pc, #144]	; 800c750 <MFX_emptyAttitude+0x41c>
 800c6c0:	ed88 3a07 	vstr	s6, [r8, #28]
 800c6c4:	f240 1301 	movw	r3, #257	; 0x101
 800c6c8:	edc8 3a08 	vstr	s7, [r8, #32]
 800c6cc:	ed88 4a09 	vstr	s8, [r8, #36]	; 0x24
 800c6d0:	f8c8 9028 	str.w	r9, [r8, #40]	; 0x28
 800c6d4:	ed88 2a0b 	vstr	s4, [r8, #44]	; 0x2c
 800c6d8:	f8c8 e030 	str.w	lr, [r8, #48]	; 0x30
 800c6dc:	f8c8 c034 	str.w	ip, [r8, #52]	; 0x34
 800c6e0:	f8a8 6070 	strh.w	r6, [r8, #112]	; 0x70
 800c6e4:	f888 b072 	strb.w	fp, [r8, #114]	; 0x72
 800c6e8:	f8c8 0080 	str.w	r0, [r8, #128]	; 0x80
 800c6ec:	f8c8 1084 	str.w	r1, [r8, #132]	; 0x84
 800c6f0:	f8c8 3000 	str.w	r3, [r8]
 800c6f4:	f8a8 3004 	strh.w	r3, [r8, #4]
 800c6f8:	ed88 8a02 	vstr	s16, [r8, #8]
 800c6fc:	ed88 8a04 	vstr	s16, [r8, #16]
 800c700:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
 800c704:	e028      	b.n	800c758 <MFX_emptyAttitude+0x424>
 800c706:	bf00      	nop
 800c708:	0801a8e8 	.word	0x0801a8e8
 800c70c:	00000000 	.word	0x00000000
 800c710:	447a0000 	.word	0x447a0000
 800c714:	3e93ffa3 	.word	0x3e93ffa3
 800c718:	3e5cec8f 	.word	0x3e5cec8f
 800c71c:	3ea25c13 	.word	0x3ea25c13
 800c720:	40a00000 	.word	0x40a00000
 800c724:	3d57bb3d 	.word	0x3d57bb3d
 800c728:	01010100 	.word	0x01010100
 800c72c:	41200000 	.word	0x41200000
 800c730:	3a9d4952 	.word	0x3a9d4952
 800c734:	3ac49ba6 	.word	0x3ac49ba6
 800c738:	3b03126f 	.word	0x3b03126f
 800c73c:	402ab021 	.word	0x402ab021
 800c740:	3a83126f 	.word	0x3a83126f
 800c744:	3e006d36 	.word	0x3e006d36
 800c748:	3f639581 	.word	0x3f639581
 800c74c:	3f13f7cf 	.word	0x3f13f7cf
 800c750:	3f2ac083 	.word	0x3f2ac083
 800c754:	3f4ccccd 	.word	0x3f4ccccd
 800c758:	cd07      	ldmia	r5!, {r0, r1, r2}
 800c75a:	f10d 0bc0 	add.w	fp, sp, #192	; 0xc0
 800c75e:	f8c8 008c 	str.w	r0, [r8, #140]	; 0x8c
 800c762:	f8c8 1090 	str.w	r1, [r8, #144]	; 0x90
 800c766:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
 800c76a:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 800c76e:	ab33      	add	r3, sp, #204	; 0xcc
 800c770:	f8c8 0098 	str.w	r0, [r8, #152]	; 0x98
 800c774:	f8c8 109c 	str.w	r1, [r8, #156]	; 0x9c
 800c778:	f8c8 20a0 	str.w	r2, [r8, #160]	; 0xa0
 800c77c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c77e:	ab36      	add	r3, sp, #216	; 0xd8
 800c780:	f8c8 00a4 	str.w	r0, [r8, #164]	; 0xa4
 800c784:	f8c8 10a8 	str.w	r1, [r8, #168]	; 0xa8
 800c788:	f8c8 20ac 	str.w	r2, [r8, #172]	; 0xac
 800c78c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c78e:	ed1f 4a0f 	vldr	s8, [pc, #-60]	; 800c754 <MFX_emptyAttitude+0x420>
 800c792:	4bd6      	ldr	r3, [pc, #856]	; (800caec <MFX_emptyAttitude+0x7b8>)
 800c794:	f8c8 00b0 	str.w	r0, [r8, #176]	; 0xb0
 800c798:	f04f 5b7c 	mov.w	fp, #1056964608	; 0x3f000000
 800c79c:	f8c8 10b4 	str.w	r1, [r8, #180]	; 0xb4
 800c7a0:	f8c8 20b8 	str.w	r2, [r8, #184]	; 0xb8
 800c7a4:	ed88 4a65 	vstr	s8, [r8, #404]	; 0x194
 800c7a8:	f8c8 b198 	str.w	fp, [r8, #408]	; 0x198
 800c7ac:	f8c8 319c 	str.w	r3, [r8, #412]	; 0x19c
 800c7b0:	ed88 ba64 	vstr	s22, [r8, #400]	; 0x190
 800c7b4:	ed88 ba30 	vstr	s22, [r8, #192]	; 0xc0
 800c7b8:	ed88 ba4a 	vstr	s22, [r8, #296]	; 0x128
 800c7bc:	ed88 ba31 	vstr	s22, [r8, #196]	; 0xc4
 800c7c0:	ed88 ba4b 	vstr	s22, [r8, #300]	; 0x12c
 800c7c4:	ed88 ba32 	vstr	s22, [r8, #200]	; 0xc8
 800c7c8:	ed88 ba4c 	vstr	s22, [r8, #304]	; 0x130
 800c7cc:	ed88 ba33 	vstr	s22, [r8, #204]	; 0xcc
 800c7d0:	ed88 ba4d 	vstr	s22, [r8, #308]	; 0x134
 800c7d4:	ed88 ba34 	vstr	s22, [r8, #208]	; 0xd0
 800c7d8:	ed88 ba4e 	vstr	s22, [r8, #312]	; 0x138
 800c7dc:	ed88 ba35 	vstr	s22, [r8, #212]	; 0xd4
 800c7e0:	ed88 ba4f 	vstr	s22, [r8, #316]	; 0x13c
 800c7e4:	ed88 ba36 	vstr	s22, [r8, #216]	; 0xd8
 800c7e8:	ed88 ba50 	vstr	s22, [r8, #320]	; 0x140
 800c7ec:	ed88 ba37 	vstr	s22, [r8, #220]	; 0xdc
 800c7f0:	ed88 ba51 	vstr	s22, [r8, #324]	; 0x144
 800c7f4:	ed88 ba38 	vstr	s22, [r8, #224]	; 0xe0
 800c7f8:	ed88 ba52 	vstr	s22, [r8, #328]	; 0x148
 800c7fc:	ed88 ba39 	vstr	s22, [r8, #228]	; 0xe4
 800c800:	ed88 ba53 	vstr	s22, [r8, #332]	; 0x14c
 800c804:	ed88 ba3a 	vstr	s22, [r8, #232]	; 0xe8
 800c808:	ed88 ba54 	vstr	s22, [r8, #336]	; 0x150
 800c80c:	ed88 ba3b 	vstr	s22, [r8, #236]	; 0xec
 800c810:	ed88 ba55 	vstr	s22, [r8, #340]	; 0x154
 800c814:	ed88 ba3c 	vstr	s22, [r8, #240]	; 0xf0
 800c818:	ed88 ba56 	vstr	s22, [r8, #344]	; 0x158
 800c81c:	ed88 ba3d 	vstr	s22, [r8, #244]	; 0xf4
 800c820:	ed88 ba57 	vstr	s22, [r8, #348]	; 0x15c
 800c824:	ed88 ba3e 	vstr	s22, [r8, #248]	; 0xf8
 800c828:	ed88 ba58 	vstr	s22, [r8, #352]	; 0x160
 800c82c:	ed88 ba3f 	vstr	s22, [r8, #252]	; 0xfc
 800c830:	ed88 ba59 	vstr	s22, [r8, #356]	; 0x164
 800c834:	ed88 ba40 	vstr	s22, [r8, #256]	; 0x100
 800c838:	ed88 ba5a 	vstr	s22, [r8, #360]	; 0x168
 800c83c:	ed88 ba41 	vstr	s22, [r8, #260]	; 0x104
 800c840:	ed88 ba5b 	vstr	s22, [r8, #364]	; 0x16c
 800c844:	ed88 ba42 	vstr	s22, [r8, #264]	; 0x108
 800c848:	ed88 ba5c 	vstr	s22, [r8, #368]	; 0x170
 800c84c:	eddd 4a0b 	vldr	s9, [sp, #44]	; 0x2c
 800c850:	ed9d 5a0a 	vldr	s10, [sp, #40]	; 0x28
 800c854:	edc8 4a6c 	vstr	s9, [r8, #432]	; 0x1b0
 800c858:	ed88 5a6d 	vstr	s10, [r8, #436]	; 0x1b4
 800c85c:	ed88 ba43 	vstr	s22, [r8, #268]	; 0x10c
 800c860:	ed88 ba5d 	vstr	s22, [r8, #372]	; 0x174
 800c864:	ed88 ba44 	vstr	s22, [r8, #272]	; 0x110
 800c868:	ed88 ba5e 	vstr	s22, [r8, #376]	; 0x178
 800c86c:	ed88 ba45 	vstr	s22, [r8, #276]	; 0x114
 800c870:	ed88 ba5f 	vstr	s22, [r8, #380]	; 0x17c
 800c874:	ed88 ba46 	vstr	s22, [r8, #280]	; 0x118
 800c878:	ed88 ba60 	vstr	s22, [r8, #384]	; 0x180
 800c87c:	ed88 ba47 	vstr	s22, [r8, #284]	; 0x11c
 800c880:	ed88 ba61 	vstr	s22, [r8, #388]	; 0x184
 800c884:	ed88 ba48 	vstr	s22, [r8, #288]	; 0x120
 800c888:	ed88 ba62 	vstr	s22, [r8, #392]	; 0x188
 800c88c:	ed88 ba49 	vstr	s22, [r8, #292]	; 0x124
 800c890:	ed88 ba63 	vstr	s22, [r8, #396]	; 0x18c
 800c894:	f888 a1a4 	strb.w	sl, [r8, #420]	; 0x1a4
 800c898:	f8c8 a1a6 	str.w	sl, [r8, #422]	; 0x1a6
 800c89c:	edc8 ea75 	vstr	s29, [r8, #468]	; 0x1d4
 800c8a0:	ed88 ba76 	vstr	s22, [r8, #472]	; 0x1d8
 800c8a4:	ed88 ba77 	vstr	s22, [r8, #476]	; 0x1dc
 800c8a8:	ed88 ba78 	vstr	s22, [r8, #480]	; 0x1e0
 800c8ac:	ed88 ba79 	vstr	s22, [r8, #484]	; 0x1e4
 800c8b0:	ed88 ba7a 	vstr	s22, [r8, #488]	; 0x1e8
 800c8b4:	ed88 ba7b 	vstr	s22, [r8, #492]	; 0x1ec
 800c8b8:	ed88 ba7c 	vstr	s22, [r8, #496]	; 0x1f0
 800c8bc:	ed88 ba7d 	vstr	s22, [r8, #500]	; 0x1f4
 800c8c0:	ed88 ba7e 	vstr	s22, [r8, #504]	; 0x1f8
 800c8c4:	edc8 ea7f 	vstr	s29, [r8, #508]	; 0x1fc
 800c8c8:	ed88 ba80 	vstr	s22, [r8, #512]	; 0x200
 800c8cc:	ed88 ba81 	vstr	s22, [r8, #516]	; 0x204
 800c8d0:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 800c8d4:	ed9d 6a08 	vldr	s12, [sp, #32]
 800c8d8:	eddd 6a07 	vldr	s13, [sp, #28]
 800c8dc:	edc8 5a6e 	vstr	s11, [r8, #440]	; 0x1b8
 800c8e0:	f44f 1c48 	mov.w	ip, #3276800	; 0x320000
 800c8e4:	f8c8 c1a0 	str.w	ip, [r8, #416]	; 0x1a0
 800c8e8:	ed88 6a6f 	vstr	s12, [r8, #444]	; 0x1bc
 800c8ec:	edc8 6a70 	vstr	s13, [r8, #448]	; 0x1c0
 800c8f0:	ed88 ba82 	vstr	s22, [r8, #520]	; 0x208
 800c8f4:	ed88 ba83 	vstr	s22, [r8, #524]	; 0x20c
 800c8f8:	ed88 ba84 	vstr	s22, [r8, #528]	; 0x210
 800c8fc:	ed88 ba85 	vstr	s22, [r8, #532]	; 0x214
 800c900:	ed88 ba86 	vstr	s22, [r8, #536]	; 0x218
 800c904:	ed88 ba87 	vstr	s22, [r8, #540]	; 0x21c
 800c908:	ed88 ba88 	vstr	s22, [r8, #544]	; 0x220
 800c90c:	edc8 ea89 	vstr	s29, [r8, #548]	; 0x224
 800c910:	ed88 ba8a 	vstr	s22, [r8, #552]	; 0x228
 800c914:	ed88 ba8b 	vstr	s22, [r8, #556]	; 0x22c
 800c918:	ed88 ba8c 	vstr	s22, [r8, #560]	; 0x230
 800c91c:	ed88 ba8d 	vstr	s22, [r8, #564]	; 0x234
 800c920:	ed88 ba8e 	vstr	s22, [r8, #568]	; 0x238
 800c924:	ed88 ba8f 	vstr	s22, [r8, #572]	; 0x23c
 800c928:	ed88 ba90 	vstr	s22, [r8, #576]	; 0x240
 800c92c:	ed88 ba91 	vstr	s22, [r8, #580]	; 0x244
 800c930:	ed88 ba92 	vstr	s22, [r8, #584]	; 0x248
 800c934:	edc8 ea93 	vstr	s29, [r8, #588]	; 0x24c
 800c938:	ed88 ba94 	vstr	s22, [r8, #592]	; 0x250
 800c93c:	ed88 ba95 	vstr	s22, [r8, #596]	; 0x254
 800c940:	ed88 ba96 	vstr	s22, [r8, #600]	; 0x258
 800c944:	ed88 ba97 	vstr	s22, [r8, #604]	; 0x25c
 800c948:	ed88 ba98 	vstr	s22, [r8, #608]	; 0x260
 800c94c:	ed88 ba99 	vstr	s22, [r8, #612]	; 0x264
 800c950:	ed88 ba9a 	vstr	s22, [r8, #616]	; 0x268
 800c954:	ed88 ba9b 	vstr	s22, [r8, #620]	; 0x26c
 800c958:	ed9d 7a06 	vldr	s14, [sp, #24]
 800c95c:	eddd 7a05 	vldr	s15, [sp, #20]
 800c960:	ed88 7a71 	vstr	s14, [r8, #452]	; 0x1c4
 800c964:	f508 7e46 	add.w	lr, r8, #792	; 0x318
 800c968:	f50d 6649 	add.w	r6, sp, #3216	; 0xc90
 800c96c:	f50d 6532 	add.w	r5, sp, #2848	; 0xb20
 800c970:	edc8 7a72 	vstr	s15, [r8, #456]	; 0x1c8
 800c974:	ed88 ba9c 	vstr	s22, [r8, #624]	; 0x270
 800c978:	edc8 ea9d 	vstr	s29, [r8, #628]	; 0x274
 800c97c:	ed88 ba9e 	vstr	s22, [r8, #632]	; 0x278
 800c980:	ed88 ba9f 	vstr	s22, [r8, #636]	; 0x27c
 800c984:	ed88 baa0 	vstr	s22, [r8, #640]	; 0x280
 800c988:	ed88 baa1 	vstr	s22, [r8, #644]	; 0x284
 800c98c:	ed88 baa2 	vstr	s22, [r8, #648]	; 0x288
 800c990:	ed88 baa3 	vstr	s22, [r8, #652]	; 0x28c
 800c994:	ed88 baa4 	vstr	s22, [r8, #656]	; 0x290
 800c998:	ed88 baa5 	vstr	s22, [r8, #660]	; 0x294
 800c99c:	ed88 baa6 	vstr	s22, [r8, #664]	; 0x298
 800c9a0:	edc8 eaa7 	vstr	s29, [r8, #668]	; 0x29c
 800c9a4:	ed88 baa8 	vstr	s22, [r8, #672]	; 0x2a0
 800c9a8:	ed88 baa9 	vstr	s22, [r8, #676]	; 0x2a4
 800c9ac:	ed88 baaa 	vstr	s22, [r8, #680]	; 0x2a8
 800c9b0:	ed88 baab 	vstr	s22, [r8, #684]	; 0x2ac
 800c9b4:	ed88 baac 	vstr	s22, [r8, #688]	; 0x2b0
 800c9b8:	ed88 baad 	vstr	s22, [r8, #692]	; 0x2b4
 800c9bc:	ed88 baae 	vstr	s22, [r8, #696]	; 0x2b8
 800c9c0:	ed88 baaf 	vstr	s22, [r8, #700]	; 0x2bc
 800c9c4:	ed88 bab0 	vstr	s22, [r8, #704]	; 0x2c0
 800c9c8:	edc8 eab1 	vstr	s29, [r8, #708]	; 0x2c4
 800c9cc:	ed88 bab2 	vstr	s22, [r8, #712]	; 0x2c8
 800c9d0:	ed88 bab3 	vstr	s22, [r8, #716]	; 0x2cc
 800c9d4:	edc8 fa73 	vstr	s31, [r8, #460]	; 0x1cc
 800c9d8:	ed88 bab4 	vstr	s22, [r8, #720]	; 0x2d0
 800c9dc:	ed88 bab5 	vstr	s22, [r8, #724]	; 0x2d4
 800c9e0:	ed88 bab6 	vstr	s22, [r8, #728]	; 0x2d8
 800c9e4:	ed88 bab7 	vstr	s22, [r8, #732]	; 0x2dc
 800c9e8:	7820      	ldrb	r0, [r4, #0]
 800c9ea:	f888 71ac 	strb.w	r7, [r8, #428]	; 0x1ac
 800c9ee:	f50d 6460 	add.w	r4, sp, #3584	; 0xe00
 800c9f2:	ed88 bab8 	vstr	s22, [r8, #736]	; 0x2e0
 800c9f6:	ed88 bab9 	vstr	s22, [r8, #740]	; 0x2e4
 800c9fa:	ed88 baba 	vstr	s22, [r8, #744]	; 0x2e8
 800c9fe:	edc8 eabb 	vstr	s29, [r8, #748]	; 0x2ec
 800ca02:	ed88 babc 	vstr	s22, [r8, #752]	; 0x2f0
 800ca06:	ed88 fa74 	vstr	s30, [r8, #464]	; 0x1d0
 800ca0a:	ed88 babd 	vstr	s22, [r8, #756]	; 0x2f4
 800ca0e:	ed88 babe 	vstr	s22, [r8, #760]	; 0x2f8
 800ca12:	ed88 babf 	vstr	s22, [r8, #764]	; 0x2fc
 800ca16:	ed88 bac0 	vstr	s22, [r8, #768]	; 0x300
 800ca1a:	ed88 bac1 	vstr	s22, [r8, #772]	; 0x304
 800ca1e:	ed88 bac2 	vstr	s22, [r8, #776]	; 0x308
 800ca22:	edc8 eac5 	vstr	s29, [r8, #788]	; 0x314
 800ca26:	ed88 bac3 	vstr	s22, [r8, #780]	; 0x30c
 800ca2a:	ed88 bac4 	vstr	s22, [r8, #784]	; 0x310
 800ca2e:	f50d 631b 	add.w	r3, sp, #2480	; 0x9b0
 800ca32:	e9cd 6401 	strd	r6, r4, [sp, #4]
 800ca36:	f50d 6204 	add.w	r2, sp, #2112	; 0x840
 800ca3a:	f60d 011c 	addw	r1, sp, #2076	; 0x81c
 800ca3e:	f8cd e00c 	str.w	lr, [sp, #12]
 800ca42:	9500      	str	r5, [sp, #0]
 800ca44:	f7fe fcda 	bl	800b3fc <DataHist_parameters>
 800ca48:	f608 123c 	addw	r2, r8, #2364	; 0x93c
 800ca4c:	f608 1334 	addw	r3, r8, #2356	; 0x934
 800ca50:	9205      	str	r2, [sp, #20]
 800ca52:	f508 6b13 	add.w	fp, r8, #2352	; 0x930
 800ca56:	ed8b ba00 	vstr	s22, [fp]
 800ca5a:	f608 1154 	addw	r1, r8, #2388	; 0x954
 800ca5e:	ed83 ba00 	vstr	s22, [r3]
 800ca62:	9b05      	ldr	r3, [sp, #20]
 800ca64:	9106      	str	r1, [sp, #24]
 800ca66:	f608 1938 	addw	r9, r8, #2360	; 0x938
 800ca6a:	ed89 ba00 	vstr	s22, [r9]
 800ca6e:	f508 6217 	add.w	r2, r8, #2416	; 0x970
 800ca72:	ed83 8a00 	vstr	s16, [r3]
 800ca76:	9b06      	ldr	r3, [sp, #24]
 800ca78:	9207      	str	r2, [sp, #28]
 800ca7a:	f508 6e14 	add.w	lr, r8, #2368	; 0x940
 800ca7e:	f608 1c5c 	addw	ip, r8, #2396	; 0x95c
 800ca82:	f608 1744 	addw	r7, r8, #2372	; 0x944
 800ca86:	f508 6616 	add.w	r6, r8, #2400	; 0x960
 800ca8a:	f608 1548 	addw	r5, r8, #2376	; 0x948
 800ca8e:	f608 1464 	addw	r4, r8, #2404	; 0x964
 800ca92:	ed8e ba00 	vstr	s22, [lr]
 800ca96:	ed8c ba00 	vstr	s22, [ip]
 800ca9a:	ed87 ba00 	vstr	s22, [r7]
 800ca9e:	ed86 ba00 	vstr	s22, [r6]
 800caa2:	ed85 ba00 	vstr	s22, [r5]
 800caa6:	ed84 ba00 	vstr	s22, [r4]
 800caaa:	f8c8 a94c 	str.w	sl, [r8, #2380]	; 0x94c
 800caae:	f8a8 a950 	strh.w	sl, [r8, #2384]	; 0x950
 800cab2:	ed83 ba00 	vstr	s22, [r3]
 800cab6:	9b07      	ldr	r3, [sp, #28]
 800cab8:	f608 1058 	addw	r0, r8, #2392	; 0x958
 800cabc:	f608 1168 	addw	r1, r8, #2408	; 0x968
 800cac0:	ed80 8a00 	vstr	s16, [r0]
 800cac4:	f608 126c 	addw	r2, r8, #2412	; 0x96c
 800cac8:	ed81 ba00 	vstr	s22, [r1]
 800cacc:	ed83 ba00 	vstr	s22, [r3]
 800cad0:	230a      	movs	r3, #10
 800cad2:	ed82 ba00 	vstr	s22, [r2]
 800cad6:	f888 a978 	strb.w	sl, [r8, #2424]	; 0x978
 800cada:	f8c8 3974 	str.w	r3, [r8, #2420]	; 0x974
 800cade:	f60d 6d34 	addw	sp, sp, #3636	; 0xe34
 800cae2:	ecbd 8b10 	vpop	{d8-d15}
 800cae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caea:	bf00      	nop
 800caec:	3f333333 	.word	0x3f333333

0800caf0 <output_update>:
 800caf0:	ed90 7a00 	vldr	s14, [r0]
 800caf4:	edd0 7a01 	vldr	s15, [r0, #4]
 800caf8:	ed90 5a03 	vldr	s10, [r0, #12]
 800cafc:	edd0 5a02 	vldr	s11, [r0, #8]
 800cb00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb04:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800cb08:	ee27 6a07 	vmul.f32	s12, s14, s14
 800cb0c:	ee67 6a05 	vmul.f32	s13, s14, s10
 800cb10:	ee36 6a24 	vadd.f32	s12, s12, s9
 800cb14:	ee67 4aa5 	vmul.f32	s9, s15, s11
 800cb18:	ee27 7a25 	vmul.f32	s14, s14, s11
 800cb1c:	ee67 7a85 	vmul.f32	s15, s15, s10
 800cb20:	ee36 6a06 	vadd.f32	s12, s12, s12
 800cb24:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800cb28:	f89d c01c 	ldrb.w	ip, [sp, #28]
 800cb2c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800cb30:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800cb34:	ee35 5ac6 	vsub.f32	s10, s11, s12
 800cb38:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800cb3c:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800cb40:	ee37 7a07 	vadd.f32	s14, s14, s14
 800cb44:	460f      	mov	r7, r1
 800cb46:	4615      	mov	r5, r2
 800cb48:	461e      	mov	r6, r3
 800cb4a:	f1bc 0f00 	cmp.w	ip, #0
 800cb4e:	d146      	bne.n	800cbde <output_update+0xee>
 800cb50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cb54:	eef1 6a66 	vneg.f32	s13, s13
 800cb58:	edc3 7a01 	vstr	s15, [r3, #4]
 800cb5c:	edc3 6a00 	vstr	s13, [r3]
 800cb60:	ed83 5a02 	vstr	s10, [r3, #8]
 800cb64:	4662      	mov	r2, ip
 800cb66:	4629      	mov	r1, r5
 800cb68:	4604      	mov	r4, r0
 800cb6a:	f7ff f955 	bl	800be18 <q2hpr>
 800cb6e:	edd5 6a01 	vldr	s13, [r5, #4]
 800cb72:	ed95 7a00 	vldr	s14, [r5]
 800cb76:	edd5 7a02 	vldr	s15, [r5, #8]
 800cb7a:	ed9f 6a44 	vldr	s12, [pc, #272]	; 800cc8c <output_update+0x19c>
 800cb7e:	ee27 7a06 	vmul.f32	s14, s14, s12
 800cb82:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 800cb86:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 800cb8a:	ed85 7a00 	vstr	s14, [r5]
 800cb8e:	edc5 6a01 	vstr	s13, [r5, #4]
 800cb92:	edc5 7a02 	vstr	s15, [r5, #8]
 800cb96:	ed97 7a01 	vldr	s14, [r7, #4]
 800cb9a:	edd6 7a00 	vldr	s15, [r6]
 800cb9e:	6822      	ldr	r2, [r4, #0]
 800cba0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cba4:	edc8 7a00 	vstr	s15, [r8]
 800cba8:	ed97 7a00 	vldr	s14, [r7]
 800cbac:	edd6 7a01 	vldr	s15, [r6, #4]
 800cbb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cbb4:	edc8 7a01 	vstr	s15, [r8, #4]
 800cbb8:	edd6 7a02 	vldr	s15, [r6, #8]
 800cbbc:	ed97 7a02 	vldr	s14, [r7, #8]
 800cbc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cbc4:	edc8 7a02 	vstr	s15, [r8, #8]
 800cbc8:	edd4 7a02 	vldr	s15, [r4, #8]
 800cbcc:	6863      	ldr	r3, [r4, #4]
 800cbce:	6023      	str	r3, [r4, #0]
 800cbd0:	eef1 7a67 	vneg.f32	s15, s15
 800cbd4:	6062      	str	r2, [r4, #4]
 800cbd6:	edc4 7a02 	vstr	s15, [r4, #8]
 800cbda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbde:	f1bc 0f01 	cmp.w	ip, #1
 800cbe2:	d015      	beq.n	800cc10 <output_update+0x120>
 800cbe4:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800cc8c <output_update+0x19c>
 800cbe8:	edd2 6a00 	vldr	s13, [r2]
 800cbec:	ed92 7a01 	vldr	s14, [r2, #4]
 800cbf0:	edd2 7a02 	vldr	s15, [r2, #8]
 800cbf4:	ee66 6a86 	vmul.f32	s13, s13, s12
 800cbf8:	ee27 7a06 	vmul.f32	s14, s14, s12
 800cbfc:	ee67 7a86 	vmul.f32	s15, s15, s12
 800cc00:	edc2 6a00 	vstr	s13, [r2]
 800cc04:	ed82 7a01 	vstr	s14, [r2, #4]
 800cc08:	edc2 7a02 	vstr	s15, [r2, #8]
 800cc0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc14:	ee36 6a65 	vsub.f32	s12, s12, s11
 800cc18:	eef1 6a66 	vneg.f32	s13, s13
 800cc1c:	edc3 7a00 	vstr	s15, [r3]
 800cc20:	ed83 6a02 	vstr	s12, [r3, #8]
 800cc24:	edc3 6a01 	vstr	s13, [r3, #4]
 800cc28:	4662      	mov	r2, ip
 800cc2a:	4629      	mov	r1, r5
 800cc2c:	f7ff f8f4 	bl	800be18 <q2hpr>
 800cc30:	edd5 6a00 	vldr	s13, [r5]
 800cc34:	ed95 7a01 	vldr	s14, [r5, #4]
 800cc38:	edd5 7a02 	vldr	s15, [r5, #8]
 800cc3c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800cc8c <output_update+0x19c>
 800cc40:	ee27 7a06 	vmul.f32	s14, s14, s12
 800cc44:	ee67 7a86 	vmul.f32	s15, s15, s12
 800cc48:	ee66 6a86 	vmul.f32	s13, s13, s12
 800cc4c:	ed85 7a01 	vstr	s14, [r5, #4]
 800cc50:	edc5 6a00 	vstr	s13, [r5]
 800cc54:	edc5 7a02 	vstr	s15, [r5, #8]
 800cc58:	ed97 7a00 	vldr	s14, [r7]
 800cc5c:	edd6 7a00 	vldr	s15, [r6]
 800cc60:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc64:	edc8 7a00 	vstr	s15, [r8]
 800cc68:	ed97 7a01 	vldr	s14, [r7, #4]
 800cc6c:	edd6 7a01 	vldr	s15, [r6, #4]
 800cc70:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc74:	edc8 7a01 	vstr	s15, [r8, #4]
 800cc78:	edd6 7a02 	vldr	s15, [r6, #8]
 800cc7c:	ed97 7a02 	vldr	s14, [r7, #8]
 800cc80:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc84:	edc8 7a02 	vstr	s15, [r8, #8]
 800cc88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc8c:	42652ee1 	.word	0x42652ee1

0800cc90 <kalman_3gyro.constprop.0>:
 800cc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc94:	ed2d 8b10 	vpush	{d8-d15}
 800cc98:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 800cc9c:	edd2 9a02 	vldr	s19, [r2, #8]
 800cca0:	edd2 8a03 	vldr	s17, [r2, #12]
 800cca4:	edd2 6a04 	vldr	s13, [r2, #16]
 800cca8:	ed92 6a05 	vldr	s12, [r2, #20]
 800ccac:	6854      	ldr	r4, [r2, #4]
 800ccae:	f2ad 7dcc 	subw	sp, sp, #1996	; 0x7cc
 800ccb2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800ccb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ccba:	4683      	mov	fp, r0
 800ccbc:	edd2 7a00 	vldr	s15, [r2]
 800ccc0:	48e3      	ldr	r0, [pc, #908]	; (800d050 <kalman_3gyro.constprop.0+0x3c0>)
 800ccc2:	9108      	str	r1, [sp, #32]
 800ccc4:	904a      	str	r0, [sp, #296]	; 0x128
 800ccc6:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800ccca:	460d      	mov	r5, r1
 800cccc:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
 800ccd0:	2100      	movs	r1, #0
 800ccd2:	9328      	str	r3, [sp, #160]	; 0xa0
 800ccd4:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 800ccd8:	edcd 7a29 	vstr	s15, [sp, #164]	; 0xa4
 800ccdc:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 800cce0:	ed8d 6a21 	vstr	s12, [sp, #132]	; 0x84
 800cce4:	ed8d 7a7a 	vstr	s14, [sp, #488]	; 0x1e8
 800cce8:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 800ccec:	edcd 7a43 	vstr	s15, [sp, #268]	; 0x10c
 800ccf0:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
 800ccf4:	edcd 6a78 	vstr	s13, [sp, #480]	; 0x1e0
 800ccf8:	ed8d 6a79 	vstr	s12, [sp, #484]	; 0x1e4
 800ccfc:	ed8d 0a45 	vstr	s0, [sp, #276]	; 0x114
 800cd00:	946f      	str	r4, [sp, #444]	; 0x1bc
 800cd02:	9470      	str	r4, [sp, #448]	; 0x1c0
 800cd04:	9471      	str	r4, [sp, #452]	; 0x1c4
 800cd06:	edcd 9a72 	vstr	s19, [sp, #456]	; 0x1c8
 800cd0a:	edcd 9a73 	vstr	s19, [sp, #460]	; 0x1cc
 800cd0e:	edcd 9a74 	vstr	s19, [sp, #464]	; 0x1d0
 800cd12:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 800cd16:	edcd 8a76 	vstr	s17, [sp, #472]	; 0x1d8
 800cd1a:	edcd 8a77 	vstr	s17, [sp, #476]	; 0x1dc
 800cd1e:	eeb0 8a60 	vmov.f32	s16, s1
 800cd22:	ed8d 0a46 	vstr	s0, [sp, #280]	; 0x118
 800cd26:	ed8d 0a47 	vstr	s0, [sp, #284]	; 0x11c
 800cd2a:	ed8d 1a07 	vstr	s2, [sp, #28]
 800cd2e:	f00a fde1 	bl	80178f4 <memset>
 800cd32:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
 800cd36:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800cd3a:	600b      	str	r3, [r1, #0]
 800cd3c:	f20d 61f4 	addw	r1, sp, #1780	; 0x6f4
 800cd40:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800cd44:	600b      	str	r3, [r1, #0]
 800cd46:	f50d 61e5 	add.w	r1, sp, #1832	; 0x728
 800cd4a:	600b      	str	r3, [r1, #0]
 800cd4c:	f20d 715c 	addw	r1, sp, #1884	; 0x75c
 800cd50:	600b      	str	r3, [r1, #0]
 800cd52:	f50d 61f2 	add.w	r1, sp, #1936	; 0x790
 800cd56:	600b      	str	r3, [r1, #0]
 800cd58:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
 800cd5c:	600b      	str	r3, [r1, #0]
 800cd5e:	2a00      	cmp	r2, #0
 800cd60:	f001 82c2 	beq.w	800e2e8 <kalman_3gyro.constprop.0+0x1658>
 800cd64:	ed95 5a02 	vldr	s10, [r5, #8]
 800cd68:	edd5 5a01 	vldr	s11, [r5, #4]
 800cd6c:	ed95 3a00 	vldr	s6, [r5]
 800cd70:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800cd74:	ee65 4aa7 	vmul.f32	s9, s11, s15
 800cd78:	ee35 4a05 	vadd.f32	s8, s10, s10
 800cd7c:	ee75 5aa5 	vadd.f32	s11, s11, s11
 800cd80:	ee25 5a27 	vmul.f32	s10, s10, s15
 800cd84:	ee63 7a27 	vmul.f32	s15, s6, s15
 800cd88:	ee33 3a03 	vadd.f32	s6, s6, s6
 800cd8c:	9b08      	ldr	r3, [sp, #32]
 800cd8e:	f20d 621c 	addw	r2, sp, #1564	; 0x61c
 800cd92:	ed82 4a00 	vstr	s8, [r2]
 800cd96:	f50d 62c4 	add.w	r2, sp, #1568	; 0x620
 800cd9a:	edc2 4a00 	vstr	s9, [r2]
 800cd9e:	ed93 6a05 	vldr	s12, [r3, #20]
 800cda2:	edd3 6a04 	vldr	s13, [r3, #16]
 800cda6:	ed93 7a03 	vldr	s14, [r3, #12]
 800cdaa:	edcd 6a51 	vstr	s13, [sp, #324]	; 0x144
 800cdae:	f50d 62c9 	add.w	r2, sp, #1608	; 0x648
 800cdb2:	ed82 5a00 	vstr	s10, [r2]
 800cdb6:	f50d 62ca 	add.w	r2, sp, #1616	; 0x650
 800cdba:	ed82 3a00 	vstr	s6, [r2]
 800cdbe:	eef1 3a46 	vneg.f32	s7, s12
 800cdc2:	f50d 62cf 	add.w	r2, sp, #1656	; 0x678
 800cdc6:	edc2 5a00 	vstr	s11, [r2]
 800cdca:	eeb1 4a66 	vneg.f32	s8, s13
 800cdce:	ee33 5aa3 	vadd.f32	s10, s7, s7
 800cdd2:	f20d 627c 	addw	r2, sp, #1660	; 0x67c
 800cdd6:	edc2 7a00 	vstr	s15, [r2]
 800cdda:	ee34 3a04 	vadd.f32	s6, s8, s8
 800cdde:	f20d 6254 	addw	r2, sp, #1620	; 0x654
 800cde2:	eef1 4a47 	vneg.f32	s9, s14
 800cde6:	ed82 5a00 	vstr	s10, [r2]
 800cdea:	f20d 612c 	addw	r1, sp, #1580	; 0x62c
 800cdee:	ee36 5aa6 	vadd.f32	s10, s13, s13
 800cdf2:	ed81 3a00 	vstr	s6, [r1]
 800cdf6:	ee74 5aa4 	vadd.f32	s11, s9, s9
 800cdfa:	f20d 6184 	addw	r1, sp, #1668	; 0x684
 800cdfe:	ed81 5a00 	vstr	s10, [r1]
 800ce02:	ee77 7a07 	vadd.f32	s15, s14, s14
 800ce06:	f50d 61d1 	add.w	r1, sp, #1672	; 0x688
 800ce0a:	edc1 5a00 	vstr	s11, [r1]
 800ce0e:	f20d 615c 	addw	r1, sp, #1628	; 0x65c
 800ce12:	edc1 7a00 	vstr	s15, [r1]
 800ce16:	f50d 61c3 	add.w	r1, sp, #1560	; 0x618
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	600b      	str	r3, [r1, #0]
 800ce1e:	f20d 614c 	addw	r1, sp, #1612	; 0x64c
 800ce22:	ee76 2a06 	vadd.f32	s5, s12, s12
 800ce26:	600b      	str	r3, [r1, #0]
 800ce28:	f50d 61d0 	add.w	r1, sp, #1664	; 0x680
 800ce2c:	f50d 62c5 	add.w	r2, sp, #1576	; 0x628
 800ce30:	600b      	str	r3, [r1, #0]
 800ce32:	f20d 6124 	addw	r1, sp, #1572	; 0x624
 800ce36:	edc2 2a00 	vstr	s5, [r2]
 800ce3a:	600b      	str	r3, [r1, #0]
 800ce3c:	f50d 61cb 	add.w	r1, sp, #1624	; 0x658
 800ce40:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 800ce44:	600b      	str	r3, [r1, #0]
 800ce46:	f20d 618c 	addw	r1, sp, #1676	; 0x68c
 800ce4a:	a87b      	add	r0, sp, #492	; 0x1ec
 800ce4c:	600b      	str	r3, [r1, #0]
 800ce4e:	2230      	movs	r2, #48	; 0x30
 800ce50:	2100      	movs	r1, #0
 800ce52:	ed8d 7a50 	vstr	s14, [sp, #320]	; 0x140
 800ce56:	934b      	str	r3, [sp, #300]	; 0x12c
 800ce58:	934f      	str	r3, [sp, #316]	; 0x13c
 800ce5a:	9353      	str	r3, [sp, #332]	; 0x14c
 800ce5c:	edcd 3a4e 	vstr	s7, [sp, #312]	; 0x138
 800ce60:	ed8d 6a4c 	vstr	s12, [sp, #304]	; 0x130
 800ce64:	ed8d 4a4d 	vstr	s8, [sp, #308]	; 0x134
 800ce68:	edcd 4a52 	vstr	s9, [sp, #328]	; 0x148
 800ce6c:	e9cd 442a 	strd	r4, r4, [sp, #168]	; 0xa8
 800ce70:	942c      	str	r4, [sp, #176]	; 0xb0
 800ce72:	f00a fd3f 	bl	80178f4 <memset>
 800ce76:	eddb 6a06 	vldr	s13, [fp, #24]
 800ce7a:	ed9b 7a07 	vldr	s14, [fp, #28]
 800ce7e:	eddb 7a08 	vldr	s15, [fp, #32]
 800ce82:	f89b 31ac 	ldrb.w	r3, [fp, #428]	; 0x1ac
 800ce86:	ee68 6a26 	vmul.f32	s13, s16, s13
 800ce8a:	ee28 7a07 	vmul.f32	s14, s16, s14
 800ce8e:	ee68 7a27 	vmul.f32	s15, s16, s15
 800ce92:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 800ce96:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
 800ce9a:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	f043 84a8 	bne.w	80107f4 <kalman_3gyro.constprop.0+0x3b64>
 800cea4:	f89b 3318 	ldrb.w	r3, [fp, #792]	; 0x318
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	f043 81e7 	bne.w	801027c <kalman_3gyro.constprop.0+0x35ec>
 800ceae:	f20b 6324 	addw	r3, fp, #1572	; 0x624
 800ceb2:	9304      	str	r3, [sp, #16]
 800ceb4:	f20b 7394 	addw	r3, fp, #1940	; 0x794
 800ceb8:	f20b 45b4 	addw	r5, fp, #1204	; 0x4b4
 800cebc:	9310      	str	r3, [sp, #64]	; 0x40
 800cebe:	f50b 6897 	add.w	r8, fp, #1208	; 0x4b8
 800cec2:	f50b 67c5 	add.w	r7, fp, #1576	; 0x628
 800cec6:	f50b 63f3 	add.w	r3, fp, #1944	; 0x798
 800ceca:	930f      	str	r3, [sp, #60]	; 0x3c
 800cecc:	f50b 6013 	add.w	r0, fp, #2352	; 0x930
 800ced0:	edd0 7a00 	vldr	s15, [r0]
 800ced4:	f60b 133c 	addw	r3, fp, #2364	; 0x93c
 800ced8:	f60b 1134 	addw	r1, fp, #2356	; 0x934
 800cedc:	f60b 1238 	addw	r2, fp, #2360	; 0x938
 800cee0:	ed93 6a00 	vldr	s12, [r3]
 800cee4:	ed91 7a00 	vldr	s14, [r1]
 800cee8:	edd2 6a00 	vldr	s13, [r2]
 800ceec:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800cef0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cef4:	2300      	movs	r3, #0
 800cef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cefa:	ed8d 7a37 	vstr	s14, [sp, #220]	; 0xdc
 800cefe:	edcd 6a38 	vstr	s13, [sp, #224]	; 0xe0
 800cf02:	ed8d 6a39 	vstr	s12, [sp, #228]	; 0xe4
 800cf06:	933a      	str	r3, [sp, #232]	; 0xe8
 800cf08:	933b      	str	r3, [sp, #236]	; 0xec
 800cf0a:	933c      	str	r3, [sp, #240]	; 0xf0
 800cf0c:	933d      	str	r3, [sp, #244]	; 0xf4
 800cf0e:	d14e      	bne.n	800cfae <kalman_3gyro.constprop.0+0x31e>
 800cf10:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800cf14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf18:	d149      	bne.n	800cfae <kalman_3gyro.constprop.0+0x31e>
 800cf1a:	eef5 6a40 	vcmp.f32	s13, #0.0
 800cf1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf22:	d144      	bne.n	800cfae <kalman_3gyro.constprop.0+0x31e>
 800cf24:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800cf28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf2c:	d13f      	bne.n	800cfae <kalman_3gyro.constprop.0+0x31e>
 800cf2e:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800cf30:	9336      	str	r3, [sp, #216]	; 0xd8
 800cf32:	7802      	ldrb	r2, [r0, #0]
 800cf34:	9337      	str	r3, [sp, #220]	; 0xdc
 800cf36:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cf3a:	9338      	str	r3, [sp, #224]	; 0xe0
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	ed90 7a03 	vldr	s14, [r0, #12]
 800cf42:	edd0 6a01 	vldr	s13, [r0, #4]
 800cf46:	edd0 7a02 	vldr	s15, [r0, #8]
 800cf4a:	9139      	str	r1, [sp, #228]	; 0xe4
 800cf4c:	f88b 31ac 	strb.w	r3, [fp, #428]	; 0x1ac
 800cf50:	2a00      	cmp	r2, #0
 800cf52:	f003 8568 	beq.w	8010a26 <kalman_3gyro.constprop.0+0x3d96>
 800cf56:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cf5a:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800cf5e:	eee7 7a07 	vfma.f32	s15, s14, s14
 800cf62:	eef1 6ae7 	vsqrt.f32	s13, s15
 800cf66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cf6a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800cf6e:	f8cb 31cc 	str.w	r3, [fp, #460]	; 0x1cc
 800cf72:	f8cb 31d0 	str.w	r3, [fp, #464]	; 0x1d0
 800cf76:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800cf7a:	2100      	movs	r1, #0
 800cf7c:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 800cf80:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 800cf84:	f00a fcb6 	bl	80178f4 <memset>
 800cf88:	4b32      	ldr	r3, [pc, #200]	; (800d054 <kalman_3gyro.constprop.0+0x3c4>)
 800cf8a:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 800cf8e:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 800cf92:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 800cf96:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 800cf9a:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 800cf9e:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 800cfa2:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 800cfa6:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 800cfaa:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 800cfae:	9b08      	ldr	r3, [sp, #32]
 800cfb0:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800d058 <kalman_3gyro.constprop.0+0x3c8>
 800cfb4:	ed93 7a01 	vldr	s14, [r3, #4]
 800cfb8:	edd3 5a00 	vldr	s11, [r3]
 800cfbc:	edd3 7a02 	vldr	s15, [r3, #8]
 800cfc0:	ee67 6a07 	vmul.f32	s13, s14, s14
 800cfc4:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800cfc8:	eee7 6aa7 	vfma.f32	s13, s15, s15
 800cfcc:	eef4 6ac6 	vcmpe.f32	s13, s12
 800cfd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfd4:	f101 8127 	bmi.w	800e226 <kalman_3gyro.constprop.0+0x1596>
 800cfd8:	eeb1 9ae6 	vsqrt.f32	s18, s13
 800cfdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfe0:	ee79 6a66 	vsub.f32	s13, s18, s13
 800cfe4:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 800cfe8:	eef0 6ae6 	vabs.f32	s13, s13
 800cfec:	ee76 aaea 	vsub.f32	s21, s13, s21
 800cff0:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 800cff4:	ed93 5a04 	vldr	s10, [r3, #16]
 800cff8:	ed93 3a03 	vldr	s6, [r3, #12]
 800cffc:	edd3 1a05 	vldr	s3, [r3, #20]
 800d000:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800d058 <kalman_3gyro.constprop.0+0x3c8>
 800d004:	9b04      	ldr	r3, [sp, #16]
 800d006:	ed95 ca00 	vldr	s24, [r5]
 800d00a:	ed93 ba00 	vldr	s22, [r3]
 800d00e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d012:	ee86 2a89 	vdiv.f32	s4, s13, s18
 800d016:	f20b 43bc 	addw	r3, fp, #1212	; 0x4bc
 800d01a:	461e      	mov	r6, r3
 800d01c:	f20b 652c 	addw	r5, fp, #1580	; 0x62c
 800d020:	9502      	str	r5, [sp, #8]
 800d022:	f50b 619d 	add.w	r1, fp, #1256	; 0x4e8
 800d026:	f20b 4aec 	addw	sl, fp, #1260	; 0x4ec
 800d02a:	9327      	str	r3, [sp, #156]	; 0x9c
 800d02c:	f50b 6598 	add.w	r5, fp, #1216	; 0x4c0
 800d030:	f50b 639c 	add.w	r3, fp, #1248	; 0x4e0
 800d034:	f20b 44c4 	addw	r4, fp, #1220	; 0x4c4
 800d038:	f20b 40dc 	addw	r0, fp, #1244	; 0x4dc
 800d03c:	f50b 6299 	add.w	r2, fp, #1224	; 0x4c8
 800d040:	9501      	str	r5, [sp, #4]
 800d042:	ee65 6a05 	vmul.f32	s13, s10, s10
 800d046:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800d04a:	eee3 6a03 	vfma.f32	s13, s6, s6
 800d04e:	e009      	b.n	800d064 <kalman_3gyro.constprop.0+0x3d4>
 800d050:	3a9d4952 	.word	0x3a9d4952
 800d054:	40a00000 	.word	0x40a00000
 800d058:	3c23d70a 	.word	0x3c23d70a
 800d05c:	3dcccccd 	.word	0x3dcccccd
 800d060:	4b000000 	.word	0x4b000000
 800d064:	f20b 4ccc 	addw	ip, fp, #1228	; 0x4cc
 800d068:	f20b 45e4 	addw	r5, fp, #1252	; 0x4e4
 800d06c:	ee25 8a82 	vmul.f32	s16, s11, s4
 800d070:	eee1 6aa1 	vfma.f32	s13, s3, s3
 800d074:	950c      	str	r5, [sp, #48]	; 0x30
 800d076:	f50b 69c7 	add.w	r9, fp, #1592	; 0x638
 800d07a:	ee67 fa02 	vmul.f32	s31, s14, s4
 800d07e:	eef4 6ac6 	vcmpe.f32	s13, s12
 800d082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d086:	bf58      	it	pl
 800d088:	eeb1 aae6 	vsqrtpl.f32	s20, s13
 800d08c:	f20b 6e5c 	addw	lr, fp, #1628	; 0x65c
 800d090:	f20b 6534 	addw	r5, fp, #1588	; 0x634
 800d094:	bf48      	it	mi
 800d096:	ed1f aa0f 	vldrmi	s20, [pc, #-60]	; 800d05c <kalman_3gyro.constprop.0+0x3cc>
 800d09a:	ed96 6a00 	vldr	s12, [r6]
 800d09e:	edda 4a00 	vldr	s9, [sl]
 800d0a2:	ed93 fa00 	vldr	s30, [r3]
 800d0a6:	ed90 ea00 	vldr	s28, [r0]
 800d0aa:	edd4 3a00 	vldr	s7, [r4]
 800d0ae:	ed8d 8a2d 	vstr	s16, [sp, #180]	; 0xb4
 800d0b2:	eec4 6a0a 	vdiv.f32	s13, s8, s20
 800d0b6:	f20b 76a4 	addw	r6, fp, #1956	; 0x7a4
 800d0ba:	9617      	str	r6, [sp, #92]	; 0x5c
 800d0bc:	f20b 76bc 	addw	r6, fp, #1980	; 0x7bc
 800d0c0:	961a      	str	r6, [sp, #104]	; 0x68
 800d0c2:	f20b 769c 	addw	r6, fp, #1948	; 0x79c
 800d0c6:	9611      	str	r6, [sp, #68]	; 0x44
 800d0c8:	f50b 66f5 	add.w	r6, fp, #1960	; 0x7a8
 800d0cc:	9618      	str	r6, [sp, #96]	; 0x60
 800d0ce:	9e02      	ldr	r6, [sp, #8]
 800d0d0:	f50b 63c6 	add.w	r3, fp, #1584	; 0x630
 800d0d4:	9303      	str	r3, [sp, #12]
 800d0d6:	f20b 604c 	addw	r0, fp, #1612	; 0x64c
 800d0da:	ee27 2a82 	vmul.f32	s4, s15, s4
 800d0de:	ee23 3a26 	vmul.f32	s6, s6, s13
 800d0e2:	ee25 5a26 	vmul.f32	s10, s10, s13
 800d0e6:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800d0ea:	edd1 6a00 	vldr	s13, [r1]
 800d0ee:	edcd fa2e 	vstr	s31, [sp, #184]	; 0xb8
 800d0f2:	ed8d 3a30 	vstr	s6, [sp, #192]	; 0xc0
 800d0f6:	ed8d 5a31 	vstr	s10, [sp, #196]	; 0xc4
 800d0fa:	edcd 6a05 	vstr	s13, [sp, #20]
 800d0fe:	ed8d 6a06 	vstr	s12, [sp, #24]
 800d102:	edcd 4a09 	vstr	s9, [sp, #36]	; 0x24
 800d106:	ed92 6a00 	vldr	s12, [r2]
 800d10a:	ed8d 2a2f 	vstr	s4, [sp, #188]	; 0xbc
 800d10e:	edcd 1a32 	vstr	s3, [sp, #200]	; 0xc8
 800d112:	edd6 2a00 	vldr	s5, [r6]
 800d116:	eddc 4a00 	vldr	s9, [ip]
 800d11a:	9e01      	ldr	r6, [sp, #4]
 800d11c:	edd0 ca00 	vldr	s25, [r0]
 800d120:	ed96 1a00 	vldr	s2, [r6]
 800d124:	9803      	ldr	r0, [sp, #12]
 800d126:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d128:	edcd 4a0a 	vstr	s9, [sp, #40]	; 0x28
 800d12c:	f50b 6c9e 	add.w	ip, fp, #1264	; 0x4f0
 800d130:	eddc 0a00 	vldr	s1, [ip]
 800d134:	ed96 da00 	vldr	s26, [r6]
 800d138:	edd0 4a00 	vldr	s9, [r0]
 800d13c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d13e:	edcd 4a22 	vstr	s9, [sp, #136]	; 0x88
 800d142:	f50b 6cf8 	add.w	ip, fp, #1984	; 0x7c0
 800d146:	eec4 da0c 	vdiv.f32	s27, s8, s24
 800d14a:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 800d14e:	f20b 7ccc 	addw	ip, fp, #1996	; 0x7cc
 800d152:	f8cd c078 	str.w	ip, [sp, #120]	; 0x78
 800d156:	f50b 6cf4 	add.w	ip, fp, #1952	; 0x7a0
 800d15a:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800d15e:	f20b 7cac 	addw	ip, fp, #1964	; 0x7ac
 800d162:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
 800d166:	f50b 6cf9 	add.w	ip, fp, #1992	; 0x7c8
 800d16a:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
 800d16e:	f20b 7cc4 	addw	ip, fp, #1988	; 0x7c4
 800d172:	f20b 6354 	addw	r3, fp, #1620	; 0x654
 800d176:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 800d17a:	f50b 64cb 	add.w	r4, fp, #1624	; 0x658
 800d17e:	edd6 4a00 	vldr	s9, [r6]
 800d182:	edd9 6a00 	vldr	s13, [r9]
 800d186:	edde ba00 	vldr	s23, [lr]
 800d18a:	ed95 4a00 	vldr	s8, [r5]
 800d18e:	ed94 0a00 	vldr	s0, [r4]
 800d192:	edcd 2a14 	vstr	s5, [sp, #80]	; 0x50
 800d196:	f50b 6cfa 	add.w	ip, fp, #2000	; 0x7d0
 800d19a:	f20b 613c 	addw	r1, fp, #1596	; 0x63c
 800d19e:	f50b 62cc 	add.w	r2, fp, #1632	; 0x660
 800d1a2:	f50b 69ca 	add.w	r9, fp, #1616	; 0x650
 800d1a6:	edd9 ea00 	vldr	s29, [r9]
 800d1aa:	edd1 2a00 	vldr	s5, [r1]
 800d1ae:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
 800d1b2:	edcd ca0c 	vstr	s25, [sp, #48]	; 0x30
 800d1b6:	ed92 1a00 	vldr	s2, [r2]
 800d1ba:	edd3 ca00 	vldr	s25, [r3]
 800d1be:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
 800d1c2:	edcd 4a24 	vstr	s9, [sp, #144]	; 0x90
 800d1c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d1c8:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800d1ca:	edd3 4a00 	vldr	s9, [r3]
 800d1ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1d0:	edcd 4a23 	vstr	s9, [sp, #140]	; 0x8c
 800d1d4:	ee25 5a2f 	vmul.f32	s10, s10, s31
 800d1d8:	edd3 fa00 	vldr	s31, [r3]
 800d1dc:	eef0 4a6f 	vmov.f32	s9, s31
 800d1e0:	edd6 fa00 	vldr	s31, [r6]
 800d1e4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800d1e6:	edcd fa25 	vstr	s31, [sp, #148]	; 0x94
 800d1ea:	eea3 5a08 	vfma.f32	s10, s6, s16
 800d1ee:	ed96 3a00 	vldr	s6, [r6]
 800d1f2:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800d1f4:	ed8d 3a26 	vstr	s6, [sp, #152]	; 0x98
 800d1f8:	ee25 8aad 	vmul.f32	s16, s11, s27
 800d1fc:	eddd 5a06 	vldr	s11, [sp, #24]
 800d200:	edd6 fa00 	vldr	s31, [r6]
 800d204:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800d206:	eeb8 3a00 	vmov.f32	s6, #128	; 0xc0000000 -2.0
 800d20a:	ee95 6a83 	vfnms.f32	s12, s11, s6
 800d20e:	eddd 5a14 	vldr	s11, [sp, #80]	; 0x50
 800d212:	eed5 6a83 	vfnms.f32	s13, s11, s6
 800d216:	eddd 5a26 	vldr	s11, [sp, #152]	; 0x98
 800d21a:	eed5 fa83 	vfnms.f32	s31, s11, s6
 800d21e:	edd8 5a00 	vldr	s11, [r8]
 800d222:	eed5 3a83 	vfnms.f32	s7, s11, s6
 800d226:	eef0 5a44 	vmov.f32	s11, s8
 800d22a:	ed97 4a00 	vldr	s8, [r7]
 800d22e:	ee76 6aae 	vadd.f32	s13, s13, s29
 800d232:	eed4 5a03 	vfnms.f32	s11, s8, s6
 800d236:	eddd ea22 	vldr	s29, [sp, #136]	; 0x88
 800d23a:	ed9d 4a24 	vldr	s8, [sp, #144]	; 0x90
 800d23e:	eede 2a83 	vfnms.f32	s5, s29, s6
 800d242:	ee94 4a83 	vfnms.f32	s8, s9, s6
 800d246:	ee73 3a8e 	vadd.f32	s7, s7, s28
 800d24a:	eddd 4a0a 	vldr	s9, [sp, #40]	; 0x28
 800d24e:	ed9d ea0b 	vldr	s28, [sp, #44]	; 0x2c
 800d252:	eede 4a03 	vfnms.f32	s9, s28, s6
 800d256:	ed9d ea0c 	vldr	s28, [sp, #48]	; 0x30
 800d25a:	ee72 2aac 	vadd.f32	s5, s5, s25
 800d25e:	ee75 5a8e 	vadd.f32	s11, s11, s28
 800d262:	edd6 ca00 	vldr	s25, [r6]
 800d266:	ed9d ea25 	vldr	s28, [sp, #148]	; 0x94
 800d26a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800d26c:	ee34 4a0e 	vadd.f32	s8, s8, s28
 800d270:	ed96 ea00 	vldr	s28, [r6]
 800d274:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800d276:	ee74 4a8d 	vadd.f32	s9, s9, s26
 800d27a:	ed96 da00 	vldr	s26, [r6]
 800d27e:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800d280:	ee7f faac 	vadd.f32	s31, s31, s25
 800d284:	edd6 ca00 	vldr	s25, [r6]
 800d288:	eedd ca03 	vfnms.f32	s25, s26, s6
 800d28c:	ed9d da09 	vldr	s26, [sp, #36]	; 0x24
 800d290:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d292:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 800d296:	eeeb 6a83 	vfma.f32	s13, s23, s6
 800d29a:	eee0 5a03 	vfma.f32	s11, s0, s6
 800d29e:	eddd ba05 	vldr	s23, [sp, #20]
 800d2a2:	ed96 0a00 	vldr	s0, [r6]
 800d2a6:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800d2a8:	ee36 6a0f 	vadd.f32	s12, s12, s30
 800d2ac:	eeee fa03 	vfma.f32	s31, s28, s6
 800d2b0:	eead 6a03 	vfma.f32	s12, s26, s6
 800d2b4:	eeeb 3a83 	vfma.f32	s7, s23, s6
 800d2b8:	eea0 4a03 	vfma.f32	s8, s0, s6
 800d2bc:	eddd ba23 	vldr	s23, [sp, #140]	; 0x8c
 800d2c0:	ed1f 0a9a 	vldr	s0, [pc, #-616]	; 800d05c <kalman_3gyro.constprop.0+0x3cc>
 800d2c4:	eee1 2a03 	vfma.f32	s5, s2, s6
 800d2c8:	ee2c ca00 	vmul.f32	s24, s24, s0
 800d2cc:	ee6b ba80 	vmul.f32	s23, s23, s0
 800d2d0:	ed96 1a00 	vldr	s2, [r6]
 800d2d4:	ee2b 0a00 	vmul.f32	s0, s22, s0
 800d2d8:	eee0 4a83 	vfma.f32	s9, s1, s6
 800d2dc:	ee26 6a0c 	vmul.f32	s12, s12, s24
 800d2e0:	ee6f faab 	vmul.f32	s31, s31, s23
 800d2e4:	ee3c 1a81 	vadd.f32	s2, s25, s2
 800d2e8:	ee60 6a26 	vmul.f32	s13, s0, s13
 800d2ec:	eddc 0a00 	vldr	s1, [ip]
 800d2f0:	ee63 3a8c 	vmul.f32	s7, s7, s24
 800d2f4:	ee24 4a2b 	vmul.f32	s8, s8, s23
 800d2f8:	ee60 5a25 	vmul.f32	s11, s0, s11
 800d2fc:	eea0 1a83 	vfma.f32	s2, s1, s6
 800d300:	ee26 6a06 	vmul.f32	s12, s12, s12
 800d304:	ee6f faaf 	vmul.f32	s31, s31, s31
 800d308:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800d30c:	eea3 6aa3 	vfma.f32	s12, s7, s7
 800d310:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800d314:	eee4 fa04 	vfma.f32	s31, s8, s8
 800d318:	ee64 4a8c 	vmul.f32	s9, s9, s24
 800d31c:	ee21 1a2b 	vmul.f32	s2, s2, s23
 800d320:	ee60 2a22 	vmul.f32	s5, s0, s5
 800d324:	eea4 6aa4 	vfma.f32	s12, s9, s9
 800d328:	eee1 fa01 	vfma.f32	s31, s2, s2
 800d32c:	eee2 6aa2 	vfma.f32	s13, s5, s5
 800d330:	eea1 5a82 	vfma.f32	s10, s3, s4
 800d334:	ed5f 5ab6 	vldr	s11, [pc, #-728]	; 800d060 <kalman_3gyro.constprop.0+0x3d0>
 800d338:	eef0 4ac8 	vabs.f32	s9, s16
 800d33c:	eef4 4ae5 	vcmpe.f32	s9, s11
 800d340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d344:	ee27 ea2d 	vmul.f32	s28, s14, s27
 800d348:	eeb1 dac6 	vsqrt.f32	s26, s12
 800d34c:	eef1 caef 	vsqrt.f32	s25, s31
 800d350:	eef1 bae6 	vsqrt.f32	s23, s13
 800d354:	ee67 daad 	vmul.f32	s27, s15, s27
 800d358:	eeb0 ca45 	vmov.f32	s24, s10
 800d35c:	d517      	bpl.n	800d38e <kalman_3gyro.constprop.0+0x6fe>
 800d35e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d362:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d36a:	f2c1 806f 	blt.w	800e44c <kalman_3gyro.constprop.0+0x17bc>
 800d36e:	ee78 7a27 	vadd.f32	s15, s16, s15
 800d372:	ee17 0a90 	vmov	r0, s15
 800d376:	f7f3 f8e7 	bl	8000548 <__aeabi_f2d>
 800d37a:	ec41 0b10 	vmov	d0, r0, r1
 800d37e:	f008 fbcf 	bl	8015b20 <floor>
 800d382:	ec51 0b10 	vmov	r0, r1, d0
 800d386:	f7f3 fc0f 	bl	8000ba8 <__aeabi_d2f>
 800d38a:	ee08 0a10 	vmov	s16, r0
 800d38e:	ed5f 7acc 	vldr	s15, [pc, #-816]	; 800d060 <kalman_3gyro.constprop.0+0x3d0>
 800d392:	ed8d 8a33 	vstr	s16, [sp, #204]	; 0xcc
 800d396:	eef0 6ace 	vabs.f32	s13, s28
 800d39a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800d39e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3a2:	d517      	bpl.n	800d3d4 <kalman_3gyro.constprop.0+0x744>
 800d3a4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d3a8:	eeb4 eae7 	vcmpe.f32	s28, s15
 800d3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3b0:	f2c1 8040 	blt.w	800e434 <kalman_3gyro.constprop.0+0x17a4>
 800d3b4:	ee7e 7a27 	vadd.f32	s15, s28, s15
 800d3b8:	ee17 0a90 	vmov	r0, s15
 800d3bc:	f7f3 f8c4 	bl	8000548 <__aeabi_f2d>
 800d3c0:	ec41 0b10 	vmov	d0, r0, r1
 800d3c4:	f008 fbac 	bl	8015b20 <floor>
 800d3c8:	ec51 0b10 	vmov	r0, r1, d0
 800d3cc:	f7f3 fbec 	bl	8000ba8 <__aeabi_d2f>
 800d3d0:	ee0e 0a10 	vmov	s28, r0
 800d3d4:	ed5f 7ade 	vldr	s15, [pc, #-888]	; 800d060 <kalman_3gyro.constprop.0+0x3d0>
 800d3d8:	ed8d ea34 	vstr	s28, [sp, #208]	; 0xd0
 800d3dc:	eeb0 7aed 	vabs.f32	s14, s27
 800d3e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d3e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3e8:	d517      	bpl.n	800d41a <kalman_3gyro.constprop.0+0x78a>
 800d3ea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d3ee:	eef4 dae7 	vcmpe.f32	s27, s15
 800d3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3f6:	f2c1 8011 	blt.w	800e41c <kalman_3gyro.constprop.0+0x178c>
 800d3fa:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800d3fe:	ee17 0a90 	vmov	r0, s15
 800d402:	f7f3 f8a1 	bl	8000548 <__aeabi_f2d>
 800d406:	ec41 0b10 	vmov	d0, r0, r1
 800d40a:	f008 fb89 	bl	8015b20 <floor>
 800d40e:	ec51 0b10 	vmov	r0, r1, d0
 800d412:	f7f3 fbc9 	bl	8000ba8 <__aeabi_d2f>
 800d416:	ee0d 0a90 	vmov	s27, r0
 800d41a:	f89b 44b1 	ldrb.w	r4, [fp, #1201]	; 0x4b1
 800d41e:	edcd da35 	vstr	s27, [sp, #212]	; 0xd4
 800d422:	1e61      	subs	r1, r4, #1
 800d424:	b249      	sxtb	r1, r1
 800d426:	2900      	cmp	r1, #0
 800d428:	dd1a      	ble.n	800d460 <kalman_3gyro.constprop.0+0x7d0>
 800d42a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d42e:	1ea0      	subs	r0, r4, #2
 800d430:	0089      	lsls	r1, r1, #2
 800d432:	f50b 6294 	add.w	r2, fp, #1184	; 0x4a0
 800d436:	b2c0      	uxtb	r0, r0
 800d438:	f201 43ac 	addw	r3, r1, #1196	; 0x4ac
 800d43c:	440a      	add	r2, r1
 800d43e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800d442:	445b      	add	r3, fp
 800d444:	eba2 0280 	sub.w	r2, r2, r0, lsl #2
 800d448:	6819      	ldr	r1, [r3, #0]
 800d44a:	6858      	ldr	r0, [r3, #4]
 800d44c:	60d9      	str	r1, [r3, #12]
 800d44e:	6899      	ldr	r1, [r3, #8]
 800d450:	6118      	str	r0, [r3, #16]
 800d452:	6159      	str	r1, [r3, #20]
 800d454:	3b0c      	subs	r3, #12
 800d456:	4293      	cmp	r3, r2
 800d458:	d1f6      	bne.n	800d448 <kalman_3gyro.constprop.0+0x7b8>
 800d45a:	9b04      	ldr	r3, [sp, #16]
 800d45c:	ed93 ba00 	vldr	s22, [r3]
 800d460:	ed88 8a00 	vstr	s16, [r8]
 800d464:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d468:	ee87 8a8b 	vdiv.f32	s16, s15, s22
 800d46c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d46e:	ed83 ea00 	vstr	s28, [r3]
 800d472:	9b01      	ldr	r3, [sp, #4]
 800d474:	eddf 7aa5 	vldr	s15, [pc, #660]	; 800d70c <kalman_3gyro.constprop.0+0xa7c>
 800d478:	edc3 da00 	vstr	s27, [r3]
 800d47c:	f89b 34b0 	ldrb.w	r3, [fp, #1200]	; 0x4b0
 800d480:	3301      	adds	r3, #1
 800d482:	b2db      	uxtb	r3, r3
 800d484:	429c      	cmp	r4, r3
 800d486:	bf28      	it	cs
 800d488:	461c      	movcs	r4, r3
 800d48a:	9b08      	ldr	r3, [sp, #32]
 800d48c:	f88b 44b0 	strb.w	r4, [fp, #1200]	; 0x4b0
 800d490:	edd3 da03 	vldr	s27, [r3, #12]
 800d494:	ed93 ba04 	vldr	s22, [r3, #16]
 800d498:	edd3 6a05 	vldr	s13, [r3, #20]
 800d49c:	ee68 da2d 	vmul.f32	s27, s16, s27
 800d4a0:	ee28 ba0b 	vmul.f32	s22, s16, s22
 800d4a4:	eeb0 7aed 	vabs.f32	s14, s27
 800d4a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d4ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4b0:	ee28 8a26 	vmul.f32	s16, s16, s13
 800d4b4:	d517      	bpl.n	800d4e6 <kalman_3gyro.constprop.0+0x856>
 800d4b6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d4ba:	eef4 dae7 	vcmpe.f32	s27, s15
 800d4be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4c2:	f2c0 879f 	blt.w	800e404 <kalman_3gyro.constprop.0+0x1774>
 800d4c6:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800d4ca:	ee17 0a90 	vmov	r0, s15
 800d4ce:	f7f3 f83b 	bl	8000548 <__aeabi_f2d>
 800d4d2:	ec41 0b10 	vmov	d0, r0, r1
 800d4d6:	f008 fb23 	bl	8015b20 <floor>
 800d4da:	ec51 0b10 	vmov	r0, r1, d0
 800d4de:	f7f3 fb63 	bl	8000ba8 <__aeabi_d2f>
 800d4e2:	ee0d 0a90 	vmov	s27, r0
 800d4e6:	eddf 7a89 	vldr	s15, [pc, #548]	; 800d70c <kalman_3gyro.constprop.0+0xa7c>
 800d4ea:	edcd da33 	vstr	s27, [sp, #204]	; 0xcc
 800d4ee:	eeb0 7acb 	vabs.f32	s14, s22
 800d4f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d4f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4fa:	d517      	bpl.n	800d52c <kalman_3gyro.constprop.0+0x89c>
 800d4fc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d500:	eeb4 bae7 	vcmpe.f32	s22, s15
 800d504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d508:	f2c0 8770 	blt.w	800e3ec <kalman_3gyro.constprop.0+0x175c>
 800d50c:	ee7b 7a27 	vadd.f32	s15, s22, s15
 800d510:	ee17 0a90 	vmov	r0, s15
 800d514:	f7f3 f818 	bl	8000548 <__aeabi_f2d>
 800d518:	ec41 0b10 	vmov	d0, r0, r1
 800d51c:	f008 fb00 	bl	8015b20 <floor>
 800d520:	ec51 0b10 	vmov	r0, r1, d0
 800d524:	f7f3 fb40 	bl	8000ba8 <__aeabi_d2f>
 800d528:	ee0b 0a10 	vmov	s22, r0
 800d52c:	eddf 7a77 	vldr	s15, [pc, #476]	; 800d70c <kalman_3gyro.constprop.0+0xa7c>
 800d530:	ed8d ba34 	vstr	s22, [sp, #208]	; 0xd0
 800d534:	eeb0 7ac8 	vabs.f32	s14, s16
 800d538:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d53c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d540:	d517      	bpl.n	800d572 <kalman_3gyro.constprop.0+0x8e2>
 800d542:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d546:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d54a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d54e:	f2c0 8741 	blt.w	800e3d4 <kalman_3gyro.constprop.0+0x1744>
 800d552:	ee78 7a27 	vadd.f32	s15, s16, s15
 800d556:	ee17 0a90 	vmov	r0, s15
 800d55a:	f7f2 fff5 	bl	8000548 <__aeabi_f2d>
 800d55e:	ec41 0b10 	vmov	d0, r0, r1
 800d562:	f008 fadd 	bl	8015b20 <floor>
 800d566:	ec51 0b10 	vmov	r0, r1, d0
 800d56a:	f7f3 fb1d 	bl	8000ba8 <__aeabi_d2f>
 800d56e:	ee08 0a10 	vmov	s16, r0
 800d572:	f89b 4621 	ldrb.w	r4, [fp, #1569]	; 0x621
 800d576:	ed8d 8a35 	vstr	s16, [sp, #212]	; 0xd4
 800d57a:	1e61      	subs	r1, r4, #1
 800d57c:	b249      	sxtb	r1, r1
 800d57e:	2900      	cmp	r1, #0
 800d580:	dd17      	ble.n	800d5b2 <kalman_3gyro.constprop.0+0x922>
 800d582:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d586:	1ea2      	subs	r2, r4, #2
 800d588:	0089      	lsls	r1, r1, #2
 800d58a:	f50b 60c2 	add.w	r0, fp, #1552	; 0x610
 800d58e:	b2d2      	uxtb	r2, r2
 800d590:	f201 631c 	addw	r3, r1, #1564	; 0x61c
 800d594:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d598:	4401      	add	r1, r0
 800d59a:	445b      	add	r3, fp
 800d59c:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 800d5a0:	681a      	ldr	r2, [r3, #0]
 800d5a2:	6858      	ldr	r0, [r3, #4]
 800d5a4:	60da      	str	r2, [r3, #12]
 800d5a6:	689a      	ldr	r2, [r3, #8]
 800d5a8:	6118      	str	r0, [r3, #16]
 800d5aa:	615a      	str	r2, [r3, #20]
 800d5ac:	3b0c      	subs	r3, #12
 800d5ae:	4299      	cmp	r1, r3
 800d5b0:	d1f6      	bne.n	800d5a0 <kalman_3gyro.constprop.0+0x910>
 800d5b2:	9b02      	ldr	r3, [sp, #8]
 800d5b4:	edc7 da00 	vstr	s27, [r7]
 800d5b8:	ed83 ba00 	vstr	s22, [r3]
 800d5bc:	9b03      	ldr	r3, [sp, #12]
 800d5be:	eddf 7a53 	vldr	s15, [pc, #332]	; 800d70c <kalman_3gyro.constprop.0+0xa7c>
 800d5c2:	ed83 8a00 	vstr	s16, [r3]
 800d5c6:	f89b 3620 	ldrb.w	r3, [fp, #1568]	; 0x620
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	b2db      	uxtb	r3, r3
 800d5ce:	429c      	cmp	r4, r3
 800d5d0:	bf28      	it	cs
 800d5d2:	461c      	movcs	r4, r3
 800d5d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d5d6:	f88b 4620 	strb.w	r4, [fp, #1568]	; 0x620
 800d5da:	ed93 7a00 	vldr	s14, [r3]
 800d5de:	9b08      	ldr	r3, [sp, #32]
 800d5e0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d5e4:	ee86 8a07 	vdiv.f32	s16, s12, s14
 800d5e8:	edd3 da06 	vldr	s27, [r3, #24]
 800d5ec:	ed93 ba07 	vldr	s22, [r3, #28]
 800d5f0:	edd3 6a08 	vldr	s13, [r3, #32]
 800d5f4:	ee68 da2d 	vmul.f32	s27, s16, s27
 800d5f8:	ee28 ba0b 	vmul.f32	s22, s16, s22
 800d5fc:	eeb0 7aed 	vabs.f32	s14, s27
 800d600:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d608:	ee28 8a26 	vmul.f32	s16, s16, s13
 800d60c:	d517      	bpl.n	800d63e <kalman_3gyro.constprop.0+0x9ae>
 800d60e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d612:	eef4 dae7 	vcmpe.f32	s27, s15
 800d616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d61a:	f2c0 86cf 	blt.w	800e3bc <kalman_3gyro.constprop.0+0x172c>
 800d61e:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800d622:	ee17 0a90 	vmov	r0, s15
 800d626:	f7f2 ff8f 	bl	8000548 <__aeabi_f2d>
 800d62a:	ec41 0b10 	vmov	d0, r0, r1
 800d62e:	f008 fa77 	bl	8015b20 <floor>
 800d632:	ec51 0b10 	vmov	r0, r1, d0
 800d636:	f7f3 fab7 	bl	8000ba8 <__aeabi_d2f>
 800d63a:	ee0d 0a90 	vmov	s27, r0
 800d63e:	eddf 7a33 	vldr	s15, [pc, #204]	; 800d70c <kalman_3gyro.constprop.0+0xa7c>
 800d642:	edcd da33 	vstr	s27, [sp, #204]	; 0xcc
 800d646:	eeb0 7acb 	vabs.f32	s14, s22
 800d64a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d64e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d652:	d517      	bpl.n	800d684 <kalman_3gyro.constprop.0+0x9f4>
 800d654:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d658:	eeb4 bae7 	vcmpe.f32	s22, s15
 800d65c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d660:	f2c0 86a0 	blt.w	800e3a4 <kalman_3gyro.constprop.0+0x1714>
 800d664:	ee7b 7a27 	vadd.f32	s15, s22, s15
 800d668:	ee17 0a90 	vmov	r0, s15
 800d66c:	f7f2 ff6c 	bl	8000548 <__aeabi_f2d>
 800d670:	ec41 0b10 	vmov	d0, r0, r1
 800d674:	f008 fa54 	bl	8015b20 <floor>
 800d678:	ec51 0b10 	vmov	r0, r1, d0
 800d67c:	f7f3 fa94 	bl	8000ba8 <__aeabi_d2f>
 800d680:	ee0b 0a10 	vmov	s22, r0
 800d684:	eddf 7a21 	vldr	s15, [pc, #132]	; 800d70c <kalman_3gyro.constprop.0+0xa7c>
 800d688:	ed8d ba34 	vstr	s22, [sp, #208]	; 0xd0
 800d68c:	eeb0 7ac8 	vabs.f32	s14, s16
 800d690:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d698:	d517      	bpl.n	800d6ca <kalman_3gyro.constprop.0+0xa3a>
 800d69a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d69e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d6a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6a6:	f2c0 8671 	blt.w	800e38c <kalman_3gyro.constprop.0+0x16fc>
 800d6aa:	ee78 7a27 	vadd.f32	s15, s16, s15
 800d6ae:	ee17 0a90 	vmov	r0, s15
 800d6b2:	f7f2 ff49 	bl	8000548 <__aeabi_f2d>
 800d6b6:	ec41 0b10 	vmov	d0, r0, r1
 800d6ba:	f008 fa31 	bl	8015b20 <floor>
 800d6be:	ec51 0b10 	vmov	r0, r1, d0
 800d6c2:	f7f3 fa71 	bl	8000ba8 <__aeabi_d2f>
 800d6c6:	ee08 0a10 	vmov	s16, r0
 800d6ca:	f89b 4791 	ldrb.w	r4, [fp, #1937]	; 0x791
 800d6ce:	ed8d 8a35 	vstr	s16, [sp, #212]	; 0xd4
 800d6d2:	1e63      	subs	r3, r4, #1
 800d6d4:	b25b      	sxtb	r3, r3
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	dd1c      	ble.n	800d714 <kalman_3gyro.constprop.0+0xa84>
 800d6da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d6de:	1ea2      	subs	r2, r4, #2
 800d6e0:	0099      	lsls	r1, r3, #2
 800d6e2:	f50b 60f0 	add.w	r0, fp, #1920	; 0x780
 800d6e6:	b2d2      	uxtb	r2, r2
 800d6e8:	f201 738c 	addw	r3, r1, #1932	; 0x78c
 800d6ec:	4408      	add	r0, r1
 800d6ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d6f2:	445b      	add	r3, fp
 800d6f4:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 800d6f8:	681a      	ldr	r2, [r3, #0]
 800d6fa:	6859      	ldr	r1, [r3, #4]
 800d6fc:	60da      	str	r2, [r3, #12]
 800d6fe:	689a      	ldr	r2, [r3, #8]
 800d700:	6119      	str	r1, [r3, #16]
 800d702:	615a      	str	r2, [r3, #20]
 800d704:	3b0c      	subs	r3, #12
 800d706:	4283      	cmp	r3, r0
 800d708:	d1f6      	bne.n	800d6f8 <kalman_3gyro.constprop.0+0xa68>
 800d70a:	e003      	b.n	800d714 <kalman_3gyro.constprop.0+0xa84>
 800d70c:	4b000000 	.word	0x4b000000
 800d710:	00000000 	.word	0x00000000
 800d714:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d716:	edc3 da00 	vstr	s27, [r3]
 800d71a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d71c:	ed83 ba00 	vstr	s22, [r3]
 800d720:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d722:	ed83 8a00 	vstr	s16, [r3]
 800d726:	f89b 3790 	ldrb.w	r3, [fp, #1936]	; 0x790
 800d72a:	3301      	adds	r3, #1
 800d72c:	b2db      	uxtb	r3, r3
 800d72e:	429c      	cmp	r4, r3
 800d730:	bf28      	it	cs
 800d732:	461c      	movcs	r4, r3
 800d734:	f88b 4790 	strb.w	r4, [fp, #1936]	; 0x790
 800d738:	f50b 7347 	add.w	r3, fp, #796	; 0x31c
 800d73c:	aa54      	add	r2, sp, #336	; 0x150
 800d73e:	a92d      	add	r1, sp, #180	; 0xb4
 800d740:	a830      	add	r0, sp, #192	; 0xc0
 800d742:	461c      	mov	r4, r3
 800d744:	9314      	str	r3, [sp, #80]	; 0x50
 800d746:	f7fe fa27 	bl	800bb98 <getRotationMatrix>
 800d74a:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d74e:	f50b 774f 	add.w	r7, fp, #828	; 0x33c
 800d752:	6820      	ldr	r0, [r4, #0]
 800d754:	6861      	ldr	r1, [r4, #4]
 800d756:	68a2      	ldr	r2, [r4, #8]
 800d758:	68e3      	ldr	r3, [r4, #12]
 800d75a:	4635      	mov	r5, r6
 800d75c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d75e:	3410      	adds	r4, #16
 800d760:	42bc      	cmp	r4, r7
 800d762:	462e      	mov	r6, r5
 800d764:	d1f5      	bne.n	800d752 <kalman_3gyro.constprop.0+0xac2>
 800d766:	eddb 7ac7 	vldr	s15, [fp, #796]	; 0x31c
 800d76a:	ed9b 7ac8 	vldr	s14, [fp, #800]	; 0x320
 800d76e:	6820      	ldr	r0, [r4, #0]
 800d770:	6028      	str	r0, [r5, #0]
 800d772:	eef0 7ae7 	vabs.f32	s15, s15
 800d776:	eeb0 7ac7 	vabs.f32	s14, s14
 800d77a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d782:	f140 85a4 	bpl.w	800e2ce <kalman_3gyro.constprop.0+0x163e>
 800d786:	2303      	movs	r3, #3
 800d788:	2706      	movs	r7, #6
 800d78a:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800d78e:	2604      	movs	r6, #4
 800d790:	2400      	movs	r4, #0
 800d792:	eef0 7a47 	vmov.f32	s15, s14
 800d796:	4632      	mov	r2, r6
 800d798:	46a2      	mov	sl, r4
 800d79a:	2107      	movs	r1, #7
 800d79c:	f04f 0c01 	mov.w	ip, #1
 800d7a0:	ed9b 7ac9 	vldr	s14, [fp, #804]	; 0x324
 800d7a4:	eeb0 7ac7 	vabs.f32	s14, s14
 800d7a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d7ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7b0:	f340 85ae 	ble.w	800e310 <kalman_3gyro.constprop.0+0x1680>
 800d7b4:	2304      	movs	r3, #4
 800d7b6:	2007      	movs	r0, #7
 800d7b8:	2108      	movs	r1, #8
 800d7ba:	9301      	str	r3, [sp, #4]
 800d7bc:	461c      	mov	r4, r3
 800d7be:	9002      	str	r0, [sp, #8]
 800d7c0:	460a      	mov	r2, r1
 800d7c2:	2306      	movs	r3, #6
 800d7c4:	2003      	movs	r0, #3
 800d7c6:	2605      	movs	r6, #5
 800d7c8:	f04f 0800 	mov.w	r8, #0
 800d7cc:	f04f 0a01 	mov.w	sl, #1
 800d7d0:	f04f 0c02 	mov.w	ip, #2
 800d7d4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d7d6:	442c      	add	r4, r5
 800d7d8:	442a      	add	r2, r5
 800d7da:	edd4 6a00 	vldr	s13, [r4]
 800d7de:	ed92 7a00 	vldr	s14, [r2]
 800d7e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7e6:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 800d7ea:	eb02 048a 	add.w	r4, r2, sl, lsl #2
 800d7ee:	eb02 0988 	add.w	r9, r2, r8, lsl #2
 800d7f2:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800d7f6:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 800d7fa:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800d7fe:	970c      	str	r7, [sp, #48]	; 0x30
 800d800:	9f01      	ldr	r7, [sp, #4]
 800d802:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 800d806:	00b6      	lsls	r6, r6, #2
 800d808:	960a      	str	r6, [sp, #40]	; 0x28
 800d80a:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d80e:	eb06 0e80 	add.w	lr, r6, r0, lsl #2
 800d812:	edc4 7a00 	vstr	s15, [r4]
 800d816:	edd2 7a00 	vldr	s15, [r2]
 800d81a:	ed99 7a00 	vldr	s14, [r9]
 800d81e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d822:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800d826:	9204      	str	r2, [sp, #16]
 800d828:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800d82c:	9205      	str	r2, [sp, #20]
 800d82e:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800d832:	9209      	str	r2, [sp, #36]	; 0x24
 800d834:	00ba      	lsls	r2, r7, #2
 800d836:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800d838:	9206      	str	r2, [sp, #24]
 800d83a:	0080      	lsls	r0, r0, #2
 800d83c:	9003      	str	r0, [sp, #12]
 800d83e:	eb06 0081 	add.w	r0, r6, r1, lsl #2
 800d842:	0089      	lsls	r1, r1, #2
 800d844:	910b      	str	r1, [sp, #44]	; 0x2c
 800d846:	edc9 6a00 	vstr	s13, [r9]
 800d84a:	ed94 6a00 	vldr	s12, [r4]
 800d84e:	ed97 7a00 	vldr	s14, [r7]
 800d852:	edd5 7a00 	vldr	s15, [r5]
 800d856:	9902      	ldr	r1, [sp, #8]
 800d858:	9a02      	ldr	r2, [sp, #8]
 800d85a:	eee6 7a47 	vfms.f32	s15, s12, s14
 800d85e:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 800d862:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800d866:	0092      	lsls	r2, r2, #2
 800d868:	edc5 7a00 	vstr	s15, [r5]
 800d86c:	ed97 7a00 	vldr	s14, [r7]
 800d870:	edde 7a00 	vldr	s15, [lr]
 800d874:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d878:	009b      	lsls	r3, r3, #2
 800d87a:	edce 7a00 	vstr	s15, [lr]
 800d87e:	edd0 5a00 	vldr	s11, [r0]
 800d882:	ed91 7a00 	vldr	s14, [r1]
 800d886:	eea6 7a65 	vfms.f32	s14, s12, s11
 800d88a:	eef0 7ae7 	vabs.f32	s15, s15
 800d88e:	ed81 7a00 	vstr	s14, [r1]
 800d892:	ed90 6a00 	vldr	s12, [r0]
 800d896:	ed96 7a00 	vldr	s14, [r6]
 800d89a:	eea6 7ac6 	vfms.f32	s14, s13, s12
 800d89e:	ed86 7a00 	vstr	s14, [r6]
 800d8a2:	ed95 7a00 	vldr	s14, [r5]
 800d8a6:	eeb0 7ac7 	vabs.f32	s14, s14
 800d8aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8b2:	dd10      	ble.n	800d8d6 <kalman_3gyro.constprop.0+0xc46>
 800d8b4:	4652      	mov	r2, sl
 800d8b6:	46c2      	mov	sl, r8
 800d8b8:	4690      	mov	r8, r2
 800d8ba:	461a      	mov	r2, r3
 800d8bc:	9b01      	ldr	r3, [sp, #4]
 800d8be:	9902      	ldr	r1, [sp, #8]
 800d8c0:	9803      	ldr	r0, [sp, #12]
 800d8c2:	9006      	str	r0, [sp, #24]
 800d8c4:	009b      	lsls	r3, r3, #2
 800d8c6:	9303      	str	r3, [sp, #12]
 800d8c8:	008b      	lsls	r3, r1, #2
 800d8ca:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800d8ce:	9105      	str	r1, [sp, #20]
 800d8d0:	ea4f 018a 	mov.w	r1, sl, lsl #2
 800d8d4:	9104      	str	r1, [sp, #16]
 800d8d6:	9903      	ldr	r1, [sp, #12]
 800d8d8:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
 800d8dc:	4401      	add	r1, r0
 800d8de:	460c      	mov	r4, r1
 800d8e0:	9906      	ldr	r1, [sp, #24]
 800d8e2:	ed94 7a00 	vldr	s14, [r4]
 800d8e6:	4401      	add	r1, r0
 800d8e8:	edd1 7a00 	vldr	s15, [r1]
 800d8ec:	ee87 3a27 	vdiv.f32	s6, s14, s15
 800d8f0:	4608      	mov	r0, r1
 800d8f2:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800d8f6:	440a      	add	r2, r1
 800d8f8:	440b      	add	r3, r1
 800d8fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d8fc:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 800d900:	4429      	add	r1, r5
 800d902:	460d      	mov	r5, r1
 800d904:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d906:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d90a:	4431      	add	r1, r6
 800d90c:	468e      	mov	lr, r1
 800d90e:	ed84 3a00 	vstr	s6, [r4]
 800d912:	ed92 7a00 	vldr	s14, [r2]
 800d916:	edd3 7a00 	vldr	s15, [r3]
 800d91a:	9904      	ldr	r1, [sp, #16]
 800d91c:	eee3 7a47 	vfms.f32	s15, s6, s14
 800d920:	f20d 47d4 	addw	r7, sp, #1236	; 0x4d4
 800d924:	f50d 66f9 	add.w	r6, sp, #1992	; 0x7c8
 800d928:	440e      	add	r6, r1
 800d92a:	1879      	adds	r1, r7, r1
 800d92c:	edc3 7a00 	vstr	s15, [r3]
 800d930:	9101      	str	r1, [sp, #4]
 800d932:	9b05      	ldr	r3, [sp, #20]
 800d934:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d936:	edd2 0a00 	vldr	s1, [r2]
 800d93a:	ed95 1a00 	vldr	s2, [r5]
 800d93e:	ed9e 2a00 	vldr	s4, [lr]
 800d942:	f5a6 66cf 	sub.w	r6, r6, #1656	; 0x678
 800d946:	edd6 6a00 	vldr	s13, [r6]
 800d94a:	f50d 66f9 	add.w	r6, sp, #1992	; 0x7c8
 800d94e:	1874      	adds	r4, r6, r1
 800d950:	18f7      	adds	r7, r6, r3
 800d952:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d956:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 800d95a:	eb06 0903 	add.w	r9, r6, r3
 800d95e:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 800d962:	ee82 0aa7 	vdiv.f32	s0, s5, s15
 800d966:	eb03 068c 	add.w	r6, r3, ip, lsl #2
 800d96a:	4633      	mov	r3, r6
 800d96c:	f5a4 64cf 	sub.w	r4, r4, #1656	; 0x678
 800d970:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800d974:	f20d 4cd4 	addw	ip, sp, #1236	; 0x4d4
 800d978:	448c      	add	ip, r1
 800d97a:	9901      	ldr	r1, [sp, #4]
 800d97c:	f5a7 67cf 	sub.w	r7, r7, #1656	; 0x678
 800d980:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 800d984:	ed94 7a00 	vldr	s14, [r4]
 800d988:	ed93 6a00 	vldr	s12, [r3]
 800d98c:	edd0 7a00 	vldr	s15, [r0]
 800d990:	ed99 8a00 	vldr	s16, [r9]
 800d994:	ed91 ba00 	vldr	s22, [r1]
 800d998:	ed97 4a00 	vldr	s8, [r7]
 800d99c:	edd6 4a00 	vldr	s9, [r6]
 800d9a0:	eddc da00 	vldr	s27, [ip]
 800d9a4:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 800d9a8:	f50d 64f9 	add.w	r4, sp, #1992	; 0x7c8
 800d9ac:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 800d9b0:	eb03 0288 	add.w	r2, r3, r8, lsl #2
 800d9b4:	46a2      	mov	sl, r4
 800d9b6:	4613      	mov	r3, r2
 800d9b8:	eec2 1aa7 	vdiv.f32	s3, s5, s15
 800d9bc:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 800d9c0:	f5aa 6acc 	sub.w	sl, sl, #1632	; 0x660
 800d9c4:	f2a2 626c 	subw	r2, r2, #1644	; 0x66c
 800d9c8:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800d9cc:	eeeb 6a47 	vfms.f32	s13, s22, s14
 800d9d0:	eea8 4a47 	vfms.f32	s8, s16, s14
 800d9d4:	ed94 5a00 	vldr	s10, [r4]
 800d9d8:	edda 3a00 	vldr	s7, [sl]
 800d9dc:	edd2 5a00 	vldr	s11, [r2]
 800d9e0:	edd3 7a00 	vldr	s15, [r3]
 800d9e4:	eeab 5a64 	vfms.f32	s10, s22, s9
 800d9e8:	eee8 5a64 	vfms.f32	s11, s16, s9
 800d9ec:	eee6 3a4b 	vfms.f32	s7, s12, s22
 800d9f0:	eee6 7a48 	vfms.f32	s15, s12, s16
 800d9f4:	eea6 4ac3 	vfms.f32	s8, s13, s6
 800d9f8:	ee82 8aad 	vdiv.f32	s16, s5, s27
 800d9fc:	eee3 5a45 	vfms.f32	s11, s6, s10
 800da00:	eee3 7a63 	vfms.f32	s15, s6, s7
 800da04:	ee20 4a04 	vmul.f32	s8, s0, s8
 800da08:	ee60 5a25 	vmul.f32	s11, s0, s11
 800da0c:	ee67 7a80 	vmul.f32	s15, s15, s0
 800da10:	eee0 6ac4 	vfms.f32	s13, s1, s8
 800da14:	eea0 5ae5 	vfms.f32	s10, s1, s11
 800da18:	eee7 3ae0 	vfms.f32	s7, s15, s1
 800da1c:	eea1 7a44 	vfms.f32	s14, s2, s8
 800da20:	ee61 6aa6 	vmul.f32	s13, s3, s13
 800da24:	eee1 4a65 	vfms.f32	s9, s2, s11
 800da28:	eea7 6ac1 	vfms.f32	s12, s15, s2
 800da2c:	ee21 5a85 	vmul.f32	s10, s3, s10
 800da30:	eea2 7a66 	vfms.f32	s14, s4, s13
 800da34:	ee63 1aa1 	vmul.f32	s3, s7, s3
 800da38:	eee2 4a45 	vfms.f32	s9, s4, s10
 800da3c:	eea1 6ac2 	vfms.f32	s12, s3, s4
 800da40:	ee28 7a07 	vmul.f32	s14, s16, s14
 800da44:	ee37 3a85 	vadd.f32	s6, s15, s10
 800da48:	ee68 4a24 	vmul.f32	s9, s16, s9
 800da4c:	ee26 8a08 	vmul.f32	s16, s12, s16
 800da50:	ee37 6a43 	vsub.f32	s12, s14, s6
 800da54:	eeff 3a00 	vmov.f32	s7, #240	; 0xbf800000 -1.0
 800da58:	eeb4 6ae3 	vcmpe.f32	s12, s7
 800da5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da60:	ed8d 4a4d 	vstr	s8, [sp, #308]	; 0x134
 800da64:	edcd 6a4c 	vstr	s13, [sp, #304]	; 0x130
 800da68:	edcd 5a50 	vstr	s11, [sp, #320]	; 0x140
 800da6c:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800da70:	bfc8      	it	gt
 800da72:	ee76 2a22 	vaddgt.f32	s5, s12, s5
 800da76:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800da7a:	bfcc      	ite	gt
 800da7c:	eef1 3ae2 	vsqrtgt.f32	s7, s5
 800da80:	ed5f 3add 	vldrle	s7, [pc, #-884]	; 800d710 <kalman_3gyro.constprop.0+0xa80>
 800da84:	ed8d 7a4b 	vstr	s14, [sp, #300]	; 0x12c
 800da88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da8c:	edcd 4a4e 	vstr	s9, [sp, #312]	; 0x138
 800da90:	ed8d 5a4f 	vstr	s10, [sp, #316]	; 0x13c
 800da94:	ed8d 8a51 	vstr	s16, [sp, #324]	; 0x144
 800da98:	edcd 1a52 	vstr	s3, [sp, #328]	; 0x148
 800da9c:	edcd 7a53 	vstr	s15, [sp, #332]	; 0x14c
 800daa0:	f100 84e4 	bmi.w	800e46c <kalman_3gyro.constprop.0+0x17dc>
 800daa4:	bfd8      	it	le
 800daa6:	ee63 3aa5 	vmulle.f32	s7, s7, s11
 800daaa:	ee37 6a87 	vadd.f32	s12, s15, s14
 800daae:	eebf 3a00 	vmov.f32	s6, #240	; 0xbf800000 -1.0
 800dab2:	ee35 6a46 	vsub.f32	s12, s10, s12
 800dab6:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800daba:	eeb4 6ac3 	vcmpe.f32	s12, s6
 800dabe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dac2:	ee63 5aa5 	vmul.f32	s11, s7, s11
 800dac6:	ee38 4a44 	vsub.f32	s8, s16, s8
 800daca:	bf84      	itt	hi
 800dacc:	eef7 3a00 	vmovhi.f32	s7, #112	; 0x3f800000  1.0
 800dad0:	ee36 6a23 	vaddhi.f32	s12, s12, s7
 800dad4:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
 800dad8:	bf8c      	ite	hi
 800dada:	eef1 3ac6 	vsqrthi.f32	s7, s12
 800dade:	eddf 3ae0 	vldrls	s7, [pc, #896]	; 800de60 <kalman_3gyro.constprop.0+0x11d0>
 800dae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dae6:	f100 84bd 	bmi.w	800e464 <kalman_3gyro.constprop.0+0x17d4>
 800daea:	bfd8      	it	le
 800daec:	ee63 3a84 	vmulle.f32	s7, s7, s8
 800daf0:	ee37 7a05 	vadd.f32	s14, s14, s10
 800daf4:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800daf8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dafc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800db00:	eef4 7ac7 	vcmpe.f32	s15, s14
 800db04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db08:	bf84      	itt	hi
 800db0a:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 800db0e:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 800db12:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800db16:	bf8c      	ite	hi
 800db18:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 800db1c:	ed9f 7ad0 	vldrls	s14, [pc, #832]	; 800de60 <kalman_3gyro.constprop.0+0x11d0>
 800db20:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800db24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db28:	ee63 3a86 	vmul.f32	s7, s7, s12
 800db2c:	f102 8399 	bmi.w	8010262 <kalman_3gyro.constprop.0+0x35d2>
 800db30:	bfd8      	it	le
 800db32:	ee27 7a26 	vmulle.f32	s14, s14, s13
 800db36:	f89b 2341 	ldrb.w	r2, [fp, #833]	; 0x341
 800db3a:	1e53      	subs	r3, r2, #1
 800db3c:	b25b      	sxtb	r3, r3
 800db3e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800db42:	2b00      	cmp	r3, #0
 800db44:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db48:	dd1c      	ble.n	800db84 <kalman_3gyro.constprop.0+0xef4>
 800db4a:	3a02      	subs	r2, #2
 800db4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800db50:	b2d2      	uxtb	r2, r2
 800db52:	f1ab 000c 	sub.w	r0, fp, #12
 800db56:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800db5a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800db5e:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 800db62:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800db66:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800db6a:	f8d3 1340 	ldr.w	r1, [r3, #832]	; 0x340
 800db6e:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
 800db72:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 800db76:	f8c3 134c 	str.w	r1, [r3, #844]	; 0x34c
 800db7a:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
 800db7e:	3b0c      	subs	r3, #12
 800db80:	4283      	cmp	r3, r0
 800db82:	d1f0      	bne.n	800db66 <kalman_3gyro.constprop.0+0xed6>
 800db84:	eddd 6a07 	vldr	s13, [sp, #28]
 800db88:	4ab6      	ldr	r2, [pc, #728]	; (800de64 <kalman_3gyro.constprop.0+0x11d4>)
 800db8a:	4bb7      	ldr	r3, [pc, #732]	; (800de68 <kalman_3gyro.constprop.0+0x11d8>)
 800db8c:	ed92 8a00 	vldr	s16, [r2]
 800db90:	ed93 ba00 	vldr	s22, [r3]
 800db94:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
 800db98:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800db9c:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800dba0:	f20d 214b 	addw	r1, sp, #587	; 0x24b
 800dba4:	f1c1 0101 	rsb	r1, r1, #1
 800dba8:	910c      	str	r1, [sp, #48]	; 0x30
 800dbaa:	a92d      	add	r1, sp, #180	; 0xb4
 800dbac:	e9cd b10a 	strd	fp, r1, [sp, #40]	; 0x28
 800dbb0:	9123      	str	r1, [sp, #140]	; 0x8c
 800dbb2:	2100      	movs	r1, #0
 800dbb4:	9109      	str	r1, [sp, #36]	; 0x24
 800dbb6:	f50d 7913 	add.w	r9, sp, #588	; 0x24c
 800dbba:	f50d 7a64 	add.w	sl, sp, #912	; 0x390
 800dbbe:	ee75 5aa5 	vadd.f32	s11, s11, s11
 800dbc2:	ee73 7aa3 	vadd.f32	s15, s7, s7
 800dbc6:	ee37 7a07 	vadd.f32	s14, s14, s14
 800dbca:	ee65 5aa6 	vmul.f32	s11, s11, s13
 800dbce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dbd2:	ee27 7a26 	vmul.f32	s14, s14, s13
 800dbd6:	edcb 5ad2 	vstr	s11, [fp, #840]	; 0x348
 800dbda:	edcb 7ad3 	vstr	s15, [fp, #844]	; 0x34c
 800dbde:	ed8b 7ad4 	vstr	s14, [fp, #848]	; 0x350
 800dbe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dbe6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800dbe8:	3301      	adds	r3, #1
 800dbea:	9309      	str	r3, [sp, #36]	; 0x24
 800dbec:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800dbf0:	f20d 234b 	addw	r3, sp, #587	; 0x24b
 800dbf4:	18e0      	adds	r0, r4, r3
 800dbf6:	f803 0f01 	strb.w	r0, [r3, #1]!
 800dbfa:	f8d2 0348 	ldr.w	r0, [r2, #840]	; 0x348
 800dbfe:	f841 0b04 	str.w	r0, [r1], #4
 800dc02:	f20d 2069 	addw	r0, sp, #617	; 0x269
 800dc06:	4298      	cmp	r0, r3
 800dc08:	f102 020c 	add.w	r2, r2, #12
 800dc0c:	d1f2      	bne.n	800dbf4 <kalman_3gyro.constprop.0+0xf64>
 800dc0e:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 800dc12:	ed93 7a00 	vldr	s14, [r3]
 800dc16:	f50d 639b 	add.w	r3, sp, #1240	; 0x4d8
 800dc1a:	edd3 7a00 	vldr	s15, [r3]
 800dc1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dc22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc26:	bf84      	itt	hi
 800dc28:	f44f 7381 	movhi.w	r3, #258	; 0x102
 800dc2c:	f8a9 3000 	strhhi.w	r3, [r9]
 800dc30:	f20d 43dc 	addw	r3, sp, #1244	; 0x4dc
 800dc34:	ed93 7a00 	vldr	s14, [r3]
 800dc38:	f50d 639c 	add.w	r3, sp, #1248	; 0x4e0
 800dc3c:	edd3 7a00 	vldr	s15, [r3]
 800dc40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dc44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc48:	bf84      	itt	hi
 800dc4a:	f44f 7341 	movhi.w	r3, #772	; 0x304
 800dc4e:	f8a9 3002 	strhhi.w	r3, [r9, #2]
 800dc52:	f20d 43e4 	addw	r3, sp, #1252	; 0x4e4
 800dc56:	ed93 7a00 	vldr	s14, [r3]
 800dc5a:	f50d 639d 	add.w	r3, sp, #1256	; 0x4e8
 800dc5e:	edd3 7a00 	vldr	s15, [r3]
 800dc62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dc66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc6a:	bf84      	itt	hi
 800dc6c:	f240 5306 	movwhi	r3, #1286	; 0x506
 800dc70:	f8a9 3004 	strhhi.w	r3, [r9, #4]
 800dc74:	f20d 43ec 	addw	r3, sp, #1260	; 0x4ec
 800dc78:	ed93 7a00 	vldr	s14, [r3]
 800dc7c:	f50d 639e 	add.w	r3, sp, #1264	; 0x4f0
 800dc80:	edd3 7a00 	vldr	s15, [r3]
 800dc84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dc88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc8c:	bf84      	itt	hi
 800dc8e:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 800dc92:	f8a9 3006 	strhhi.w	r3, [r9, #6]
 800dc96:	f20d 43f4 	addw	r3, sp, #1268	; 0x4f4
 800dc9a:	ed93 7a00 	vldr	s14, [r3]
 800dc9e:	f50d 639f 	add.w	r3, sp, #1272	; 0x4f8
 800dca2:	edd3 7a00 	vldr	s15, [r3]
 800dca6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dcaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcae:	bf84      	itt	hi
 800dcb0:	f640 130a 	movwhi	r3, #2314	; 0x90a
 800dcb4:	f8a9 3008 	strhhi.w	r3, [r9, #8]
 800dcb8:	f20d 43fc 	addw	r3, sp, #1276	; 0x4fc
 800dcbc:	ed93 7a00 	vldr	s14, [r3]
 800dcc0:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 800dcc4:	edd3 7a00 	vldr	s15, [r3]
 800dcc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcd0:	bf84      	itt	hi
 800dcd2:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 800dcd6:	f8a9 300a 	strhhi.w	r3, [r9, #10]
 800dcda:	f20d 5304 	addw	r3, sp, #1284	; 0x504
 800dcde:	ed93 7a00 	vldr	s14, [r3]
 800dce2:	f50d 63a1 	add.w	r3, sp, #1288	; 0x508
 800dce6:	edd3 7a00 	vldr	s15, [r3]
 800dcea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dcee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcf2:	bf84      	itt	hi
 800dcf4:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 800dcf8:	f8a9 300c 	strhhi.w	r3, [r9, #12]
 800dcfc:	f20d 530c 	addw	r3, sp, #1292	; 0x50c
 800dd00:	ed93 7a00 	vldr	s14, [r3]
 800dd04:	f50d 63a2 	add.w	r3, sp, #1296	; 0x510
 800dd08:	edd3 7a00 	vldr	s15, [r3]
 800dd0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd14:	bf84      	itt	hi
 800dd16:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 800dd1a:	f8a9 300e 	strhhi.w	r3, [r9, #14]
 800dd1e:	f20d 5314 	addw	r3, sp, #1300	; 0x514
 800dd22:	ed93 7a00 	vldr	s14, [r3]
 800dd26:	f50d 63a3 	add.w	r3, sp, #1304	; 0x518
 800dd2a:	edd3 7a00 	vldr	s15, [r3]
 800dd2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd36:	bf84      	itt	hi
 800dd38:	f241 1312 	movwhi	r3, #4370	; 0x1112
 800dd3c:	f8a9 3010 	strhhi.w	r3, [r9, #16]
 800dd40:	f20d 531c 	addw	r3, sp, #1308	; 0x51c
 800dd44:	ed93 7a00 	vldr	s14, [r3]
 800dd48:	f50d 63a4 	add.w	r3, sp, #1312	; 0x520
 800dd4c:	edd3 7a00 	vldr	s15, [r3]
 800dd50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd58:	bf84      	itt	hi
 800dd5a:	f241 3314 	movwhi	r3, #4884	; 0x1314
 800dd5e:	f8a9 3012 	strhhi.w	r3, [r9, #18]
 800dd62:	f20d 5324 	addw	r3, sp, #1316	; 0x524
 800dd66:	ed93 7a00 	vldr	s14, [r3]
 800dd6a:	f50d 63a5 	add.w	r3, sp, #1320	; 0x528
 800dd6e:	edd3 7a00 	vldr	s15, [r3]
 800dd72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd7a:	bf84      	itt	hi
 800dd7c:	f241 5316 	movwhi	r3, #5398	; 0x1516
 800dd80:	f8a9 3014 	strhhi.w	r3, [r9, #20]
 800dd84:	f20d 532c 	addw	r3, sp, #1324	; 0x52c
 800dd88:	ed93 7a00 	vldr	s14, [r3]
 800dd8c:	f50d 63a6 	add.w	r3, sp, #1328	; 0x530
 800dd90:	edd3 7a00 	vldr	s15, [r3]
 800dd94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd9c:	bf84      	itt	hi
 800dd9e:	f241 7318 	movwhi	r3, #5912	; 0x1718
 800dda2:	f8a9 3016 	strhhi.w	r3, [r9, #22]
 800dda6:	f20d 5334 	addw	r3, sp, #1332	; 0x534
 800ddaa:	ed93 7a00 	vldr	s14, [r3]
 800ddae:	f50d 63a7 	add.w	r3, sp, #1336	; 0x538
 800ddb2:	edd3 7a00 	vldr	s15, [r3]
 800ddb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ddba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddbe:	bf84      	itt	hi
 800ddc0:	f641 131a 	movwhi	r3, #6426	; 0x191a
 800ddc4:	f8a9 3018 	strhhi.w	r3, [r9, #24]
 800ddc8:	f20d 533c 	addw	r3, sp, #1340	; 0x53c
 800ddcc:	ed93 7a00 	vldr	s14, [r3]
 800ddd0:	f50d 63a8 	add.w	r3, sp, #1344	; 0x540
 800ddd4:	edd3 7a00 	vldr	s15, [r3]
 800ddd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dde0:	bf84      	itt	hi
 800dde2:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 800dde6:	f8a9 301a 	strhhi.w	r3, [r9, #26]
 800ddea:	f20d 5344 	addw	r3, sp, #1348	; 0x544
 800ddee:	ed93 7a00 	vldr	s14, [r3]
 800ddf2:	f50d 63a9 	add.w	r3, sp, #1352	; 0x548
 800ddf6:	edd3 7a00 	vldr	s15, [r3]
 800ddfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ddfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de02:	bf84      	itt	hi
 800de04:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 800de08:	f8a9 301c 	strhhi.w	r3, [r9, #28]
 800de0c:	221e      	movs	r2, #30
 800de0e:	2101      	movs	r1, #1
 800de10:	4650      	mov	r0, sl
 800de12:	f009 fd6f 	bl	80178f4 <memset>
 800de16:	2304      	movs	r3, #4
 800de18:	9307      	str	r3, [sp, #28]
 800de1a:	2302      	movs	r3, #2
 800de1c:	9305      	str	r3, [sp, #20]
 800de1e:	9b05      	ldr	r3, [sp, #20]
 800de20:	9306      	str	r3, [sp, #24]
 800de22:	1c5f      	adds	r7, r3, #1
 800de24:	005b      	lsls	r3, r3, #1
 800de26:	9305      	str	r3, [sp, #20]
 800de28:	f04f 0b01 	mov.w	fp, #1
 800de2c:	9b05      	ldr	r3, [sp, #20]
 800de2e:	f8cd b004 	str.w	fp, [sp, #4]
 800de32:	445b      	add	r3, fp
 800de34:	2b1f      	cmp	r3, #31
 800de36:	bfa8      	it	ge
 800de38:	231f      	movge	r3, #31
 800de3a:	465a      	mov	r2, fp
 800de3c:	eba3 0802 	sub.w	r8, r3, r2
 800de40:	f1b8 0f00 	cmp.w	r8, #0
 800de44:	469b      	mov	fp, r3
 800de46:	f107 35ff 	add.w	r5, r7, #4294967295
 800de4a:	dd44      	ble.n	800ded6 <kalman_3gyro.constprop.0+0x1246>
 800de4c:	f10b 33ff 	add.w	r3, fp, #4294967295
 800de50:	9302      	str	r3, [sp, #8]
 800de52:	f1ab 0302 	sub.w	r3, fp, #2
 800de56:	e9cd 8303 	strd	r8, r3, [sp, #12]
 800de5a:	4616      	mov	r6, r2
 800de5c:	2400      	movs	r4, #0
 800de5e:	e00f      	b.n	800de80 <kalman_3gyro.constprop.0+0x11f0>
 800de60:	00000000 	.word	0x00000000
 800de64:	200019e4 	.word	0x200019e4
 800de68:	200019f4 	.word	0x200019f4
 800de6c:	3f333333 	.word	0x3f333333
 800de70:	3f4ccccd 	.word	0x3f4ccccd
 800de74:	3f666666 	.word	0x3f666666
 800de78:	3ecccccc 	.word	0x3ecccccc
 800de7c:	3dcccccd 	.word	0x3dcccccd
 800de80:	1e71      	subs	r1, r6, #1
 800de82:	f919 0005 	ldrsb.w	r0, [r9, r5]
 800de86:	f919 2001 	ldrsb.w	r2, [r9, r1]
 800de8a:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 800de8e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800de92:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 800de96:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800de9a:	ed1e 7a01 	vldr	s14, [lr, #-4]
 800de9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dea6:	f105 0c02 	add.w	ip, r5, #2
 800deaa:	f105 0801 	add.w	r8, r5, #1
 800deae:	f240 81d3 	bls.w	800e258 <kalman_3gyro.constprop.0+0x15c8>
 800deb2:	45e3      	cmp	fp, ip
 800deb4:	f80a 0004 	strb.w	r0, [sl, r4]
 800deb8:	f000 81bf 	beq.w	800e23a <kalman_3gyro.constprop.0+0x15aa>
 800debc:	4645      	mov	r5, r8
 800debe:	9b03      	ldr	r3, [sp, #12]
 800dec0:	3401      	adds	r4, #1
 800dec2:	42a3      	cmp	r3, r4
 800dec4:	dcdc      	bgt.n	800de80 <kalman_3gyro.constprop.0+0x11f0>
 800dec6:	4698      	mov	r8, r3
 800dec8:	9b01      	ldr	r3, [sp, #4]
 800deca:	1e58      	subs	r0, r3, #1
 800decc:	4448      	add	r0, r9
 800dece:	4642      	mov	r2, r8
 800ded0:	4651      	mov	r1, sl
 800ded2:	f009 fce7 	bl	80178a4 <memcpy>
 800ded6:	9b06      	ldr	r3, [sp, #24]
 800ded8:	eb0b 0703 	add.w	r7, fp, r3
 800dedc:	2f1e      	cmp	r7, #30
 800dede:	dda5      	ble.n	800de2c <kalman_3gyro.constprop.0+0x119c>
 800dee0:	9b07      	ldr	r3, [sp, #28]
 800dee2:	3b01      	subs	r3, #1
 800dee4:	9307      	str	r3, [sp, #28]
 800dee6:	d19a      	bne.n	800de1e <kalman_3gyro.constprop.0+0x118e>
 800dee8:	f999 200e 	ldrsb.w	r2, [r9, #14]
 800deec:	f999 300f 	ldrsb.w	r3, [r9, #15]
 800def0:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800def4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800def8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800defc:	ed52 7a01 	vldr	s15, [r2, #-4]
 800df00:	ed13 7a01 	vldr	s14, [r3, #-4]
 800df04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800df08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df0c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800df10:	460a      	mov	r2, r1
 800df12:	bf4c      	ite	mi
 800df14:	2201      	movmi	r2, #1
 800df16:	2200      	movpl	r2, #0
 800df18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df1c:	bf4c      	ite	mi
 800df1e:	2301      	movmi	r3, #1
 800df20:	2300      	movpl	r3, #0
 800df22:	429a      	cmp	r2, r3
 800df24:	f000 81b4 	beq.w	800e290 <kalman_3gyro.constprop.0+0x1600>
 800df28:	ee77 7a87 	vadd.f32	s15, s15, s14
 800df2c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800df30:	ee67 7a87 	vmul.f32	s15, s15, s14
 800df34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df36:	ece3 7a01 	vstmia	r3!, {s15}
 800df3a:	930b      	str	r3, [sp, #44]	; 0x2c
 800df3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df3e:	3304      	adds	r3, #4
 800df40:	930a      	str	r3, [sp, #40]	; 0x28
 800df42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df44:	2b03      	cmp	r3, #3
 800df46:	f47f ae4c 	bne.w	800dbe2 <kalman_3gyro.constprop.0+0xf52>
 800df4a:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800df4e:	eddd 5a2d 	vldr	s11, [sp, #180]	; 0xb4
 800df52:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 800df56:	ed5f 4a3b 	vldr	s9, [pc, #-236]	; 800de6c <kalman_3gyro.constprop.0+0x11dc>
 800df5a:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
 800df5e:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 800de70 <kalman_3gyro.constprop.0+0x11e0>
 800df62:	f89b 3900 	ldrb.w	r3, [fp, #2304]	; 0x900
 800df66:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800df6a:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800df6e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800df72:	ee2c 5aa6 	vmul.f32	s10, s25, s13
 800df76:	eee6 7a06 	vfma.f32	s15, s12, s12
 800df7a:	ee6d 5a26 	vmul.f32	s11, s26, s13
 800df7e:	eeb0 6a67 	vmov.f32	s12, s15
 800df82:	edcd 7a03 	vstr	s15, [sp, #12]
 800df86:	ee6b 7aa6 	vmul.f32	s15, s23, s13
 800df8a:	eddd 6a0e 	vldr	s13, [sp, #56]	; 0x38
 800df8e:	eeb1 4ac6 	vsqrt.f32	s8, s12
 800df92:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 800df96:	eddd 6a15 	vldr	s13, [sp, #84]	; 0x54
 800df9a:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 800df9e:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800dfa2:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800dfa6:	edcd 6a3f 	vstr	s13, [sp, #252]	; 0xfc
 800dfaa:	eec5 5a27 	vdiv.f32	s11, s10, s15
 800dfae:	ee2c 5aa4 	vmul.f32	s10, s25, s9
 800dfb2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800dfb6:	eeab 5aa7 	vfma.f32	s10, s23, s15
 800dfba:	ee64 7a27 	vmul.f32	s15, s8, s15
 800dfbe:	ee25 7a07 	vmul.f32	s14, s10, s14
 800dfc2:	ed8d 5a02 	vstr	s10, [sp, #8]
 800dfc6:	edcd 7a41 	vstr	s15, [sp, #260]	; 0x104
 800dfca:	edcd 5a40 	vstr	s11, [sp, #256]	; 0x100
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	f040 81a4 	bne.w	800e31c <kalman_3gyro.constprop.0+0x168c>
 800dfd4:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 800dfd8:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
 800dfdc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800dfe0:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
 800dfe4:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 800dfe8:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800dfec:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800dff0:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
 800dff4:	f8c8 3020 	str.w	r3, [r8, #32]
 800dff8:	ed88 7a07 	vstr	s14, [r8, #28]
 800dffc:	f60b 120c 	addw	r2, fp, #2316	; 0x90c
 800e000:	f60b 1324 	addw	r3, fp, #2340	; 0x924
 800e004:	ed93 7a00 	vldr	s14, [r3]
 800e008:	ed92 8a00 	vldr	s16, [r2]
 800e00c:	eddb ea02 	vldr	s29, [fp, #8]
 800e010:	f60b 1208 	addw	r2, fp, #2312	; 0x908
 800e014:	f50b 6312 	add.w	r3, fp, #2336	; 0x920
 800e018:	ed92 5a00 	vldr	s10, [r2]
 800e01c:	ee28 8a07 	vmul.f32	s16, s16, s14
 800e020:	ed93 7a00 	vldr	s14, [r3]
 800e024:	eea5 8a07 	vfma.f32	s16, s10, s14
 800e028:	f50b 6211 	add.w	r2, fp, #2320	; 0x910
 800e02c:	f60b 1328 	addw	r3, fp, #2344	; 0x928
 800e030:	ed92 5a00 	vldr	s10, [r2]
 800e034:	ed93 7a00 	vldr	s14, [r3]
 800e038:	eea5 8a07 	vfma.f32	s16, s10, s14
 800e03c:	f60b 1214 	addw	r2, fp, #2324	; 0x914
 800e040:	f60b 132c 	addw	r3, fp, #2348	; 0x92c
 800e044:	ed92 5a00 	vldr	s10, [r2]
 800e048:	ed93 7a00 	vldr	s14, [r3]
 800e04c:	eea5 8a07 	vfma.f32	s16, s10, s14
 800e050:	f60b 121c 	addw	r2, fp, #2332	; 0x91c
 800e054:	f60b 1304 	addw	r3, fp, #2308	; 0x904
 800e058:	ed92 5a00 	vldr	s10, [r2]
 800e05c:	ed93 7a00 	vldr	s14, [r3]
 800e060:	eef5 eac0 	vcmpe.f32	s29, #0.0
 800e064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e068:	eea5 8a07 	vfma.f32	s16, s10, s14
 800e06c:	f340 8232 	ble.w	800e4d4 <kalman_3gyro.constprop.0+0x1844>
 800e070:	ed9b 7a30 	vldr	s14, [fp, #192]	; 0xc0
 800e074:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800e078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e07c:	f100 815e 	bmi.w	800e33c <kalman_3gyro.constprop.0+0x16ac>
 800e080:	ed9b ba31 	vldr	s22, [fp, #196]	; 0xc4
 800e084:	ed9b 7a4a 	vldr	s14, [fp, #296]	; 0x128
 800e088:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800e08c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e090:	f142 84bd 	bpl.w	8010a0e <kalman_3gyro.constprop.0+0x3d7e>
 800e094:	ed9b 5a62 	vldr	s10, [fp, #392]	; 0x188
 800e098:	eeb4 5ac8 	vcmpe.f32	s10, s16
 800e09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0a0:	f342 850a 	ble.w	8010ab8 <kalman_3gyro.constprop.0+0x3e28>
 800e0a4:	eddb 2a4c 	vldr	s5, [fp, #304]	; 0x130
 800e0a8:	eef4 2ac8 	vcmpe.f32	s5, s16
 800e0ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0b0:	f342 86c5 	ble.w	8010e3e <kalman_3gyro.constprop.0+0x41ae>
 800e0b4:	eddb 3a4b 	vldr	s7, [fp, #300]	; 0x12c
 800e0b8:	ed9b 4a4d 	vldr	s8, [fp, #308]	; 0x134
 800e0bc:	eddb 4a4e 	vldr	s9, [fp, #312]	; 0x138
 800e0c0:	ee38 3a47 	vsub.f32	s6, s16, s14
 800e0c4:	ee34 4a63 	vsub.f32	s8, s8, s7
 800e0c8:	ee32 7ac7 	vsub.f32	s14, s5, s14
 800e0cc:	ee24 4a03 	vmul.f32	s8, s8, s6
 800e0d0:	eef4 4ac8 	vcmpe.f32	s9, s16
 800e0d4:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800e0d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0dc:	ee3e ea23 	vadd.f32	s28, s28, s7
 800e0e0:	f202 86c5 	bhi.w	8010e6e <kalman_3gyro.constprop.0+0x41de>
 800e0e4:	ed9b 7a50 	vldr	s14, [fp, #320]	; 0x140
 800e0e8:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800e0ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0f0:	f342 86c5 	ble.w	8010e7e <kalman_3gyro.constprop.0+0x41ee>
 800e0f4:	eddb 3a4f 	vldr	s7, [fp, #316]	; 0x13c
 800e0f8:	ed9b 4a51 	vldr	s8, [fp, #324]	; 0x144
 800e0fc:	ee38 3a64 	vsub.f32	s6, s16, s9
 800e100:	ee34 4a63 	vsub.f32	s8, s8, s7
 800e104:	ee37 7a64 	vsub.f32	s14, s14, s9
 800e108:	ee64 4a03 	vmul.f32	s9, s8, s6
 800e10c:	ee84 ea87 	vdiv.f32	s28, s9, s14
 800e110:	ee3e ea23 	vadd.f32	s28, s28, s7
 800e114:	ed9b 7a52 	vldr	s14, [fp, #328]	; 0x148
 800e118:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800e11c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e120:	f202 86c5 	bhi.w	8010eae <kalman_3gyro.constprop.0+0x421e>
 800e124:	eddb 4a54 	vldr	s9, [fp, #336]	; 0x150
 800e128:	eef4 4ac8 	vcmpe.f32	s9, s16
 800e12c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e130:	f343 8371 	ble.w	8011816 <kalman_3gyro.constprop.0+0x4b86>
 800e134:	eddb 3a53 	vldr	s7, [fp, #332]	; 0x14c
 800e138:	ed9b 4a55 	vldr	s8, [fp, #340]	; 0x154
 800e13c:	ee38 3a47 	vsub.f32	s6, s16, s14
 800e140:	ee34 4a63 	vsub.f32	s8, s8, s7
 800e144:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800e148:	ee24 4a03 	vmul.f32	s8, s8, s6
 800e14c:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800e150:	ee3e ea23 	vadd.f32	s28, s28, s7
 800e154:	ed9b 7a56 	vldr	s14, [fp, #344]	; 0x158
 800e158:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800e15c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e160:	f202 86c5 	bhi.w	8010eee <kalman_3gyro.constprop.0+0x425e>
 800e164:	eddb 4a58 	vldr	s9, [fp, #352]	; 0x160
 800e168:	eef4 4ac8 	vcmpe.f32	s9, s16
 800e16c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e170:	f343 8359 	ble.w	8011826 <kalman_3gyro.constprop.0+0x4b96>
 800e174:	eddb 3a57 	vldr	s7, [fp, #348]	; 0x15c
 800e178:	ed9b 4a59 	vldr	s8, [fp, #356]	; 0x164
 800e17c:	ee38 3a47 	vsub.f32	s6, s16, s14
 800e180:	ee34 4a63 	vsub.f32	s8, s8, s7
 800e184:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800e188:	ee24 4a03 	vmul.f32	s8, s8, s6
 800e18c:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800e190:	ee3e ea23 	vadd.f32	s28, s28, s7
 800e194:	ed9b 7a5a 	vldr	s14, [fp, #360]	; 0x168
 800e198:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e19c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1a0:	f2c2 86c5 	blt.w	8010f2e <kalman_3gyro.constprop.0+0x429e>
 800e1a4:	eddb 4a5c 	vldr	s9, [fp, #368]	; 0x170
 800e1a8:	eeb4 8ae4 	vcmpe.f32	s16, s9
 800e1ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1b0:	f143 832d 	bpl.w	801180e <kalman_3gyro.constprop.0+0x4b7e>
 800e1b4:	eddb 3a5b 	vldr	s7, [fp, #364]	; 0x16c
 800e1b8:	ed9b 4a5d 	vldr	s8, [fp, #372]	; 0x174
 800e1bc:	ee38 3a47 	vsub.f32	s6, s16, s14
 800e1c0:	ee34 4a63 	vsub.f32	s8, s8, s7
 800e1c4:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800e1c8:	ee24 4a03 	vmul.f32	s8, s8, s6
 800e1cc:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800e1d0:	ee3e ea23 	vadd.f32	s28, s28, s7
 800e1d4:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 800e1d8:	eeb4 8ae4 	vcmpe.f32	s16, s9
 800e1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1e0:	f2c2 86c5 	blt.w	8010f6e <kalman_3gyro.constprop.0+0x42de>
 800e1e4:	ed9b 7a60 	vldr	s14, [fp, #384]	; 0x180
 800e1e8:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e1ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1f0:	f142 86c5 	bpl.w	8010f7e <kalman_3gyro.constprop.0+0x42ee>
 800e1f4:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 800e1f8:	ed9b 5a61 	vldr	s10, [fp, #388]	; 0x184
 800e1fc:	ee78 3a64 	vsub.f32	s7, s16, s9
 800e200:	ee35 5a44 	vsub.f32	s10, s10, s8
 800e204:	ee37 7a64 	vsub.f32	s14, s14, s9
 800e208:	ee25 5a23 	vmul.f32	s10, s10, s7
 800e20c:	ee85 ea07 	vdiv.f32	s28, s10, s14
 800e210:	ee3e ea04 	vadd.f32	s28, s28, s8
 800e214:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 800e218:	ee27 7a0b 	vmul.f32	s14, s14, s22
 800e21c:	ee69 9a8e 	vmul.f32	s19, s19, s28
 800e220:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 800e224:	e15a      	b.n	800e4dc <kalman_3gyro.constprop.0+0x184c>
 800e226:	ed5f 6aed 	vldr	s13, [pc, #-948]	; 800de74 <kalman_3gyro.constprop.0+0x11e4>
 800e22a:	ed5f aaed 	vldr	s21, [pc, #-948]	; 800de78 <kalman_3gyro.constprop.0+0x11e8>
 800e22e:	ed1f 9aed 	vldr	s18, [pc, #-948]	; 800de7c <kalman_3gyro.constprop.0+0x11ec>
 800e232:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 800e236:	f7fe bedd 	b.w	800cff4 <kalman_3gyro.constprop.0+0x364>
 800e23a:	1c60      	adds	r0, r4, #1
 800e23c:	42be      	cmp	r6, r7
 800e23e:	eba7 0206 	sub.w	r2, r7, r6
 800e242:	4449      	add	r1, r9
 800e244:	4450      	add	r0, sl
 800e246:	f6bf ae39 	bge.w	800debc <kalman_3gyro.constprop.0+0x122c>
 800e24a:	443c      	add	r4, r7
 800e24c:	1ba4      	subs	r4, r4, r6
 800e24e:	f009 fb29 	bl	80178a4 <memcpy>
 800e252:	463e      	mov	r6, r7
 800e254:	4645      	mov	r5, r8
 800e256:	e632      	b.n	800debe <kalman_3gyro.constprop.0+0x122e>
 800e258:	3601      	adds	r6, #1
 800e25a:	42be      	cmp	r6, r7
 800e25c:	f80a 2004 	strb.w	r2, [sl, r4]
 800e260:	f47f ae2d 	bne.w	800debe <kalman_3gyro.constprop.0+0x122e>
 800e264:	9b02      	ldr	r3, [sp, #8]
 800e266:	f105 0801 	add.w	r8, r5, #1
 800e26a:	1c60      	adds	r0, r4, #1
 800e26c:	45c3      	cmp	fp, r8
 800e26e:	eba3 0205 	sub.w	r2, r3, r5
 800e272:	eb09 0105 	add.w	r1, r9, r5
 800e276:	4450      	add	r0, sl
 800e278:	f77f ae21 	ble.w	800debe <kalman_3gyro.constprop.0+0x122e>
 800e27c:	f009 fb12 	bl	80178a4 <memcpy>
 800e280:	9b02      	ldr	r3, [sp, #8]
 800e282:	441c      	add	r4, r3
 800e284:	9b04      	ldr	r3, [sp, #16]
 800e286:	1b5a      	subs	r2, r3, r5
 800e288:	1b64      	subs	r4, r4, r5
 800e28a:	eb02 0508 	add.w	r5, r2, r8
 800e28e:	e616      	b.n	800debe <kalman_3gyro.constprop.0+0x122e>
 800e290:	eef4 7a48 	vcmp.f32	s15, s16
 800e294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e298:	f43f ae46 	beq.w	800df28 <kalman_3gyro.constprop.0+0x1298>
 800e29c:	eef4 7a4b 	vcmp.f32	s15, s22
 800e2a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2a4:	f43f ae40 	beq.w	800df28 <kalman_3gyro.constprop.0+0x1298>
 800e2a8:	eeb4 7a48 	vcmp.f32	s14, s16
 800e2ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2b0:	f43f ae3a 	beq.w	800df28 <kalman_3gyro.constprop.0+0x1298>
 800e2b4:	eeb4 7a4b 	vcmp.f32	s14, s22
 800e2b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2bc:	f43f ae34 	beq.w	800df28 <kalman_3gyro.constprop.0+0x1298>
 800e2c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e2c4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e2c8:	eee7 7a26 	vfma.f32	s15, s14, s13
 800e2cc:	e632      	b.n	800df34 <kalman_3gyro.constprop.0+0x12a4>
 800e2ce:	2304      	movs	r3, #4
 800e2d0:	9301      	str	r3, [sp, #4]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	461c      	mov	r4, r3
 800e2d6:	2307      	movs	r3, #7
 800e2d8:	4694      	mov	ip, r2
 800e2da:	2106      	movs	r1, #6
 800e2dc:	9302      	str	r3, [sp, #8]
 800e2de:	2603      	movs	r6, #3
 800e2e0:	f04f 0a01 	mov.w	sl, #1
 800e2e4:	f7ff ba5c 	b.w	800d7a0 <kalman_3gyro.constprop.0+0xb10>
 800e2e8:	9a08      	ldr	r2, [sp, #32]
 800e2ea:	eddf 7a62 	vldr	s15, [pc, #392]	; 800e474 <kalman_3gyro.constprop.0+0x17e4>
 800e2ee:	eddf 5a62 	vldr	s11, [pc, #392]	; 800e478 <kalman_3gyro.constprop.0+0x17e8>
 800e2f2:	ed9f 5a62 	vldr	s10, [pc, #392]	; 800e47c <kalman_3gyro.constprop.0+0x17ec>
 800e2f6:	4b62      	ldr	r3, [pc, #392]	; (800e480 <kalman_3gyro.constprop.0+0x17f0>)
 800e2f8:	edc2 7a00 	vstr	s15, [r2]
 800e2fc:	eeb0 4a65 	vmov.f32	s8, s11
 800e300:	eeb0 3a67 	vmov.f32	s6, s15
 800e304:	eef0 4a45 	vmov.f32	s9, s10
 800e308:	6053      	str	r3, [r2, #4]
 800e30a:	6093      	str	r3, [r2, #8]
 800e30c:	f7fe bd3e 	b.w	800cd8c <kalman_3gyro.constprop.0+0xfc>
 800e310:	2308      	movs	r3, #8
 800e312:	2005      	movs	r0, #5
 800e314:	f04f 0802 	mov.w	r8, #2
 800e318:	f7ff ba5c 	b.w	800d7d4 <kalman_3gyro.constprop.0+0xb44>
 800e31c:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 800e320:	2300      	movs	r3, #0
 800e322:	f88b 3900 	strb.w	r3, [fp, #2304]	; 0x900
 800e326:	ed88 7a07 	vstr	s14, [r8, #28]
 800e32a:	ed88 7a08 	vstr	s14, [r8, #32]
 800e32e:	ed88 7a09 	vstr	s14, [r8, #36]	; 0x24
 800e332:	ed88 7a0a 	vstr	s14, [r8, #40]	; 0x28
 800e336:	ed88 7a0b 	vstr	s14, [r8, #44]	; 0x2c
 800e33a:	e65f      	b.n	800dffc <kalman_3gyro.constprop.0+0x136c>
 800e33c:	ed9b 5a48 	vldr	s10, [fp, #288]	; 0x120
 800e340:	eeb4 5ac8 	vcmpe.f32	s10, s16
 800e344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e348:	f342 83b2 	ble.w	8010ab0 <kalman_3gyro.constprop.0+0x3e20>
 800e34c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e354:	f2c2 86e9 	blt.w	801112a <kalman_3gyro.constprop.0+0x449a>
 800e358:	eddb 4a32 	vldr	s9, [fp, #200]	; 0xc8
 800e35c:	eef4 4ac8 	vcmpe.f32	s9, s16
 800e360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e364:	f342 8712 	ble.w	801118c <kalman_3gyro.constprop.0+0x44fc>
 800e368:	eddb 3a31 	vldr	s7, [fp, #196]	; 0xc4
 800e36c:	ed9b 4a33 	vldr	s8, [fp, #204]	; 0xcc
 800e370:	ee38 3a47 	vsub.f32	s6, s16, s14
 800e374:	ee34 4a63 	vsub.f32	s8, s8, s7
 800e378:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800e37c:	ee64 4a03 	vmul.f32	s9, s8, s6
 800e380:	ee84 ba87 	vdiv.f32	s22, s9, s14
 800e384:	ee3b ba23 	vadd.f32	s22, s22, s7
 800e388:	f002 bed8 	b.w	801113c <kalman_3gyro.constprop.0+0x44ac>
 800e38c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e390:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e398:	f342 84bd 	ble.w	8010d16 <kalman_3gyro.constprop.0+0x4086>
 800e39c:	ed9f 8a39 	vldr	s16, [pc, #228]	; 800e484 <kalman_3gyro.constprop.0+0x17f4>
 800e3a0:	f7ff b993 	b.w	800d6ca <kalman_3gyro.constprop.0+0xa3a>
 800e3a4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e3a8:	eeb4 bac7 	vcmpe.f32	s22, s14
 800e3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3b0:	f342 849f 	ble.w	8010cf2 <kalman_3gyro.constprop.0+0x4062>
 800e3b4:	ed9f ba33 	vldr	s22, [pc, #204]	; 800e484 <kalman_3gyro.constprop.0+0x17f4>
 800e3b8:	f7ff b964 	b.w	800d684 <kalman_3gyro.constprop.0+0x9f4>
 800e3bc:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e3c0:	eef4 dac7 	vcmpe.f32	s27, s14
 800e3c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3c8:	f342 84b7 	ble.w	8010d3a <kalman_3gyro.constprop.0+0x40aa>
 800e3cc:	eddf da2d 	vldr	s27, [pc, #180]	; 800e484 <kalman_3gyro.constprop.0+0x17f4>
 800e3d0:	f7ff b935 	b.w	800d63e <kalman_3gyro.constprop.0+0x9ae>
 800e3d4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e3d8:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e3dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3e0:	f342 8475 	ble.w	8010cce <kalman_3gyro.constprop.0+0x403e>
 800e3e4:	ed9f 8a27 	vldr	s16, [pc, #156]	; 800e484 <kalman_3gyro.constprop.0+0x17f4>
 800e3e8:	f7ff b8c3 	b.w	800d572 <kalman_3gyro.constprop.0+0x8e2>
 800e3ec:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e3f0:	eeb4 bac7 	vcmpe.f32	s22, s14
 800e3f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3f8:	f342 83a0 	ble.w	8010b3c <kalman_3gyro.constprop.0+0x3eac>
 800e3fc:	ed9f ba21 	vldr	s22, [pc, #132]	; 800e484 <kalman_3gyro.constprop.0+0x17f4>
 800e400:	f7ff b894 	b.w	800d52c <kalman_3gyro.constprop.0+0x89c>
 800e404:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e408:	eef4 dac7 	vcmpe.f32	s27, s14
 800e40c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e410:	f342 8382 	ble.w	8010b18 <kalman_3gyro.constprop.0+0x3e88>
 800e414:	eddf da1b 	vldr	s27, [pc, #108]	; 800e484 <kalman_3gyro.constprop.0+0x17f4>
 800e418:	f7ff b865 	b.w	800d4e6 <kalman_3gyro.constprop.0+0x856>
 800e41c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e420:	eef4 dac7 	vcmpe.f32	s27, s14
 800e424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e428:	f342 8364 	ble.w	8010af4 <kalman_3gyro.constprop.0+0x3e64>
 800e42c:	eddf da15 	vldr	s27, [pc, #84]	; 800e484 <kalman_3gyro.constprop.0+0x17f4>
 800e430:	f7fe bff3 	b.w	800d41a <kalman_3gyro.constprop.0+0x78a>
 800e434:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e438:	eeb4 eac7 	vcmpe.f32	s28, s14
 800e43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e440:	f342 8346 	ble.w	8010ad0 <kalman_3gyro.constprop.0+0x3e40>
 800e444:	ed9f ea0f 	vldr	s28, [pc, #60]	; 800e484 <kalman_3gyro.constprop.0+0x17f4>
 800e448:	f7fe bfc4 	b.w	800d3d4 <kalman_3gyro.constprop.0+0x744>
 800e44c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e450:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e458:	f342 839e 	ble.w	8010b98 <kalman_3gyro.constprop.0+0x3f08>
 800e45c:	ed9f 8a09 	vldr	s16, [pc, #36]	; 800e484 <kalman_3gyro.constprop.0+0x17f4>
 800e460:	f7fe bf95 	b.w	800d38e <kalman_3gyro.constprop.0+0x6fe>
 800e464:	eef1 3a63 	vneg.f32	s7, s7
 800e468:	f7ff bb42 	b.w	800daf0 <kalman_3gyro.constprop.0+0xe60>
 800e46c:	eef1 3a63 	vneg.f32	s7, s7
 800e470:	f7ff bb1b 	b.w	800daaa <kalman_3gyro.constprop.0+0xe1a>
 800e474:	00000000 	.word	0x00000000
 800e478:	3fb33333 	.word	0x3fb33333
 800e47c:	bfb33333 	.word	0xbfb33333
 800e480:	3f333333 	.word	0x3f333333
 800e484:	80000000 	.word	0x80000000
 800e488:	3fb77778 	.word	0x3fb77778
 800e48c:	3f99999a 	.word	0x3f99999a
 800e490:	3f4ccccd 	.word	0x3f4ccccd
 800e494:	42d40000 	.word	0x42d40000
 800e498:	46979000 	.word	0x46979000
 800e49c:	4415c000 	.word	0x4415c000
 800e4a0:	3ba3d70a 	.word	0x3ba3d70a
 800e4a4:	3b449ba6 	.word	0x3b449ba6
 800e4a8:	3c75c28f 	.word	0x3c75c28f
 800e4ac:	3c23d70a 	.word	0x3c23d70a
 800e4b0:	3d4cccc0 	.word	0x3d4cccc0
 800e4b4:	43480000 	.word	0x43480000
 800e4b8:	3d4ccccd 	.word	0x3d4ccccd
 800e4bc:	3cf5c28f 	.word	0x3cf5c28f
 800e4c0:	3eb33334 	.word	0x3eb33334
 800e4c4:	3f933333 	.word	0x3f933333
 800e4c8:	4247ffff 	.word	0x4247ffff
 800e4cc:	3dcccccd 	.word	0x3dcccccd
 800e4d0:	3e4ccccd 	.word	0x3e4ccccd
 800e4d4:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
 800e4d8:	eeb0 ba4e 	vmov.f32	s22, s28
 800e4dc:	eddb da74 	vldr	s27, [fp, #464]	; 0x1d0
 800e4e0:	ed9b 7a72 	vldr	s14, [fp, #456]	; 0x1c8
 800e4e4:	ed5f 4a07 	vldr	s9, [pc, #-28]	; 800e4cc <kalman_3gyro.constprop.0+0x183c>
 800e4e8:	ee79 da6d 	vsub.f32	s27, s18, s27
 800e4ec:	ee3c 5a47 	vsub.f32	s10, s24, s14
 800e4f0:	eef0 daed 	vabs.f32	s27, s27
 800e4f4:	eeb0 5ac5 	vabs.f32	s10, s10
 800e4f8:	ee35 5a2d 	vadd.f32	s10, s10, s27
 800e4fc:	eeb4 5ae4 	vcmpe.f32	s10, s9
 800e500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e504:	f340 821c 	ble.w	800e940 <kalman_3gyro.constprop.0+0x1cb0>
 800e508:	ed1f 4a21 	vldr	s8, [pc, #-132]	; 800e488 <kalman_3gyro.constprop.0+0x17f8>
 800e50c:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800e510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e514:	f302 828b 	bgt.w	8010a2e <kalman_3gyro.constprop.0+0x3d9e>
 800e518:	ee35 5a64 	vsub.f32	s10, s10, s9
 800e51c:	eeb0 4a08 	vmov.f32	s8, #8	; 0x40400000  3.0
 800e520:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800e524:	eee5 4a04 	vfma.f32	s9, s10, s8
 800e528:	eeb0 5a64 	vmov.f32	s10, s9
 800e52c:	eeb4 5aea 	vcmpe.f32	s10, s21
 800e530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e534:	f89b 3000 	ldrb.w	r3, [fp]
 800e538:	bfb8      	it	lt
 800e53a:	eeb0 5a6a 	vmovlt.f32	s10, s21
 800e53e:	ed8d 5a01 	vstr	s10, [sp, #4]
 800e542:	2b00      	cmp	r3, #0
 800e544:	f000 81f9 	beq.w	800e93a <kalman_3gyro.constprop.0+0x1caa>
 800e548:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	f000 81de 	beq.w	800e90e <kalman_3gyro.constprop.0+0x1c7e>
 800e552:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 800e556:	2300      	movs	r3, #0
 800e558:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800e55c:	eeb0 6a61 	vmov.f32	s12, s3
 800e560:	eea7 6a47 	vfms.f32	s12, s14, s14
 800e564:	9908      	ldr	r1, [sp, #32]
 800e566:	eddd 3a37 	vldr	s7, [sp, #220]	; 0xdc
 800e56a:	ed9d 5a38 	vldr	s10, [sp, #224]	; 0xe0
 800e56e:	eddd 2a36 	vldr	s5, [sp, #216]	; 0xd8
 800e572:	eddd 6a39 	vldr	s13, [sp, #228]	; 0xe4
 800e576:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 800e57a:	eef1 0ac6 	vsqrt.f32	s1, s12
 800e57e:	2200      	movs	r2, #0
 800e580:	f8cb 21b0 	str.w	r2, [fp, #432]	; 0x1b0
 800e584:	f8cb 21b4 	str.w	r2, [fp, #436]	; 0x1b4
 800e588:	f8cb 21b8 	str.w	r2, [fp, #440]	; 0x1b8
 800e58c:	9233      	str	r2, [sp, #204]	; 0xcc
 800e58e:	ee23 6aa3 	vmul.f32	s12, s7, s7
 800e592:	ee23 4a85 	vmul.f32	s8, s7, s10
 800e596:	ee36 2a06 	vadd.f32	s4, s12, s12
 800e59a:	ee25 6a05 	vmul.f32	s12, s10, s10
 800e59e:	ee22 1aa2 	vmul.f32	s2, s5, s5
 800e5a2:	ee36 6a06 	vadd.f32	s12, s12, s12
 800e5a6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800e5aa:	ee63 4aa6 	vmul.f32	s9, s7, s13
 800e5ae:	ee34 4a04 	vadd.f32	s8, s8, s8
 800e5b2:	eeb0 3a42 	vmov.f32	s6, s4
 800e5b6:	ee22 0aa6 	vmul.f32	s0, s5, s13
 800e5ba:	eea1 3a25 	vfma.f32	s6, s2, s11
 800e5be:	eef0 aa46 	vmov.f32	s21, s12
 800e5c2:	ee62 3aa3 	vmul.f32	s7, s5, s7
 800e5c6:	eee1 aa25 	vfma.f32	s21, s2, s11
 800e5ca:	ee74 4aa4 	vadd.f32	s9, s9, s9
 800e5ce:	ee65 6a26 	vmul.f32	s13, s10, s13
 800e5d2:	ee22 5a85 	vmul.f32	s10, s5, s10
 800e5d6:	eef0 2a44 	vmov.f32	s5, s8
 800e5da:	eee0 2a25 	vfma.f32	s5, s0, s11
 800e5de:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800e5e2:	eeb0 fa64 	vmov.f32	s30, s9
 800e5e6:	eea0 4a65 	vfms.f32	s8, s0, s11
 800e5ea:	ee71 fac3 	vsub.f32	s31, s3, s6
 800e5ee:	ee95 fa25 	vfnms.f32	s30, s10, s11
 800e5f2:	eeb0 1a6a 	vmov.f32	s2, s21
 800e5f6:	eef0 aa66 	vmov.f32	s21, s13
 800e5fa:	eee3 aaa5 	vfma.f32	s21, s7, s11
 800e5fe:	ee31 1ac1 	vsub.f32	s2, s3, s2
 800e602:	ee2f 0a87 	vmul.f32	s0, s31, s14
 800e606:	ee32 6a06 	vadd.f32	s12, s4, s12
 800e60a:	ee22 2a87 	vmul.f32	s4, s5, s14
 800e60e:	eea0 0a84 	vfma.f32	s0, s1, s8
 800e612:	eea0 2a81 	vfma.f32	s4, s1, s2
 800e616:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800e61a:	eed3 6aa5 	vfnms.f32	s13, s7, s11
 800e61e:	eef0 3a64 	vmov.f32	s7, s9
 800e622:	eee5 3a65 	vfms.f32	s7, s10, s11
 800e626:	eee5 4a25 	vfma.f32	s9, s10, s11
 800e62a:	ee33 3a61 	vsub.f32	s6, s6, s3
 800e62e:	edd1 5a02 	vldr	s11, [r1, #8]
 800e632:	ed91 5a05 	vldr	s10, [r1, #20]
 800e636:	edcd fa53 	vstr	s31, [sp, #332]	; 0x14c
 800e63a:	ee31 6ac6 	vsub.f32	s12, s3, s12
 800e63e:	eea0 7aaa 	vfma.f32	s14, s1, s21
 800e642:	edd1 1a01 	vldr	s3, [r1, #4]
 800e646:	edd1 fa00 	vldr	s31, [r1]
 800e64a:	ed8d 4a52 	vstr	s8, [sp, #328]	; 0x148
 800e64e:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800e652:	ee31 2ac2 	vsub.f32	s4, s3, s4
 800e656:	edd1 5a03 	vldr	s11, [r1, #12]
 800e65a:	edd1 1a04 	vldr	s3, [r1, #16]
 800e65e:	ed1f 4a75 	vldr	s8, [pc, #-468]	; 800e48c <kalman_3gyro.constprop.0+0x17fc>
 800e662:	edcd 2a50 	vstr	s5, [sp, #320]	; 0x140
 800e666:	ee33 3a05 	vadd.f32	s6, s6, s10
 800e66a:	ee71 2ae2 	vsub.f32	s5, s3, s5
 800e66e:	ee73 3aa5 	vadd.f32	s7, s7, s11
 800e672:	ee3f 7ac7 	vsub.f32	s14, s31, s14
 800e676:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e67a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e67e:	edcd 0a34 	vstr	s1, [sp, #208]	; 0xd0
 800e682:	ed8d 0a7d 	vstr	s0, [sp, #500]	; 0x1f4
 800e686:	ed8d 1a4f 	vstr	s2, [sp, #316]	; 0x13c
 800e68a:	ed8d 6a4b 	vstr	s12, [sp, #300]	; 0x12c
 800e68e:	ed8d 2a7c 	vstr	s4, [sp, #496]	; 0x1f0
 800e692:	ed8d fa4d 	vstr	s30, [sp, #308]	; 0x134
 800e696:	edcd aa4c 	vstr	s21, [sp, #304]	; 0x130
 800e69a:	edcd 6a4e 	vstr	s13, [sp, #312]	; 0x138
 800e69e:	ed8d 7a7b 	vstr	s14, [sp, #492]	; 0x1ec
 800e6a2:	edcd 2a2e 	vstr	s5, [sp, #184]	; 0xb8
 800e6a6:	edcd 2a7f 	vstr	s5, [sp, #508]	; 0x1fc
 800e6aa:	edcd 4a51 	vstr	s9, [sp, #324]	; 0x144
 800e6ae:	edcd 3a2d 	vstr	s7, [sp, #180]	; 0xb4
 800e6b2:	edcd 3a7e 	vstr	s7, [sp, #504]	; 0x1f8
 800e6b6:	ed8d 3a2f 	vstr	s6, [sp, #188]	; 0xbc
 800e6ba:	ed8d 3a80 	vstr	s6, [sp, #512]	; 0x200
 800e6be:	ed8d ca84 	vstr	s24, [sp, #528]	; 0x210
 800e6c2:	ed8d aa85 	vstr	s20, [sp, #532]	; 0x214
 800e6c6:	ed8d 9a86 	vstr	s18, [sp, #536]	; 0x218
 800e6ca:	d506      	bpl.n	800e6da <kalman_3gyro.constprop.0+0x1a4a>
 800e6cc:	ed1f 7a90 	vldr	s14, [pc, #-576]	; 800e490 <kalman_3gyro.constprop.0+0x1800>
 800e6d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6d8:	dc01      	bgt.n	800e6de <kalman_3gyro.constprop.0+0x1a4e>
 800e6da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e6de:	ee7a 7a67 	vsub.f32	s15, s20, s15
 800e6e2:	eef0 7ae7 	vabs.f32	s15, s15
 800e6e6:	ee77 7aab 	vadd.f32	s15, s15, s23
 800e6ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e6ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6f2:	f340 8141 	ble.w	800e978 <kalman_3gyro.constprop.0+0x1ce8>
 800e6f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e6fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e6fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e702:	f142 8198 	bpl.w	8010a36 <kalman_3gyro.constprop.0+0x3da6>
 800e706:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 800e4a0 <kalman_3gyro.constprop.0+0x1810>
 800e70a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e70e:	ed1f 7a99 	vldr	s14, [pc, #-612]	; 800e4ac <kalman_3gyro.constprop.0+0x181c>
 800e712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e716:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e71a:	f102 8221 	bmi.w	8010b60 <kalman_3gyro.constprop.0+0x3ed0>
 800e71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e722:	f142 8221 	bpl.w	8010b68 <kalman_3gyro.constprop.0+0x3ed8>
 800e726:	ed1f 7aa0 	vldr	s14, [pc, #-640]	; 800e4a8 <kalman_3gyro.constprop.0+0x1818>
 800e72a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e72e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e732:	f282 84a4 	bge.w	801107e <kalman_3gyro.constprop.0+0x43ee>
 800e736:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e73a:	ed5f 6aa0 	vldr	s13, [pc, #-640]	; 800e4bc <kalman_3gyro.constprop.0+0x182c>
 800e73e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e746:	f2c2 84b0 	blt.w	80110aa <kalman_3gyro.constprop.0+0x441a>
 800e74a:	ed1f 7aa5 	vldr	s14, [pc, #-660]	; 800e4b8 <kalman_3gyro.constprop.0+0x1828>
 800e74e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e756:	f142 84b0 	bpl.w	80110ba <kalman_3gyro.constprop.0+0x442a>
 800e75a:	ed5f 6aa8 	vldr	s13, [pc, #-672]	; 800e4bc <kalman_3gyro.constprop.0+0x182c>
 800e75e:	ed1f 6aa6 	vldr	s12, [pc, #-664]	; 800e4c8 <kalman_3gyro.constprop.0+0x1838>
 800e762:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e766:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800e76a:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e76e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800e772:	eea6 7a86 	vfma.f32	s14, s13, s12
 800e776:	ed5f 6aab 	vldr	s13, [pc, #-684]	; 800e4cc <kalman_3gyro.constprop.0+0x183c>
 800e77a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e782:	f2c2 84b0 	blt.w	80110e6 <kalman_3gyro.constprop.0+0x4456>
 800e786:	ed1f 7aae 	vldr	s14, [pc, #-696]	; 800e4d0 <kalman_3gyro.constprop.0+0x1840>
 800e78a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e78e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e792:	f142 84b0 	bpl.w	80110f6 <kalman_3gyro.constprop.0+0x4466>
 800e796:	ed5f 6ab3 	vldr	s13, [pc, #-716]	; 800e4cc <kalman_3gyro.constprop.0+0x183c>
 800e79a:	ed1f 7ac2 	vldr	s14, [pc, #-776]	; 800e494 <kalman_3gyro.constprop.0+0x1804>
 800e79e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e7a2:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 800e7a6:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e7aa:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 800e7ae:	eea6 7a86 	vfma.f32	s14, s13, s12
 800e7b2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e7b6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7be:	db0d      	blt.n	800e7dc <kalman_3gyro.constprop.0+0x1b4c>
 800e7c0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e7c4:	ed1f 6acc 	vldr	s12, [pc, #-816]	; 800e498 <kalman_3gyro.constprop.0+0x1808>
 800e7c8:	ed1f 7acc 	vldr	s14, [pc, #-816]	; 800e49c <kalman_3gyro.constprop.0+0x180c>
 800e7cc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e7d0:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e7d4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800e7d8:	eea6 7a86 	vfma.f32	s14, s13, s12
 800e7dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e7e0:	ee77 6a26 	vadd.f32	s13, s14, s13
 800e7e4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800e7e8:	eec6 4a26 	vdiv.f32	s9, s12, s13
 800e7ec:	ed1f 6ad2 	vldr	s12, [pc, #-840]	; 800e4a8 <kalman_3gyro.constprop.0+0x1818>
 800e7f0:	ed5f 3ad5 	vldr	s7, [pc, #-852]	; 800e4a0 <kalman_3gyro.constprop.0+0x1810>
 800e7f4:	ed5f 6ad3 	vldr	s13, [pc, #-844]	; 800e4ac <kalman_3gyro.constprop.0+0x181c>
 800e7f8:	ed1f 4ad6 	vldr	s8, [pc, #-856]	; 800e4a4 <kalman_3gyro.constprop.0+0x1814>
 800e7fc:	eef4 4ac6 	vcmpe.f32	s9, s12
 800e800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e804:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e808:	bfb8      	it	lt
 800e80a:	eef0 4a46 	vmovlt.f32	s9, s12
 800e80e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e812:	ee24 4a84 	vmul.f32	s8, s9, s8
 800e816:	ee24 6aa6 	vmul.f32	s12, s9, s13
 800e81a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e81e:	f142 841f 	bpl.w	8011060 <kalman_3gyro.constprop.0+0x43d0>
 800e822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e826:	f2c2 841f 	blt.w	8011068 <kalman_3gyro.constprop.0+0x43d8>
 800e82a:	ed5f 6ae1 	vldr	s13, [pc, #-900]	; 800e4a8 <kalman_3gyro.constprop.0+0x1818>
 800e82e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e836:	f142 83ba 	bpl.w	8010fae <kalman_3gyro.constprop.0+0x431e>
 800e83a:	ed5f 3ae4 	vldr	s7, [pc, #-912]	; 800e4ac <kalman_3gyro.constprop.0+0x181c>
 800e83e:	ed5f 2ae4 	vldr	s5, [pc, #-912]	; 800e4b0 <kalman_3gyro.constprop.0+0x1820>
 800e842:	ed1f 3ae4 	vldr	s6, [pc, #-912]	; 800e4b4 <kalman_3gyro.constprop.0+0x1824>
 800e846:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800e84a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e84e:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800e852:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e856:	eeb0 ca66 	vmov.f32	s24, s13
 800e85a:	ed5f 6ae8 	vldr	s13, [pc, #-928]	; 800e4bc <kalman_3gyro.constprop.0+0x182c>
 800e85e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e866:	f2c2 83ba 	blt.w	8010fde <kalman_3gyro.constprop.0+0x434e>
 800e86a:	ed5f 6aed 	vldr	s13, [pc, #-948]	; 800e4b8 <kalman_3gyro.constprop.0+0x1828>
 800e86e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e876:	f142 83ba 	bpl.w	8010fee <kalman_3gyro.constprop.0+0x435e>
 800e87a:	ed5f 3af0 	vldr	s7, [pc, #-960]	; 800e4bc <kalman_3gyro.constprop.0+0x182c>
 800e87e:	ed5f 2af0 	vldr	s5, [pc, #-960]	; 800e4c0 <kalman_3gyro.constprop.0+0x1830>
 800e882:	ed1f 3aef 	vldr	s6, [pc, #-956]	; 800e4c8 <kalman_3gyro.constprop.0+0x1838>
 800e886:	ed5f 6af1 	vldr	s13, [pc, #-964]	; 800e4c4 <kalman_3gyro.constprop.0+0x1834>
 800e88a:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800e88e:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800e892:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e896:	eeb0 ca66 	vmov.f32	s24, s13
 800e89a:	ed5f 6af4 	vldr	s13, [pc, #-976]	; 800e4cc <kalman_3gyro.constprop.0+0x183c>
 800e89e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8a6:	f2c2 83ba 	blt.w	801101e <kalman_3gyro.constprop.0+0x438e>
 800e8aa:	ed5f 6af7 	vldr	s13, [pc, #-988]	; 800e4d0 <kalman_3gyro.constprop.0+0x1840>
 800e8ae:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8b6:	f142 83ba 	bpl.w	801102e <kalman_3gyro.constprop.0+0x439e>
 800e8ba:	eddf 3a23 	vldr	s7, [pc, #140]	; 800e948 <kalman_3gyro.constprop.0+0x1cb8>
 800e8be:	eddf 6a23 	vldr	s13, [pc, #140]	; 800e94c <kalman_3gyro.constprop.0+0x1cbc>
 800e8c2:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800e8c6:	eeb2 3a04 	vmov.f32	s6, #36	; 0x41200000  10.0
 800e8ca:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800e8ce:	eef7 6a0c 	vmov.f32	s13, #124	; 0x3fe00000  1.750
 800e8d2:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e8d6:	eeb0 ca66 	vmov.f32	s24, s13
 800e8da:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e8de:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e8e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8e6:	f2c2 80b0 	blt.w	8010a4a <kalman_3gyro.constprop.0+0x3dba>
 800e8ea:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800e8ee:	ee37 3ae3 	vsub.f32	s6, s15, s7
 800e8f2:	eddf 3a17 	vldr	s7, [pc, #92]	; 800e950 <kalman_3gyro.constprop.0+0x1cc0>
 800e8f6:	eddf 6a17 	vldr	s13, [pc, #92]	; 800e954 <kalman_3gyro.constprop.0+0x1cc4>
 800e8fa:	ee63 3a23 	vmul.f32	s7, s6, s7
 800e8fe:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 800e902:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e906:	eeb0 ca66 	vmov.f32	s24, s13
 800e90a:	f002 b89e 	b.w	8010a4a <kalman_3gyro.constprop.0+0x3dba>
 800e90e:	ee76 6a26 	vadd.f32	s13, s12, s13
 800e912:	ed9b 6a05 	vldr	s12, [fp, #20]
 800e916:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800e91a:	eeb5 5a00 	vmov.f32	s10, #80	; 0x3e800000  0.250
 800e91e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800e922:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e926:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e92a:	ee66 6a26 	vmul.f32	s13, s12, s13
 800e92e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e936:	f102 8246 	bmi.w	8010dc6 <kalman_3gyro.constprop.0+0x4136>
 800e93a:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 800e93e:	e60b      	b.n	800e558 <kalman_3gyro.constprop.0+0x18c8>
 800e940:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800e944:	e5f2      	b.n	800e52c <kalman_3gyro.constprop.0+0x189c>
 800e946:	bf00      	nop
 800e948:	3dcccccd 	.word	0x3dcccccd
 800e94c:	410c0000 	.word	0x410c0000
 800e950:	42c80000 	.word	0x42c80000
 800e954:	424a0000 	.word	0x424a0000
 800e958:	3c23d70a 	.word	0x3c23d70a
 800e95c:	3b449ba6 	.word	0x3b449ba6
 800e960:	3fb33333 	.word	0x3fb33333
 800e964:	3ecccccd 	.word	0x3ecccccd
 800e968:	3f8f5c29 	.word	0x3f8f5c29
 800e96c:	3f59999a 	.word	0x3f59999a
 800e970:	3e4ccccd 	.word	0x3e4ccccd
 800e974:	3f99999a 	.word	0x3f99999a
 800e978:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 800e97c:	ed1f 6a0a 	vldr	s12, [pc, #-40]	; 800e958 <kalman_3gyro.constprop.0+0x1cc8>
 800e980:	ed1f 4a0a 	vldr	s8, [pc, #-40]	; 800e95c <kalman_3gyro.constprop.0+0x1ccc>
 800e984:	eeb0 7a4c 	vmov.f32	s14, s24
 800e988:	eef0 4a4c 	vmov.f32	s9, s24
 800e98c:	eddd 6a01 	vldr	s13, [sp, #4]
 800e990:	ed9d 3a6f 	vldr	s6, [sp, #444]	; 0x1bc
 800e994:	eddd 2a70 	vldr	s5, [sp, #448]	; 0x1c0
 800e998:	ed9d 2a72 	vldr	s4, [sp, #456]	; 0x1c8
 800e99c:	ed8d 4a48 	vstr	s8, [sp, #288]	; 0x120
 800e9a0:	ee66 aa8b 	vmul.f32	s21, s13, s22
 800e9a4:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 800e9a8:	ed9d ba71 	vldr	s22, [sp, #452]	; 0x1c4
 800e9ac:	ed9d 4a0d 	vldr	s8, [sp, #52]	; 0x34
 800e9b0:	f89b 200c 	ldrb.w	r2, [fp, #12]
 800e9b4:	edcd 9a73 	vstr	s19, [sp, #460]	; 0x1cc
 800e9b8:	ee76 3aa6 	vadd.f32	s7, s13, s13
 800e9bc:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
 800e9c0:	edcd 9a74 	vstr	s19, [sp, #464]	; 0x1d0
 800e9c4:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800e9c8:	ee2a 3a83 	vmul.f32	s6, s21, s6
 800e9cc:	ee62 2aaa 	vmul.f32	s5, s5, s21
 800e9d0:	ee63 3a87 	vmul.f32	s7, s7, s14
 800e9d4:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e9d8:	ee6b aa2a 	vmul.f32	s21, s22, s21
 800e9dc:	ee2e ea02 	vmul.f32	s28, s28, s4
 800e9e0:	edcd 3a78 	vstr	s7, [sp, #480]	; 0x1e0
 800e9e4:	edcd 6a79 	vstr	s13, [sp, #484]	; 0x1e4
 800e9e8:	ed8d 6a49 	vstr	s12, [sp, #292]	; 0x124
 800e9ec:	ed8d 4a7a 	vstr	s8, [sp, #488]	; 0x1e8
 800e9f0:	ed8d 3a6f 	vstr	s6, [sp, #444]	; 0x1bc
 800e9f4:	edcd 2a70 	vstr	s5, [sp, #448]	; 0x1c0
 800e9f8:	edcd aa71 	vstr	s21, [sp, #452]	; 0x1c4
 800e9fc:	ed8d ea72 	vstr	s28, [sp, #456]	; 0x1c8
 800ea00:	2a00      	cmp	r2, #0
 800ea02:	f001 8411 	beq.w	8010228 <kalman_3gyro.constprop.0+0x3598>
 800ea06:	ee77 2a07 	vadd.f32	s5, s14, s14
 800ea0a:	ed9d 4a29 	vldr	s8, [sp, #164]	; 0xa4
 800ea0e:	f89b 100e 	ldrb.w	r1, [fp, #14]
 800ea12:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800ea16:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 800ea1a:	ee24 4a24 	vmul.f32	s8, s8, s9
 800ea1e:	ee27 ea0e 	vmul.f32	s28, s14, s28
 800ea22:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800ea26:	ee29 7a87 	vmul.f32	s14, s19, s14
 800ea2a:	ee26 6a24 	vmul.f32	s12, s12, s9
 800ea2e:	ed8d ea72 	vstr	s28, [sp, #456]	; 0x1c8
 800ea32:	ed8d 4a42 	vstr	s8, [sp, #264]	; 0x108
 800ea36:	ed8d 4a43 	vstr	s8, [sp, #268]	; 0x10c
 800ea3a:	ed8d 4a44 	vstr	s8, [sp, #272]	; 0x110
 800ea3e:	edcd 6a79 	vstr	s13, [sp, #484]	; 0x1e4
 800ea42:	ed8d 7a73 	vstr	s14, [sp, #460]	; 0x1cc
 800ea46:	ed8d 7a74 	vstr	s14, [sp, #464]	; 0x1d0
 800ea4a:	ed8d 6a49 	vstr	s12, [sp, #292]	; 0x124
 800ea4e:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 800ea52:	f88d 10ad 	strb.w	r1, [sp, #173]	; 0xad
 800ea56:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 800ea5a:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 800ea5e:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 800ea62:	b159      	cbz	r1, 800ea7c <kalman_3gyro.constprop.0+0x1dec>
 800ea64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ea68:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ea6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea70:	dd04      	ble.n	800ea7c <kalman_3gyro.constprop.0+0x1dec>
 800ea72:	2000      	movs	r0, #0
 800ea74:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
 800ea78:	f8ad 00ac 	strh.w	r0, [sp, #172]	; 0xac
 800ea7c:	eef5 eac0 	vcmpe.f32	s29, #0.0
 800ea80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea84:	dd09      	ble.n	800ea9a <kalman_3gyro.constprop.0+0x1e0a>
 800ea86:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 800ea8a:	eef4 7ac8 	vcmpe.f32	s15, s16
 800ea8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea92:	db02      	blt.n	800ea9a <kalman_3gyro.constprop.0+0x1e0a>
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	f002 8001 	beq.w	8010a9c <kalman_3gyro.constprop.0+0x3e0c>
 800ea9a:	b132      	cbz	r2, 800eaaa <kalman_3gyro.constprop.0+0x1e1a>
 800ea9c:	f240 1001 	movw	r0, #257	; 0x101
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	f8ad 00a8 	strh.w	r0, [sp, #168]	; 0xa8
 800eaa6:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800eaaa:	2301      	movs	r3, #1
 800eaac:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800eab0:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 800eab4:	ed5f 7a56 	vldr	s15, [pc, #-344]	; 800e960 <kalman_3gyro.constprop.0+0x1cd0>
 800eab8:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800eabc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eac0:	dc09      	bgt.n	800ead6 <kalman_3gyro.constprop.0+0x1e46>
 800eac2:	ed5f 7a58 	vldr	s15, [pc, #-352]	; 800e964 <kalman_3gyro.constprop.0+0x1cd4>
 800eac6:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800eaca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eace:	d402      	bmi.n	800ead6 <kalman_3gyro.constprop.0+0x1e46>
 800ead0:	2a00      	cmp	r2, #0
 800ead2:	f042 80e4 	bne.w	8010c9e <kalman_3gyro.constprop.0+0x400e>
 800ead6:	2300      	movs	r3, #0
 800ead8:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 800eadc:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800eae0:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800eae4:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 800eae8:	ed5f 7a61 	vldr	s15, [pc, #-388]	; 800e968 <kalman_3gyro.constprop.0+0x1cd8>
 800eaec:	eeb4 aae7 	vcmpe.f32	s20, s15
 800eaf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaf4:	dc09      	bgt.n	800eb0a <kalman_3gyro.constprop.0+0x1e7a>
 800eaf6:	ed5f 7a63 	vldr	s15, [pc, #-396]	; 800e96c <kalman_3gyro.constprop.0+0x1cdc>
 800eafa:	eeb4 aae7 	vcmpe.f32	s20, s15
 800eafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb02:	d402      	bmi.n	800eb0a <kalman_3gyro.constprop.0+0x1e7a>
 800eb04:	2900      	cmp	r1, #0
 800eb06:	f042 8097 	bne.w	8010c38 <kalman_3gyro.constprop.0+0x3fa8>
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
 800eb10:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
 800eb14:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800eb18:	f88d 30b2 	strb.w	r3, [sp, #178]	; 0xb2
 800eb1c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800eb20:	eef4 dae7 	vcmpe.f32	s27, s15
 800eb24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb28:	f341 836b 	ble.w	8010202 <kalman_3gyro.constprop.0+0x3572>
 800eb2c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800eb30:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800eb34:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 800eb38:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800eb42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb46:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800eb4a:	eef4 dac7 	vcmpe.f32	s27, s14
 800eb4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb52:	bfc4      	itt	gt
 800eb54:	f88d 30b1 	strbgt.w	r3, [sp, #177]	; 0xb1
 800eb58:	f88d 30b3 	strbgt.w	r3, [sp, #179]	; 0xb3
 800eb5c:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 800eb60:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800eb64:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 800eb68:	edcd 3a78 	vstr	s7, [sp, #480]	; 0x1e0
 800eb6c:	2b0e      	cmp	r3, #14
 800eb6e:	edcd 7a7a 	vstr	s15, [sp, #488]	; 0x1e8
 800eb72:	dc02      	bgt.n	800eb7a <kalman_3gyro.constprop.0+0x1eea>
 800eb74:	3305      	adds	r3, #5
 800eb76:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 800eb7a:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800eb7e:	eef4 7acd 	vcmpe.f32	s15, s26
 800eb82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb86:	f340 82e9 	ble.w	800f15c <kalman_3gyro.constprop.0+0x24cc>
 800eb8a:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 800eb8e:	eef4 7aeb 	vcmpe.f32	s15, s23
 800eb92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb96:	f340 82e1 	ble.w	800f15c <kalman_3gyro.constprop.0+0x24cc>
 800eb9a:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800eb9e:	eef4 7aec 	vcmpe.f32	s15, s25
 800eba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eba6:	f340 82d9 	ble.w	800f15c <kalman_3gyro.constprop.0+0x24cc>
 800ebaa:	9b08      	ldr	r3, [sp, #32]
 800ebac:	ed5f 7a90 	vldr	s15, [pc, #-576]	; 800e970 <kalman_3gyro.constprop.0+0x1ce0>
 800ebb0:	ed93 7a06 	vldr	s14, [r3, #24]
 800ebb4:	eef0 6ac7 	vabs.f32	s13, s14
 800ebb8:	eef4 6ae7 	vcmpe.f32	s13, s15
 800ebbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebc0:	f140 82cc 	bpl.w	800f15c <kalman_3gyro.constprop.0+0x24cc>
 800ebc4:	edd3 6a07 	vldr	s13, [r3, #28]
 800ebc8:	eeb0 6ae6 	vabs.f32	s12, s13
 800ebcc:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800ebd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebd4:	f140 82c2 	bpl.w	800f15c <kalman_3gyro.constprop.0+0x24cc>
 800ebd8:	ed93 6a08 	vldr	s12, [r3, #32]
 800ebdc:	eef0 4ac6 	vabs.f32	s9, s12
 800ebe0:	eef4 4ae7 	vcmpe.f32	s9, s15
 800ebe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebe8:	f140 82b8 	bpl.w	800f15c <kalman_3gyro.constprop.0+0x24cc>
 800ebec:	ed5f 7a9f 	vldr	s15, [pc, #-636]	; 800e974 <kalman_3gyro.constprop.0+0x1ce4>
 800ebf0:	eef0 5ae5 	vabs.f32	s11, s11
 800ebf4:	eef4 5ae7 	vcmpe.f32	s11, s15
 800ebf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebfc:	f140 82ae 	bpl.w	800f15c <kalman_3gyro.constprop.0+0x24cc>
 800ec00:	eef0 1ae1 	vabs.f32	s3, s3
 800ec04:	eef4 1ae7 	vcmpe.f32	s3, s15
 800ec08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec0c:	f140 82a6 	bpl.w	800f15c <kalman_3gyro.constprop.0+0x24cc>
 800ec10:	eeb0 5ac5 	vabs.f32	s10, s10
 800ec14:	eeb4 5ae7 	vcmpe.f32	s10, s15
 800ec18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec1c:	f140 829e 	bpl.w	800f15c <kalman_3gyro.constprop.0+0x24cc>
 800ec20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec22:	f89b 21a0 	ldrb.w	r2, [fp, #416]	; 0x1a0
 800ec26:	edd3 5a00 	vldr	s11, [r3]
 800ec2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ec2c:	991d      	ldr	r1, [sp, #116]	; 0x74
 800ec2e:	ed93 5a00 	vldr	s10, [r3]
 800ec32:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ec34:	eef4 5ac5 	vcmpe.f32	s11, s10
 800ec38:	2a09      	cmp	r2, #9
 800ec3a:	f50b 64f6 	add.w	r4, fp, #1968	; 0x7b0
 800ec3e:	ed93 4a00 	vldr	s8, [r3]
 800ec42:	edd4 3a00 	vldr	s7, [r4]
 800ec46:	bf8c      	ite	hi
 800ec48:	230a      	movhi	r3, #10
 800ec4a:	2305      	movls	r3, #5
 800ec4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec50:	bfb4      	ite	lt
 800ec52:	eef0 7a45 	vmovlt.f32	s15, s10
 800ec56:	eef0 7a65 	vmovge.f32	s15, s11
 800ec5a:	bf8c      	ite	hi
 800ec5c:	eef0 4a45 	vmovhi.f32	s9, s10
 800ec60:	eef0 4a65 	vmovls.f32	s9, s11
 800ec64:	eef4 7ae3 	vcmpe.f32	s15, s7
 800ec68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec6c:	eef4 4ae3 	vcmpe.f32	s9, s7
 800ec70:	bfb8      	it	lt
 800ec72:	eef0 7a63 	vmovlt.f32	s15, s7
 800ec76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec7a:	bf88      	it	hi
 800ec7c:	eef0 4a63 	vmovhi.f32	s9, s7
 800ec80:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ec84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec88:	ee35 5a85 	vadd.f32	s10, s11, s10
 800ec8c:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ec90:	edd1 5a00 	vldr	s11, [r1]
 800ec94:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ec96:	bfb8      	it	lt
 800ec98:	eef0 7a44 	vmovlt.f32	s15, s8
 800ec9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eca0:	bf88      	it	hi
 800eca2:	eef0 4a44 	vmovhi.f32	s9, s8
 800eca6:	eef4 7ae5 	vcmpe.f32	s15, s11
 800ecaa:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ecae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecb2:	eef4 4ae5 	vcmpe.f32	s9, s11
 800ecb6:	bfb8      	it	lt
 800ecb8:	eef0 7a65 	vmovlt.f32	s15, s11
 800ecbc:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ecc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecc4:	bf88      	it	hi
 800ecc6:	eef0 4a65 	vmovhi.f32	s9, s11
 800ecca:	2b05      	cmp	r3, #5
 800eccc:	ee35 5a25 	vadd.f32	s10, s10, s11
 800ecd0:	edd1 5a00 	vldr	s11, [r1]
 800ecd4:	d065      	beq.n	800eda2 <kalman_3gyro.constprop.0+0x2112>
 800ecd6:	f20b 71d4 	addw	r1, fp, #2004	; 0x7d4
 800ecda:	edd1 3a00 	vldr	s7, [r1]
 800ecde:	f50b 61fc 	add.w	r1, fp, #2016	; 0x7e0
 800ece2:	eef4 7ae3 	vcmpe.f32	s15, s7
 800ece6:	ed91 4a00 	vldr	s8, [r1]
 800ecea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecee:	eef4 4ae3 	vcmpe.f32	s9, s7
 800ecf2:	bfb8      	it	lt
 800ecf4:	eef0 7a63 	vmovlt.f32	s15, s7
 800ecf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecfc:	bf88      	it	hi
 800ecfe:	eef0 4a63 	vmovhi.f32	s9, s7
 800ed02:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ed06:	f20b 71ec 	addw	r1, fp, #2028	; 0x7ec
 800ed0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed0e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ed12:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ed16:	edd1 3a00 	vldr	s7, [r1]
 800ed1a:	bfb8      	it	lt
 800ed1c:	eef0 7a44 	vmovlt.f32	s15, s8
 800ed20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed24:	bf88      	it	hi
 800ed26:	eef0 4a44 	vmovhi.f32	s9, s8
 800ed2a:	eef4 7ae3 	vcmpe.f32	s15, s7
 800ed2e:	f50b 61ff 	add.w	r1, fp, #2040	; 0x7f8
 800ed32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed36:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ed3a:	eef4 4ae3 	vcmpe.f32	s9, s7
 800ed3e:	ed91 4a00 	vldr	s8, [r1]
 800ed42:	bfb8      	it	lt
 800ed44:	eef0 7a63 	vmovlt.f32	s15, s7
 800ed48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed4c:	bf88      	it	hi
 800ed4e:	eef0 4a63 	vmovhi.f32	s9, s7
 800ed52:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ed56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed5a:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ed5e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ed62:	bfb8      	it	lt
 800ed64:	eef0 7a44 	vmovlt.f32	s15, s8
 800ed68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed6c:	bf88      	it	hi
 800ed6e:	eef0 4a44 	vmovhi.f32	s9, s8
 800ed72:	2b0a      	cmp	r3, #10
 800ed74:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ed78:	d113      	bne.n	800eda2 <kalman_3gyro.constprop.0+0x2112>
 800ed7a:	f60b 0104 	addw	r1, fp, #2052	; 0x804
 800ed7e:	ed91 4a00 	vldr	s8, [r1]
 800ed82:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ed86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed8a:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ed8e:	bfb8      	it	lt
 800ed90:	eef0 7a44 	vmovlt.f32	s15, s8
 800ed94:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ed98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed9c:	bf88      	it	hi
 800ed9e:	eef0 4a44 	vmovhi.f32	s9, s8
 800eda2:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800eda6:	eddf 4ae7 	vldr	s9, [pc, #924]	; 800f144 <kalman_3gyro.constprop.0+0x24b4>
 800edaa:	ed9f 4ae7 	vldr	s8, [pc, #924]	; 800f148 <kalman_3gyro.constprop.0+0x24b8>
 800edae:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800edb2:	ee25 5a04 	vmul.f32	s10, s10, s8
 800edb6:	eef4 7ae4 	vcmpe.f32	s15, s9
 800edba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edbe:	f300 81cd 	bgt.w	800f15c <kalman_3gyro.constprop.0+0x24cc>
 800edc2:	eef0 7ac5 	vabs.f32	s15, s10
 800edc6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800edca:	ed9f 5ae0 	vldr	s10, [pc, #896]	; 800f14c <kalman_3gyro.constprop.0+0x24bc>
 800edce:	eef4 7ac5 	vcmpe.f32	s15, s10
 800edd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edd6:	f300 81c1 	bgt.w	800f15c <kalman_3gyro.constprop.0+0x24cc>
 800edda:	9911      	ldr	r1, [sp, #68]	; 0x44
 800eddc:	ed91 5a00 	vldr	s10, [r1]
 800ede0:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ede2:	ed91 4a00 	vldr	s8, [r1]
 800ede6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800ede8:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800edec:	f20b 70b4 	addw	r0, fp, #1972	; 0x7b4
 800edf0:	ed90 3a00 	vldr	s6, [r0]
 800edf4:	edd1 3a00 	vldr	s7, [r1]
 800edf8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800edfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edfe:	bfb4      	ite	lt
 800ee00:	eef0 7a44 	vmovlt.f32	s15, s8
 800ee04:	eef0 7a45 	vmovge.f32	s15, s10
 800ee08:	bf8c      	ite	hi
 800ee0a:	eef0 4a44 	vmovhi.f32	s9, s8
 800ee0e:	eef0 4a45 	vmovls.f32	s9, s10
 800ee12:	eef4 7ac3 	vcmpe.f32	s15, s6
 800ee16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee1a:	eef4 4ac3 	vcmpe.f32	s9, s6
 800ee1e:	bfb8      	it	lt
 800ee20:	eef0 7a43 	vmovlt.f32	s15, s6
 800ee24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee28:	bf88      	it	hi
 800ee2a:	eef0 4a43 	vmovhi.f32	s9, s6
 800ee2e:	eef4 7ae3 	vcmpe.f32	s15, s7
 800ee32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee36:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ee3a:	eef4 4ae3 	vcmpe.f32	s9, s7
 800ee3e:	ed91 4a00 	vldr	s8, [r1]
 800ee42:	bfb8      	it	lt
 800ee44:	eef0 7a63 	vmovlt.f32	s15, s7
 800ee48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee4c:	bf88      	it	hi
 800ee4e:	eef0 4a63 	vmovhi.f32	s9, s7
 800ee52:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ee56:	ee35 5a03 	vadd.f32	s10, s10, s6
 800ee5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee5e:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ee62:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ee66:	bfb8      	it	lt
 800ee68:	eef0 7a44 	vmovlt.f32	s15, s8
 800ee6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee70:	bf88      	it	hi
 800ee72:	eef0 4a44 	vmovhi.f32	s9, s8
 800ee76:	2b05      	cmp	r3, #5
 800ee78:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ee7c:	d065      	beq.n	800ef4a <kalman_3gyro.constprop.0+0x22ba>
 800ee7e:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 800ee82:	edd1 3a00 	vldr	s7, [r1]
 800ee86:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 800ee8a:	eef4 7ae3 	vcmpe.f32	s15, s7
 800ee8e:	ed91 4a00 	vldr	s8, [r1]
 800ee92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee96:	eef4 4ae3 	vcmpe.f32	s9, s7
 800ee9a:	bfb8      	it	lt
 800ee9c:	eef0 7a63 	vmovlt.f32	s15, s7
 800eea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eea4:	bf88      	it	hi
 800eea6:	eef0 4a63 	vmovhi.f32	s9, s7
 800eeaa:	eef4 7ac4 	vcmpe.f32	s15, s8
 800eeae:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 800eeb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeb6:	ee35 5a23 	vadd.f32	s10, s10, s7
 800eeba:	eef4 4ac4 	vcmpe.f32	s9, s8
 800eebe:	edd1 3a00 	vldr	s7, [r1]
 800eec2:	bfb8      	it	lt
 800eec4:	eef0 7a44 	vmovlt.f32	s15, s8
 800eec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eecc:	bf88      	it	hi
 800eece:	eef0 4a44 	vmovhi.f32	s9, s8
 800eed2:	eef4 7ae3 	vcmpe.f32	s15, s7
 800eed6:	f20b 71fc 	addw	r1, fp, #2044	; 0x7fc
 800eeda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eede:	ee35 5a04 	vadd.f32	s10, s10, s8
 800eee2:	eef4 4ae3 	vcmpe.f32	s9, s7
 800eee6:	ed91 4a00 	vldr	s8, [r1]
 800eeea:	bfb8      	it	lt
 800eeec:	eef0 7a63 	vmovlt.f32	s15, s7
 800eef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eef4:	bf88      	it	hi
 800eef6:	eef0 4a63 	vmovhi.f32	s9, s7
 800eefa:	eef4 7ac4 	vcmpe.f32	s15, s8
 800eefe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef02:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ef06:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ef0a:	bfb8      	it	lt
 800ef0c:	eef0 7a44 	vmovlt.f32	s15, s8
 800ef10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef14:	bf88      	it	hi
 800ef16:	eef0 4a44 	vmovhi.f32	s9, s8
 800ef1a:	2b0a      	cmp	r3, #10
 800ef1c:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ef20:	d113      	bne.n	800ef4a <kalman_3gyro.constprop.0+0x22ba>
 800ef22:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 800ef26:	ed91 4a00 	vldr	s8, [r1]
 800ef2a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ef2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef32:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ef36:	bfb8      	it	lt
 800ef38:	eef0 7a44 	vmovlt.f32	s15, s8
 800ef3c:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ef40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef44:	bf88      	it	hi
 800ef46:	eef0 4a44 	vmovhi.f32	s9, s8
 800ef4a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800ef4e:	eddf 4a7d 	vldr	s9, [pc, #500]	; 800f144 <kalman_3gyro.constprop.0+0x24b4>
 800ef52:	ed9f 4a7d 	vldr	s8, [pc, #500]	; 800f148 <kalman_3gyro.constprop.0+0x24b8>
 800ef56:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ef5a:	ee25 5a04 	vmul.f32	s10, s10, s8
 800ef5e:	eef4 7ae4 	vcmpe.f32	s15, s9
 800ef62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef66:	f300 80f9 	bgt.w	800f15c <kalman_3gyro.constprop.0+0x24cc>
 800ef6a:	eef0 7ac5 	vabs.f32	s15, s10
 800ef6e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ef72:	ed9f 5a76 	vldr	s10, [pc, #472]	; 800f14c <kalman_3gyro.constprop.0+0x24bc>
 800ef76:	eef4 7ac5 	vcmpe.f32	s15, s10
 800ef7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef7e:	f300 80ed 	bgt.w	800f15c <kalman_3gyro.constprop.0+0x24cc>
 800ef82:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ef84:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800ef86:	edd1 4a00 	vldr	s9, [r1]
 800ef8a:	9919      	ldr	r1, [sp, #100]	; 0x64
 800ef8c:	ed91 3a00 	vldr	s6, [r1]
 800ef90:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ef92:	eef4 4ac3 	vcmpe.f32	s9, s6
 800ef96:	ed91 4a00 	vldr	s8, [r1]
 800ef9a:	f50b 61f7 	add.w	r1, fp, #1976	; 0x7b8
 800ef9e:	edd1 3a00 	vldr	s7, [r1]
 800efa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efa6:	bfb4      	ite	lt
 800efa8:	eef0 7a43 	vmovlt.f32	s15, s6
 800efac:	eef0 7a64 	vmovge.f32	s15, s9
 800efb0:	bf8c      	ite	hi
 800efb2:	eeb0 5a43 	vmovhi.f32	s10, s6
 800efb6:	eeb0 5a64 	vmovls.f32	s10, s9
 800efba:	eef4 3ae7 	vcmpe.f32	s7, s15
 800efbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efc2:	eef4 3ac5 	vcmpe.f32	s7, s10
 800efc6:	bfa8      	it	ge
 800efc8:	eef0 7a63 	vmovge.f32	s15, s7
 800efcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efd0:	bf98      	it	ls
 800efd2:	eeb0 5a63 	vmovls.f32	s10, s7
 800efd6:	eeb4 4ae7 	vcmpe.f32	s8, s15
 800efda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efde:	ee34 3a83 	vadd.f32	s6, s9, s6
 800efe2:	eeb4 4ac5 	vcmpe.f32	s8, s10
 800efe6:	edd5 4a00 	vldr	s9, [r5]
 800efea:	bfa8      	it	ge
 800efec:	eef0 7a44 	vmovge.f32	s15, s8
 800eff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eff4:	bf98      	it	ls
 800eff6:	eeb0 5a44 	vmovls.f32	s10, s8
 800effa:	eef4 7ae4 	vcmpe.f32	s15, s9
 800effe:	ee73 3a83 	vadd.f32	s7, s7, s6
 800f002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f006:	eef4 4ac5 	vcmpe.f32	s9, s10
 800f00a:	bfb8      	it	lt
 800f00c:	eef0 7a64 	vmovlt.f32	s15, s9
 800f010:	ee34 4a23 	vadd.f32	s8, s8, s7
 800f014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f018:	bf98      	it	ls
 800f01a:	eeb0 5a64 	vmovls.f32	s10, s9
 800f01e:	2b05      	cmp	r3, #5
 800f020:	ee74 4a84 	vadd.f32	s9, s9, s8
 800f024:	d065      	beq.n	800f0f2 <kalman_3gyro.constprop.0+0x2462>
 800f026:	f20b 75dc 	addw	r5, fp, #2012	; 0x7dc
 800f02a:	ed95 4a00 	vldr	s8, [r5]
 800f02e:	f50b 65fd 	add.w	r5, fp, #2024	; 0x7e8
 800f032:	eef4 7ac4 	vcmpe.f32	s15, s8
 800f036:	ed95 3a00 	vldr	s6, [r5]
 800f03a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f03e:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800f042:	bfb8      	it	lt
 800f044:	eef0 7a44 	vmovlt.f32	s15, s8
 800f048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f04c:	bf88      	it	hi
 800f04e:	eeb0 5a44 	vmovhi.f32	s10, s8
 800f052:	eef4 7ac3 	vcmpe.f32	s15, s6
 800f056:	f20b 75f4 	addw	r5, fp, #2036	; 0x7f4
 800f05a:	edd5 3a00 	vldr	s7, [r5]
 800f05e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f062:	eeb4 5ac3 	vcmpe.f32	s10, s6
 800f066:	bfb8      	it	lt
 800f068:	eef0 7a43 	vmovlt.f32	s15, s6
 800f06c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f070:	bf88      	it	hi
 800f072:	eeb0 5a43 	vmovhi.f32	s10, s6
 800f076:	eef4 7ae3 	vcmpe.f32	s15, s7
 800f07a:	f50b 6500 	add.w	r5, fp, #2048	; 0x800
 800f07e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f082:	ee34 4a24 	vadd.f32	s8, s8, s9
 800f086:	eeb4 5ae3 	vcmpe.f32	s10, s7
 800f08a:	edd5 4a00 	vldr	s9, [r5]
 800f08e:	bfb8      	it	lt
 800f090:	eef0 7a63 	vmovlt.f32	s15, s7
 800f094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f098:	bf88      	it	hi
 800f09a:	eeb0 5a63 	vmovhi.f32	s10, s7
 800f09e:	eef4 7ae4 	vcmpe.f32	s15, s9
 800f0a2:	ee34 4a03 	vadd.f32	s8, s8, s6
 800f0a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0aa:	eeb4 5ae4 	vcmpe.f32	s10, s9
 800f0ae:	bfb8      	it	lt
 800f0b0:	eef0 7a64 	vmovlt.f32	s15, s9
 800f0b4:	ee34 4a23 	vadd.f32	s8, s8, s7
 800f0b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0bc:	bf88      	it	hi
 800f0be:	eeb0 5a64 	vmovhi.f32	s10, s9
 800f0c2:	2b0a      	cmp	r3, #10
 800f0c4:	ee74 4a24 	vadd.f32	s9, s8, s9
 800f0c8:	d113      	bne.n	800f0f2 <kalman_3gyro.constprop.0+0x2462>
 800f0ca:	f60b 030c 	addw	r3, fp, #2060	; 0x80c
 800f0ce:	ed93 4a00 	vldr	s8, [r3]
 800f0d2:	eef4 7ac4 	vcmpe.f32	s15, s8
 800f0d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0da:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800f0de:	bfb8      	it	lt
 800f0e0:	eef0 7a44 	vmovlt.f32	s15, s8
 800f0e4:	ee74 4a84 	vadd.f32	s9, s9, s8
 800f0e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0ec:	bf88      	it	hi
 800f0ee:	eeb0 5a44 	vmovhi.f32	s10, s8
 800f0f2:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800f0f6:	ed9f 4a13 	vldr	s8, [pc, #76]	; 800f144 <kalman_3gyro.constprop.0+0x24b4>
 800f0fa:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800f148 <kalman_3gyro.constprop.0+0x24b8>
 800f0fe:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f102:	ee64 4a85 	vmul.f32	s9, s9, s10
 800f106:	eef4 7ac4 	vcmpe.f32	s15, s8
 800f10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f10e:	dc25      	bgt.n	800f15c <kalman_3gyro.constprop.0+0x24cc>
 800f110:	eef0 7ae4 	vabs.f32	s15, s9
 800f114:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800f118:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800f14c <kalman_3gyro.constprop.0+0x24bc>
 800f11c:	eef4 5ae7 	vcmpe.f32	s11, s15
 800f120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f124:	dc1a      	bgt.n	800f15c <kalman_3gyro.constprop.0+0x24cc>
 800f126:	f89b 5005 	ldrb.w	r5, [fp, #5]
 800f12a:	2d00      	cmp	r5, #0
 800f12c:	f000 80e0 	beq.w	800f2f0 <kalman_3gyro.constprop.0+0x2660>
 800f130:	f005 03fd 	and.w	r3, r5, #253	; 0xfd
 800f134:	2b01      	cmp	r3, #1
 800f136:	f002 8439 	beq.w	80119ac <kalman_3gyro.constprop.0+0x4d1c>
 800f13a:	2201      	movs	r2, #1
 800f13c:	462b      	mov	r3, r5
 800f13e:	9201      	str	r2, [sp, #4]
 800f140:	e01c      	b.n	800f17c <kalman_3gyro.constprop.0+0x24ec>
 800f142:	bf00      	nop
 800f144:	3be56041 	.word	0x3be56041
 800f148:	3dcccccd 	.word	0x3dcccccd
 800f14c:	3e333333 	.word	0x3e333333
 800f150:	3d088889 	.word	0x3d088889
 800f154:	42480000 	.word	0x42480000
 800f158:	00000000 	.word	0x00000000
 800f15c:	f89b 3005 	ldrb.w	r3, [fp, #5]
 800f160:	2100      	movs	r1, #0
 800f162:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 800f166:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	f000 80c1 	beq.w	800f2f2 <kalman_3gyro.constprop.0+0x2662>
 800f170:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800f174:	2a01      	cmp	r2, #1
 800f176:	f001 8615 	beq.w	8010da4 <kalman_3gyro.constprop.0+0x4114>
 800f17a:	9101      	str	r1, [sp, #4]
 800f17c:	2b02      	cmp	r3, #2
 800f17e:	f041 87d2 	bne.w	8011126 <kalman_3gyro.constprop.0+0x4496>
 800f182:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800f186:	eecd 6a27 	vdiv.f32	s13, s26, s15
 800f18a:	f240 1301 	movw	r3, #257	; 0x101
 800f18e:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
 800f192:	2301      	movs	r3, #1
 800f194:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 800f198:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 800f19c:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 800f1a0:	ee8b 6aa7 	vdiv.f32	s12, s23, s15
 800f1a4:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800f1a8:	ed8d 6a2e 	vstr	s12, [sp, #184]	; 0xb8
 800f1ac:	ee8c 7aa7 	vdiv.f32	s14, s25, s15
 800f1b0:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 800f1b4:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 800f1b8:	eef4 5a00 	vmov.f32	s11, #64	; 0x3e000000  0.125
 800f1bc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f1c0:	eef4 7ac8 	vcmpe.f32	s15, s16
 800f1c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1c8:	f2c2 809a 	blt.w	8011300 <kalman_3gyro.constprop.0+0x4670>
 800f1cc:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 800f1d0:	2a00      	cmp	r2, #0
 800f1d2:	f002 83db 	beq.w	801198c <kalman_3gyro.constprop.0+0x4cfc>
 800f1d6:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 800f1da:	3301      	adds	r3, #1
 800f1dc:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 800f1e0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f1e4:	f8db 31a4 	ldr.w	r3, [fp, #420]	; 0x1a4
 800f1e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f1ec:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 800f1f0:	f002 84da 	beq.w	8011ba8 <kalman_3gyro.constprop.0+0x4f18>
 800f1f4:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 800f1f8:	f002 80d0 	beq.w	801139c <kalman_3gyro.constprop.0+0x470c>
 800f1fc:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800f200:	2a00      	cmp	r2, #0
 800f202:	f042 80d0 	bne.w	80113a6 <kalman_3gyro.constprop.0+0x4716>
 800f206:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f208:	a830      	add	r0, sp, #192	; 0xc0
 800f20a:	f04f 31ff 	mov.w	r1, #4294967295
 800f20e:	4613      	mov	r3, r2
 800f210:	edd2 7a00 	vldr	s15, [r2]
 800f214:	3101      	adds	r1, #1
 800f216:	330c      	adds	r3, #12
 800f218:	3204      	adds	r2, #4
 800f21a:	461c      	mov	r4, r3
 800f21c:	ed94 7a00 	vldr	s14, [r4]
 800f220:	330c      	adds	r3, #12
 800f222:	4598      	cmp	r8, r3
 800f224:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f228:	d1f7      	bne.n	800f21a <kalman_3gyro.constprop.0+0x258a>
 800f22a:	2902      	cmp	r1, #2
 800f22c:	ece0 7a01 	vstmia	r0!, {s15}
 800f230:	f108 0804 	add.w	r8, r8, #4
 800f234:	d1eb      	bne.n	800f20e <kalman_3gyro.constprop.0+0x257e>
 800f236:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800f150 <kalman_3gyro.constprop.0+0x24c0>
 800f23a:	ed9d 4a30 	vldr	s8, [sp, #192]	; 0xc0
 800f23e:	eddd 4a31 	vldr	s9, [sp, #196]	; 0xc4
 800f242:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 800f246:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800f248:	f50b 71ac 	add.w	r1, fp, #344	; 0x158
 800f24c:	ee24 4a27 	vmul.f32	s8, s8, s15
 800f250:	ee64 4aa7 	vmul.f32	s9, s9, s15
 800f254:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f258:	460a      	mov	r2, r1
 800f25a:	f50b 70b2 	add.w	r0, fp, #356	; 0x164
 800f25e:	edd2 7a7c 	vldr	s15, [r2, #496]	; 0x1f0
 800f262:	f5a2 73ae 	sub.w	r3, r2, #348	; 0x15c
 800f266:	ed93 7ad6 	vldr	s14, [r3, #856]	; 0x358
 800f26a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f26e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f272:	f103 030c 	add.w	r3, r3, #12
 800f276:	bf88      	it	hi
 800f278:	eef0 7a47 	vmovhi.f32	s15, s14
 800f27c:	4293      	cmp	r3, r2
 800f27e:	d1f2      	bne.n	800f266 <kalman_3gyro.constprop.0+0x25d6>
 800f280:	1d1a      	adds	r2, r3, #4
 800f282:	4290      	cmp	r0, r2
 800f284:	ece4 7a01 	vstmia	r4!, {s15}
 800f288:	d1e9      	bne.n	800f25e <kalman_3gyro.constprop.0+0x25ce>
 800f28a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f28c:	ed9d 5a2d 	vldr	s10, [sp, #180]	; 0xb4
 800f290:	edd3 7a00 	vldr	s15, [r3]
 800f294:	eddd 5a2e 	vldr	s11, [sp, #184]	; 0xb8
 800f298:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 800f29c:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800f2a0:	ee97 5a84 	vfnms.f32	s10, s15, s8
 800f2a4:	eed7 5aa4 	vfnms.f32	s11, s15, s9
 800f2a8:	ee97 6aa6 	vfnms.f32	s12, s15, s13
 800f2ac:	ed8d 5a30 	vstr	s10, [sp, #192]	; 0xc0
 800f2b0:	edcd 5a31 	vstr	s11, [sp, #196]	; 0xc4
 800f2b4:	ed8d 6a32 	vstr	s12, [sp, #200]	; 0xc8
 800f2b8:	b14b      	cbz	r3, 800f2ce <kalman_3gyro.constprop.0+0x263e>
 800f2ba:	ed9d 7a03 	vldr	s14, [sp, #12]
 800f2be:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800f2c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f2c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2ca:	f102 8553 	bmi.w	8011d74 <kalman_3gyro.constprop.0+0x50e4>
 800f2ce:	f89b 21a1 	ldrb.w	r2, [fp, #417]	; 0x1a1
 800f2d2:	2a1e      	cmp	r2, #30
 800f2d4:	f002 84dd 	beq.w	8011c92 <kalman_3gyro.constprop.0+0x5002>
 800f2d8:	1c53      	adds	r3, r2, #1
 800f2da:	2aff      	cmp	r2, #255	; 0xff
 800f2dc:	bf14      	ite	ne
 800f2de:	b2db      	uxtbne	r3, r3
 800f2e0:	23ff      	moveq	r3, #255	; 0xff
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	f88b 31a1 	strb.w	r3, [fp, #417]	; 0x1a1
 800f2e8:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 800f2ec:	9b01      	ldr	r3, [sp, #4]
 800f2ee:	e012      	b.n	800f316 <kalman_3gyro.constprop.0+0x2686>
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	f8db 11bc 	ldr.w	r1, [fp, #444]	; 0x1bc
 800f2f6:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
 800f2fa:	9181      	str	r1, [sp, #516]	; 0x204
 800f2fc:	9282      	str	r2, [sp, #520]	; 0x208
 800f2fe:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 800f302:	9183      	str	r1, [sp, #524]	; 0x20c
 800f304:	2200      	movs	r2, #0
 800f306:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 800f30a:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 800f30e:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 800f312:	f88b 2001 	strb.w	r2, [fp, #1]
 800f316:	ed5f 7a71 	vldr	s15, [pc, #-452]	; 800f154 <kalman_3gyro.constprop.0+0x24c4>
 800f31a:	eeb4 cae7 	vcmpe.f32	s24, s15
 800f31e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f322:	f2c0 875f 	blt.w	80101e4 <kalman_3gyro.constprop.0+0x3554>
 800f326:	2200      	movs	r2, #0
 800f328:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 800f32c:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 800f330:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 800f334:	2b01      	cmp	r3, #1
 800f336:	d125      	bne.n	800f384 <kalman_3gyro.constprop.0+0x26f4>
 800f338:	ed9d 5a72 	vldr	s10, [sp, #456]	; 0x1c8
 800f33c:	eddd 5a73 	vldr	s11, [sp, #460]	; 0x1cc
 800f340:	ed9d 6a74 	vldr	s12, [sp, #464]	; 0x1d0
 800f344:	eddd 6a42 	vldr	s13, [sp, #264]	; 0x108
 800f348:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800f34c:	eddd 7a44 	vldr	s15, [sp, #272]	; 0x110
 800f350:	eef6 4a08 	vmov.f32	s9, #104	; 0x3f400000  0.750
 800f354:	ee25 5a24 	vmul.f32	s10, s10, s9
 800f358:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800f35c:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f360:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800f364:	ee37 7a07 	vadd.f32	s14, s14, s14
 800f368:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f36c:	ed8d 5a72 	vstr	s10, [sp, #456]	; 0x1c8
 800f370:	edcd 5a73 	vstr	s11, [sp, #460]	; 0x1cc
 800f374:	ed8d 6a74 	vstr	s12, [sp, #464]	; 0x1d0
 800f378:	edcd 6a42 	vstr	s13, [sp, #264]	; 0x108
 800f37c:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800f380:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
 800f384:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800f388:	eddb 3a7f 	vldr	s7, [fp, #508]	; 0x1fc
 800f38c:	ed9d 8a42 	vldr	s16, [sp, #264]	; 0x108
 800f390:	ed9b 3a75 	vldr	s6, [fp, #468]	; 0x1d4
 800f394:	ed9b 4a89 	vldr	s8, [fp, #548]	; 0x224
 800f398:	eddb 4a93 	vldr	s9, [fp, #588]	; 0x24c
 800f39c:	ed9b 5a9d 	vldr	s10, [fp, #628]	; 0x274
 800f3a0:	eddb 5aa7 	vldr	s11, [fp, #668]	; 0x29c
 800f3a4:	ed9b 6ab1 	vldr	s12, [fp, #708]	; 0x2c4
 800f3a8:	eddb 6abb 	vldr	s13, [fp, #748]	; 0x2ec
 800f3ac:	eddd 7a4a 	vldr	s15, [sp, #296]	; 0x128
 800f3b0:	ed9d 0a44 	vldr	s0, [sp, #272]	; 0x110
 800f3b4:	eddd 0a45 	vldr	s1, [sp, #276]	; 0x114
 800f3b8:	ed9d 1a46 	vldr	s2, [sp, #280]	; 0x118
 800f3bc:	eddd 1a47 	vldr	s3, [sp, #284]	; 0x11c
 800f3c0:	ed9d 2a48 	vldr	s4, [sp, #288]	; 0x120
 800f3c4:	eddd 2a49 	vldr	s5, [sp, #292]	; 0x124
 800f3c8:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 800f3cc:	eee7 3a07 	vfma.f32	s7, s14, s14
 800f3d0:	f50b 73ea 	add.w	r3, fp, #468	; 0x1d4
 800f3d4:	9301      	str	r3, [sp, #4]
 800f3d6:	ed9b 7ac5 	vldr	s14, [fp, #788]	; 0x314
 800f3da:	edcd 8a76 	vstr	s17, [sp, #472]	; 0x1d8
 800f3de:	eea7 7aa7 	vfma.f32	s14, s15, s15
 800f3e2:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 800f3e6:	f50d 64c3 	add.w	r4, sp, #1560	; 0x618
 800f3ea:	eea8 3a08 	vfma.f32	s6, s16, s16
 800f3ee:	2500      	movs	r5, #0
 800f3f0:	eea0 4a00 	vfma.f32	s8, s0, s0
 800f3f4:	eee0 4aa0 	vfma.f32	s9, s1, s1
 800f3f8:	eea1 5a01 	vfma.f32	s10, s2, s2
 800f3fc:	eee1 5aa1 	vfma.f32	s11, s3, s3
 800f400:	eea2 6a02 	vfma.f32	s12, s4, s4
 800f404:	eee2 6aa2 	vfma.f32	s13, s5, s5
 800f408:	eddd 7a6f 	vldr	s15, [sp, #444]	; 0x1bc
 800f40c:	edcd 8a77 	vstr	s17, [sp, #476]	; 0x1dc
 800f410:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f414:	ed8b 4a89 	vstr	s8, [fp, #548]	; 0x224
 800f418:	edcb 4a93 	vstr	s9, [fp, #588]	; 0x24c
 800f41c:	ed8b 5a9d 	vstr	s10, [fp, #628]	; 0x274
 800f420:	edcb 5aa7 	vstr	s11, [fp, #668]	; 0x29c
 800f424:	ed8b 6ab1 	vstr	s12, [fp, #708]	; 0x2c4
 800f428:	edcb 6abb 	vstr	s13, [fp, #748]	; 0x2ec
 800f42c:	ed8b 7ac5 	vstr	s14, [fp, #788]	; 0x314
 800f430:	ed8b 3a75 	vstr	s6, [fp, #468]	; 0x1d4
 800f434:	edcb 3a7f 	vstr	s7, [fp, #508]	; 0x1fc
 800f438:	edcd 7a87 	vstr	s15, [sp, #540]	; 0x21c
 800f43c:	ed9d 4a70 	vldr	s8, [sp, #448]	; 0x1c0
 800f440:	eddd 4a71 	vldr	s9, [sp, #452]	; 0x1c4
 800f444:	ed9d 5a72 	vldr	s10, [sp, #456]	; 0x1c8
 800f448:	eddd 5a73 	vldr	s11, [sp, #460]	; 0x1cc
 800f44c:	ed9d 6a74 	vldr	s12, [sp, #464]	; 0x1d0
 800f450:	eddd 6a78 	vldr	s13, [sp, #480]	; 0x1e0
 800f454:	ed9d 7a79 	vldr	s14, [sp, #484]	; 0x1e4
 800f458:	eddd 7a7a 	vldr	s15, [sp, #488]	; 0x1e8
 800f45c:	ed1f 8ac2 	vldr	s16, [pc, #-776]	; 800f158 <kalman_3gyro.constprop.0+0x24c8>
 800f460:	ee68 8aa8 	vmul.f32	s17, s17, s17
 800f464:	ee24 4a04 	vmul.f32	s8, s8, s8
 800f468:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800f46c:	ee25 5a05 	vmul.f32	s10, s10, s10
 800f470:	ee65 5aa5 	vmul.f32	s11, s11, s11
 800f474:	ee26 6a06 	vmul.f32	s12, s12, s12
 800f478:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800f47c:	ee27 7a07 	vmul.f32	s14, s14, s14
 800f480:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f484:	ed8d 4a88 	vstr	s8, [sp, #544]	; 0x220
 800f488:	edcd 8a8d 	vstr	s17, [sp, #564]	; 0x234
 800f48c:	edcd 8a8e 	vstr	s17, [sp, #568]	; 0x238
 800f490:	edcd 8a8f 	vstr	s17, [sp, #572]	; 0x23c
 800f494:	edcd 4a89 	vstr	s9, [sp, #548]	; 0x224
 800f498:	ed8d 5a8a 	vstr	s10, [sp, #552]	; 0x228
 800f49c:	edcd 5a8b 	vstr	s11, [sp, #556]	; 0x22c
 800f4a0:	ed8d 6a8c 	vstr	s12, [sp, #560]	; 0x230
 800f4a4:	edcd 6a90 	vstr	s13, [sp, #576]	; 0x240
 800f4a8:	ed8d 7a91 	vstr	s14, [sp, #580]	; 0x244
 800f4ac:	edcd 7a92 	vstr	s15, [sp, #584]	; 0x248
 800f4b0:	e005      	b.n	800f4be <kalman_3gyro.constprop.0+0x282e>
 800f4b2:	3501      	adds	r5, #1
 800f4b4:	2d0c      	cmp	r5, #12
 800f4b6:	f104 0404 	add.w	r4, r4, #4
 800f4ba:	f000 84fe 	beq.w	800feba <kalman_3gyro.constprop.0+0x322a>
 800f4be:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d0f5      	beq.n	800f4b2 <kalman_3gyro.constprop.0+0x2822>
 800f4c6:	edd4 da00 	vldr	s27, [r4]
 800f4ca:	ed94 ea0c 	vldr	s28, [r4, #48]	; 0x30
 800f4ce:	edd4 ea18 	vldr	s29, [r4, #96]	; 0x60
 800f4d2:	ed94 fa24 	vldr	s30, [r4, #144]	; 0x90
 800f4d6:	edd4 fa30 	vldr	s31, [r4, #192]	; 0xc0
 800f4da:	edd4 6a3c 	vldr	s13, [r4, #240]	; 0xf0
 800f4de:	ed94 6a48 	vldr	s12, [r4, #288]	; 0x120
 800f4e2:	edd4 5a54 	vldr	s11, [r4, #336]	; 0x150
 800f4e6:	ed94 5a60 	vldr	s10, [r4, #384]	; 0x180
 800f4ea:	9b01      	ldr	r3, [sp, #4]
 800f4ec:	ed89 8a00 	vstr	s16, [r9]
 800f4f0:	ed89 8a01 	vstr	s16, [r9, #4]
 800f4f4:	ed89 8a02 	vstr	s16, [r9, #8]
 800f4f8:	ed89 8a03 	vstr	s16, [r9, #12]
 800f4fc:	ed89 8a04 	vstr	s16, [r9, #16]
 800f500:	ed89 8a05 	vstr	s16, [r9, #20]
 800f504:	ed89 8a06 	vstr	s16, [r9, #24]
 800f508:	ed89 8a07 	vstr	s16, [r9, #28]
 800f50c:	ed89 8a08 	vstr	s16, [r9, #32]
 800f510:	464e      	mov	r6, r9
 800f512:	f50b 71fc 	add.w	r1, fp, #504	; 0x1f8
 800f516:	464a      	mov	r2, r9
 800f518:	ecb3 7a01 	vldmia	r3!, {s14}
 800f51c:	ecf2 7a01 	vldmia	r2!, {s15}
 800f520:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f528:	d006      	beq.n	800f538 <kalman_3gyro.constprop.0+0x28a8>
 800f52a:	eef5 da40 	vcmp.f32	s27, #0.0
 800f52e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f532:	bf18      	it	ne
 800f534:	eeed 7a87 	vfmane.f32	s15, s27, s14
 800f538:	ed93 7a08 	vldr	s14, [r3, #32]
 800f53c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f544:	d006      	beq.n	800f554 <kalman_3gyro.constprop.0+0x28c4>
 800f546:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f54a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f54e:	bf18      	it	ne
 800f550:	eeee 7a07 	vfmane.f32	s15, s28, s14
 800f554:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800f558:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f55c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f560:	d006      	beq.n	800f570 <kalman_3gyro.constprop.0+0x28e0>
 800f562:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f56a:	bf18      	it	ne
 800f56c:	eeee 7a87 	vfmane.f32	s15, s29, s14
 800f570:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800f574:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f57c:	d006      	beq.n	800f58c <kalman_3gyro.constprop.0+0x28fc>
 800f57e:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f586:	bf18      	it	ne
 800f588:	eeef 7a07 	vfmane.f32	s15, s30, s14
 800f58c:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800f590:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f598:	d006      	beq.n	800f5a8 <kalman_3gyro.constprop.0+0x2918>
 800f59a:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f59e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5a2:	bf18      	it	ne
 800f5a4:	eeef 7a87 	vfmane.f32	s15, s31, s14
 800f5a8:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 800f5ac:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f5b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5b4:	d006      	beq.n	800f5c4 <kalman_3gyro.constprop.0+0x2934>
 800f5b6:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f5ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5be:	bf18      	it	ne
 800f5c0:	eee6 7a87 	vfmane.f32	s15, s13, s14
 800f5c4:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 800f5c8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f5cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5d0:	d006      	beq.n	800f5e0 <kalman_3gyro.constprop.0+0x2950>
 800f5d2:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f5d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5da:	bf18      	it	ne
 800f5dc:	eee6 7a07 	vfmane.f32	s15, s12, s14
 800f5e0:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 800f5e4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f5e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5ec:	d006      	beq.n	800f5fc <kalman_3gyro.constprop.0+0x296c>
 800f5ee:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f5f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5f6:	bf18      	it	ne
 800f5f8:	eee5 7a87 	vfmane.f32	s15, s11, s14
 800f5fc:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 800f600:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f608:	d006      	beq.n	800f618 <kalman_3gyro.constprop.0+0x2988>
 800f60a:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f60e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f612:	bf18      	it	ne
 800f614:	eee5 7a07 	vfmane.f32	s15, s10, s14
 800f618:	428b      	cmp	r3, r1
 800f61a:	ed42 7a01 	vstr	s15, [r2, #-4]
 800f61e:	f47f af7b 	bne.w	800f518 <kalman_3gyro.constprop.0+0x2888>
 800f622:	eef5 da40 	vcmp.f32	s27, #0.0
 800f626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f62a:	edd9 8a00 	vldr	s17, [r9]
 800f62e:	f040 8543 	bne.w	80100b8 <kalman_3gyro.constprop.0+0x3428>
 800f632:	eef0 7a6d 	vmov.f32	s15, s27
 800f636:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f63a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f63e:	ed99 9a01 	vldr	s18, [r9, #4]
 800f642:	d006      	beq.n	800f652 <kalman_3gyro.constprop.0+0x29c2>
 800f644:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f64c:	bf18      	it	ne
 800f64e:	eee9 7a0e 	vfmane.f32	s15, s18, s28
 800f652:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f65a:	edd9 aa02 	vldr	s21, [r9, #8]
 800f65e:	d006      	beq.n	800f66e <kalman_3gyro.constprop.0+0x29de>
 800f660:	eef5 aa40 	vcmp.f32	s21, #0.0
 800f664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f668:	bf18      	it	ne
 800f66a:	eeea 7aae 	vfmane.f32	s15, s21, s29
 800f66e:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f676:	edd9 ba03 	vldr	s23, [r9, #12]
 800f67a:	d006      	beq.n	800f68a <kalman_3gyro.constprop.0+0x29fa>
 800f67c:	eef5 ba40 	vcmp.f32	s23, #0.0
 800f680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f684:	bf18      	it	ne
 800f686:	eeeb 7a8f 	vfmane.f32	s15, s23, s30
 800f68a:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f692:	edd9 ca04 	vldr	s25, [r9, #16]
 800f696:	d006      	beq.n	800f6a6 <kalman_3gyro.constprop.0+0x2a16>
 800f698:	eef5 ca40 	vcmp.f32	s25, #0.0
 800f69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6a0:	bf18      	it	ne
 800f6a2:	eeec 7aaf 	vfmane.f32	s15, s25, s31
 800f6a6:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f6aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6ae:	ed99 ca05 	vldr	s24, [r9, #20]
 800f6b2:	d006      	beq.n	800f6c2 <kalman_3gyro.constprop.0+0x2a32>
 800f6b4:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800f6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6bc:	bf18      	it	ne
 800f6be:	eeec 7a26 	vfmane.f32	s15, s24, s13
 800f6c2:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f6c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6ca:	ed99 da06 	vldr	s26, [r9, #24]
 800f6ce:	d006      	beq.n	800f6de <kalman_3gyro.constprop.0+0x2a4e>
 800f6d0:	eeb5 da40 	vcmp.f32	s26, #0.0
 800f6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6d8:	bf18      	it	ne
 800f6da:	eeed 7a06 	vfmane.f32	s15, s26, s12
 800f6de:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f6e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6e6:	ed99 aa07 	vldr	s20, [r9, #28]
 800f6ea:	d006      	beq.n	800f6fa <kalman_3gyro.constprop.0+0x2a6a>
 800f6ec:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800f6f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6f4:	bf18      	it	ne
 800f6f6:	eeea 7a25 	vfmane.f32	s15, s20, s11
 800f6fa:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f6fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f702:	ed99 ba08 	vldr	s22, [r9, #32]
 800f706:	d006      	beq.n	800f716 <kalman_3gyro.constprop.0+0x2a86>
 800f708:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800f70c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f710:	bf18      	it	ne
 800f712:	eeeb 7a05 	vfmane.f32	s15, s22, s10
 800f716:	ab87      	add	r3, sp, #540	; 0x21c
 800f718:	eb03 0285 	add.w	r2, r3, r5, lsl #2
 800f71c:	ed92 7a00 	vldr	s14, [r2]
 800f720:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f724:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800f728:	eec4 7a87 	vdiv.f32	s15, s9, s14
 800f72c:	2d05      	cmp	r5, #5
 800f72e:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800f732:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800f736:	ee29 9a27 	vmul.f32	s18, s18, s15
 800f73a:	ee6a aaa7 	vmul.f32	s21, s21, s15
 800f73e:	ee6b baa7 	vmul.f32	s23, s23, s15
 800f742:	ee6c caa7 	vmul.f32	s25, s25, s15
 800f746:	ee2c ca27 	vmul.f32	s24, s24, s15
 800f74a:	ee2d da27 	vmul.f32	s26, s26, s15
 800f74e:	ee2a aa27 	vmul.f32	s20, s20, s15
 800f752:	ee2b ba27 	vmul.f32	s22, s22, s15
 800f756:	edc9 8a00 	vstr	s17, [r9]
 800f75a:	ed89 9a01 	vstr	s18, [r9, #4]
 800f75e:	edc9 aa02 	vstr	s21, [r9, #8]
 800f762:	edc9 ba03 	vstr	s23, [r9, #12]
 800f766:	edc9 ca04 	vstr	s25, [r9, #16]
 800f76a:	ed89 ca05 	vstr	s24, [r9, #20]
 800f76e:	ed89 da06 	vstr	s26, [r9, #24]
 800f772:	ed89 aa07 	vstr	s20, [r9, #28]
 800f776:	ed89 ba08 	vstr	s22, [r9, #32]
 800f77a:	f340 8497 	ble.w	80100ac <kalman_3gyro.constprop.0+0x341c>
 800f77e:	eef5 da40 	vcmp.f32	s27, #0.0
 800f782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f786:	f000 8510 	beq.w	80101aa <kalman_3gyro.constprop.0+0x351a>
 800f78a:	eddb 7a6c 	vldr	s15, [fp, #432]	; 0x1b0
 800f78e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f796:	d001      	beq.n	800f79c <kalman_3gyro.constprop.0+0x2b0c>
 800f798:	ee67 7aad 	vmul.f32	s15, s15, s27
 800f79c:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f7a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7a4:	d008      	beq.n	800f7b8 <kalman_3gyro.constprop.0+0x2b28>
 800f7a6:	ed9b 7a6d 	vldr	s14, [fp, #436]	; 0x1b4
 800f7aa:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7b2:	bf18      	it	ne
 800f7b4:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 800f7b8:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f7bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7c0:	d008      	beq.n	800f7d4 <kalman_3gyro.constprop.0+0x2b44>
 800f7c2:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 800f7c6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f7ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7ce:	bf18      	it	ne
 800f7d0:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 800f7d4:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f7d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7dc:	d008      	beq.n	800f7f0 <kalman_3gyro.constprop.0+0x2b60>
 800f7de:	ed9b 7a6f 	vldr	s14, [fp, #444]	; 0x1bc
 800f7e2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f7e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7ea:	bf18      	it	ne
 800f7ec:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 800f7f0:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f7f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7f8:	d008      	beq.n	800f80c <kalman_3gyro.constprop.0+0x2b7c>
 800f7fa:	ed9b 7a70 	vldr	s14, [fp, #448]	; 0x1c0
 800f7fe:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f806:	bf18      	it	ne
 800f808:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 800f80c:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f814:	d008      	beq.n	800f828 <kalman_3gyro.constprop.0+0x2b98>
 800f816:	ed9b 7a71 	vldr	s14, [fp, #452]	; 0x1c4
 800f81a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f81e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f822:	bf18      	it	ne
 800f824:	eee7 7a26 	vfmane.f32	s15, s14, s13
 800f828:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f82c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f830:	d008      	beq.n	800f844 <kalman_3gyro.constprop.0+0x2bb4>
 800f832:	ed9b 7a72 	vldr	s14, [fp, #456]	; 0x1c8
 800f836:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f83a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f83e:	bf18      	it	ne
 800f840:	eee7 7a06 	vfmane.f32	s15, s14, s12
 800f844:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f84c:	d008      	beq.n	800f860 <kalman_3gyro.constprop.0+0x2bd0>
 800f84e:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 800f852:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f85a:	bf18      	it	ne
 800f85c:	eee7 7a25 	vfmane.f32	s15, s14, s11
 800f860:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f868:	d008      	beq.n	800f87c <kalman_3gyro.constprop.0+0x2bec>
 800f86a:	ed9b 7a74 	vldr	s14, [fp, #464]	; 0x1d0
 800f86e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f876:	bf18      	it	ne
 800f878:	eee7 7a05 	vfmane.f32	s15, s14, s10
 800f87c:	aa7b      	add	r2, sp, #492	; 0x1ec
 800f87e:	4413      	add	r3, r2
 800f880:	edd3 9a00 	vldr	s19, [r3]
 800f884:	ee79 9ae7 	vsub.f32	s19, s19, s15
 800f888:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800f88c:	2100      	movs	r1, #0
 800f88e:	4650      	mov	r0, sl
 800f890:	ed8d 5a05 	vstr	s10, [sp, #20]
 800f894:	edcd 5a04 	vstr	s11, [sp, #16]
 800f898:	ed8d 6a03 	vstr	s12, [sp, #12]
 800f89c:	edcd 6a02 	vstr	s13, [sp, #8]
 800f8a0:	f008 f828 	bl	80178f4 <memset>
 800f8a4:	ed9d 5a05 	vldr	s10, [sp, #20]
 800f8a8:	eddd 5a04 	vldr	s11, [sp, #16]
 800f8ac:	ed9d 6a03 	vldr	s12, [sp, #12]
 800f8b0:	eddd 6a02 	vldr	s13, [sp, #8]
 800f8b4:	4651      	mov	r1, sl
 800f8b6:	f109 0224 	add.w	r2, r9, #36	; 0x24
 800f8ba:	4653      	mov	r3, sl
 800f8bc:	ecf6 7a01 	vldmia	r6!, {s15}
 800f8c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f8c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8c8:	d062      	beq.n	800f990 <kalman_3gyro.constprop.0+0x2d00>
 800f8ca:	eef5 da40 	vcmp.f32	s27, #0.0
 800f8ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8d2:	d005      	beq.n	800f8e0 <kalman_3gyro.constprop.0+0x2c50>
 800f8d4:	ed93 7a00 	vldr	s14, [r3]
 800f8d8:	eead 7aa7 	vfma.f32	s14, s27, s15
 800f8dc:	ed83 7a00 	vstr	s14, [r3]
 800f8e0:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8e8:	d005      	beq.n	800f8f6 <kalman_3gyro.constprop.0+0x2c66>
 800f8ea:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800f8ee:	eeae 7a27 	vfma.f32	s14, s28, s15
 800f8f2:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
 800f8f6:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f8fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8fe:	d005      	beq.n	800f90c <kalman_3gyro.constprop.0+0x2c7c>
 800f900:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800f904:	eeae 7aa7 	vfma.f32	s14, s29, s15
 800f908:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
 800f90c:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f914:	d005      	beq.n	800f922 <kalman_3gyro.constprop.0+0x2c92>
 800f916:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 800f91a:	eeaf 7a27 	vfma.f32	s14, s30, s15
 800f91e:	ed83 7a1b 	vstr	s14, [r3, #108]	; 0x6c
 800f922:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f92a:	d005      	beq.n	800f938 <kalman_3gyro.constprop.0+0x2ca8>
 800f92c:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800f930:	eeaf 7aa7 	vfma.f32	s14, s31, s15
 800f934:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 800f938:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f93c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f940:	d005      	beq.n	800f94e <kalman_3gyro.constprop.0+0x2cbe>
 800f942:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 800f946:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f94a:	ed83 7a2d 	vstr	s14, [r3, #180]	; 0xb4
 800f94e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f956:	d005      	beq.n	800f964 <kalman_3gyro.constprop.0+0x2cd4>
 800f958:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 800f95c:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f960:	ed83 7a36 	vstr	s14, [r3, #216]	; 0xd8
 800f964:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f96c:	d005      	beq.n	800f97a <kalman_3gyro.constprop.0+0x2cea>
 800f96e:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 800f972:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f976:	ed83 7a3f 	vstr	s14, [r3, #252]	; 0xfc
 800f97a:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f97e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f982:	d005      	beq.n	800f990 <kalman_3gyro.constprop.0+0x2d00>
 800f984:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
 800f988:	eea5 7a27 	vfma.f32	s14, s10, s15
 800f98c:	ed83 7a48 	vstr	s14, [r3, #288]	; 0x120
 800f990:	4296      	cmp	r6, r2
 800f992:	f103 0304 	add.w	r3, r3, #4
 800f996:	d191      	bne.n	800f8bc <kalman_3gyro.constprop.0+0x2c2c>
 800f998:	f20d 47d4 	addw	r7, sp, #1236	; 0x4d4
 800f99c:	4656      	mov	r6, sl
 800f99e:	463b      	mov	r3, r7
 800f9a0:	2208      	movs	r2, #8
 800f9a2:	2000      	movs	r0, #0
 800f9a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f9a8:	e074      	b.n	800fa94 <kalman_3gyro.constprop.0+0x2e04>
 800f9aa:	edd6 7a00 	vldr	s15, [r6]
 800f9ae:	ed83 8a01 	vstr	s16, [r3, #4]
 800f9b2:	eef1 7a67 	vneg.f32	s15, s15
 800f9b6:	2801      	cmp	r0, #1
 800f9b8:	edc6 7a00 	vstr	s15, [r6]
 800f9bc:	f1a2 0c07 	sub.w	ip, r2, #7
 800f9c0:	f000 831e 	beq.w	8010000 <kalman_3gyro.constprop.0+0x3370>
 800f9c4:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f9c8:	eddc 7a00 	vldr	s15, [ip]
 800f9cc:	ed83 8a02 	vstr	s16, [r3, #8]
 800f9d0:	eef1 7a67 	vneg.f32	s15, s15
 800f9d4:	2802      	cmp	r0, #2
 800f9d6:	edcc 7a00 	vstr	s15, [ip]
 800f9da:	f1a2 0c06 	sub.w	ip, r2, #6
 800f9de:	f000 82f8 	beq.w	800ffd2 <kalman_3gyro.constprop.0+0x3342>
 800f9e2:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f9e6:	eddc 7a00 	vldr	s15, [ip]
 800f9ea:	ed83 8a03 	vstr	s16, [r3, #12]
 800f9ee:	eef1 7a67 	vneg.f32	s15, s15
 800f9f2:	2803      	cmp	r0, #3
 800f9f4:	edcc 7a00 	vstr	s15, [ip]
 800f9f8:	f1a2 0c05 	sub.w	ip, r2, #5
 800f9fc:	d170      	bne.n	800fae0 <kalman_3gyro.constprop.0+0x2e50>
 800f9fe:	edd6 7a03 	vldr	s15, [r6, #12]
 800fa02:	ed83 8a04 	vstr	s16, [r3, #16]
 800fa06:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fa0a:	f1a2 0e04 	sub.w	lr, r2, #4
 800fa0e:	edc6 7a03 	vstr	s15, [r6, #12]
 800fa12:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800fa16:	edde 7a00 	vldr	s15, [lr]
 800fa1a:	ed83 8a05 	vstr	s16, [r3, #20]
 800fa1e:	eef1 7a67 	vneg.f32	s15, s15
 800fa22:	f1a2 0c03 	sub.w	ip, r2, #3
 800fa26:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fa2a:	edce 7a00 	vstr	s15, [lr]
 800fa2e:	eddc 7a00 	vldr	s15, [ip]
 800fa32:	ed83 8a06 	vstr	s16, [r3, #24]
 800fa36:	eef1 7a67 	vneg.f32	s15, s15
 800fa3a:	edcc 7a00 	vstr	s15, [ip]
 800fa3e:	f1a2 0c02 	sub.w	ip, r2, #2
 800fa42:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fa46:	eddc 7a00 	vldr	s15, [ip]
 800fa4a:	ed83 8a07 	vstr	s16, [r3, #28]
 800fa4e:	eef1 7a67 	vneg.f32	s15, s15
 800fa52:	2807      	cmp	r0, #7
 800fa54:	edcc 7a00 	vstr	s15, [ip]
 800fa58:	f102 3cff 	add.w	ip, r2, #4294967295
 800fa5c:	f040 80a2 	bne.w	800fba4 <kalman_3gyro.constprop.0+0x2f14>
 800fa60:	edd6 7a07 	vldr	s15, [r6, #28]
 800fa64:	ed83 8a08 	vstr	s16, [r3, #32]
 800fa68:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fa6c:	edc6 7a07 	vstr	s15, [r6, #28]
 800fa70:	eb0a 0c82 	add.w	ip, sl, r2, lsl #2
 800fa74:	eddc 7a00 	vldr	s15, [ip]
 800fa78:	3001      	adds	r0, #1
 800fa7a:	eef1 7a67 	vneg.f32	s15, s15
 800fa7e:	2809      	cmp	r0, #9
 800fa80:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800fa84:	f106 0624 	add.w	r6, r6, #36	; 0x24
 800fa88:	f102 0209 	add.w	r2, r2, #9
 800fa8c:	edcc 7a00 	vstr	s15, [ip]
 800fa90:	f000 809f 	beq.w	800fbd2 <kalman_3gyro.constprop.0+0x2f42>
 800fa94:	ed83 8a00 	vstr	s16, [r3]
 800fa98:	2800      	cmp	r0, #0
 800fa9a:	d186      	bne.n	800f9aa <kalman_3gyro.constprop.0+0x2d1a>
 800fa9c:	edda 7a00 	vldr	s15, [sl]
 800faa0:	ed83 8a01 	vstr	s16, [r3, #4]
 800faa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800faa8:	f1a2 0e07 	sub.w	lr, r2, #7
 800faac:	edc6 7a00 	vstr	s15, [r6]
 800fab0:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800fab4:	edde 7a00 	vldr	s15, [lr]
 800fab8:	ed83 8a02 	vstr	s16, [r3, #8]
 800fabc:	eef1 7a67 	vneg.f32	s15, s15
 800fac0:	f1a2 0c06 	sub.w	ip, r2, #6
 800fac4:	edce 7a00 	vstr	s15, [lr]
 800fac8:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800facc:	eddc 7a00 	vldr	s15, [ip]
 800fad0:	ed83 8a03 	vstr	s16, [r3, #12]
 800fad4:	eef1 7a67 	vneg.f32	s15, s15
 800fad8:	edcc 7a00 	vstr	s15, [ip]
 800fadc:	f1a2 0c05 	sub.w	ip, r2, #5
 800fae0:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fae4:	eddc 7a00 	vldr	s15, [ip]
 800fae8:	ed83 8a04 	vstr	s16, [r3, #16]
 800faec:	eef1 7a67 	vneg.f32	s15, s15
 800faf0:	2804      	cmp	r0, #4
 800faf2:	edcc 7a00 	vstr	s15, [ip]
 800faf6:	f1a2 0c04 	sub.w	ip, r2, #4
 800fafa:	d031      	beq.n	800fb60 <kalman_3gyro.constprop.0+0x2ed0>
 800fafc:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fb00:	eddc 7a00 	vldr	s15, [ip]
 800fb04:	ed83 8a05 	vstr	s16, [r3, #20]
 800fb08:	eef1 7a67 	vneg.f32	s15, s15
 800fb0c:	2805      	cmp	r0, #5
 800fb0e:	edcc 7a00 	vstr	s15, [ip]
 800fb12:	f1a2 0c03 	sub.w	ip, r2, #3
 800fb16:	f000 8245 	beq.w	800ffa4 <kalman_3gyro.constprop.0+0x3314>
 800fb1a:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fb1e:	eddc 7a00 	vldr	s15, [ip]
 800fb22:	ed83 8a06 	vstr	s16, [r3, #24]
 800fb26:	eef1 7a67 	vneg.f32	s15, s15
 800fb2a:	2806      	cmp	r0, #6
 800fb2c:	edcc 7a00 	vstr	s15, [ip]
 800fb30:	f1a2 0c02 	sub.w	ip, r2, #2
 800fb34:	d185      	bne.n	800fa42 <kalman_3gyro.constprop.0+0x2db2>
 800fb36:	edd6 7a06 	vldr	s15, [r6, #24]
 800fb3a:	ed83 8a07 	vstr	s16, [r3, #28]
 800fb3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fb42:	f102 3cff 	add.w	ip, r2, #4294967295
 800fb46:	edc6 7a06 	vstr	s15, [r6, #24]
 800fb4a:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fb4e:	eddc 7a00 	vldr	s15, [ip]
 800fb52:	ed83 8a08 	vstr	s16, [r3, #32]
 800fb56:	eef1 7a67 	vneg.f32	s15, s15
 800fb5a:	edcc 7a00 	vstr	s15, [ip]
 800fb5e:	e787      	b.n	800fa70 <kalman_3gyro.constprop.0+0x2de0>
 800fb60:	edd6 7a04 	vldr	s15, [r6, #16]
 800fb64:	ed83 8a05 	vstr	s16, [r3, #20]
 800fb68:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fb6c:	f1a2 0e03 	sub.w	lr, r2, #3
 800fb70:	edc6 7a04 	vstr	s15, [r6, #16]
 800fb74:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800fb78:	edde 7a00 	vldr	s15, [lr]
 800fb7c:	ed83 8a06 	vstr	s16, [r3, #24]
 800fb80:	eef1 7a67 	vneg.f32	s15, s15
 800fb84:	f1a2 0c02 	sub.w	ip, r2, #2
 800fb88:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fb8c:	edce 7a00 	vstr	s15, [lr]
 800fb90:	eddc 7a00 	vldr	s15, [ip]
 800fb94:	ed83 8a07 	vstr	s16, [r3, #28]
 800fb98:	eef1 7a67 	vneg.f32	s15, s15
 800fb9c:	edcc 7a00 	vstr	s15, [ip]
 800fba0:	f102 3cff 	add.w	ip, r2, #4294967295
 800fba4:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fba8:	eddc 7a00 	vldr	s15, [ip]
 800fbac:	ed83 8a08 	vstr	s16, [r3, #32]
 800fbb0:	eef1 7a67 	vneg.f32	s15, s15
 800fbb4:	2808      	cmp	r0, #8
 800fbb6:	edcc 7a00 	vstr	s15, [ip]
 800fbba:	f47f af59 	bne.w	800fa70 <kalman_3gyro.constprop.0+0x2de0>
 800fbbe:	ed96 7a08 	vldr	s14, [r6, #32]
 800fbc2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fbc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fbca:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800fbce:	edc2 7a00 	vstr	s15, [r2]
 800fbd2:	2000      	movs	r0, #0
 800fbd4:	f50b 76a2 	add.w	r6, fp, #324	; 0x144
 800fbd8:	ecb1 3a01 	vldmia	r1!, {s6}
 800fbdc:	edd1 3a08 	vldr	s7, [r1, #32]
 800fbe0:	ed91 4a11 	vldr	s8, [r1, #68]	; 0x44
 800fbe4:	edd1 4a1a 	vldr	s9, [r1, #104]	; 0x68
 800fbe8:	ed91 5a23 	vldr	s10, [r1, #140]	; 0x8c
 800fbec:	edd1 5a2c 	vldr	s11, [r1, #176]	; 0xb0
 800fbf0:	ed91 6a35 	vldr	s12, [r1, #212]	; 0xd4
 800fbf4:	edd1 6a3e 	vldr	s13, [r1, #248]	; 0xf8
 800fbf8:	ed91 7a47 	vldr	s14, [r1, #284]	; 0x11c
 800fbfc:	465a      	mov	r2, fp
 800fbfe:	463b      	mov	r3, r7
 800fc00:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800fc04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc08:	d00c      	beq.n	800fc24 <kalman_3gyro.constprop.0+0x2f94>
 800fc0a:	edd2 2a75 	vldr	s5, [r2, #468]	; 0x1d4
 800fc0e:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fc12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc16:	d005      	beq.n	800fc24 <kalman_3gyro.constprop.0+0x2f94>
 800fc18:	edd3 7a00 	vldr	s15, [r3]
 800fc1c:	eee3 7a22 	vfma.f32	s15, s6, s5
 800fc20:	edc3 7a00 	vstr	s15, [r3]
 800fc24:	eef5 3a40 	vcmp.f32	s7, #0.0
 800fc28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc2c:	d00c      	beq.n	800fc48 <kalman_3gyro.constprop.0+0x2fb8>
 800fc2e:	edd2 2a76 	vldr	s5, [r2, #472]	; 0x1d8
 800fc32:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fc36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc3a:	d005      	beq.n	800fc48 <kalman_3gyro.constprop.0+0x2fb8>
 800fc3c:	edd3 7a00 	vldr	s15, [r3]
 800fc40:	eee3 7aa2 	vfma.f32	s15, s7, s5
 800fc44:	edc3 7a00 	vstr	s15, [r3]
 800fc48:	eeb5 4a40 	vcmp.f32	s8, #0.0
 800fc4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc50:	d00c      	beq.n	800fc6c <kalman_3gyro.constprop.0+0x2fdc>
 800fc52:	edd2 2a77 	vldr	s5, [r2, #476]	; 0x1dc
 800fc56:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fc5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc5e:	d005      	beq.n	800fc6c <kalman_3gyro.constprop.0+0x2fdc>
 800fc60:	edd3 7a00 	vldr	s15, [r3]
 800fc64:	eee4 7a22 	vfma.f32	s15, s8, s5
 800fc68:	edc3 7a00 	vstr	s15, [r3]
 800fc6c:	eef5 4a40 	vcmp.f32	s9, #0.0
 800fc70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc74:	d00c      	beq.n	800fc90 <kalman_3gyro.constprop.0+0x3000>
 800fc76:	edd2 2a78 	vldr	s5, [r2, #480]	; 0x1e0
 800fc7a:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fc7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc82:	d005      	beq.n	800fc90 <kalman_3gyro.constprop.0+0x3000>
 800fc84:	edd3 7a00 	vldr	s15, [r3]
 800fc88:	eee4 7aa2 	vfma.f32	s15, s9, s5
 800fc8c:	edc3 7a00 	vstr	s15, [r3]
 800fc90:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800fc94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc98:	d00c      	beq.n	800fcb4 <kalman_3gyro.constprop.0+0x3024>
 800fc9a:	edd2 2a79 	vldr	s5, [r2, #484]	; 0x1e4
 800fc9e:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fca6:	d005      	beq.n	800fcb4 <kalman_3gyro.constprop.0+0x3024>
 800fca8:	edd3 7a00 	vldr	s15, [r3]
 800fcac:	eee5 7a22 	vfma.f32	s15, s10, s5
 800fcb0:	edc3 7a00 	vstr	s15, [r3]
 800fcb4:	eef5 5a40 	vcmp.f32	s11, #0.0
 800fcb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcbc:	d00c      	beq.n	800fcd8 <kalman_3gyro.constprop.0+0x3048>
 800fcbe:	edd2 2a7a 	vldr	s5, [r2, #488]	; 0x1e8
 800fcc2:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fcc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcca:	d005      	beq.n	800fcd8 <kalman_3gyro.constprop.0+0x3048>
 800fccc:	edd3 7a00 	vldr	s15, [r3]
 800fcd0:	eee5 7aa2 	vfma.f32	s15, s11, s5
 800fcd4:	edc3 7a00 	vstr	s15, [r3]
 800fcd8:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800fcdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fce0:	d00c      	beq.n	800fcfc <kalman_3gyro.constprop.0+0x306c>
 800fce2:	edd2 2a7b 	vldr	s5, [r2, #492]	; 0x1ec
 800fce6:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fcea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcee:	d005      	beq.n	800fcfc <kalman_3gyro.constprop.0+0x306c>
 800fcf0:	edd3 7a00 	vldr	s15, [r3]
 800fcf4:	eee6 7a22 	vfma.f32	s15, s12, s5
 800fcf8:	edc3 7a00 	vstr	s15, [r3]
 800fcfc:	eef5 6a40 	vcmp.f32	s13, #0.0
 800fd00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd04:	d00c      	beq.n	800fd20 <kalman_3gyro.constprop.0+0x3090>
 800fd06:	edd2 2a7c 	vldr	s5, [r2, #496]	; 0x1f0
 800fd0a:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fd0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd12:	d005      	beq.n	800fd20 <kalman_3gyro.constprop.0+0x3090>
 800fd14:	edd3 7a00 	vldr	s15, [r3]
 800fd18:	eee6 7aa2 	vfma.f32	s15, s13, s5
 800fd1c:	edc3 7a00 	vstr	s15, [r3]
 800fd20:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fd24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd28:	d00c      	beq.n	800fd44 <kalman_3gyro.constprop.0+0x30b4>
 800fd2a:	edd2 2a7d 	vldr	s5, [r2, #500]	; 0x1f4
 800fd2e:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fd32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd36:	d005      	beq.n	800fd44 <kalman_3gyro.constprop.0+0x30b4>
 800fd38:	edd3 7a00 	vldr	s15, [r3]
 800fd3c:	eee7 7a22 	vfma.f32	s15, s14, s5
 800fd40:	edc3 7a00 	vstr	s15, [r3]
 800fd44:	3224      	adds	r2, #36	; 0x24
 800fd46:	4296      	cmp	r6, r2
 800fd48:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800fd4c:	f47f af58 	bne.w	800fc00 <kalman_3gyro.constprop.0+0x2f70>
 800fd50:	3001      	adds	r0, #1
 800fd52:	2809      	cmp	r0, #9
 800fd54:	f107 0704 	add.w	r7, r7, #4
 800fd58:	f47f af3e 	bne.w	800fbd8 <kalman_3gyro.constprop.0+0x2f48>
 800fd5c:	9801      	ldr	r0, [sp, #4]
 800fd5e:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800fd62:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800fd66:	f007 fd9d 	bl	80178a4 <memcpy>
 800fd6a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800fd6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd72:	f000 817c 	beq.w	801006e <kalman_3gyro.constprop.0+0x33de>
 800fd76:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fd7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd7e:	f000 8176 	beq.w	801006e <kalman_3gyro.constprop.0+0x33de>
 800fd82:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800fd86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd8a:	ee69 8aa8 	vmul.f32	s17, s19, s17
 800fd8e:	f040 8212 	bne.w	80101b6 <kalman_3gyro.constprop.0+0x3526>
 800fd92:	eef5 aa40 	vcmp.f32	s21, #0.0
 800fd96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd9a:	f000 8177 	beq.w	801008c <kalman_3gyro.constprop.0+0x33fc>
 800fd9e:	eef5 ba40 	vcmp.f32	s23, #0.0
 800fda2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fda6:	ee29 7aaa 	vmul.f32	s14, s19, s21
 800fdaa:	f040 81cb 	bne.w	8010144 <kalman_3gyro.constprop.0+0x34b4>
 800fdae:	eef0 ba47 	vmov.f32	s23, s14
 800fdb2:	eef0 aa49 	vmov.f32	s21, s18
 800fdb6:	eef5 ca40 	vcmp.f32	s25, #0.0
 800fdba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdbe:	f000 8138 	beq.w	8010032 <kalman_3gyro.constprop.0+0x33a2>
 800fdc2:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fdc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdca:	f000 824e 	beq.w	801026a <kalman_3gyro.constprop.0+0x35da>
 800fdce:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800fdd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdd6:	ee29 7aac 	vmul.f32	s14, s19, s25
 800fdda:	eef0 7a48 	vmov.f32	s15, s16
 800fdde:	f040 81c5 	bne.w	801016c <kalman_3gyro.constprop.0+0x34dc>
 800fde2:	eeb0 ca47 	vmov.f32	s24, s14
 800fde6:	eef0 ca67 	vmov.f32	s25, s15
 800fdea:	eeb5 da40 	vcmp.f32	s26, #0.0
 800fdee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdf2:	f000 8179 	beq.w	80100e8 <kalman_3gyro.constprop.0+0x3458>
 800fdf6:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fdfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdfe:	f000 8125 	beq.w	801004c <kalman_3gyro.constprop.0+0x33bc>
 800fe02:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800fe06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe0a:	ee29 7a8d 	vmul.f32	s14, s19, s26
 800fe0e:	eef0 7a48 	vmov.f32	s15, s16
 800fe12:	f040 81be 	bne.w	8010192 <kalman_3gyro.constprop.0+0x3502>
 800fe16:	eeb0 aa47 	vmov.f32	s20, s14
 800fe1a:	eeb0 da67 	vmov.f32	s26, s15
 800fe1e:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800fe22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe26:	f000 811f 	beq.w	8010068 <kalman_3gyro.constprop.0+0x33d8>
 800fe2a:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fe2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe32:	f000 821d 	beq.w	8010270 <kalman_3gyro.constprop.0+0x35e0>
 800fe36:	eef0 7a48 	vmov.f32	s15, s16
 800fe3a:	ee2b ba29 	vmul.f32	s22, s22, s19
 800fe3e:	eef0 9a67 	vmov.f32	s19, s15
 800fe42:	eddb 3a6c 	vldr	s7, [fp, #432]	; 0x1b0
 800fe46:	ed9b 4a6d 	vldr	s8, [fp, #436]	; 0x1b4
 800fe4a:	eddb 4a6e 	vldr	s9, [fp, #440]	; 0x1b8
 800fe4e:	ed9b 5a6f 	vldr	s10, [fp, #444]	; 0x1bc
 800fe52:	eddb 5a70 	vldr	s11, [fp, #448]	; 0x1c0
 800fe56:	ed9b 6a71 	vldr	s12, [fp, #452]	; 0x1c4
 800fe5a:	eddb 6a72 	vldr	s13, [fp, #456]	; 0x1c8
 800fe5e:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 800fe62:	eddb 7a74 	vldr	s15, [fp, #464]	; 0x1d0
 800fe66:	ee73 8aa8 	vadd.f32	s17, s7, s17
 800fe6a:	ee74 aa2a 	vadd.f32	s21, s8, s21
 800fe6e:	ee74 baab 	vadd.f32	s23, s9, s23
 800fe72:	ee75 ca2c 	vadd.f32	s25, s10, s25
 800fe76:	ee35 ca8c 	vadd.f32	s24, s11, s24
 800fe7a:	ee36 da0d 	vadd.f32	s26, s12, s26
 800fe7e:	ee36 aa8a 	vadd.f32	s20, s13, s20
 800fe82:	ee77 9a29 	vadd.f32	s19, s14, s19
 800fe86:	ee37 ba8b 	vadd.f32	s22, s15, s22
 800fe8a:	3501      	adds	r5, #1
 800fe8c:	2d0c      	cmp	r5, #12
 800fe8e:	edcb 8a6c 	vstr	s17, [fp, #432]	; 0x1b0
 800fe92:	edcb aa6d 	vstr	s21, [fp, #436]	; 0x1b4
 800fe96:	edcb ba6e 	vstr	s23, [fp, #440]	; 0x1b8
 800fe9a:	edcb ca6f 	vstr	s25, [fp, #444]	; 0x1bc
 800fe9e:	ed8b ca70 	vstr	s24, [fp, #448]	; 0x1c0
 800fea2:	ed8b da71 	vstr	s26, [fp, #452]	; 0x1c4
 800fea6:	ed8b aa72 	vstr	s20, [fp, #456]	; 0x1c8
 800feaa:	edcb 9a73 	vstr	s19, [fp, #460]	; 0x1cc
 800feae:	ed8b ba74 	vstr	s22, [fp, #464]	; 0x1d0
 800feb2:	f104 0404 	add.w	r4, r4, #4
 800feb6:	f47f ab02 	bne.w	800f4be <kalman_3gyro.constprop.0+0x282e>
 800feba:	eddb 6a6d 	vldr	s13, [fp, #436]	; 0x1b4
 800febe:	ed9b 6a6c 	vldr	s12, [fp, #432]	; 0x1b0
 800fec2:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 800fec6:	ee66 7aa6 	vmul.f32	s15, s13, s13
 800feca:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800fece:	eee6 7a06 	vfma.f32	s15, s12, s12
 800fed2:	eee7 7a07 	vfma.f32	s15, s14, s14
 800fed6:	eef4 7ae5 	vcmpe.f32	s15, s11
 800feda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fede:	f100 81b5 	bmi.w	801024c <kalman_3gyro.constprop.0+0x35bc>
 800fee2:	eef1 4ae7 	vsqrt.f32	s9, s15
 800fee6:	ed9f 5ae4 	vldr	s10, [pc, #912]	; 8010278 <kalman_3gyro.constprop.0+0x35e8>
 800feea:	eec5 7aa4 	vdiv.f32	s15, s11, s9
 800feee:	ee67 4a86 	vmul.f32	s9, s15, s12
 800fef2:	ee67 5aa6 	vmul.f32	s11, s15, s13
 800fef6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fefa:	f8dd 3834 	ldr.w	r3, [sp, #2100]	; 0x834
 800fefe:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 800ff02:	aa36      	add	r2, sp, #216	; 0xd8
 800ff04:	edc3 4a00 	vstr	s9, [r3]
 800ff08:	edc3 5a01 	vstr	s11, [r3, #4]
 800ff0c:	edc3 7a02 	vstr	s15, [r3, #8]
 800ff10:	ed83 5a03 	vstr	s10, [r3, #12]
 800ff14:	4618      	mov	r0, r3
 800ff16:	4611      	mov	r1, r2
 800ff18:	edcd 6a3f 	vstr	s13, [sp, #252]	; 0xfc
 800ff1c:	ed8d 7a40 	vstr	s14, [sp, #256]	; 0x100
 800ff20:	ed8d 5a41 	vstr	s10, [sp, #260]	; 0x104
 800ff24:	f7fb fdbc 	bl	800baa0 <qmult>
 800ff28:	ed9d 6a37 	vldr	s12, [sp, #220]	; 0xdc
 800ff2c:	eddd 5a36 	vldr	s11, [sp, #216]	; 0xd8
 800ff30:	eddd 6a38 	vldr	s13, [sp, #224]	; 0xe0
 800ff34:	ed9d 7a39 	vldr	s14, [sp, #228]	; 0xe4
 800ff38:	f8dd 3830 	ldr.w	r3, [sp, #2096]	; 0x830
 800ff3c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800ff3e:	ee66 7a06 	vmul.f32	s15, s12, s12
 800ff42:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800ff46:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800ff4a:	ae54      	add	r6, sp, #336	; 0x150
 800ff4c:	af5c      	add	r7, sp, #368	; 0x170
 800ff4e:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800ff52:	eee7 7a07 	vfma.f32	s15, s14, s14
 800ff56:	eeb1 5ae7 	vsqrt.f32	s10, s15
 800ff5a:	eec4 7a85 	vdiv.f32	s15, s9, s10
 800ff5e:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800ff62:	ee26 6a27 	vmul.f32	s12, s12, s15
 800ff66:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ff6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ff6e:	edc3 5a00 	vstr	s11, [r3]
 800ff72:	ed83 6a01 	vstr	s12, [r3, #4]
 800ff76:	edc3 6a02 	vstr	s13, [r3, #8]
 800ff7a:	ed83 7a03 	vstr	s14, [r3, #12]
 800ff7e:	4634      	mov	r4, r6
 800ff80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ff82:	42bc      	cmp	r4, r7
 800ff84:	6028      	str	r0, [r5, #0]
 800ff86:	6069      	str	r1, [r5, #4]
 800ff88:	60aa      	str	r2, [r5, #8]
 800ff8a:	60eb      	str	r3, [r5, #12]
 800ff8c:	4626      	mov	r6, r4
 800ff8e:	f105 0510 	add.w	r5, r5, #16
 800ff92:	d1f4      	bne.n	800ff7e <kalman_3gyro.constprop.0+0x32ee>
 800ff94:	6820      	ldr	r0, [r4, #0]
 800ff96:	6028      	str	r0, [r5, #0]
 800ff98:	f20d 7dcc 	addw	sp, sp, #1996	; 0x7cc
 800ff9c:	ecbd 8b10 	vpop	{d8-d15}
 800ffa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffa4:	edd6 7a05 	vldr	s15, [r6, #20]
 800ffa8:	ed83 8a06 	vstr	s16, [r3, #24]
 800ffac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ffb0:	f1a2 0e02 	sub.w	lr, r2, #2
 800ffb4:	edc6 7a05 	vstr	s15, [r6, #20]
 800ffb8:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800ffbc:	edde 7a00 	vldr	s15, [lr]
 800ffc0:	ed83 8a07 	vstr	s16, [r3, #28]
 800ffc4:	eef1 7a67 	vneg.f32	s15, s15
 800ffc8:	f102 3cff 	add.w	ip, r2, #4294967295
 800ffcc:	edce 7a00 	vstr	s15, [lr]
 800ffd0:	e5bb      	b.n	800fb4a <kalman_3gyro.constprop.0+0x2eba>
 800ffd2:	edd6 7a02 	vldr	s15, [r6, #8]
 800ffd6:	ed83 8a03 	vstr	s16, [r3, #12]
 800ffda:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ffde:	f1a2 0c05 	sub.w	ip, r2, #5
 800ffe2:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800ffe6:	edc6 7a02 	vstr	s15, [r6, #8]
 800ffea:	eddc 7a00 	vldr	s15, [ip]
 800ffee:	ed83 8a04 	vstr	s16, [r3, #16]
 800fff2:	eef1 7a67 	vneg.f32	s15, s15
 800fff6:	edcc 7a00 	vstr	s15, [ip]
 800fffa:	f1a2 0c04 	sub.w	ip, r2, #4
 800fffe:	e57d      	b.n	800fafc <kalman_3gyro.constprop.0+0x2e6c>
 8010000:	edd6 7a01 	vldr	s15, [r6, #4]
 8010004:	ed83 8a02 	vstr	s16, [r3, #8]
 8010008:	ee77 7a67 	vsub.f32	s15, s14, s15
 801000c:	f1a2 0c06 	sub.w	ip, r2, #6
 8010010:	edc6 7a01 	vstr	s15, [r6, #4]
 8010014:	e558      	b.n	800fac8 <kalman_3gyro.constprop.0+0x2e38>
 8010016:	eef5 ca40 	vcmp.f32	s25, #0.0
 801001a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801001e:	ee69 7aab 	vmul.f32	s15, s19, s23
 8010022:	eeb0 7a48 	vmov.f32	s14, s16
 8010026:	f040 8097 	bne.w	8010158 <kalman_3gyro.constprop.0+0x34c8>
 801002a:	eef0 ca67 	vmov.f32	s25, s15
 801002e:	eef0 ba47 	vmov.f32	s23, s14
 8010032:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8010036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801003a:	f43f aed6 	beq.w	800fdea <kalman_3gyro.constprop.0+0x315a>
 801003e:	eef5 9a40 	vcmp.f32	s19, #0.0
 8010042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010046:	d142      	bne.n	80100ce <kalman_3gyro.constprop.0+0x343e>
 8010048:	eeb0 ca69 	vmov.f32	s24, s19
 801004c:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8010050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010054:	f040 80ba 	bne.w	80101cc <kalman_3gyro.constprop.0+0x353c>
 8010058:	eeb5 ba40 	vcmp.f32	s22, #0.0
 801005c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010060:	eeb0 da4a 	vmov.f32	s26, s20
 8010064:	f47f aee1 	bne.w	800fe2a <kalman_3gyro.constprop.0+0x319a>
 8010068:	eef0 9a4b 	vmov.f32	s19, s22
 801006c:	e6e9      	b.n	800fe42 <kalman_3gyro.constprop.0+0x31b2>
 801006e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8010072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010076:	d051      	beq.n	801011c <kalman_3gyro.constprop.0+0x348c>
 8010078:	eef5 9a40 	vcmp.f32	s19, #0.0
 801007c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010080:	f040 8097 	bne.w	80101b2 <kalman_3gyro.constprop.0+0x3522>
 8010084:	eef0 aa69 	vmov.f32	s21, s19
 8010088:	eef0 8a69 	vmov.f32	s17, s19
 801008c:	eef5 ba40 	vcmp.f32	s23, #0.0
 8010090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010094:	f43f ae8f 	beq.w	800fdb6 <kalman_3gyro.constprop.0+0x3126>
 8010098:	eef5 9a40 	vcmp.f32	s19, #0.0
 801009c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100a0:	d1b9      	bne.n	8010016 <kalman_3gyro.constprop.0+0x3386>
 80100a2:	eef0 ca69 	vmov.f32	s25, s19
 80100a6:	eef0 ba69 	vmov.f32	s23, s19
 80100aa:	e7c2      	b.n	8010032 <kalman_3gyro.constprop.0+0x33a2>
 80100ac:	aa7b      	add	r2, sp, #492	; 0x1ec
 80100ae:	4413      	add	r3, r2
 80100b0:	edd3 9a00 	vldr	s19, [r3]
 80100b4:	f7ff bbe8 	b.w	800f888 <kalman_3gyro.constprop.0+0x2bf8>
 80100b8:	eef5 8a40 	vcmp.f32	s17, #0.0
 80100bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100c0:	bf14      	ite	ne
 80100c2:	ee68 7aad 	vmulne.f32	s15, s17, s27
 80100c6:	eef0 7a68 	vmoveq.f32	s15, s17
 80100ca:	f7ff bab4 	b.w	800f636 <kalman_3gyro.constprop.0+0x29a6>
 80100ce:	eeb5 da40 	vcmp.f32	s26, #0.0
 80100d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100d6:	ee69 7a8c 	vmul.f32	s15, s19, s24
 80100da:	eeb0 7a48 	vmov.f32	s14, s16
 80100de:	d14e      	bne.n	801017e <kalman_3gyro.constprop.0+0x34ee>
 80100e0:	eeb0 da67 	vmov.f32	s26, s15
 80100e4:	eeb0 ca47 	vmov.f32	s24, s14
 80100e8:	eeb5 aa40 	vcmp.f32	s20, #0.0
 80100ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100f0:	f43f ae95 	beq.w	800fe1e <kalman_3gyro.constprop.0+0x318e>
 80100f4:	eef5 9a40 	vcmp.f32	s19, #0.0
 80100f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100fc:	f000 84bd 	beq.w	8010a7a <kalman_3gyro.constprop.0+0x3dea>
 8010100:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8010104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010108:	ee69 7a8a 	vmul.f32	s15, s19, s20
 801010c:	eeb0 7a48 	vmov.f32	s14, s16
 8010110:	d148      	bne.n	80101a4 <kalman_3gyro.constprop.0+0x3514>
 8010112:	eef0 9a67 	vmov.f32	s19, s15
 8010116:	eeb0 aa47 	vmov.f32	s20, s14
 801011a:	e692      	b.n	800fe42 <kalman_3gyro.constprop.0+0x31b2>
 801011c:	eef5 aa40 	vcmp.f32	s21, #0.0
 8010120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010124:	d05b      	beq.n	80101de <kalman_3gyro.constprop.0+0x354e>
 8010126:	eef5 9a40 	vcmp.f32	s19, #0.0
 801012a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801012e:	d0a9      	beq.n	8010084 <kalman_3gyro.constprop.0+0x33f4>
 8010130:	eef5 ba40 	vcmp.f32	s23, #0.0
 8010134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010138:	ee29 7aaa 	vmul.f32	s14, s19, s21
 801013c:	eef0 8a49 	vmov.f32	s17, s18
 8010140:	f43f ae35 	beq.w	800fdae <kalman_3gyro.constprop.0+0x311e>
 8010144:	eef5 ca40 	vcmp.f32	s25, #0.0
 8010148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801014c:	ee69 7aab 	vmul.f32	s15, s19, s23
 8010150:	eef0 aa49 	vmov.f32	s21, s18
 8010154:	f43f af69 	beq.w	801002a <kalman_3gyro.constprop.0+0x339a>
 8010158:	eeb5 ca40 	vcmp.f32	s24, #0.0
 801015c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010160:	eef0 ba47 	vmov.f32	s23, s14
 8010164:	ee29 7aac 	vmul.f32	s14, s19, s25
 8010168:	f43f ae3b 	beq.w	800fde2 <kalman_3gyro.constprop.0+0x3152>
 801016c:	eeb5 da40 	vcmp.f32	s26, #0.0
 8010170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010174:	eef0 ca67 	vmov.f32	s25, s15
 8010178:	ee69 7a8c 	vmul.f32	s15, s19, s24
 801017c:	d0b0      	beq.n	80100e0 <kalman_3gyro.constprop.0+0x3450>
 801017e:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8010182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010186:	eeb0 ca47 	vmov.f32	s24, s14
 801018a:	ee29 7a8d 	vmul.f32	s14, s19, s26
 801018e:	f43f ae42 	beq.w	800fe16 <kalman_3gyro.constprop.0+0x3186>
 8010192:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8010196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801019a:	eeb0 da67 	vmov.f32	s26, s15
 801019e:	ee69 7a8a 	vmul.f32	s15, s19, s20
 80101a2:	d0b6      	beq.n	8010112 <kalman_3gyro.constprop.0+0x3482>
 80101a4:	eeb0 aa47 	vmov.f32	s20, s14
 80101a8:	e647      	b.n	800fe3a <kalman_3gyro.constprop.0+0x31aa>
 80101aa:	eef0 7a6d 	vmov.f32	s15, s27
 80101ae:	f7ff baf5 	b.w	800f79c <kalman_3gyro.constprop.0+0x2b0c>
 80101b2:	eef0 8a48 	vmov.f32	s17, s16
 80101b6:	eef5 aa40 	vcmp.f32	s21, #0.0
 80101ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101be:	ee29 9a29 	vmul.f32	s18, s18, s19
 80101c2:	f47f adec 	bne.w	800fd9e <kalman_3gyro.constprop.0+0x310e>
 80101c6:	eef0 aa49 	vmov.f32	s21, s18
 80101ca:	e75f      	b.n	801008c <kalman_3gyro.constprop.0+0x33fc>
 80101cc:	ed9f ba2a 	vldr	s22, [pc, #168]	; 8010278 <kalman_3gyro.constprop.0+0x35e8>
 80101d0:	eef0 9a48 	vmov.f32	s19, s16
 80101d4:	eeb0 aa48 	vmov.f32	s20, s16
 80101d8:	eeb0 da48 	vmov.f32	s26, s16
 80101dc:	e631      	b.n	800fe42 <kalman_3gyro.constprop.0+0x31b2>
 80101de:	eef0 8a6a 	vmov.f32	s17, s21
 80101e2:	e753      	b.n	801008c <kalman_3gyro.constprop.0+0x33fc>
 80101e4:	f89b 21a2 	ldrb.w	r2, [fp, #418]	; 0x1a2
 80101e8:	2a31      	cmp	r2, #49	; 0x31
 80101ea:	f63f a8a3 	bhi.w	800f334 <kalman_3gyro.constprop.0+0x26a4>
 80101ee:	2100      	movs	r1, #0
 80101f0:	3201      	adds	r2, #1
 80101f2:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 80101f6:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 80101fa:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 80101fe:	f7ff b899 	b.w	800f334 <kalman_3gyro.constprop.0+0x26a4>
 8010202:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 8010206:	2b00      	cmp	r3, #0
 8010208:	f340 8423 	ble.w	8010a52 <kalman_3gyro.constprop.0+0x3dc2>
 801020c:	3b01      	subs	r3, #1
 801020e:	2200      	movs	r2, #0
 8010210:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 8010214:	f8ad 20a8 	strh.w	r2, [sp, #168]	; 0xa8
 8010218:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 801021c:	f88d 20b1 	strb.w	r2, [sp, #177]	; 0xb1
 8010220:	f88d 20b3 	strb.w	r2, [sp, #179]	; 0xb3
 8010224:	f7fe bca9 	b.w	800eb7a <kalman_3gyro.constprop.0+0x1eea>
 8010228:	f89b 200d 	ldrb.w	r2, [fp, #13]
 801022c:	f89b 100e 	ldrb.w	r1, [fp, #14]
 8010230:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8010234:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 8010238:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 801023c:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 8010240:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 8010244:	f88d 10ad 	strb.w	r1, [sp, #173]	; 0xad
 8010248:	f7fe bc18 	b.w	800ea7c <kalman_3gyro.constprop.0+0x1dec>
 801024c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8010250:	eef0 4a46 	vmov.f32	s9, s12
 8010254:	eeb1 5ae5 	vsqrt.f32	s10, s11
 8010258:	eef0 7a47 	vmov.f32	s15, s14
 801025c:	eef0 5a66 	vmov.f32	s11, s13
 8010260:	e64b      	b.n	800fefa <kalman_3gyro.constprop.0+0x326a>
 8010262:	eeb1 7a47 	vneg.f32	s14, s14
 8010266:	f7fd bc66 	b.w	800db36 <kalman_3gyro.constprop.0+0xea6>
 801026a:	eef0 ca69 	vmov.f32	s25, s19
 801026e:	e6e0      	b.n	8010032 <kalman_3gyro.constprop.0+0x33a2>
 8010270:	eeb0 ba69 	vmov.f32	s22, s19
 8010274:	e5e5      	b.n	800fe42 <kalman_3gyro.constprop.0+0x31b2>
 8010276:	bf00      	nop
 8010278:	00000000 	.word	0x00000000
 801027c:	f20b 45b4 	addw	r5, fp, #1204	; 0x4b4
 8010280:	49dc      	ldr	r1, [pc, #880]	; (80105f4 <kalman_3gyro.constprop.0+0x3964>)
 8010282:	4bdd      	ldr	r3, [pc, #884]	; (80105f8 <kalman_3gyro.constprop.0+0x3968>)
 8010284:	4add      	ldr	r2, [pc, #884]	; (80105fc <kalman_3gyro.constprop.0+0x396c>)
 8010286:	2000      	movs	r0, #0
 8010288:	f88b 0318 	strb.w	r0, [fp, #792]	; 0x318
 801028c:	6029      	str	r1, [r5, #0]
 801028e:	f20b 6024 	addw	r0, fp, #1572	; 0x624
 8010292:	f20b 7194 	addw	r1, fp, #1940	; 0x794
 8010296:	6002      	str	r2, [r0, #0]
 8010298:	600b      	str	r3, [r1, #0]
 801029a:	f89b 34b1 	ldrb.w	r3, [fp, #1201]	; 0x4b1
 801029e:	9004      	str	r0, [sp, #16]
 80102a0:	9110      	str	r1, [sp, #64]	; 0x40
 80102a2:	f50b 6897 	add.w	r8, fp, #1208	; 0x4b8
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	f000 80b4 	beq.w	8010414 <kalman_3gyro.constprop.0+0x3784>
 80102ac:	240c      	movs	r4, #12
 80102ae:	eddf bad4 	vldr	s23, [pc, #848]	; 8010600 <kalman_3gyro.constprop.0+0x3970>
 80102b2:	ed9f bad4 	vldr	s22, [pc, #848]	; 8010604 <kalman_3gyro.constprop.0+0x3974>
 80102b6:	ed9f 8ad4 	vldr	s16, [pc, #848]	; 8010608 <kalman_3gyro.constprop.0+0x3978>
 80102ba:	ed9f aad4 	vldr	s20, [pc, #848]	; 801060c <kalman_3gyro.constprop.0+0x397c>
 80102be:	eddf aad4 	vldr	s21, [pc, #848]	; 8010610 <kalman_3gyro.constprop.0+0x3980>
 80102c2:	9f08      	ldr	r7, [sp, #32]
 80102c4:	fb14 8403 	smlabb	r4, r4, r3, r8
 80102c8:	4646      	mov	r6, r8
 80102ca:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 80102ce:	e06b      	b.n	80103a8 <kalman_3gyro.constprop.0+0x3718>
 80102d0:	eeb4 7aca 	vcmpe.f32	s14, s20
 80102d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102d8:	f300 815a 	bgt.w	8010590 <kalman_3gyro.constprop.0+0x3900>
 80102dc:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80102e0:	ee17 0a90 	vmov	r0, s15
 80102e4:	f7f0 f930 	bl	8000548 <__aeabi_f2d>
 80102e8:	ec41 0b10 	vmov	d0, r0, r1
 80102ec:	f005 fb94 	bl	8015a18 <ceil>
 80102f0:	ec51 0b10 	vmov	r0, r1, d0
 80102f4:	f7f0 fc58 	bl	8000ba8 <__aeabi_d2f>
 80102f8:	ee07 0a90 	vmov	s15, r0
 80102fc:	edc6 7a00 	vstr	s15, [r6]
 8010300:	ed97 7a01 	vldr	s14, [r7, #4]
 8010304:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010308:	eef0 6ae7 	vabs.f32	s13, s15
 801030c:	eef4 6acb 	vcmpe.f32	s13, s22
 8010310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010314:	d51b      	bpl.n	801034e <kalman_3gyro.constprop.0+0x36be>
 8010316:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801031a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801031e:	f280 8120 	bge.w	8010562 <kalman_3gyro.constprop.0+0x38d2>
 8010322:	eeb4 7aca 	vcmpe.f32	s14, s20
 8010326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801032a:	f300 812e 	bgt.w	801058a <kalman_3gyro.constprop.0+0x38fa>
 801032e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010332:	ee17 0a90 	vmov	r0, s15
 8010336:	f7f0 f907 	bl	8000548 <__aeabi_f2d>
 801033a:	ec41 0b10 	vmov	d0, r0, r1
 801033e:	f005 fb6b 	bl	8015a18 <ceil>
 8010342:	ec51 0b10 	vmov	r0, r1, d0
 8010346:	f7f0 fc2f 	bl	8000ba8 <__aeabi_d2f>
 801034a:	ee07 0a90 	vmov	s15, r0
 801034e:	edc6 7a01 	vstr	s15, [r6, #4]
 8010352:	ed97 7a02 	vldr	s14, [r7, #8]
 8010356:	ee67 7a2b 	vmul.f32	s15, s14, s23
 801035a:	eef0 6ae7 	vabs.f32	s13, s15
 801035e:	eef4 6acb 	vcmpe.f32	s13, s22
 8010362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010366:	d51a      	bpl.n	801039e <kalman_3gyro.constprop.0+0x370e>
 8010368:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801036c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010370:	da3b      	bge.n	80103ea <kalman_3gyro.constprop.0+0x375a>
 8010372:	eeb4 7aca 	vcmpe.f32	s14, s20
 8010376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801037a:	f300 8103 	bgt.w	8010584 <kalman_3gyro.constprop.0+0x38f4>
 801037e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010382:	ee17 0a90 	vmov	r0, s15
 8010386:	f7f0 f8df 	bl	8000548 <__aeabi_f2d>
 801038a:	ec41 0b10 	vmov	d0, r0, r1
 801038e:	f005 fb43 	bl	8015a18 <ceil>
 8010392:	ec51 0b10 	vmov	r0, r1, d0
 8010396:	f7f0 fc07 	bl	8000ba8 <__aeabi_d2f>
 801039a:	ee07 0a90 	vmov	s15, r0
 801039e:	edc6 7a02 	vstr	s15, [r6, #8]
 80103a2:	360c      	adds	r6, #12
 80103a4:	42b4      	cmp	r4, r6
 80103a6:	d035      	beq.n	8010414 <kalman_3gyro.constprop.0+0x3784>
 80103a8:	ed97 7a00 	vldr	s14, [r7]
 80103ac:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80103b0:	eef0 6ae7 	vabs.f32	s13, s15
 80103b4:	eef4 6acb 	vcmpe.f32	s13, s22
 80103b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103bc:	d59e      	bpl.n	80102fc <kalman_3gyro.constprop.0+0x366c>
 80103be:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80103c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103c6:	db83      	blt.n	80102d0 <kalman_3gyro.constprop.0+0x3640>
 80103c8:	ee77 7a89 	vadd.f32	s15, s15, s18
 80103cc:	ee17 0a90 	vmov	r0, s15
 80103d0:	f7f0 f8ba 	bl	8000548 <__aeabi_f2d>
 80103d4:	ec41 0b10 	vmov	d0, r0, r1
 80103d8:	f005 fba2 	bl	8015b20 <floor>
 80103dc:	ec51 0b10 	vmov	r0, r1, d0
 80103e0:	f7f0 fbe2 	bl	8000ba8 <__aeabi_d2f>
 80103e4:	ee07 0a90 	vmov	s15, r0
 80103e8:	e788      	b.n	80102fc <kalman_3gyro.constprop.0+0x366c>
 80103ea:	ee77 7a89 	vadd.f32	s15, s15, s18
 80103ee:	360c      	adds	r6, #12
 80103f0:	ee17 0a90 	vmov	r0, s15
 80103f4:	f7f0 f8a8 	bl	8000548 <__aeabi_f2d>
 80103f8:	ec41 0b10 	vmov	d0, r0, r1
 80103fc:	f005 fb90 	bl	8015b20 <floor>
 8010400:	ec51 0b10 	vmov	r0, r1, d0
 8010404:	f7f0 fbd0 	bl	8000ba8 <__aeabi_d2f>
 8010408:	ee07 0a90 	vmov	s15, r0
 801040c:	ed46 7a01 	vstr	s15, [r6, #-4]
 8010410:	42b4      	cmp	r4, r6
 8010412:	d1c9      	bne.n	80103a8 <kalman_3gyro.constprop.0+0x3718>
 8010414:	f89b 3621 	ldrb.w	r3, [fp, #1569]	; 0x621
 8010418:	f50b 67c5 	add.w	r7, fp, #1576	; 0x628
 801041c:	2b00      	cmp	r3, #0
 801041e:	f000 80cf 	beq.w	80105c0 <kalman_3gyro.constprop.0+0x3930>
 8010422:	240c      	movs	r4, #12
 8010424:	eddf ba7b 	vldr	s23, [pc, #492]	; 8010614 <kalman_3gyro.constprop.0+0x3984>
 8010428:	ed9f ba76 	vldr	s22, [pc, #472]	; 8010604 <kalman_3gyro.constprop.0+0x3974>
 801042c:	ed9f 8a7a 	vldr	s16, [pc, #488]	; 8010618 <kalman_3gyro.constprop.0+0x3988>
 8010430:	ed9f aa7a 	vldr	s20, [pc, #488]	; 801061c <kalman_3gyro.constprop.0+0x398c>
 8010434:	eddf aa76 	vldr	s21, [pc, #472]	; 8010610 <kalman_3gyro.constprop.0+0x3980>
 8010438:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801043c:	fb14 7403 	smlabb	r4, r4, r3, r7
 8010440:	463e      	mov	r6, r7
 8010442:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8010446:	e06b      	b.n	8010520 <kalman_3gyro.constprop.0+0x3890>
 8010448:	eeb4 7aca 	vcmpe.f32	s14, s20
 801044c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010450:	f300 81a2 	bgt.w	8010798 <kalman_3gyro.constprop.0+0x3b08>
 8010454:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010458:	ee17 0a90 	vmov	r0, s15
 801045c:	f7f0 f874 	bl	8000548 <__aeabi_f2d>
 8010460:	ec41 0b10 	vmov	d0, r0, r1
 8010464:	f005 fad8 	bl	8015a18 <ceil>
 8010468:	ec51 0b10 	vmov	r0, r1, d0
 801046c:	f7f0 fb9c 	bl	8000ba8 <__aeabi_d2f>
 8010470:	ee07 0a90 	vmov	s15, r0
 8010474:	edc6 7a00 	vstr	s15, [r6]
 8010478:	ed99 7a04 	vldr	s14, [r9, #16]
 801047c:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010480:	eef0 6ae7 	vabs.f32	s13, s15
 8010484:	eef4 6acb 	vcmpe.f32	s13, s22
 8010488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801048c:	d51b      	bpl.n	80104c6 <kalman_3gyro.constprop.0+0x3836>
 801048e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010496:	f280 8168 	bge.w	801076a <kalman_3gyro.constprop.0+0x3ada>
 801049a:	eeb4 7aca 	vcmpe.f32	s14, s20
 801049e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104a2:	f300 8176 	bgt.w	8010792 <kalman_3gyro.constprop.0+0x3b02>
 80104a6:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80104aa:	ee17 0a90 	vmov	r0, s15
 80104ae:	f7f0 f84b 	bl	8000548 <__aeabi_f2d>
 80104b2:	ec41 0b10 	vmov	d0, r0, r1
 80104b6:	f005 faaf 	bl	8015a18 <ceil>
 80104ba:	ec51 0b10 	vmov	r0, r1, d0
 80104be:	f7f0 fb73 	bl	8000ba8 <__aeabi_d2f>
 80104c2:	ee07 0a90 	vmov	s15, r0
 80104c6:	edc6 7a01 	vstr	s15, [r6, #4]
 80104ca:	ed99 7a05 	vldr	s14, [r9, #20]
 80104ce:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80104d2:	eef0 6ae7 	vabs.f32	s13, s15
 80104d6:	eef4 6acb 	vcmpe.f32	s13, s22
 80104da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104de:	d51a      	bpl.n	8010516 <kalman_3gyro.constprop.0+0x3886>
 80104e0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80104e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104e8:	da55      	bge.n	8010596 <kalman_3gyro.constprop.0+0x3906>
 80104ea:	eeb4 7aca 	vcmpe.f32	s14, s20
 80104ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104f2:	f300 814b 	bgt.w	801078c <kalman_3gyro.constprop.0+0x3afc>
 80104f6:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80104fa:	ee17 0a90 	vmov	r0, s15
 80104fe:	f7f0 f823 	bl	8000548 <__aeabi_f2d>
 8010502:	ec41 0b10 	vmov	d0, r0, r1
 8010506:	f005 fa87 	bl	8015a18 <ceil>
 801050a:	ec51 0b10 	vmov	r0, r1, d0
 801050e:	f7f0 fb4b 	bl	8000ba8 <__aeabi_d2f>
 8010512:	ee07 0a90 	vmov	s15, r0
 8010516:	edc6 7a02 	vstr	s15, [r6, #8]
 801051a:	360c      	adds	r6, #12
 801051c:	42b4      	cmp	r4, r6
 801051e:	d04f      	beq.n	80105c0 <kalman_3gyro.constprop.0+0x3930>
 8010520:	ed99 7a03 	vldr	s14, [r9, #12]
 8010524:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010528:	eef0 6ae7 	vabs.f32	s13, s15
 801052c:	eef4 6acb 	vcmpe.f32	s13, s22
 8010530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010534:	d59e      	bpl.n	8010474 <kalman_3gyro.constprop.0+0x37e4>
 8010536:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801053a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801053e:	db83      	blt.n	8010448 <kalman_3gyro.constprop.0+0x37b8>
 8010540:	ee77 7a89 	vadd.f32	s15, s15, s18
 8010544:	ee17 0a90 	vmov	r0, s15
 8010548:	f7ef fffe 	bl	8000548 <__aeabi_f2d>
 801054c:	ec41 0b10 	vmov	d0, r0, r1
 8010550:	f005 fae6 	bl	8015b20 <floor>
 8010554:	ec51 0b10 	vmov	r0, r1, d0
 8010558:	f7f0 fb26 	bl	8000ba8 <__aeabi_d2f>
 801055c:	ee07 0a90 	vmov	s15, r0
 8010560:	e788      	b.n	8010474 <kalman_3gyro.constprop.0+0x37e4>
 8010562:	ee77 7a89 	vadd.f32	s15, s15, s18
 8010566:	ee17 0a90 	vmov	r0, s15
 801056a:	f7ef ffed 	bl	8000548 <__aeabi_f2d>
 801056e:	ec41 0b10 	vmov	d0, r0, r1
 8010572:	f005 fad5 	bl	8015b20 <floor>
 8010576:	ec51 0b10 	vmov	r0, r1, d0
 801057a:	f7f0 fb15 	bl	8000ba8 <__aeabi_d2f>
 801057e:	ee07 0a90 	vmov	s15, r0
 8010582:	e6e4      	b.n	801034e <kalman_3gyro.constprop.0+0x36be>
 8010584:	eef0 7a6a 	vmov.f32	s15, s21
 8010588:	e709      	b.n	801039e <kalman_3gyro.constprop.0+0x370e>
 801058a:	eef0 7a6a 	vmov.f32	s15, s21
 801058e:	e6de      	b.n	801034e <kalman_3gyro.constprop.0+0x36be>
 8010590:	eef0 7a6a 	vmov.f32	s15, s21
 8010594:	e6b2      	b.n	80102fc <kalman_3gyro.constprop.0+0x366c>
 8010596:	ee77 7a89 	vadd.f32	s15, s15, s18
 801059a:	360c      	adds	r6, #12
 801059c:	ee17 0a90 	vmov	r0, s15
 80105a0:	f7ef ffd2 	bl	8000548 <__aeabi_f2d>
 80105a4:	ec41 0b10 	vmov	d0, r0, r1
 80105a8:	f005 faba 	bl	8015b20 <floor>
 80105ac:	ec51 0b10 	vmov	r0, r1, d0
 80105b0:	f7f0 fafa 	bl	8000ba8 <__aeabi_d2f>
 80105b4:	ee07 0a90 	vmov	s15, r0
 80105b8:	ed46 7a01 	vstr	s15, [r6, #-4]
 80105bc:	42b4      	cmp	r4, r6
 80105be:	d1af      	bne.n	8010520 <kalman_3gyro.constprop.0+0x3890>
 80105c0:	f89b 3791 	ldrb.w	r3, [fp, #1937]	; 0x791
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	f43c ac7e 	beq.w	800cec6 <kalman_3gyro.constprop.0+0x236>
 80105ca:	f50b 66f3 	add.w	r6, fp, #1944	; 0x798
 80105ce:	240c      	movs	r4, #12
 80105d0:	eddf ba13 	vldr	s23, [pc, #76]	; 8010620 <kalman_3gyro.constprop.0+0x3990>
 80105d4:	ed9f ba0b 	vldr	s22, [pc, #44]	; 8010604 <kalman_3gyro.constprop.0+0x3974>
 80105d8:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8010624 <kalman_3gyro.constprop.0+0x3994>
 80105dc:	ed9f aa12 	vldr	s20, [pc, #72]	; 8010628 <kalman_3gyro.constprop.0+0x3998>
 80105e0:	eddf aa0b 	vldr	s21, [pc, #44]	; 8010610 <kalman_3gyro.constprop.0+0x3980>
 80105e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80105e8:	960f      	str	r6, [sp, #60]	; 0x3c
 80105ea:	fb14 6403 	smlabb	r4, r4, r3, r6
 80105ee:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 80105f2:	e099      	b.n	8010728 <kalman_3gyro.constprop.0+0x3a98>
 80105f4:	3a7001e0 	.word	0x3a7001e0
 80105f8:	3a8c0118 	.word	0x3a8c0118
 80105fc:	3a000100 	.word	0x3a000100
 8010600:	44888777 	.word	0x44888777
 8010604:	4b000000 	.word	0x4b000000
 8010608:	39f001e1 	.word	0x39f001e1
 801060c:	b9f001e1 	.word	0xb9f001e1
 8010610:	80000000 	.word	0x80000000
 8010614:	44fffe00 	.word	0x44fffe00
 8010618:	39800100 	.word	0x39800100
 801061c:	b9800100 	.word	0xb9800100
 8010620:	446a0ccd 	.word	0x446a0ccd
 8010624:	3a0c0118 	.word	0x3a0c0118
 8010628:	ba0c0118 	.word	0xba0c0118
 801062c:	bf666666 	.word	0xbf666666
 8010630:	3d072b02 	.word	0x3d072b02
 8010634:	3cb43958 	.word	0x3cb43958
 8010638:	3cf5c28f 	.word	0x3cf5c28f
 801063c:	3d75c28f 	.word	0x3d75c28f
 8010640:	3d23d70a 	.word	0x3d23d70a
 8010644:	3ca3d70a 	.word	0x3ca3d70a
 8010648:	3d4ccccd 	.word	0x3d4ccccd
 801064c:	3d8f5c29 	.word	0x3d8f5c29
 8010650:	eeb4 7aca 	vcmpe.f32	s14, s20
 8010654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010658:	f300 80c6 	bgt.w	80107e8 <kalman_3gyro.constprop.0+0x3b58>
 801065c:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010660:	ee17 0a90 	vmov	r0, s15
 8010664:	f7ef ff70 	bl	8000548 <__aeabi_f2d>
 8010668:	ec41 0b10 	vmov	d0, r0, r1
 801066c:	f005 f9d4 	bl	8015a18 <ceil>
 8010670:	ec51 0b10 	vmov	r0, r1, d0
 8010674:	f7f0 fa98 	bl	8000ba8 <__aeabi_d2f>
 8010678:	ee07 0a90 	vmov	s15, r0
 801067c:	edc6 7a00 	vstr	s15, [r6]
 8010680:	ed99 7a07 	vldr	s14, [r9, #28]
 8010684:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010688:	eef0 6ae7 	vabs.f32	s13, s15
 801068c:	eef4 6acb 	vcmpe.f32	s13, s22
 8010690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010694:	d51b      	bpl.n	80106ce <kalman_3gyro.constprop.0+0x3a3e>
 8010696:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801069a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801069e:	f280 808f 	bge.w	80107c0 <kalman_3gyro.constprop.0+0x3b30>
 80106a2:	eeb4 7aca 	vcmpe.f32	s14, s20
 80106a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106aa:	f300 809a 	bgt.w	80107e2 <kalman_3gyro.constprop.0+0x3b52>
 80106ae:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80106b2:	ee17 0a90 	vmov	r0, s15
 80106b6:	f7ef ff47 	bl	8000548 <__aeabi_f2d>
 80106ba:	ec41 0b10 	vmov	d0, r0, r1
 80106be:	f005 f9ab 	bl	8015a18 <ceil>
 80106c2:	ec51 0b10 	vmov	r0, r1, d0
 80106c6:	f7f0 fa6f 	bl	8000ba8 <__aeabi_d2f>
 80106ca:	ee07 0a90 	vmov	s15, r0
 80106ce:	edc6 7a01 	vstr	s15, [r6, #4]
 80106d2:	ed99 7a08 	vldr	s14, [r9, #32]
 80106d6:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80106da:	eef0 6ae7 	vabs.f32	s13, s15
 80106de:	eef4 6acb 	vcmpe.f32	s13, s22
 80106e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106e6:	d519      	bpl.n	801071c <kalman_3gyro.constprop.0+0x3a8c>
 80106e8:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80106ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106f0:	da55      	bge.n	801079e <kalman_3gyro.constprop.0+0x3b0e>
 80106f2:	eeb4 7aca 	vcmpe.f32	s14, s20
 80106f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106fa:	dc78      	bgt.n	80107ee <kalman_3gyro.constprop.0+0x3b5e>
 80106fc:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010700:	ee17 0a90 	vmov	r0, s15
 8010704:	f7ef ff20 	bl	8000548 <__aeabi_f2d>
 8010708:	ec41 0b10 	vmov	d0, r0, r1
 801070c:	f005 f984 	bl	8015a18 <ceil>
 8010710:	ec51 0b10 	vmov	r0, r1, d0
 8010714:	f7f0 fa48 	bl	8000ba8 <__aeabi_d2f>
 8010718:	ee07 0a90 	vmov	s15, r0
 801071c:	edc6 7a02 	vstr	s15, [r6, #8]
 8010720:	360c      	adds	r6, #12
 8010722:	42b4      	cmp	r4, r6
 8010724:	f43c abd2 	beq.w	800cecc <kalman_3gyro.constprop.0+0x23c>
 8010728:	ed99 7a06 	vldr	s14, [r9, #24]
 801072c:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010730:	eef0 6ae7 	vabs.f32	s13, s15
 8010734:	eef4 6acb 	vcmpe.f32	s13, s22
 8010738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801073c:	d59e      	bpl.n	801067c <kalman_3gyro.constprop.0+0x39ec>
 801073e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010746:	db83      	blt.n	8010650 <kalman_3gyro.constprop.0+0x39c0>
 8010748:	ee77 7a89 	vadd.f32	s15, s15, s18
 801074c:	ee17 0a90 	vmov	r0, s15
 8010750:	f7ef fefa 	bl	8000548 <__aeabi_f2d>
 8010754:	ec41 0b10 	vmov	d0, r0, r1
 8010758:	f005 f9e2 	bl	8015b20 <floor>
 801075c:	ec51 0b10 	vmov	r0, r1, d0
 8010760:	f7f0 fa22 	bl	8000ba8 <__aeabi_d2f>
 8010764:	ee07 0a90 	vmov	s15, r0
 8010768:	e788      	b.n	801067c <kalman_3gyro.constprop.0+0x39ec>
 801076a:	ee77 7a89 	vadd.f32	s15, s15, s18
 801076e:	ee17 0a90 	vmov	r0, s15
 8010772:	f7ef fee9 	bl	8000548 <__aeabi_f2d>
 8010776:	ec41 0b10 	vmov	d0, r0, r1
 801077a:	f005 f9d1 	bl	8015b20 <floor>
 801077e:	ec51 0b10 	vmov	r0, r1, d0
 8010782:	f7f0 fa11 	bl	8000ba8 <__aeabi_d2f>
 8010786:	ee07 0a90 	vmov	s15, r0
 801078a:	e69c      	b.n	80104c6 <kalman_3gyro.constprop.0+0x3836>
 801078c:	eef0 7a6a 	vmov.f32	s15, s21
 8010790:	e6c1      	b.n	8010516 <kalman_3gyro.constprop.0+0x3886>
 8010792:	eef0 7a6a 	vmov.f32	s15, s21
 8010796:	e696      	b.n	80104c6 <kalman_3gyro.constprop.0+0x3836>
 8010798:	eef0 7a6a 	vmov.f32	s15, s21
 801079c:	e66a      	b.n	8010474 <kalman_3gyro.constprop.0+0x37e4>
 801079e:	ee77 7a89 	vadd.f32	s15, s15, s18
 80107a2:	ee17 0a90 	vmov	r0, s15
 80107a6:	f7ef fecf 	bl	8000548 <__aeabi_f2d>
 80107aa:	ec41 0b10 	vmov	d0, r0, r1
 80107ae:	f005 f9b7 	bl	8015b20 <floor>
 80107b2:	ec51 0b10 	vmov	r0, r1, d0
 80107b6:	f7f0 f9f7 	bl	8000ba8 <__aeabi_d2f>
 80107ba:	ee07 0a90 	vmov	s15, r0
 80107be:	e7ad      	b.n	801071c <kalman_3gyro.constprop.0+0x3a8c>
 80107c0:	ee77 7a89 	vadd.f32	s15, s15, s18
 80107c4:	ee17 0a90 	vmov	r0, s15
 80107c8:	f7ef febe 	bl	8000548 <__aeabi_f2d>
 80107cc:	ec41 0b10 	vmov	d0, r0, r1
 80107d0:	f005 f9a6 	bl	8015b20 <floor>
 80107d4:	ec51 0b10 	vmov	r0, r1, d0
 80107d8:	f7f0 f9e6 	bl	8000ba8 <__aeabi_d2f>
 80107dc:	ee07 0a90 	vmov	s15, r0
 80107e0:	e775      	b.n	80106ce <kalman_3gyro.constprop.0+0x3a3e>
 80107e2:	eef0 7a6a 	vmov.f32	s15, s21
 80107e6:	e772      	b.n	80106ce <kalman_3gyro.constprop.0+0x3a3e>
 80107e8:	eef0 7a6a 	vmov.f32	s15, s21
 80107ec:	e746      	b.n	801067c <kalman_3gyro.constprop.0+0x39ec>
 80107ee:	eef0 7a6a 	vmov.f32	s15, s21
 80107f2:	e793      	b.n	801071c <kalman_3gyro.constprop.0+0x3a8c>
 80107f4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80107f6:	7813      	ldrb	r3, [r2, #0]
 80107f8:	ed92 7a03 	vldr	s14, [r2, #12]
 80107fc:	edd2 6a01 	vldr	s13, [r2, #4]
 8010800:	edd2 7a02 	vldr	s15, [r2, #8]
 8010804:	2200      	movs	r2, #0
 8010806:	f88b 21ac 	strb.w	r2, [fp, #428]	; 0x1ac
 801080a:	2b00      	cmp	r3, #0
 801080c:	f040 813b 	bne.w	8010a86 <kalman_3gyro.constprop.0+0x3df6>
 8010810:	ed5f 7a7a 	vldr	s15, [pc, #-488]	; 801062c <kalman_3gyro.constprop.0+0x399c>
 8010814:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 8010818:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 801081c:	f8cb 41cc 	str.w	r4, [fp, #460]	; 0x1cc
 8010820:	f8cb 41d0 	str.w	r4, [fp, #464]	; 0x1d0
 8010824:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8010828:	2100      	movs	r1, #0
 801082a:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 801082e:	f007 f861 	bl	80178f4 <memset>
 8010832:	eddb 7a02 	vldr	s15, [fp, #8]
 8010836:	ed5f 5a82 	vldr	s11, [pc, #-520]	; 8010630 <kalman_3gyro.constprop.0+0x39a0>
 801083a:	ed1f 6a82 	vldr	s12, [pc, #-520]	; 8010634 <kalman_3gyro.constprop.0+0x39a4>
 801083e:	ed5f 6a82 	vldr	s13, [pc, #-520]	; 8010638 <kalman_3gyro.constprop.0+0x39a8>
 8010842:	ed5f 4a82 	vldr	s9, [pc, #-520]	; 801063c <kalman_3gyro.constprop.0+0x39ac>
 8010846:	ed5f 3a82 	vldr	s7, [pc, #-520]	; 8010640 <kalman_3gyro.constprop.0+0x39b0>
 801084a:	ed1f 7a82 	vldr	s14, [pc, #-520]	; 8010644 <kalman_3gyro.constprop.0+0x39b4>
 801084e:	ed1f 5a82 	vldr	s10, [pc, #-520]	; 8010648 <kalman_3gyro.constprop.0+0x39b8>
 8010852:	ed1f 4a82 	vldr	s8, [pc, #-520]	; 801064c <kalman_3gyro.constprop.0+0x39bc>
 8010856:	4bd9      	ldr	r3, [pc, #868]	; (8010bbc <kalman_3gyro.constprop.0+0x3f2c>)
 8010858:	49d9      	ldr	r1, [pc, #868]	; (8010bc0 <kalman_3gyro.constprop.0+0x3f30>)
 801085a:	4dda      	ldr	r5, [pc, #872]	; (8010bc4 <kalman_3gyro.constprop.0+0x3f34>)
 801085c:	ed9f 3ada 	vldr	s6, [pc, #872]	; 8010bc8 <kalman_3gyro.constprop.0+0x3f38>
 8010860:	48da      	ldr	r0, [pc, #872]	; (8010bcc <kalman_3gyro.constprop.0+0x3f3c>)
 8010862:	f8cb 40c4 	str.w	r4, [fp, #196]	; 0xc4
 8010866:	ee67 5aa5 	vmul.f32	s11, s15, s11
 801086a:	ee27 6a86 	vmul.f32	s12, s15, s12
 801086e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8010872:	edcb 5a34 	vstr	s11, [fp, #208]	; 0xd0
 8010876:	eddf 5ad6 	vldr	s11, [pc, #856]	; 8010bd0 <kalman_3gyro.constprop.0+0x3f40>
 801087a:	ed8b 6a4e 	vstr	s12, [fp, #312]	; 0x138
 801087e:	ee67 4aa4 	vmul.f32	s9, s15, s9
 8010882:	ee67 3aa3 	vmul.f32	s7, s15, s7
 8010886:	edcb 6a50 	vstr	s13, [fp, #320]	; 0x140
 801088a:	ed9f 6ad2 	vldr	s12, [pc, #840]	; 8010bd4 <kalman_3gyro.constprop.0+0x3f44>
 801088e:	eddf 6ad2 	vldr	s13, [pc, #840]	; 8010bd8 <kalman_3gyro.constprop.0+0x3f48>
 8010892:	f8cb 412c 	str.w	r4, [fp, #300]	; 0x12c
 8010896:	ee27 7a87 	vmul.f32	s14, s15, s14
 801089a:	ee67 5aa5 	vmul.f32	s11, s15, s11
 801089e:	ee27 5a85 	vmul.f32	s10, s15, s10
 80108a2:	ee27 4a84 	vmul.f32	s8, s15, s8
 80108a6:	ee27 6a86 	vmul.f32	s12, s15, s12
 80108aa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80108ae:	2200      	movs	r2, #0
 80108b0:	f8cb 40cc 	str.w	r4, [fp, #204]	; 0xcc
 80108b4:	f8cb 4134 	str.w	r4, [fp, #308]	; 0x134
 80108b8:	edcb 4a38 	vstr	s9, [fp, #224]	; 0xe0
 80108bc:	4cc7      	ldr	r4, [pc, #796]	; (8010bdc <kalman_3gyro.constprop.0+0x3f4c>)
 80108be:	edcb 3a52 	vstr	s7, [fp, #328]	; 0x148
 80108c2:	f8cb 10d4 	str.w	r1, [fp, #212]	; 0xd4
 80108c6:	eddf 3ac6 	vldr	s7, [pc, #792]	; 8010be0 <kalman_3gyro.constprop.0+0x3f50>
 80108ca:	49c6      	ldr	r1, [pc, #792]	; (8010be4 <kalman_3gyro.constprop.0+0x3f54>)
 80108cc:	f8cb 30dc 	str.w	r3, [fp, #220]	; 0xdc
 80108d0:	f8cb 30e4 	str.w	r3, [fp, #228]	; 0xe4
 80108d4:	eddf 4ac4 	vldr	s9, [pc, #784]	; 8010be8 <kalman_3gyro.constprop.0+0x3f58>
 80108d8:	4bc4      	ldr	r3, [pc, #784]	; (8010bec <kalman_3gyro.constprop.0+0x3f5c>)
 80108da:	f8cb 20c0 	str.w	r2, [fp, #192]	; 0xc0
 80108de:	f8cb 2128 	str.w	r2, [fp, #296]	; 0x128
 80108e2:	f8cb 513c 	str.w	r5, [fp, #316]	; 0x13c
 80108e6:	4ac2      	ldr	r2, [pc, #776]	; (8010bf0 <kalman_3gyro.constprop.0+0x3f60>)
 80108e8:	f8cb 4144 	str.w	r4, [fp, #324]	; 0x144
 80108ec:	f8cb 014c 	str.w	r0, [fp, #332]	; 0x14c
 80108f0:	f8cb 10ec 	str.w	r1, [fp, #236]	; 0xec
 80108f4:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 80108f8:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 80108fc:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 8010900:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8010904:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8010908:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 801090c:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 8010910:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 8010914:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 8010918:	ed8b 7a32 	vstr	s14, [fp, #200]	; 0xc8
 801091c:	ed8b 7a4c 	vstr	s14, [fp, #304]	; 0x130
 8010920:	ed8b 5a36 	vstr	s10, [fp, #216]	; 0xd8
 8010924:	ed8b 4a3a 	vstr	s8, [fp, #232]	; 0xe8
 8010928:	ed8b 5a54 	vstr	s10, [fp, #336]	; 0x150
 801092c:	edcb 5a3c 	vstr	s11, [fp, #240]	; 0xf0
 8010930:	edcb 5a56 	vstr	s11, [fp, #344]	; 0x158
 8010934:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8010938:	ee67 4aa4 	vmul.f32	s9, s15, s9
 801093c:	4cad      	ldr	r4, [pc, #692]	; (8010bf4 <kalman_3gyro.constprop.0+0x3f64>)
 801093e:	48ae      	ldr	r0, [pc, #696]	; (8010bf8 <kalman_3gyro.constprop.0+0x3f68>)
 8010940:	49ae      	ldr	r1, [pc, #696]	; (8010bfc <kalman_3gyro.constprop.0+0x3f6c>)
 8010942:	edcb 7a48 	vstr	s15, [fp, #288]	; 0x120
 8010946:	edcb 7a62 	vstr	s15, [fp, #392]	; 0x188
 801094a:	ed8b 6a3e 	vstr	s12, [fp, #248]	; 0xf8
 801094e:	ed8b 6a58 	vstr	s12, [fp, #352]	; 0x160
 8010952:	edcb 6a40 	vstr	s13, [fp, #256]	; 0x100
 8010956:	ee27 6a83 	vmul.f32	s12, s15, s6
 801095a:	edcb 6a5a 	vstr	s13, [fp, #360]	; 0x168
 801095e:	f8cb 2154 	str.w	r2, [fp, #340]	; 0x154
 8010962:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8010966:	f8cb 210c 	str.w	r2, [fp, #268]	; 0x10c
 801096a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801096e:	4aa4      	ldr	r2, [pc, #656]	; (8010c00 <kalman_3gyro.constprop.0+0x3f70>)
 8010970:	f8cb 40fc 	str.w	r4, [fp, #252]	; 0xfc
 8010974:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010978:	f8cb 0164 	str.w	r0, [fp, #356]	; 0x164
 801097c:	f8cb 1174 	str.w	r1, [fp, #372]	; 0x174
 8010980:	f8cb 219c 	str.w	r2, [fp, #412]	; 0x19c
 8010984:	4e9f      	ldr	r6, [pc, #636]	; (8010c04 <kalman_3gyro.constprop.0+0x3f74>)
 8010986:	4da0      	ldr	r5, [pc, #640]	; (8010c08 <kalman_3gyro.constprop.0+0x3f78>)
 8010988:	49a0      	ldr	r1, [pc, #640]	; (8010c0c <kalman_3gyro.constprop.0+0x3f7c>)
 801098a:	4aa1      	ldr	r2, [pc, #644]	; (8010c10 <kalman_3gyro.constprop.0+0x3f80>)
 801098c:	f8cb 317c 	str.w	r3, [fp, #380]	; 0x17c
 8010990:	f04f 547d 	mov.w	r4, #1061158912	; 0x3f400000
 8010994:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8010998:	f8cb 311c 	str.w	r3, [fp, #284]	; 0x11c
 801099c:	f8cb 3124 	str.w	r3, [fp, #292]	; 0x124
 80109a0:	ed8b 3a3d 	vstr	s6, [fp, #244]	; 0xf4
 80109a4:	ed8b 6a42 	vstr	s12, [fp, #264]	; 0x108
 80109a8:	ed8b 6a5c 	vstr	s12, [fp, #368]	; 0x170
 80109ac:	edcb 5a66 	vstr	s11, [fp, #408]	; 0x198
 80109b0:	edcb 6a44 	vstr	s13, [fp, #272]	; 0x110
 80109b4:	edcb 6a5e 	vstr	s13, [fp, #376]	; 0x178
 80109b8:	edcb 3a65 	vstr	s7, [fp, #404]	; 0x194
 80109bc:	edcb 7a46 	vstr	s15, [fp, #280]	; 0x118
 80109c0:	edcb 4a60 	vstr	s9, [fp, #384]	; 0x180
 80109c4:	f8cb 615c 	str.w	r6, [fp, #348]	; 0x15c
 80109c8:	f8cb 516c 	str.w	r5, [fp, #364]	; 0x16c
 80109cc:	f8cb 4104 	str.w	r4, [fp, #260]	; 0x104
 80109d0:	f8cb 0114 	str.w	r0, [fp, #276]	; 0x114
 80109d4:	f8cb 1184 	str.w	r1, [fp, #388]	; 0x184
 80109d8:	f8cb 218c 	str.w	r2, [fp, #396]	; 0x18c
 80109dc:	ed8b 7a64 	vstr	s14, [fp, #400]	; 0x190
 80109e0:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80109e4:	b973      	cbnz	r3, 8010a04 <kalman_3gyro.constprop.0+0x3d74>
 80109e6:	f50b 6214 	add.w	r2, fp, #2368	; 0x940
 80109ea:	f60b 1344 	addw	r3, fp, #2372	; 0x944
 80109ee:	6811      	ldr	r1, [r2, #0]
 80109f0:	681a      	ldr	r2, [r3, #0]
 80109f2:	f8cb 11bc 	str.w	r1, [fp, #444]	; 0x1bc
 80109f6:	f60b 1348 	addw	r3, fp, #2376	; 0x948
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	f8cb 31c4 	str.w	r3, [fp, #452]	; 0x1c4
 8010a00:	f8cb 21c0 	str.w	r2, [fp, #448]	; 0x1c0
 8010a04:	2300      	movs	r3, #0
 8010a06:	f88b 3001 	strb.w	r3, [fp, #1]
 8010a0a:	f7fc ba4b 	b.w	800cea4 <kalman_3gyro.constprop.0+0x214>
 8010a0e:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8010a12:	ed9b ea4b 	vldr	s28, [fp, #300]	; 0x12c
 8010a16:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8010a1a:	ee69 9a8e 	vmul.f32	s19, s19, s28
 8010a1e:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 8010a22:	f7fd bd5b 	b.w	800e4dc <kalman_3gyro.constprop.0+0x184c>
 8010a26:	eddf 7a7b 	vldr	s15, [pc, #492]	; 8010c14 <kalman_3gyro.constprop.0+0x3f84>
 8010a2a:	f7fc ba9e 	b.w	800cf6a <kalman_3gyro.constprop.0+0x2da>
 8010a2e:	eeb1 5a04 	vmov.f32	s10, #20	; 0x40a00000  5.0
 8010a32:	f7fd bd7b 	b.w	800e52c <kalman_3gyro.constprop.0+0x189c>
 8010a36:	ed9f 6a78 	vldr	s12, [pc, #480]	; 8010c18 <kalman_3gyro.constprop.0+0x3f88>
 8010a3a:	ed9f 4a78 	vldr	s8, [pc, #480]	; 8010c1c <kalman_3gyro.constprop.0+0x3f8c>
 8010a3e:	eddf 4a78 	vldr	s9, [pc, #480]	; 8010c20 <kalman_3gyro.constprop.0+0x3f90>
 8010a42:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8010c24 <kalman_3gyro.constprop.0+0x3f94>
 8010a46:	ed9f ca78 	vldr	s24, [pc, #480]	; 8010c28 <kalman_3gyro.constprop.0+0x3f98>
 8010a4a:	ee68 8a8c 	vmul.f32	s17, s17, s24
 8010a4e:	f7fd bf9d 	b.w	800e98c <kalman_3gyro.constprop.0+0x1cfc>
 8010a52:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
 8010a56:	2a00      	cmp	r2, #0
 8010a58:	f340 8181 	ble.w	8010d5e <kalman_3gyro.constprop.0+0x40ce>
 8010a5c:	ed9d 7a02 	vldr	s14, [sp, #8]
 8010a60:	eef5 7a08 	vmov.f32	s15, #88	; 0x3ec00000  0.375
 8010a64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a6c:	f340 8177 	ble.w	8010d5e <kalman_3gyro.constprop.0+0x40ce>
 8010a70:	3a01      	subs	r2, #1
 8010a72:	f8cb 205c 	str.w	r2, [fp, #92]	; 0x5c
 8010a76:	f7fe b880 	b.w	800eb7a <kalman_3gyro.constprop.0+0x1eea>
 8010a7a:	eeb0 aa69 	vmov.f32	s20, s19
 8010a7e:	eeb0 ba69 	vmov.f32	s22, s19
 8010a82:	f7ff b9de 	b.w	800fe42 <kalman_3gyro.constprop.0+0x31b2>
 8010a86:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010a8a:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8010a8e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8010a92:	eef1 6ae7 	vsqrt.f32	s13, s15
 8010a96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010a9a:	e6bb      	b.n	8010814 <kalman_3gyro.constprop.0+0x3b84>
 8010a9c:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 8010aa0:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 8010aa4:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 8010aa8:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 8010aac:	f7fe b802 	b.w	800eab4 <kalman_3gyro.constprop.0+0x1e24>
 8010ab0:	ed9b ba49 	vldr	s22, [fp, #292]	; 0x124
 8010ab4:	f7fd bae6 	b.w	800e084 <kalman_3gyro.constprop.0+0x13f4>
 8010ab8:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8010abc:	ed9b ea63 	vldr	s28, [fp, #396]	; 0x18c
 8010ac0:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8010ac4:	ee69 9a8e 	vmul.f32	s19, s19, s28
 8010ac8:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 8010acc:	f7fd bd06 	b.w	800e4dc <kalman_3gyro.constprop.0+0x184c>
 8010ad0:	ee7e 7a67 	vsub.f32	s15, s28, s15
 8010ad4:	ee17 0a90 	vmov	r0, s15
 8010ad8:	f7ef fd36 	bl	8000548 <__aeabi_f2d>
 8010adc:	ec41 0b10 	vmov	d0, r0, r1
 8010ae0:	f004 ff9a 	bl	8015a18 <ceil>
 8010ae4:	ec51 0b10 	vmov	r0, r1, d0
 8010ae8:	f7f0 f85e 	bl	8000ba8 <__aeabi_d2f>
 8010aec:	ee0e 0a10 	vmov	s28, r0
 8010af0:	f7fc bc70 	b.w	800d3d4 <kalman_3gyro.constprop.0+0x744>
 8010af4:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 8010af8:	ee17 0a90 	vmov	r0, s15
 8010afc:	f7ef fd24 	bl	8000548 <__aeabi_f2d>
 8010b00:	ec41 0b10 	vmov	d0, r0, r1
 8010b04:	f004 ff88 	bl	8015a18 <ceil>
 8010b08:	ec51 0b10 	vmov	r0, r1, d0
 8010b0c:	f7f0 f84c 	bl	8000ba8 <__aeabi_d2f>
 8010b10:	ee0d 0a90 	vmov	s27, r0
 8010b14:	f7fc bc81 	b.w	800d41a <kalman_3gyro.constprop.0+0x78a>
 8010b18:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 8010b1c:	ee17 0a90 	vmov	r0, s15
 8010b20:	f7ef fd12 	bl	8000548 <__aeabi_f2d>
 8010b24:	ec41 0b10 	vmov	d0, r0, r1
 8010b28:	f004 ff76 	bl	8015a18 <ceil>
 8010b2c:	ec51 0b10 	vmov	r0, r1, d0
 8010b30:	f7f0 f83a 	bl	8000ba8 <__aeabi_d2f>
 8010b34:	ee0d 0a90 	vmov	s27, r0
 8010b38:	f7fc bcd5 	b.w	800d4e6 <kalman_3gyro.constprop.0+0x856>
 8010b3c:	ee7b 7a67 	vsub.f32	s15, s22, s15
 8010b40:	ee17 0a90 	vmov	r0, s15
 8010b44:	f7ef fd00 	bl	8000548 <__aeabi_f2d>
 8010b48:	ec41 0b10 	vmov	d0, r0, r1
 8010b4c:	f004 ff64 	bl	8015a18 <ceil>
 8010b50:	ec51 0b10 	vmov	r0, r1, d0
 8010b54:	f7f0 f828 	bl	8000ba8 <__aeabi_d2f>
 8010b58:	ee0b 0a10 	vmov	s22, r0
 8010b5c:	f7fc bce6 	b.w	800d52c <kalman_3gyro.constprop.0+0x89c>
 8010b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b64:	f6fd addf 	blt.w	800e726 <kalman_3gyro.constprop.0+0x1a96>
 8010b68:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8010c20 <kalman_3gyro.constprop.0+0x3f90>
 8010b6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b74:	f140 8283 	bpl.w	801107e <kalman_3gyro.constprop.0+0x43ee>
 8010b78:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8010c2c <kalman_3gyro.constprop.0+0x3f9c>
 8010b7c:	eddf 4a2c 	vldr	s9, [pc, #176]	; 8010c30 <kalman_3gyro.constprop.0+0x3fa0>
 8010b80:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8010c34 <kalman_3gyro.constprop.0+0x3fa4>
 8010b84:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8010b88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010b8c:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8010b90:	eea6 7a86 	vfma.f32	s14, s13, s12
 8010b94:	f7fd bdd1 	b.w	800e73a <kalman_3gyro.constprop.0+0x1aaa>
 8010b98:	ee78 7a67 	vsub.f32	s15, s16, s15
 8010b9c:	ee17 0a90 	vmov	r0, s15
 8010ba0:	f7ef fcd2 	bl	8000548 <__aeabi_f2d>
 8010ba4:	ec41 0b10 	vmov	d0, r0, r1
 8010ba8:	f004 ff36 	bl	8015a18 <ceil>
 8010bac:	ec51 0b10 	vmov	r0, r1, d0
 8010bb0:	f7ef fffa 	bl	8000ba8 <__aeabi_d2f>
 8010bb4:	ee08 0a10 	vmov	s16, r0
 8010bb8:	f7fc bbe9 	b.w	800d38e <kalman_3gyro.constprop.0+0x6fe>
 8010bbc:	3eb33333 	.word	0x3eb33333
 8010bc0:	3ee66666 	.word	0x3ee66666
 8010bc4:	3f866666 	.word	0x3f866666
 8010bc8:	3ecccccd 	.word	0x3ecccccd
 8010bcc:	3f933333 	.word	0x3f933333
 8010bd0:	3dcccccd 	.word	0x3dcccccd
 8010bd4:	3e4ccccd 	.word	0x3e4ccccd
 8010bd8:	3e99999a 	.word	0x3e99999a
 8010bdc:	3f8ccccd 	.word	0x3f8ccccd
 8010be0:	3f4ccccd 	.word	0x3f4ccccd
 8010be4:	3ebd70a4 	.word	0x3ebd70a4
 8010be8:	3f666666 	.word	0x3f666666
 8010bec:	40a00000 	.word	0x40a00000
 8010bf0:	3f99999a 	.word	0x3f99999a
 8010bf4:	3f19999a 	.word	0x3f19999a
 8010bf8:	3fb9999a 	.word	0x3fb9999a
 8010bfc:	3fe66666 	.word	0x3fe66666
 8010c00:	3f333333 	.word	0x3f333333
 8010c04:	3fa66666 	.word	0x3fa66666
 8010c08:	3fcccccd 	.word	0x3fcccccd
 8010c0c:	40200000 	.word	0x40200000
 8010c10:	40400000 	.word	0x40400000
 8010c14:	bf666666 	.word	0xbf666666
 8010c18:	391d4951 	.word	0x391d4951
 8010c1c:	383cbe62 	.word	0x383cbe62
 8010c20:	3c75c28f 	.word	0x3c75c28f
 8010c24:	469c3e00 	.word	0x469c3e00
 8010c28:	43168000 	.word	0x43168000
 8010c2c:	3c23d70a 	.word	0x3c23d70a
 8010c30:	3f19999a 	.word	0x3f19999a
 8010c34:	43480000 	.word	0x43480000
 8010c38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010c3c:	ee3a aa47 	vsub.f32	s20, s20, s14
 8010c40:	eef0 7aca 	vabs.f32	s15, s20
 8010c44:	ee2a aa0a 	vmul.f32	s20, s20, s20
 8010c48:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c50:	eeb4 aac7 	vcmpe.f32	s20, s14
 8010c54:	bfb8      	it	lt
 8010c56:	eef0 7a66 	vmovlt.f32	s15, s13
 8010c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c5e:	edcd 7a79 	vstr	s15, [sp, #484]	; 0x1e4
 8010c62:	f77d af5b 	ble.w	800eb1c <kalman_3gyro.constprop.0+0x1e8c>
 8010c66:	eddd 7a72 	vldr	s15, [sp, #456]	; 0x1c8
 8010c6a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8010c6e:	eeb4 aac7 	vcmpe.f32	s20, s14
 8010c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c76:	f77d af51 	ble.w	800eb1c <kalman_3gyro.constprop.0+0x1e8c>
 8010c7a:	eddd 6a73 	vldr	s13, [sp, #460]	; 0x1cc
 8010c7e:	ed9d 7a74 	vldr	s14, [sp, #464]	; 0x1d0
 8010c82:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8010c86:	ee66 6a8a 	vmul.f32	s13, s13, s20
 8010c8a:	ee27 aa0a 	vmul.f32	s20, s14, s20
 8010c8e:	edcd 7a72 	vstr	s15, [sp, #456]	; 0x1c8
 8010c92:	edcd 6a73 	vstr	s13, [sp, #460]	; 0x1cc
 8010c96:	ed8d aa74 	vstr	s20, [sp, #464]	; 0x1d0
 8010c9a:	f7fd bf3f 	b.w	800eb1c <kalman_3gyro.constprop.0+0x1e8c>
 8010c9e:	f89d 20a8 	ldrb.w	r2, [sp, #168]	; 0xa8
 8010ca2:	2a01      	cmp	r2, #1
 8010ca4:	d002      	beq.n	8010cac <kalman_3gyro.constprop.0+0x401c>
 8010ca6:	2b01      	cmp	r3, #1
 8010ca8:	f47d af1e 	bne.w	800eae8 <kalman_3gyro.constprop.0+0x1e58>
 8010cac:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 8010cb0:	eef4 7ac3 	vcmpe.f32	s15, s6
 8010cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cb8:	bfa8      	it	ge
 8010cba:	eeb0 3a67 	vmovge.f32	s6, s15
 8010cbe:	ed8d 3a6f 	vstr	s6, [sp, #444]	; 0x1bc
 8010cc2:	ed8d 3a70 	vstr	s6, [sp, #448]	; 0x1c0
 8010cc6:	ed8d 3a71 	vstr	s6, [sp, #452]	; 0x1c4
 8010cca:	f7fd bf0d 	b.w	800eae8 <kalman_3gyro.constprop.0+0x1e58>
 8010cce:	ee78 7a67 	vsub.f32	s15, s16, s15
 8010cd2:	ee17 0a90 	vmov	r0, s15
 8010cd6:	f7ef fc37 	bl	8000548 <__aeabi_f2d>
 8010cda:	ec41 0b10 	vmov	d0, r0, r1
 8010cde:	f004 fe9b 	bl	8015a18 <ceil>
 8010ce2:	ec51 0b10 	vmov	r0, r1, d0
 8010ce6:	f7ef ff5f 	bl	8000ba8 <__aeabi_d2f>
 8010cea:	ee08 0a10 	vmov	s16, r0
 8010cee:	f7fc bc40 	b.w	800d572 <kalman_3gyro.constprop.0+0x8e2>
 8010cf2:	ee7b 7a67 	vsub.f32	s15, s22, s15
 8010cf6:	ee17 0a90 	vmov	r0, s15
 8010cfa:	f7ef fc25 	bl	8000548 <__aeabi_f2d>
 8010cfe:	ec41 0b10 	vmov	d0, r0, r1
 8010d02:	f004 fe89 	bl	8015a18 <ceil>
 8010d06:	ec51 0b10 	vmov	r0, r1, d0
 8010d0a:	f7ef ff4d 	bl	8000ba8 <__aeabi_d2f>
 8010d0e:	ee0b 0a10 	vmov	s22, r0
 8010d12:	f7fc bcb7 	b.w	800d684 <kalman_3gyro.constprop.0+0x9f4>
 8010d16:	ee78 7a67 	vsub.f32	s15, s16, s15
 8010d1a:	ee17 0a90 	vmov	r0, s15
 8010d1e:	f7ef fc13 	bl	8000548 <__aeabi_f2d>
 8010d22:	ec41 0b10 	vmov	d0, r0, r1
 8010d26:	f004 fe77 	bl	8015a18 <ceil>
 8010d2a:	ec51 0b10 	vmov	r0, r1, d0
 8010d2e:	f7ef ff3b 	bl	8000ba8 <__aeabi_d2f>
 8010d32:	ee08 0a10 	vmov	s16, r0
 8010d36:	f7fc bcc8 	b.w	800d6ca <kalman_3gyro.constprop.0+0xa3a>
 8010d3a:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 8010d3e:	ee17 0a90 	vmov	r0, s15
 8010d42:	f7ef fc01 	bl	8000548 <__aeabi_f2d>
 8010d46:	ec41 0b10 	vmov	d0, r0, r1
 8010d4a:	f004 fe65 	bl	8015a18 <ceil>
 8010d4e:	ec51 0b10 	vmov	r0, r1, d0
 8010d52:	f7ef ff29 	bl	8000ba8 <__aeabi_d2f>
 8010d56:	ee0d 0a90 	vmov	s27, r0
 8010d5a:	f7fc bc70 	b.w	800d63e <kalman_3gyro.constprop.0+0x9ae>
 8010d5e:	ed9d 7a15 	vldr	s14, [sp, #84]	; 0x54
 8010d62:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8010d66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010d6a:	eeb4 7aeb 	vcmpe.f32	s14, s23
 8010d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d72:	f77d af02 	ble.w	800eb7a <kalman_3gyro.constprop.0+0x1eea>
 8010d76:	ed9d 7a16 	vldr	s14, [sp, #88]	; 0x58
 8010d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d7e:	eef4 7aec 	vcmpe.f32	s15, s25
 8010d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d86:	f77d aef8 	ble.w	800eb7a <kalman_3gyro.constprop.0+0x1eea>
 8010d8a:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8010d8e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010d92:	eef4 7acd 	vcmpe.f32	s15, s26
 8010d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d9a:	f140 8711 	bpl.w	8011bc0 <kalman_3gyro.constprop.0+0x4f30>
 8010d9e:	3303      	adds	r3, #3
 8010da0:	f7ff ba35 	b.w	801020e <kalman_3gyro.constprop.0+0x357e>
 8010da4:	460b      	mov	r3, r1
 8010da6:	f8db 11bc 	ldr.w	r1, [fp, #444]	; 0x1bc
 8010daa:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
 8010dae:	9181      	str	r1, [sp, #516]	; 0x204
 8010db0:	9282      	str	r2, [sp, #520]	; 0x208
 8010db2:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 8010db6:	9183      	str	r1, [sp, #524]	; 0x20c
 8010db8:	2200      	movs	r2, #0
 8010dba:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8010dbe:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8010dc2:	f7fe baa8 	b.w	800f316 <kalman_3gyro.constprop.0+0x2686>
 8010dc6:	a936      	add	r1, sp, #216	; 0xd8
 8010dc8:	a854      	add	r0, sp, #336	; 0x150
 8010dca:	f7fa ff85 	bl	800bcd8 <b_dcm2q>
 8010dce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8010dd2:	4619      	mov	r1, r3
 8010dd4:	f8cb 21cc 	str.w	r2, [fp, #460]	; 0x1cc
 8010dd8:	ed8b ca72 	vstr	s24, [fp, #456]	; 0x1c8
 8010ddc:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8010de0:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 8010de4:	f006 fd86 	bl	80178f4 <memset>
 8010de8:	4bd8      	ldr	r3, [pc, #864]	; (801114c <kalman_3gyro.constprop.0+0x44bc>)
 8010dea:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 8010dee:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 8010df2:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 8010df6:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8010dfa:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8010dfe:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 8010e02:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 8010e06:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 8010e0a:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 8010e0e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8010e10:	781a      	ldrb	r2, [r3, #0]
 8010e12:	ee07 2a90 	vmov	s15, r2
 8010e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010e1a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e22:	f040 84dc 	bne.w	80117de <kalman_3gyro.constprop.0+0x4b4e>
 8010e26:	eeb0 7a4c 	vmov.f32	s14, s24
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	f88b 3000 	strb.w	r3, [fp]
 8010e30:	eddb ea02 	vldr	s29, [fp, #8]
 8010e34:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010e38:	2301      	movs	r3, #1
 8010e3a:	f7fd bb8d 	b.w	800e558 <kalman_3gyro.constprop.0+0x18c8>
 8010e3e:	eddb 4a4e 	vldr	s9, [fp, #312]	; 0x138
 8010e42:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e4a:	f340 85da 	ble.w	8011a02 <kalman_3gyro.constprop.0+0x4d72>
 8010e4e:	ed9b 4a4d 	vldr	s8, [fp, #308]	; 0x134
 8010e52:	ed9b 7a4f 	vldr	s14, [fp, #316]	; 0x13c
 8010e56:	ee78 3a62 	vsub.f32	s7, s16, s5
 8010e5a:	ee37 7a44 	vsub.f32	s14, s14, s8
 8010e5e:	ee74 4ae2 	vsub.f32	s9, s9, s5
 8010e62:	ee27 7a23 	vmul.f32	s14, s14, s7
 8010e66:	ee87 ea24 	vdiv.f32	s28, s14, s9
 8010e6a:	ee3e ea04 	vadd.f32	s28, s28, s8
 8010e6e:	ed9b 7a50 	vldr	s14, [fp, #320]	; 0x140
 8010e72:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e7a:	f63d a94b 	bhi.w	800e114 <kalman_3gyro.constprop.0+0x1484>
 8010e7e:	eddb 4a52 	vldr	s9, [fp, #328]	; 0x148
 8010e82:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e8a:	f340 84bc 	ble.w	8011806 <kalman_3gyro.constprop.0+0x4b76>
 8010e8e:	eddb 3a51 	vldr	s7, [fp, #324]	; 0x144
 8010e92:	ed9b 4a53 	vldr	s8, [fp, #332]	; 0x14c
 8010e96:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010e9a:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010e9e:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010ea2:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010ea6:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010eaa:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010eae:	ed9b 7a54 	vldr	s14, [fp, #336]	; 0x150
 8010eb2:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eba:	f63d a94b 	bhi.w	800e154 <kalman_3gyro.constprop.0+0x14c4>
 8010ebe:	eddb 4a56 	vldr	s9, [fp, #344]	; 0x158
 8010ec2:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eca:	f340 84a8 	ble.w	801181e <kalman_3gyro.constprop.0+0x4b8e>
 8010ece:	eddb 3a55 	vldr	s7, [fp, #340]	; 0x154
 8010ed2:	ed9b 4a57 	vldr	s8, [fp, #348]	; 0x15c
 8010ed6:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010eda:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010ede:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010ee2:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010ee6:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010eea:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010eee:	ed9b 7a58 	vldr	s14, [fp, #352]	; 0x160
 8010ef2:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010efa:	f63d a94b 	bhi.w	800e194 <kalman_3gyro.constprop.0+0x1504>
 8010efe:	eddb 4a5a 	vldr	s9, [fp, #360]	; 0x168
 8010f02:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f0a:	f340 8490 	ble.w	801182e <kalman_3gyro.constprop.0+0x4b9e>
 8010f0e:	eddb 3a59 	vldr	s7, [fp, #356]	; 0x164
 8010f12:	ed9b 4a5b 	vldr	s8, [fp, #364]	; 0x16c
 8010f16:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010f1a:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010f1e:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010f22:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010f26:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010f2a:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010f2e:	ed9b 7a5c 	vldr	s14, [fp, #368]	; 0x170
 8010f32:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f3a:	f6fd a94b 	blt.w	800e1d4 <kalman_3gyro.constprop.0+0x1544>
 8010f3e:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 8010f42:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f4a:	f57d a94b 	bpl.w	800e1e4 <kalman_3gyro.constprop.0+0x1554>
 8010f4e:	eddb 3a5d 	vldr	s7, [fp, #372]	; 0x174
 8010f52:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 8010f56:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010f5a:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010f5e:	ee74 4ac7 	vsub.f32	s9, s9, s14
 8010f62:	ee24 7a03 	vmul.f32	s14, s8, s6
 8010f66:	ee87 ea24 	vdiv.f32	s28, s14, s9
 8010f6a:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010f6e:	ed9b 7a60 	vldr	s14, [fp, #384]	; 0x180
 8010f72:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f7a:	f6fd a94b 	blt.w	800e214 <kalman_3gyro.constprop.0+0x1584>
 8010f7e:	eeb4 8ac5 	vcmpe.f32	s16, s10
 8010f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f86:	f57d a945 	bpl.w	800e214 <kalman_3gyro.constprop.0+0x1584>
 8010f8a:	ed9b 4a61 	vldr	s8, [fp, #388]	; 0x184
 8010f8e:	eddb 4a63 	vldr	s9, [fp, #396]	; 0x18c
 8010f92:	ee78 3a47 	vsub.f32	s7, s16, s14
 8010f96:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8010f9a:	ee35 7a47 	vsub.f32	s14, s10, s14
 8010f9e:	ee24 5aa3 	vmul.f32	s10, s9, s7
 8010fa2:	ee85 ea07 	vdiv.f32	s28, s10, s14
 8010fa6:	ee3e ea04 	vadd.f32	s28, s28, s8
 8010faa:	f7fd b933 	b.w	800e214 <kalman_3gyro.constprop.0+0x1584>
 8010fae:	eddf 6a68 	vldr	s13, [pc, #416]	; 8011150 <kalman_3gyro.constprop.0+0x44c0>
 8010fb2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fba:	f57d ac56 	bpl.w	800e86a <kalman_3gyro.constprop.0+0x1bda>
 8010fbe:	eddf 3a65 	vldr	s7, [pc, #404]	; 8011154 <kalman_3gyro.constprop.0+0x44c4>
 8010fc2:	eddf 2a65 	vldr	s5, [pc, #404]	; 8011158 <kalman_3gyro.constprop.0+0x44c8>
 8010fc6:	ed9f 3a65 	vldr	s6, [pc, #404]	; 801115c <kalman_3gyro.constprop.0+0x44cc>
 8010fca:	eddf 6a65 	vldr	s13, [pc, #404]	; 8011160 <kalman_3gyro.constprop.0+0x44d0>
 8010fce:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8010fd2:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8010fd6:	eee3 6a83 	vfma.f32	s13, s7, s6
 8010fda:	eeb0 ca66 	vmov.f32	s24, s13
 8010fde:	eddf 6a61 	vldr	s13, [pc, #388]	; 8011164 <kalman_3gyro.constprop.0+0x44d4>
 8010fe2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fea:	f6fd ac56 	blt.w	800e89a <kalman_3gyro.constprop.0+0x1c0a>
 8010fee:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8011168 <kalman_3gyro.constprop.0+0x44d8>
 8010ff2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ffa:	f57d ac56 	bpl.w	800e8aa <kalman_3gyro.constprop.0+0x1c1a>
 8010ffe:	eddf 3a59 	vldr	s7, [pc, #356]	; 8011164 <kalman_3gyro.constprop.0+0x44d4>
 8011002:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8011006:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 801100a:	ee63 3aa6 	vmul.f32	s7, s7, s13
 801100e:	eeb3 3a04 	vmov.f32	s6, #52	; 0x41a00000  20.0
 8011012:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8011016:	eee3 6a83 	vfma.f32	s13, s7, s6
 801101a:	eeb0 ca66 	vmov.f32	s24, s13
 801101e:	eddf 6a53 	vldr	s13, [pc, #332]	; 801116c <kalman_3gyro.constprop.0+0x44dc>
 8011022:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801102a:	f6fd ac56 	blt.w	800e8da <kalman_3gyro.constprop.0+0x1c4a>
 801102e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8011032:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801103a:	f57d ac56 	bpl.w	800e8ea <kalman_3gyro.constprop.0+0x1c5a>
 801103e:	eddf 3a4b 	vldr	s7, [pc, #300]	; 801116c <kalman_3gyro.constprop.0+0x44dc>
 8011042:	eddf 2a4b 	vldr	s5, [pc, #300]	; 8011170 <kalman_3gyro.constprop.0+0x44e0>
 8011046:	ed9f 3a4b 	vldr	s6, [pc, #300]	; 8011174 <kalman_3gyro.constprop.0+0x44e4>
 801104a:	ee77 3ae3 	vsub.f32	s7, s15, s7
 801104e:	eef2 6a05 	vmov.f32	s13, #37	; 0x41280000  10.5
 8011052:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8011056:	eee3 6a83 	vfma.f32	s13, s7, s6
 801105a:	eeb0 ca66 	vmov.f32	s24, s13
 801105e:	e4f4      	b.n	8010a4a <kalman_3gyro.constprop.0+0x3dba>
 8011060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011064:	f57d abe1 	bpl.w	800e82a <kalman_3gyro.constprop.0+0x1b9a>
 8011068:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8011154 <kalman_3gyro.constprop.0+0x44c4>
 801106c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011074:	da9b      	bge.n	8010fae <kalman_3gyro.constprop.0+0x431e>
 8011076:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 801107a:	f7fd bbee 	b.w	800e85a <kalman_3gyro.constprop.0+0x1bca>
 801107e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8011150 <kalman_3gyro.constprop.0+0x44c0>
 8011082:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801108a:	f57d ab5e 	bpl.w	800e74a <kalman_3gyro.constprop.0+0x1aba>
 801108e:	eddf 6a31 	vldr	s13, [pc, #196]	; 8011154 <kalman_3gyro.constprop.0+0x44c4>
 8011092:	eddf 4a39 	vldr	s9, [pc, #228]	; 8011178 <kalman_3gyro.constprop.0+0x44e8>
 8011096:	ed9f 6a31 	vldr	s12, [pc, #196]	; 801115c <kalman_3gyro.constprop.0+0x44cc>
 801109a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801117c <kalman_3gyro.constprop.0+0x44ec>
 801109e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80110a2:	ee66 6aa4 	vmul.f32	s13, s13, s9
 80110a6:	eea6 7a86 	vfma.f32	s14, s13, s12
 80110aa:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8011164 <kalman_3gyro.constprop.0+0x44d4>
 80110ae:	eef4 7ae6 	vcmpe.f32	s15, s13
 80110b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110b6:	f6fd ab5e 	blt.w	800e776 <kalman_3gyro.constprop.0+0x1ae6>
 80110ba:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8011168 <kalman_3gyro.constprop.0+0x44d8>
 80110be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80110c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110c6:	f57d ab5e 	bpl.w	800e786 <kalman_3gyro.constprop.0+0x1af6>
 80110ca:	eddf 6a26 	vldr	s13, [pc, #152]	; 8011164 <kalman_3gyro.constprop.0+0x44d4>
 80110ce:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80110d2:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80110d6:	ee66 6a87 	vmul.f32	s13, s13, s14
 80110da:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 80110de:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80110e2:	eea6 7a86 	vfma.f32	s14, s13, s12
 80110e6:	eddf 6a21 	vldr	s13, [pc, #132]	; 801116c <kalman_3gyro.constprop.0+0x44dc>
 80110ea:	eef4 7ae6 	vcmpe.f32	s15, s13
 80110ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110f2:	f6fd ab5e 	blt.w	800e7b2 <kalman_3gyro.constprop.0+0x1b22>
 80110f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80110fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80110fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011102:	f57d ab5d 	bpl.w	800e7c0 <kalman_3gyro.constprop.0+0x1b30>
 8011106:	eddf 6a19 	vldr	s13, [pc, #100]	; 801116c <kalman_3gyro.constprop.0+0x44dc>
 801110a:	eddf 4a1d 	vldr	s9, [pc, #116]	; 8011180 <kalman_3gyro.constprop.0+0x44f0>
 801110e:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8011174 <kalman_3gyro.constprop.0+0x44e4>
 8011112:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8011184 <kalman_3gyro.constprop.0+0x44f4>
 8011116:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801111a:	ee66 6aa4 	vmul.f32	s13, s13, s9
 801111e:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011122:	f7fd bb5b 	b.w	800e7dc <kalman_3gyro.constprop.0+0x1b4c>
 8011126:	9b01      	ldr	r3, [sp, #4]
 8011128:	e63d      	b.n	8010da6 <kalman_3gyro.constprop.0+0x4116>
 801112a:	ed9b 7a32 	vldr	s14, [fp, #200]	; 0xc8
 801112e:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8011132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011136:	da2b      	bge.n	8011190 <kalman_3gyro.constprop.0+0x4500>
 8011138:	ed9f ba13 	vldr	s22, [pc, #76]	; 8011188 <kalman_3gyro.constprop.0+0x44f8>
 801113c:	ed9b 7a34 	vldr	s14, [fp, #208]	; 0xd0
 8011140:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8011144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011148:	db3a      	blt.n	80111c0 <kalman_3gyro.constprop.0+0x4530>
 801114a:	e386      	b.n	801185a <kalman_3gyro.constprop.0+0x4bca>
 801114c:	40a00000 	.word	0x40a00000
 8011150:	3cf5c28f 	.word	0x3cf5c28f
 8011154:	3c75c28f 	.word	0x3c75c28f
 8011158:	3dccccd0 	.word	0x3dccccd0
 801115c:	42855556 	.word	0x42855556
 8011160:	3f866666 	.word	0x3f866666
 8011164:	3d4ccccd 	.word	0x3d4ccccd
 8011168:	3dcccccd 	.word	0x3dcccccd
 801116c:	3e4ccccd 	.word	0x3e4ccccd
 8011170:	42200000 	.word	0x42200000
 8011174:	40555555 	.word	0x40555555
 8011178:	3ecccccc 	.word	0x3ecccccc
 801117c:	3fcccccd 	.word	0x3fcccccd
 8011180:	43f00000 	.word	0x43f00000
 8011184:	42ee0000 	.word	0x42ee0000
 8011188:	00000000 	.word	0x00000000
 801118c:	eeb0 7a64 	vmov.f32	s14, s9
 8011190:	eddb 4a34 	vldr	s9, [fp, #208]	; 0xd0
 8011194:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8011198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801119c:	f140 8359 	bpl.w	8011852 <kalman_3gyro.constprop.0+0x4bc2>
 80111a0:	eddb 3a33 	vldr	s7, [fp, #204]	; 0xcc
 80111a4:	ed9b 4a35 	vldr	s8, [fp, #212]	; 0xd4
 80111a8:	ee38 3a47 	vsub.f32	s6, s16, s14
 80111ac:	ee34 4a63 	vsub.f32	s8, s8, s7
 80111b0:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80111b4:	ee64 4a03 	vmul.f32	s9, s8, s6
 80111b8:	ee84 ba87 	vdiv.f32	s22, s9, s14
 80111bc:	ee3b ba23 	vadd.f32	s22, s22, s7
 80111c0:	ed9b 7a36 	vldr	s14, [fp, #216]	; 0xd8
 80111c4:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80111c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111cc:	f2c0 835d 	blt.w	801188a <kalman_3gyro.constprop.0+0x4bfa>
 80111d0:	eddb 4a38 	vldr	s9, [fp, #224]	; 0xe0
 80111d4:	eeb4 8ae4 	vcmpe.f32	s16, s9
 80111d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111dc:	f140 8402 	bpl.w	80119e4 <kalman_3gyro.constprop.0+0x4d54>
 80111e0:	eddb 3a37 	vldr	s7, [fp, #220]	; 0xdc
 80111e4:	ed9b 4a39 	vldr	s8, [fp, #228]	; 0xe4
 80111e8:	ee38 3a47 	vsub.f32	s6, s16, s14
 80111ec:	ee34 4a63 	vsub.f32	s8, s8, s7
 80111f0:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80111f4:	ee64 4a03 	vmul.f32	s9, s8, s6
 80111f8:	ee84 ba87 	vdiv.f32	s22, s9, s14
 80111fc:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011200:	ed9b 7a3a 	vldr	s14, [fp, #232]	; 0xe8
 8011204:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8011208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801120c:	f200 835d 	bhi.w	80118ca <kalman_3gyro.constprop.0+0x4c3a>
 8011210:	eddb 4a3c 	vldr	s9, [fp, #240]	; 0xf0
 8011214:	eef4 4ac8 	vcmpe.f32	s9, s16
 8011218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801121c:	f340 83e8 	ble.w	80119f0 <kalman_3gyro.constprop.0+0x4d60>
 8011220:	eddb 3a3b 	vldr	s7, [fp, #236]	; 0xec
 8011224:	ed9b 4a3d 	vldr	s8, [fp, #244]	; 0xf4
 8011228:	ee38 3a47 	vsub.f32	s6, s16, s14
 801122c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011230:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8011234:	ee64 4a03 	vmul.f32	s9, s8, s6
 8011238:	ee84 ba87 	vdiv.f32	s22, s9, s14
 801123c:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011240:	ed9b 7a3e 	vldr	s14, [fp, #248]	; 0xf8
 8011244:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8011248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801124c:	f200 835d 	bhi.w	801190a <kalman_3gyro.constprop.0+0x4c7a>
 8011250:	eddb 4a40 	vldr	s9, [fp, #256]	; 0x100
 8011254:	eef4 4ac8 	vcmpe.f32	s9, s16
 8011258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801125c:	f340 83b4 	ble.w	80119c8 <kalman_3gyro.constprop.0+0x4d38>
 8011260:	eddb 3a3f 	vldr	s7, [fp, #252]	; 0xfc
 8011264:	ed9b 4a41 	vldr	s8, [fp, #260]	; 0x104
 8011268:	ee38 3a47 	vsub.f32	s6, s16, s14
 801126c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011270:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8011274:	ee64 4a03 	vmul.f32	s9, s8, s6
 8011278:	ee84 ba87 	vdiv.f32	s22, s9, s14
 801127c:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011280:	ed9b 7a42 	vldr	s14, [fp, #264]	; 0x108
 8011284:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8011288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801128c:	f2c0 835c 	blt.w	8011948 <kalman_3gyro.constprop.0+0x4cb8>
 8011290:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 8011294:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8011298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801129c:	f140 835c 	bpl.w	8011958 <kalman_3gyro.constprop.0+0x4cc8>
 80112a0:	eddb 3a43 	vldr	s7, [fp, #268]	; 0x10c
 80112a4:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 80112a8:	ee38 3a47 	vsub.f32	s6, s16, s14
 80112ac:	ee34 4a63 	vsub.f32	s8, s8, s7
 80112b0:	ee74 4ac7 	vsub.f32	s9, s9, s14
 80112b4:	ee24 7a03 	vmul.f32	s14, s8, s6
 80112b8:	ee87 ba24 	vdiv.f32	s22, s14, s9
 80112bc:	ee3b ba23 	vadd.f32	s22, s22, s7
 80112c0:	ed9b 7a46 	vldr	s14, [fp, #280]	; 0x118
 80112c4:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80112c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112cc:	f6fc aeda 	blt.w	800e084 <kalman_3gyro.constprop.0+0x13f4>
 80112d0:	eeb4 8ac5 	vcmpe.f32	s16, s10
 80112d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112d8:	f57c aed4 	bpl.w	800e084 <kalman_3gyro.constprop.0+0x13f4>
 80112dc:	ed9b 4a47 	vldr	s8, [fp, #284]	; 0x11c
 80112e0:	eddb 4a49 	vldr	s9, [fp, #292]	; 0x124
 80112e4:	ee78 3a47 	vsub.f32	s7, s16, s14
 80112e8:	ee74 4ac4 	vsub.f32	s9, s9, s8
 80112ec:	ee35 7a47 	vsub.f32	s14, s10, s14
 80112f0:	ee24 5aa3 	vmul.f32	s10, s9, s7
 80112f4:	ee85 ba07 	vdiv.f32	s22, s10, s14
 80112f8:	ee3b ba04 	vadd.f32	s22, s22, s8
 80112fc:	f7fc bec2 	b.w	800e084 <kalman_3gyro.constprop.0+0x13f4>
 8011300:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8011304:	eef4 7acd 	vcmpe.f32	s15, s26
 8011308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801130c:	dd2c      	ble.n	8011368 <kalman_3gyro.constprop.0+0x46d8>
 801130e:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 8011312:	eef4 7aeb 	vcmpe.f32	s15, s23
 8011316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801131a:	dd25      	ble.n	8011368 <kalman_3gyro.constprop.0+0x46d8>
 801131c:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8011320:	eef4 7aec 	vcmpe.f32	s15, s25
 8011324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011328:	dd1e      	ble.n	8011368 <kalman_3gyro.constprop.0+0x46d8>
 801132a:	eddd 5a03 	vldr	s11, [sp, #12]
 801132e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8011332:	eef4 5ae7 	vcmpe.f32	s11, s15
 8011336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801133a:	d515      	bpl.n	8011368 <kalman_3gyro.constprop.0+0x46d8>
 801133c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011340:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8011344:	ee37 7a26 	vadd.f32	s14, s14, s13
 8011348:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801134c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011350:	d50a      	bpl.n	8011368 <kalman_3gyro.constprop.0+0x46d8>
 8011352:	2300      	movs	r3, #0
 8011354:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011358:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801135c:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 8011360:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8011364:	f7fd bf4c 	b.w	800f200 <kalman_3gyro.constprop.0+0x2570>
 8011368:	eddd 7a41 	vldr	s15, [sp, #260]	; 0x104
 801136c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011374:	dd0b      	ble.n	801138e <kalman_3gyro.constprop.0+0x46fe>
 8011376:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 801137a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801137e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011382:	f100 843f 	bmi.w	8011c04 <kalman_3gyro.constprop.0+0x4f74>
 8011386:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 801138a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801138e:	2300      	movs	r3, #0
 8011390:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 8011394:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8011398:	f7fd bf32 	b.w	800f200 <kalman_3gyro.constprop.0+0x2570>
 801139c:	2301      	movs	r3, #1
 801139e:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80113a2:	f88b 31a4 	strb.w	r3, [fp, #420]	; 0x1a4
 80113a6:	f50b 62c3 	add.w	r2, fp, #1560	; 0x618
 80113aa:	f50b 63f1 	add.w	r3, fp, #1928	; 0x788
 80113ae:	edd2 5a00 	vldr	s11, [r2]
 80113b2:	ed93 7a00 	vldr	s14, [r3]
 80113b6:	f20b 6214 	addw	r2, fp, #1556	; 0x614
 80113ba:	f20b 7384 	addw	r3, fp, #1924	; 0x784
 80113be:	ed92 5a00 	vldr	s10, [r2]
 80113c2:	edd3 6a00 	vldr	s13, [r3]
 80113c6:	ee25 4aa5 	vmul.f32	s8, s11, s11
 80113ca:	ee67 4a07 	vmul.f32	s9, s14, s14
 80113ce:	eea5 4a05 	vfma.f32	s8, s10, s10
 80113d2:	f20b 738c 	addw	r3, fp, #1932	; 0x78c
 80113d6:	f20b 611c 	addw	r1, fp, #1564	; 0x61c
 80113da:	eee6 4aa6 	vfma.f32	s9, s13, s13
 80113de:	aa5d      	add	r2, sp, #372	; 0x174
 80113e0:	a833      	add	r0, sp, #204	; 0xcc
 80113e2:	ed91 6a00 	vldr	s12, [r1]
 80113e6:	edd3 7a00 	vldr	s15, [r3]
 80113ea:	eea6 4a06 	vfma.f32	s8, s12, s12
 80113ee:	a92d      	add	r1, sp, #180	; 0xb4
 80113f0:	ad5d      	add	r5, sp, #372	; 0x174
 80113f2:	eee7 4aa7 	vfma.f32	s9, s15, s15
 80113f6:	ac66      	add	r4, sp, #408	; 0x198
 80113f8:	eef1 2ac4 	vsqrt.f32	s5, s8
 80113fc:	eeb1 3ae4 	vsqrt.f32	s6, s9
 8011400:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8011404:	ee83 4aa2 	vdiv.f32	s8, s7, s5
 8011408:	eec3 4a83 	vdiv.f32	s9, s7, s6
 801140c:	ee25 5a04 	vmul.f32	s10, s10, s8
 8011410:	ee27 7a24 	vmul.f32	s14, s14, s9
 8011414:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8011418:	ee65 5a84 	vmul.f32	s11, s11, s8
 801141c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8011420:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8011424:	ed8d 7a34 	vstr	s14, [sp, #208]	; 0xd0
 8011428:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 801142c:	ed8d 5a2d 	vstr	s10, [sp, #180]	; 0xb4
 8011430:	edcd 5a2e 	vstr	s11, [sp, #184]	; 0xb8
 8011434:	ed8d 6a2f 	vstr	s12, [sp, #188]	; 0xbc
 8011438:	edcd 6a33 	vstr	s13, [sp, #204]	; 0xcc
 801143c:	f7fa fbac 	bl	800bb98 <getRotationMatrix>
 8011440:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011442:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011444:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011448:	682e      	ldr	r6, [r5, #0]
 801144a:	6026      	str	r6, [r4, #0]
 801144c:	ad66      	add	r5, sp, #408	; 0x198
 801144e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011450:	f20d 44d4 	addw	r4, sp, #1236	; 0x4d4
 8011454:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011456:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011458:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801145a:	eddd 7a66 	vldr	s15, [sp, #408]	; 0x198
 801145e:	ed9d 7a67 	vldr	s14, [sp, #412]	; 0x19c
 8011462:	6026      	str	r6, [r4, #0]
 8011464:	eef0 7ae7 	vabs.f32	s15, s15
 8011468:	eeb0 7ac7 	vabs.f32	s14, s14
 801146c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011474:	f100 81df 	bmi.w	8011836 <kalman_3gyro.constprop.0+0x4ba6>
 8011478:	2307      	movs	r3, #7
 801147a:	f04f 0c04 	mov.w	ip, #4
 801147e:	9305      	str	r3, [sp, #20]
 8011480:	2300      	movs	r3, #0
 8011482:	4662      	mov	r2, ip
 8011484:	2003      	movs	r0, #3
 8011486:	2706      	movs	r7, #6
 8011488:	f04f 0e01 	mov.w	lr, #1
 801148c:	9304      	str	r3, [sp, #16]
 801148e:	ed9d 7a68 	vldr	s14, [sp, #416]	; 0x1a0
 8011492:	eeb0 7ac7 	vabs.f32	s14, s14
 8011496:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801149a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801149e:	f340 8296 	ble.w	80119ce <kalman_3gyro.constprop.0+0x4d3e>
 80114a2:	2306      	movs	r3, #6
 80114a4:	930a      	str	r3, [sp, #40]	; 0x28
 80114a6:	2307      	movs	r3, #7
 80114a8:	9305      	str	r3, [sp, #20]
 80114aa:	2300      	movs	r3, #0
 80114ac:	2708      	movs	r7, #8
 80114ae:	f04f 0c04 	mov.w	ip, #4
 80114b2:	9302      	str	r3, [sp, #8]
 80114b4:	2302      	movs	r3, #2
 80114b6:	9707      	str	r7, [sp, #28]
 80114b8:	4662      	mov	r2, ip
 80114ba:	2005      	movs	r0, #5
 80114bc:	f04f 0e01 	mov.w	lr, #1
 80114c0:	9304      	str	r3, [sp, #16]
 80114c2:	ab66      	add	r3, sp, #408	; 0x198
 80114c4:	441a      	add	r2, r3
 80114c6:	9b07      	ldr	r3, [sp, #28]
 80114c8:	edd2 6a00 	vldr	s13, [r2]
 80114cc:	9a02      	ldr	r2, [sp, #8]
 80114ce:	a966      	add	r1, sp, #408	; 0x198
 80114d0:	440b      	add	r3, r1
 80114d2:	ed93 7a00 	vldr	s14, [r3]
 80114d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80114da:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 80114de:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 80114e2:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 80114e6:	9a04      	ldr	r2, [sp, #16]
 80114e8:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 80114ec:	f20d 44d4 	addw	r4, sp, #1236	; 0x4d4
 80114f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80114f4:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80114f8:	0080      	lsls	r0, r0, #2
 80114fa:	900e      	str	r0, [sp, #56]	; 0x38
 80114fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80114fe:	940d      	str	r4, [sp, #52]	; 0x34
 8011500:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 8011504:	edc3 7a00 	vstr	s15, [r3]
 8011508:	ed96 7a00 	vldr	s14, [r6]
 801150c:	edd1 7a00 	vldr	s15, [r1]
 8011510:	930c      	str	r3, [sp, #48]	; 0x30
 8011512:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8011516:	eb05 0480 	add.w	r4, r5, r0, lsl #2
 801151a:	0080      	lsls	r0, r0, #2
 801151c:	9006      	str	r0, [sp, #24]
 801151e:	eb05 0087 	add.w	r0, r5, r7, lsl #2
 8011522:	00bf      	lsls	r7, r7, #2
 8011524:	9711      	str	r7, [sp, #68]	; 0x44
 8011526:	9f05      	ldr	r7, [sp, #20]
 8011528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801152a:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 801152e:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 8011532:	eb05 0183 	add.w	r1, r5, r3, lsl #2
 8011536:	009b      	lsls	r3, r3, #2
 8011538:	9307      	str	r3, [sp, #28]
 801153a:	9b02      	ldr	r3, [sp, #8]
 801153c:	edc6 6a00 	vstr	s13, [r6]
 8011540:	009b      	lsls	r3, r3, #2
 8011542:	930b      	str	r3, [sp, #44]	; 0x2c
 8011544:	9b04      	ldr	r3, [sp, #16]
 8011546:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8011548:	009b      	lsls	r3, r3, #2
 801154a:	9312      	str	r3, [sp, #72]	; 0x48
 801154c:	9b05      	ldr	r3, [sp, #20]
 801154e:	ed96 7a00 	vldr	s14, [r6]
 8011552:	009b      	lsls	r3, r3, #2
 8011554:	9309      	str	r3, [sp, #36]	; 0x24
 8011556:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 801155a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801155c:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 8011560:	ed93 6a00 	vldr	s12, [r3]
 8011564:	edd2 7a00 	vldr	s15, [r2]
 8011568:	eee6 7a47 	vfms.f32	s15, s12, s14
 801156c:	ea4f 058e 	mov.w	r5, lr, lsl #2
 8011570:	950a      	str	r5, [sp, #40]	; 0x28
 8011572:	ea4f 058c 	mov.w	r5, ip, lsl #2
 8011576:	edc2 7a00 	vstr	s15, [r2]
 801157a:	ed96 7a00 	vldr	s14, [r6]
 801157e:	edd4 7a00 	vldr	s15, [r4]
 8011582:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8011586:	edc4 7a00 	vstr	s15, [r4]
 801158a:	edd0 5a00 	vldr	s11, [r0]
 801158e:	ed97 7a00 	vldr	s14, [r7]
 8011592:	eea6 7a65 	vfms.f32	s14, s12, s11
 8011596:	eef0 7ae7 	vabs.f32	s15, s15
 801159a:	ed87 7a00 	vstr	s14, [r7]
 801159e:	ed90 6a00 	vldr	s12, [r0]
 80115a2:	ed91 7a00 	vldr	s14, [r1]
 80115a6:	eea6 7ac6 	vfms.f32	s14, s13, s12
 80115aa:	ed81 7a00 	vstr	s14, [r1]
 80115ae:	ed92 7a00 	vldr	s14, [r2]
 80115b2:	eeb0 7ac7 	vabs.f32	s14, s14
 80115b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80115ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115be:	dd12      	ble.n	80115e6 <kalman_3gyro.constprop.0+0x4956>
 80115c0:	9a07      	ldr	r2, [sp, #28]
 80115c2:	9f05      	ldr	r7, [sp, #20]
 80115c4:	9806      	ldr	r0, [sp, #24]
 80115c6:	9209      	str	r2, [sp, #36]	; 0x24
 80115c8:	4673      	mov	r3, lr
 80115ca:	f8dd e008 	ldr.w	lr, [sp, #8]
 80115ce:	9302      	str	r3, [sp, #8]
 80115d0:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80115d4:	009b      	lsls	r3, r3, #2
 80115d6:	9206      	str	r2, [sp, #24]
 80115d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80115da:	00ba      	lsls	r2, r7, #2
 80115dc:	ea4f 038e 	mov.w	r3, lr, lsl #2
 80115e0:	4605      	mov	r5, r0
 80115e2:	9207      	str	r2, [sp, #28]
 80115e4:	930a      	str	r3, [sp, #40]	; 0x28
 80115e6:	9b06      	ldr	r3, [sp, #24]
 80115e8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80115ea:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 80115ee:	4413      	add	r3, r2
 80115f0:	461c      	mov	r4, r3
 80115f2:	462b      	mov	r3, r5
 80115f4:	4413      	add	r3, r2
 80115f6:	ed94 7a00 	vldr	s14, [r4]
 80115fa:	edd3 7a00 	vldr	s15, [r3]
 80115fe:	ee87 2a27 	vdiv.f32	s4, s14, s15
 8011602:	4618      	mov	r0, r3
 8011604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011606:	4413      	add	r3, r2
 8011608:	461a      	mov	r2, r3
 801160a:	9b07      	ldr	r3, [sp, #28]
 801160c:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8011610:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 8011614:	440b      	add	r3, r1
 8011616:	4619      	mov	r1, r3
 8011618:	442e      	add	r6, r5
 801161a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801161c:	9607      	str	r6, [sp, #28]
 801161e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011620:	ed84 2a00 	vstr	s4, [r4]
 8011624:	442b      	add	r3, r5
 8011626:	f50d 67f9 	add.w	r7, sp, #1992	; 0x7c8
 801162a:	9306      	str	r3, [sp, #24]
 801162c:	19bb      	adds	r3, r7, r6
 801162e:	ed92 7a00 	vldr	s14, [r2]
 8011632:	edd1 7a00 	vldr	s15, [r1]
 8011636:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8011638:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 801163c:	edd3 3a00 	vldr	s7, [r3]
 8011640:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 8011644:	eee2 7a47 	vfms.f32	s15, s4, s14
 8011648:	4423      	add	r3, r4
 801164a:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 801164e:	ed93 5a00 	vldr	s10, [r3]
 8011652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011654:	edc1 7a00 	vstr	s15, [r1]
 8011658:	462f      	mov	r7, r5
 801165a:	f50d 65f9 	add.w	r5, sp, #1992	; 0x7c8
 801165e:	4629      	mov	r1, r5
 8011660:	eb05 0c03 	add.w	ip, r5, r3
 8011664:	9d04      	ldr	r5, [sp, #16]
 8011666:	ed92 1a00 	vldr	s2, [r2]
 801166a:	4437      	add	r7, r6
 801166c:	9705      	str	r7, [sp, #20]
 801166e:	eb01 068e 	add.w	r6, r1, lr, lsl #2
 8011672:	eb01 0785 	add.w	r7, r1, r5, lsl #2
 8011676:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 801167a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 801167e:	4419      	add	r1, r3
 8011680:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 8011684:	ee80 4aa7 	vdiv.f32	s8, s1, s15
 8011688:	191c      	adds	r4, r3, r4
 801168a:	9b02      	ldr	r3, [sp, #8]
 801168c:	9104      	str	r1, [sp, #16]
 801168e:	f50d 61f9 	add.w	r1, sp, #1992	; 0x7c8
 8011692:	9409      	str	r4, [sp, #36]	; 0x24
 8011694:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 8011698:	463d      	mov	r5, r7
 801169a:	9904      	ldr	r1, [sp, #16]
 801169c:	46b6      	mov	lr, r6
 801169e:	4623      	mov	r3, r4
 80116a0:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 80116a4:	f5ac 6ccf 	sub.w	ip, ip, #1656	; 0x678
 80116a8:	edd0 7a00 	vldr	s15, [r0]
 80116ac:	9805      	ldr	r0, [sp, #20]
 80116ae:	ed91 0a00 	vldr	s0, [r1]
 80116b2:	ed90 8a00 	vldr	s16, [r0]
 80116b6:	eddc 4a00 	vldr	s9, [ip]
 80116ba:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 80116be:	f5ae 6ecc 	sub.w	lr, lr, #1632	; 0x660
 80116c2:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 80116c6:	f2a7 676c 	subw	r7, r7, #1644	; 0x66c
 80116ca:	f5a5 65cc 	sub.w	r5, r5, #1632	; 0x660
 80116ce:	eec0 2aa7 	vdiv.f32	s5, s1, s15
 80116d2:	a85d      	add	r0, sp, #372	; 0x174
 80116d4:	a93e      	add	r1, sp, #248	; 0xf8
 80116d6:	edd7 5a00 	vldr	s11, [r7]
 80116da:	ed96 6a00 	vldr	s12, [r6]
 80116de:	9a06      	ldr	r2, [sp, #24]
 80116e0:	ed95 7a00 	vldr	s14, [r5]
 80116e4:	edd4 6a00 	vldr	s13, [r4]
 80116e8:	ed93 3a00 	vldr	s6, [r3]
 80116ec:	edde 7a00 	vldr	s15, [lr]
 80116f0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80116f2:	edd2 1a00 	vldr	s3, [r2]
 80116f6:	9e07      	ldr	r6, [sp, #28]
 80116f8:	eee8 3a45 	vfms.f32	s7, s16, s10
 80116fc:	eee0 4a45 	vfms.f32	s9, s0, s10
 8011700:	eea8 6a65 	vfms.f32	s12, s16, s11
 8011704:	eee7 7a48 	vfms.f32	s15, s14, s16
 8011708:	eee0 6a65 	vfms.f32	s13, s0, s11
 801170c:	eea7 3a40 	vfms.f32	s6, s14, s0
 8011710:	ed94 0a00 	vldr	s0, [r4]
 8011714:	eea2 3a67 	vfms.f32	s6, s4, s15
 8011718:	eee3 4ac2 	vfms.f32	s9, s7, s4
 801171c:	eee2 6a46 	vfms.f32	s13, s4, s12
 8011720:	ee80 2a80 	vdiv.f32	s4, s1, s0
 8011724:	ee64 6a26 	vmul.f32	s13, s8, s13
 8011728:	ee64 4a24 	vmul.f32	s9, s8, s9
 801172c:	ee24 4a03 	vmul.f32	s8, s8, s6
 8011730:	eea1 6a66 	vfms.f32	s12, s2, s13
 8011734:	eee4 3ac1 	vfms.f32	s7, s9, s2
 8011738:	eee4 7a41 	vfms.f32	s15, s8, s2
 801173c:	eee1 5ae6 	vfms.f32	s11, s3, s13
 8011740:	eea4 5ae1 	vfms.f32	s10, s9, s3
 8011744:	eea4 7a61 	vfms.f32	s14, s8, s3
 8011748:	ed96 3a00 	vldr	s6, [r6]
 801174c:	edcd 6a62 	vstr	s13, [sp, #392]	; 0x188
 8011750:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8011754:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8011758:	ee22 6a86 	vmul.f32	s12, s5, s12
 801175c:	eea7 7ac3 	vfms.f32	s14, s15, s6
 8011760:	eea3 5ac3 	vfms.f32	s10, s7, s6
 8011764:	eee3 5a46 	vfms.f32	s11, s6, s12
 8011768:	ee27 7a02 	vmul.f32	s14, s14, s4
 801176c:	ee22 5a05 	vmul.f32	s10, s4, s10
 8011770:	ee62 5a25 	vmul.f32	s11, s4, s11
 8011774:	ed8d 7a63 	vstr	s14, [sp, #396]	; 0x18c
 8011778:	edcd 7a64 	vstr	s15, [sp, #400]	; 0x190
 801177c:	edcd 4a5f 	vstr	s9, [sp, #380]	; 0x17c
 8011780:	edcd 3a5e 	vstr	s7, [sp, #376]	; 0x178
 8011784:	ed8d 5a5d 	vstr	s10, [sp, #372]	; 0x174
 8011788:	edcd 5a60 	vstr	s11, [sp, #384]	; 0x180
 801178c:	ed8d 6a61 	vstr	s12, [sp, #388]	; 0x184
 8011790:	ed8d 4a65 	vstr	s8, [sp, #404]	; 0x194
 8011794:	f7fa faa0 	bl	800bcd8 <b_dcm2q>
 8011798:	eddd 6a3f 	vldr	s13, [sp, #252]	; 0xfc
 801179c:	ed9d 7a40 	vldr	s14, [sp, #256]	; 0x100
 80117a0:	eddd 7a3e 	vldr	s15, [sp, #248]	; 0xf8
 80117a4:	f89b 31a4 	ldrb.w	r3, [fp, #420]	; 0x1a4
 80117a8:	ee76 6aa6 	vadd.f32	s13, s13, s13
 80117ac:	ee37 7a07 	vadd.f32	s14, s14, s14
 80117b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80117b4:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 80117b8:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 80117bc:	edcd 7a2d 	vstr	s15, [sp, #180]	; 0xb4
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	f43d ad20 	beq.w	800f206 <kalman_3gyro.constprop.0+0x2576>
 80117c6:	2200      	movs	r2, #0
 80117c8:	9b01      	ldr	r3, [sp, #4]
 80117ca:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 80117ce:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 80117d2:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 80117d6:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 80117da:	f7fd bd9c 	b.w	800f316 <kalman_3gyro.constprop.0+0x2686>
 80117de:	edd3 7a02 	vldr	s15, [r3, #8]
 80117e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80117e6:	edd3 6a03 	vldr	s13, [r3, #12]
 80117ea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80117ee:	eee7 7a07 	vfma.f32	s15, s14, s14
 80117f2:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80117f6:	eeb1 6ae7 	vsqrt.f32	s12, s15
 80117fa:	ee86 7a86 	vdiv.f32	s14, s13, s12
 80117fe:	ed8b 7a72 	vstr	s14, [fp, #456]	; 0x1c8
 8011802:	f7ff bb12 	b.w	8010e2a <kalman_3gyro.constprop.0+0x419a>
 8011806:	eeb0 7a64 	vmov.f32	s14, s9
 801180a:	f7fc bc8b 	b.w	800e124 <kalman_3gyro.constprop.0+0x1494>
 801180e:	eeb0 7a64 	vmov.f32	s14, s9
 8011812:	f7ff bb94 	b.w	8010f3e <kalman_3gyro.constprop.0+0x42ae>
 8011816:	eeb0 7a64 	vmov.f32	s14, s9
 801181a:	f7ff bb50 	b.w	8010ebe <kalman_3gyro.constprop.0+0x422e>
 801181e:	eeb0 7a64 	vmov.f32	s14, s9
 8011822:	f7fc bc9f 	b.w	800e164 <kalman_3gyro.constprop.0+0x14d4>
 8011826:	eeb0 7a64 	vmov.f32	s14, s9
 801182a:	f7ff bb68 	b.w	8010efe <kalman_3gyro.constprop.0+0x426e>
 801182e:	eeb0 7a64 	vmov.f32	s14, s9
 8011832:	f7fc bcb7 	b.w	800e1a4 <kalman_3gyro.constprop.0+0x1514>
 8011836:	2200      	movs	r2, #0
 8011838:	2004      	movs	r0, #4
 801183a:	2301      	movs	r3, #1
 801183c:	2406      	movs	r4, #6
 801183e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8011842:	9007      	str	r0, [sp, #28]
 8011844:	eef0 7a47 	vmov.f32	s15, s14
 8011848:	4696      	mov	lr, r2
 801184a:	f04f 0c03 	mov.w	ip, #3
 801184e:	2707      	movs	r7, #7
 8011850:	e61d      	b.n	801148e <kalman_3gyro.constprop.0+0x47fe>
 8011852:	ed9f bae2 	vldr	s22, [pc, #904]	; 8011bdc <kalman_3gyro.constprop.0+0x4f4c>
 8011856:	eeb0 7a64 	vmov.f32	s14, s9
 801185a:	eddb 4a36 	vldr	s9, [fp, #216]	; 0xd8
 801185e:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8011862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011866:	f140 80b9 	bpl.w	80119dc <kalman_3gyro.constprop.0+0x4d4c>
 801186a:	eddb 3a35 	vldr	s7, [fp, #212]	; 0xd4
 801186e:	ed9b 4a37 	vldr	s8, [fp, #220]	; 0xdc
 8011872:	ee38 3a47 	vsub.f32	s6, s16, s14
 8011876:	ee34 4a63 	vsub.f32	s8, s8, s7
 801187a:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801187e:	ee64 4a03 	vmul.f32	s9, s8, s6
 8011882:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8011886:	ee3b ba23 	vadd.f32	s22, s22, s7
 801188a:	ed9b 7a38 	vldr	s14, [fp, #224]	; 0xe0
 801188e:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8011892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011896:	f6ff acb3 	blt.w	8011200 <kalman_3gyro.constprop.0+0x4570>
 801189a:	eddb 4a3a 	vldr	s9, [fp, #232]	; 0xe8
 801189e:	eeb4 8ae4 	vcmpe.f32	s16, s9
 80118a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118a6:	f140 80a0 	bpl.w	80119ea <kalman_3gyro.constprop.0+0x4d5a>
 80118aa:	eddb 3a39 	vldr	s7, [fp, #228]	; 0xe4
 80118ae:	ed9b 4a3b 	vldr	s8, [fp, #236]	; 0xec
 80118b2:	ee38 3a47 	vsub.f32	s6, s16, s14
 80118b6:	ee34 4a63 	vsub.f32	s8, s8, s7
 80118ba:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80118be:	ee64 4a03 	vmul.f32	s9, s8, s6
 80118c2:	ee84 ba87 	vdiv.f32	s22, s9, s14
 80118c6:	ee3b ba23 	vadd.f32	s22, s22, s7
 80118ca:	ed9b 7a3c 	vldr	s14, [fp, #240]	; 0xf0
 80118ce:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80118d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118d6:	f63f acb3 	bhi.w	8011240 <kalman_3gyro.constprop.0+0x45b0>
 80118da:	eddb 4a3e 	vldr	s9, [fp, #248]	; 0xf8
 80118de:	eef4 4ac8 	vcmpe.f32	s9, s16
 80118e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118e6:	f340 8086 	ble.w	80119f6 <kalman_3gyro.constprop.0+0x4d66>
 80118ea:	eddb 3a3d 	vldr	s7, [fp, #244]	; 0xf4
 80118ee:	ed9b 4a3f 	vldr	s8, [fp, #252]	; 0xfc
 80118f2:	ee38 3a47 	vsub.f32	s6, s16, s14
 80118f6:	ee34 4a63 	vsub.f32	s8, s8, s7
 80118fa:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80118fe:	ee64 4a03 	vmul.f32	s9, s8, s6
 8011902:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8011906:	ee3b ba23 	vadd.f32	s22, s22, s7
 801190a:	ed9b 7a40 	vldr	s14, [fp, #256]	; 0x100
 801190e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8011912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011916:	f63f acb3 	bhi.w	8011280 <kalman_3gyro.constprop.0+0x45f0>
 801191a:	eddb 4a42 	vldr	s9, [fp, #264]	; 0x108
 801191e:	eef4 4ac8 	vcmpe.f32	s9, s16
 8011922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011926:	dd69      	ble.n	80119fc <kalman_3gyro.constprop.0+0x4d6c>
 8011928:	eddb 3a41 	vldr	s7, [fp, #260]	; 0x104
 801192c:	ed9b 4a43 	vldr	s8, [fp, #268]	; 0x10c
 8011930:	ee38 3a47 	vsub.f32	s6, s16, s14
 8011934:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011938:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801193c:	ee64 4a03 	vmul.f32	s9, s8, s6
 8011940:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8011944:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011948:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 801194c:	eef4 4ac8 	vcmpe.f32	s9, s16
 8011950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011954:	f63f acb4 	bhi.w	80112c0 <kalman_3gyro.constprop.0+0x4630>
 8011958:	ed9b 7a46 	vldr	s14, [fp, #280]	; 0x118
 801195c:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8011960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011964:	f77f acb4 	ble.w	80112d0 <kalman_3gyro.constprop.0+0x4640>
 8011968:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 801196c:	ed9b 5a47 	vldr	s10, [fp, #284]	; 0x11c
 8011970:	ee78 3a64 	vsub.f32	s7, s16, s9
 8011974:	ee35 5a44 	vsub.f32	s10, s10, s8
 8011978:	ee37 7a64 	vsub.f32	s14, s14, s9
 801197c:	ee25 5a23 	vmul.f32	s10, s10, s7
 8011980:	ee85 ba07 	vdiv.f32	s22, s10, s14
 8011984:	ee3b ba04 	vadd.f32	s22, s22, s8
 8011988:	f7fc bb7c 	b.w	800e084 <kalman_3gyro.constprop.0+0x13f4>
 801198c:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 8011990:	eddf 7a93 	vldr	s15, [pc, #588]	; 8011be0 <kalman_3gyro.constprop.0+0x4f50>
 8011994:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8011be4 <kalman_3gyro.constprop.0+0x4f54>
 8011998:	3301      	adds	r3, #1
 801199a:	b29b      	uxth	r3, r3
 801199c:	2b31      	cmp	r3, #49	; 0x31
 801199e:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 80119a2:	bf98      	it	ls
 80119a4:	eef0 7a47 	vmovls.f32	s15, s14
 80119a8:	f7fd bc1c 	b.w	800f1e4 <kalman_3gyro.constprop.0+0x2554>
 80119ac:	2a0a      	cmp	r2, #10
 80119ae:	d02c      	beq.n	8011a0a <kalman_3gyro.constprop.0+0x4d7a>
 80119b0:	2100      	movs	r1, #0
 80119b2:	3201      	adds	r2, #1
 80119b4:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 80119b8:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 80119bc:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 80119c0:	f88b 11a3 	strb.w	r1, [fp, #419]	; 0x1a3
 80119c4:	f7fd bca7 	b.w	800f316 <kalman_3gyro.constprop.0+0x2686>
 80119c8:	eeb0 7a64 	vmov.f32	s14, s9
 80119cc:	e7a5      	b.n	801191a <kalman_3gyro.constprop.0+0x4c8a>
 80119ce:	2305      	movs	r3, #5
 80119d0:	2108      	movs	r1, #8
 80119d2:	e9cd 3109 	strd	r3, r1, [sp, #36]	; 0x24
 80119d6:	2302      	movs	r3, #2
 80119d8:	9302      	str	r3, [sp, #8]
 80119da:	e572      	b.n	80114c2 <kalman_3gyro.constprop.0+0x4832>
 80119dc:	eeb0 7a64 	vmov.f32	s14, s9
 80119e0:	f7ff bbf6 	b.w	80111d0 <kalman_3gyro.constprop.0+0x4540>
 80119e4:	eeb0 7a64 	vmov.f32	s14, s9
 80119e8:	e757      	b.n	801189a <kalman_3gyro.constprop.0+0x4c0a>
 80119ea:	eeb0 7a64 	vmov.f32	s14, s9
 80119ee:	e40f      	b.n	8011210 <kalman_3gyro.constprop.0+0x4580>
 80119f0:	eeb0 7a64 	vmov.f32	s14, s9
 80119f4:	e771      	b.n	80118da <kalman_3gyro.constprop.0+0x4c4a>
 80119f6:	eeb0 7a64 	vmov.f32	s14, s9
 80119fa:	e429      	b.n	8011250 <kalman_3gyro.constprop.0+0x45c0>
 80119fc:	eeb0 7a64 	vmov.f32	s14, s9
 8011a00:	e446      	b.n	8011290 <kalman_3gyro.constprop.0+0x4600>
 8011a02:	ed9f ea76 	vldr	s28, [pc, #472]	; 8011bdc <kalman_3gyro.constprop.0+0x4f4c>
 8011a06:	f7fc bb6d 	b.w	800e0e4 <kalman_3gyro.constprop.0+0x1454>
 8011a0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011a0c:	ed94 3a00 	vldr	s6, [r4]
 8011a10:	edd2 5a00 	vldr	s11, [r2]
 8011a14:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011a16:	edd0 3a00 	vldr	s7, [r0]
 8011a1a:	ed92 1a00 	vldr	s2, [r2]
 8011a1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011a20:	ed91 4a00 	vldr	s8, [r1]
 8011a24:	edd2 4a00 	vldr	s9, [r2]
 8011a28:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011a2a:	ed8d 7a81 	vstr	s14, [sp, #516]	; 0x204
 8011a2e:	ed92 2a00 	vldr	s4, [r2]
 8011a32:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011a34:	edcd 6a82 	vstr	s13, [sp, #520]	; 0x208
 8011a38:	edd2 7a00 	vldr	s15, [r2]
 8011a3c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011a3e:	edd2 2a00 	vldr	s5, [r2]
 8011a42:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011a44:	ee75 5a81 	vadd.f32	s11, s11, s2
 8011a48:	edd2 1a00 	vldr	s3, [r2]
 8011a4c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011a4e:	ee74 4a82 	vadd.f32	s9, s9, s4
 8011a52:	ee75 5a83 	vadd.f32	s11, s11, s6
 8011a56:	ed92 3a00 	vldr	s6, [r2]
 8011a5a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011a5c:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8011a60:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8011a64:	edd2 3a00 	vldr	s7, [r2]
 8011a68:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011a6a:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011a6e:	ed92 4a00 	vldr	s8, [r2]
 8011a72:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011a74:	ee74 4a83 	vadd.f32	s9, s9, s6
 8011a78:	ed92 2a00 	vldr	s4, [r2]
 8011a7c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011a7e:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 8011a82:	ee75 5aa1 	vadd.f32	s11, s11, s3
 8011a86:	edd2 2a00 	vldr	s5, [r2]
 8011a8a:	ed91 3a00 	vldr	s6, [r1]
 8011a8e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011a92:	ee74 4a82 	vadd.f32	s9, s9, s4
 8011a96:	f20b 70d4 	addw	r0, fp, #2004	; 0x7d4
 8011a9a:	ee75 5a84 	vadd.f32	s11, s11, s8
 8011a9e:	f20b 72dc 	addw	r2, fp, #2012	; 0x7dc
 8011aa2:	ed90 4a00 	vldr	s8, [r0]
 8011aa6:	edd2 3a00 	vldr	s7, [r2]
 8011aaa:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 8011aae:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 8011ab2:	ed91 2a00 	vldr	s4, [r1]
 8011ab6:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8011aba:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8011abe:	ee74 4a83 	vadd.f32	s9, s9, s6
 8011ac2:	f50b 60fc 	add.w	r0, fp, #2016	; 0x7e0
 8011ac6:	ee75 5a84 	vadd.f32	s11, s11, s8
 8011aca:	f50b 62fd 	add.w	r2, fp, #2024	; 0x7e8
 8011ace:	ed90 4a00 	vldr	s8, [r0]
 8011ad2:	edd2 2a00 	vldr	s5, [r2]
 8011ad6:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 8011ada:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011ade:	f20b 70ec 	addw	r0, fp, #2028	; 0x7ec
 8011ae2:	edd1 3a00 	vldr	s7, [r1]
 8011ae6:	ed90 3a00 	vldr	s6, [r0]
 8011aea:	ee74 4a82 	vadd.f32	s9, s9, s4
 8011aee:	ee75 5a84 	vadd.f32	s11, s11, s8
 8011af2:	f20b 72f4 	addw	r2, fp, #2036	; 0x7f4
 8011af6:	f20b 70fc 	addw	r0, fp, #2044	; 0x7fc
 8011afa:	ed92 4a00 	vldr	s8, [r2]
 8011afe:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8011b02:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8011b06:	f50b 64ff 	add.w	r4, fp, #2040	; 0x7f8
 8011b0a:	edd0 3a00 	vldr	s7, [r0]
 8011b0e:	edd4 2a00 	vldr	s5, [r4]
 8011b12:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8011b16:	ee75 5a83 	vadd.f32	s11, s11, s6
 8011b1a:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 8011b1e:	f50b 6200 	add.w	r2, fp, #2048	; 0x800
 8011b22:	ed91 3a00 	vldr	s6, [r1]
 8011b26:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011b2a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8011b2e:	ed92 4a00 	vldr	s8, [r2]
 8011b32:	f89b 21a3 	ldrb.w	r2, [fp, #419]	; 0x1a3
 8011b36:	f60b 0404 	addw	r4, fp, #2052	; 0x804
 8011b3a:	edd4 3a00 	vldr	s7, [r4]
 8011b3e:	f60b 010c 	addw	r1, fp, #2060	; 0x80c
 8011b42:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8011b46:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011b4a:	ee74 4a83 	vadd.f32	s9, s9, s6
 8011b4e:	ed91 4a00 	vldr	s8, [r1]
 8011b52:	ee75 5aa3 	vadd.f32	s11, s11, s7
 8011b56:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011b5a:	ee64 4a85 	vmul.f32	s9, s9, s10
 8011b5e:	f50d 619b 	add.w	r1, sp, #1240	; 0x4d8
 8011b62:	ee65 5a85 	vmul.f32	s11, s11, s10
 8011b66:	edc1 4a00 	vstr	s9, [r1]
 8011b6a:	ee67 7a85 	vmul.f32	s15, s15, s10
 8011b6e:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8011b72:	edc1 5a00 	vstr	s11, [r1]
 8011b76:	f240 1501 	movw	r5, #257	; 0x101
 8011b7a:	3201      	adds	r2, #1
 8011b7c:	f20d 41dc 	addw	r1, sp, #1244	; 0x4dc
 8011b80:	f8ad 50ae 	strh.w	r5, [sp, #174]	; 0xae
 8011b84:	edc1 7a00 	vstr	s15, [r1]
 8011b88:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8011b8c:	2800      	cmp	r0, #0
 8011b8e:	f43d abc2 	beq.w	800f316 <kalman_3gyro.constprop.0+0x2686>
 8011b92:	2200      	movs	r2, #0
 8011b94:	ed8b 7a6f 	vstr	s14, [fp, #444]	; 0x1bc
 8011b98:	edcb 6a70 	vstr	s13, [fp, #448]	; 0x1c0
 8011b9c:	ed8b 6a71 	vstr	s12, [fp, #452]	; 0x1c4
 8011ba0:	f88b 2001 	strb.w	r2, [fp, #1]
 8011ba4:	f7fd bbb7 	b.w	800f316 <kalman_3gyro.constprop.0+0x2686>
 8011ba8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8011bac:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011bb0:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8011bb4:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8011bb8:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 8011bbc:	f7fd bb20 	b.w	800f200 <kalman_3gyro.constprop.0+0x2570>
 8011bc0:	2a00      	cmp	r2, #0
 8011bc2:	f340 80c1 	ble.w	8011d48 <kalman_3gyro.constprop.0+0x50b8>
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 8011bcc:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 8011bd0:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 8011bd4:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 8011bd8:	f7fc bfcf 	b.w	800eb7a <kalman_3gyro.constprop.0+0x1eea>
 8011bdc:	00000000 	.word	0x00000000
 8011be0:	3e4cccce 	.word	0x3e4cccce
 8011be4:	3eaaaaab 	.word	0x3eaaaaab
 8011be8:	3e999998 	.word	0x3e999998
 8011bec:	3f99999a 	.word	0x3f99999a
 8011bf0:	3dccccd0 	.word	0x3dccccd0
 8011bf4:	3f8ccccd 	.word	0x3f8ccccd
 8011bf8:	3e4ccccd 	.word	0x3e4ccccd
 8011bfc:	3d088889 	.word	0x3d088889
 8011c00:	3d0d3dcb 	.word	0x3d0d3dcb
 8011c04:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011c08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c10:	d55b      	bpl.n	8011cca <kalman_3gyro.constprop.0+0x503a>
 8011c12:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8011bf0 <kalman_3gyro.constprop.0+0x4f60>
 8011c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011c1a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011c1e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8011c22:	eef0 5a66 	vmov.f32	s11, s13
 8011c26:	eee7 5a06 	vfma.f32	s11, s14, s12
 8011c2a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c32:	eeb0 7a65 	vmov.f32	s14, s11
 8011c36:	db5b      	blt.n	8011cf0 <kalman_3gyro.constprop.0+0x5060>
 8011c38:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8011c3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c44:	d55b      	bpl.n	8011cfe <kalman_3gyro.constprop.0+0x506e>
 8011c46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011c4a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011c4e:	ed1f 6a1a 	vldr	s12, [pc, #-104]	; 8011be8 <kalman_3gyro.constprop.0+0x4f58>
 8011c52:	ed1f 7a1a 	vldr	s14, [pc, #-104]	; 8011bec <kalman_3gyro.constprop.0+0x4f5c>
 8011c56:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011c5a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8011c5e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c66:	db5b      	blt.n	8011d20 <kalman_3gyro.constprop.0+0x5090>
 8011c68:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8011c6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c74:	d55b      	bpl.n	8011d2e <kalman_3gyro.constprop.0+0x509e>
 8011c76:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8011c7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011c7e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8011c82:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8011c86:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011c8a:	ee68 8a87 	vmul.f32	s17, s17, s14
 8011c8e:	f7ff bb7e 	b.w	801138e <kalman_3gyro.constprop.0+0x46fe>
 8011c92:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 8011c96:	2b27      	cmp	r3, #39	; 0x27
 8011c98:	f200 80c3 	bhi.w	8011e22 <kalman_3gyro.constprop.0+0x5192>
 8011c9c:	ed8d 5a81 	vstr	s10, [sp, #516]	; 0x204
 8011ca0:	edcd 5a82 	vstr	s11, [sp, #520]	; 0x208
 8011ca4:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8011ca8:	f8bb 31a8 	ldrh.w	r3, [fp, #424]	; 0x1a8
 8011cac:	2201      	movs	r2, #1
 8011cae:	4413      	add	r3, r2
 8011cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011cb4:	bf14      	ite	ne
 8011cb6:	b29b      	uxthne	r3, r3
 8011cb8:	f64f 73ff 	movweq	r3, #65535	; 0xffff
 8011cbc:	f8ab 31a8 	strh.w	r3, [fp, #424]	; 0x1a8
 8011cc0:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8011cc4:	9b01      	ldr	r3, [sp, #4]
 8011cc6:	f7fd bb26 	b.w	800f316 <kalman_3gyro.constprop.0+0x2686>
 8011cca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011cce:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cd6:	d5af      	bpl.n	8011c38 <kalman_3gyro.constprop.0+0x4fa8>
 8011cd8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8011cdc:	ed1f 6a3c 	vldr	s12, [pc, #-240]	; 8011bf0 <kalman_3gyro.constprop.0+0x4f60>
 8011ce0:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 8011bf4 <kalman_3gyro.constprop.0+0x4f64>
 8011ce4:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011ce8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8011cec:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011cf0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011cf4:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cfc:	dbad      	blt.n	8011c5a <kalman_3gyro.constprop.0+0x4fca>
 8011cfe:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8011d02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d0a:	d5ad      	bpl.n	8011c68 <kalman_3gyro.constprop.0+0x4fd8>
 8011d0c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011d10:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011d14:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8011d18:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8011d1c:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011d20:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8011d24:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d2c:	dbad      	blt.n	8011c8a <kalman_3gyro.constprop.0+0x4ffa>
 8011d2e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8011d32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011d36:	ed5f 6a50 	vldr	s13, [pc, #-320]	; 8011bf8 <kalman_3gyro.constprop.0+0x4f68>
 8011d3a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011d3e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8011d42:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011d46:	e7a0      	b.n	8011c8a <kalman_3gyro.constprop.0+0x4ffa>
 8011d48:	eddd 6a6f 	vldr	s13, [sp, #444]	; 0x1bc
 8011d4c:	ed9d 7a70 	vldr	s14, [sp, #448]	; 0x1c0
 8011d50:	eddd 7a71 	vldr	s15, [sp, #452]	; 0x1c4
 8011d54:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8011d58:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011d5c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011d60:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011d64:	edcd 6a6f 	vstr	s13, [sp, #444]	; 0x1bc
 8011d68:	ed8d 7a70 	vstr	s14, [sp, #448]	; 0x1c0
 8011d6c:	edcd 7a71 	vstr	s15, [sp, #452]	; 0x1c4
 8011d70:	f7fc bf03 	b.w	800eb7a <kalman_3gyro.constprop.0+0x1eea>
 8011d74:	ed1f 4a5f 	vldr	s8, [pc, #-380]	; 8011bfc <kalman_3gyro.constprop.0+0x4f6c>
 8011d78:	ed5f 4a5f 	vldr	s9, [pc, #-380]	; 8011c00 <kalman_3gyro.constprop.0+0x4f70>
 8011d7c:	ac33      	add	r4, sp, #204	; 0xcc
 8011d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8011d82:	edd1 6a7c 	vldr	s13, [r1, #496]	; 0x1f0
 8011d86:	f5a1 73ae 	sub.w	r3, r1, #348	; 0x15c
 8011d8a:	eef0 7a66 	vmov.f32	s15, s13
 8011d8e:	3001      	adds	r0, #1
 8011d90:	461a      	mov	r2, r3
 8011d92:	ed92 7ad6 	vldr	s14, [r2, #856]	; 0x358
 8011d96:	320c      	adds	r2, #12
 8011d98:	428a      	cmp	r2, r1
 8011d9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011d9e:	d1f8      	bne.n	8011d92 <kalman_3gyro.constprop.0+0x5102>
 8011da0:	ee27 7a84 	vmul.f32	s14, s15, s8
 8011da4:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8011da8:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8011dac:	edd3 7ad6 	vldr	s15, [r3, #856]	; 0x358
 8011db0:	330c      	adds	r3, #12
 8011db2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011db6:	428b      	cmp	r3, r1
 8011db8:	eee7 6aa7 	vfma.f32	s13, s15, s15
 8011dbc:	d1f6      	bne.n	8011dac <kalman_3gyro.constprop.0+0x511c>
 8011dbe:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8011dc2:	2802      	cmp	r0, #2
 8011dc4:	f103 0104 	add.w	r1, r3, #4
 8011dc8:	ece4 6a01 	vstmia	r4!, {s13}
 8011dcc:	d1d9      	bne.n	8011d82 <kalman_3gyro.constprop.0+0x50f2>
 8011dce:	eddd 6a34 	vldr	s13, [sp, #208]	; 0xd0
 8011dd2:	eddd 7a33 	vldr	s15, [sp, #204]	; 0xcc
 8011dd6:	ed9d 7a35 	vldr	s14, [sp, #212]	; 0xd4
 8011dda:	eef1 3ae7 	vsqrt.f32	s7, s15
 8011dde:	eeb1 4ae6 	vsqrt.f32	s8, s13
 8011de2:	eef1 4ac7 	vsqrt.f32	s9, s14
 8011de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011dea:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8011dee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011df2:	edcd 3a33 	vstr	s7, [sp, #204]	; 0xcc
 8011df6:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dfe:	ed8d 4a34 	vstr	s8, [sp, #208]	; 0xd0
 8011e02:	edcd 4a35 	vstr	s9, [sp, #212]	; 0xd4
 8011e06:	f57d aa62 	bpl.w	800f2ce <kalman_3gyro.constprop.0+0x263e>
 8011e0a:	2200      	movs	r2, #0
 8011e0c:	9b01      	ldr	r3, [sp, #4]
 8011e0e:	ed8d 5a81 	vstr	s10, [sp, #516]	; 0x204
 8011e12:	edcd 5a82 	vstr	s11, [sp, #520]	; 0x208
 8011e16:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8011e1a:	f88b 2001 	strb.w	r2, [fp, #1]
 8011e1e:	f7fd ba7a 	b.w	800f316 <kalman_3gyro.constprop.0+0x2686>
 8011e22:	9b08      	ldr	r3, [sp, #32]
 8011e24:	6999      	ldr	r1, [r3, #24]
 8011e26:	69da      	ldr	r2, [r3, #28]
 8011e28:	6a1b      	ldr	r3, [r3, #32]
 8011e2a:	9181      	str	r1, [sp, #516]	; 0x204
 8011e2c:	9282      	str	r2, [sp, #520]	; 0x208
 8011e2e:	9383      	str	r3, [sp, #524]	; 0x20c
 8011e30:	e73a      	b.n	8011ca8 <kalman_3gyro.constprop.0+0x5018>
 8011e32:	bf00      	nop
 8011e34:	0000      	movs	r0, r0
	...

08011e38 <iNemoEngine_API_Update>:
 8011e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e3c:	ed2d 8b0c 	vpush	{d8-d13}
 8011e40:	4604      	mov	r4, r0
 8011e42:	b0c1      	sub	sp, #260	; 0x104
 8011e44:	460d      	mov	r5, r1
 8011e46:	4617      	mov	r7, r2
 8011e48:	eeb0 8a40 	vmov.f32	s16, s0
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	f000 8253 	beq.w	80122f8 <iNemoEngine_API_Update+0x4c0>
 8011e52:	461e      	mov	r6, r3
 8011e54:	463b      	mov	r3, r7
 8011e56:	f894 c978 	ldrb.w	ip, [r4, #2424]	; 0x978
 8011e5a:	f853 0f0c 	ldr.w	r0, [r3, #12]!
 8011e5e:	6859      	ldr	r1, [r3, #4]
 8011e60:	689a      	ldr	r2, [r3, #8]
 8011e62:	ab33      	add	r3, sp, #204	; 0xcc
 8011e64:	c307      	stmia	r3!, {r0, r1, r2}
 8011e66:	6879      	ldr	r1, [r7, #4]
 8011e68:	68ba      	ldr	r2, [r7, #8]
 8011e6a:	6838      	ldr	r0, [r7, #0]
 8011e6c:	ab30      	add	r3, sp, #192	; 0xc0
 8011e6e:	c307      	stmia	r3!, {r0, r1, r2}
 8011e70:	f857 0f18 	ldr.w	r0, [r7, #24]!
 8011e74:	6879      	ldr	r1, [r7, #4]
 8011e76:	68ba      	ldr	r2, [r7, #8]
 8011e78:	ab36      	add	r3, sp, #216	; 0xd8
 8011e7a:	c307      	stmia	r3!, {r0, r1, r2}
 8011e7c:	f1bc 0f00 	cmp.w	ip, #0
 8011e80:	d005      	beq.n	8011e8e <iNemoEngine_API_Update+0x56>
 8011e82:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 8011e86:	7923      	ldrb	r3, [r4, #4]
 8011e88:	429a      	cmp	r2, r3
 8011e8a:	f080 829b 	bcs.w	80123c4 <iNemoEngine_API_Update+0x58c>
 8011e8e:	f104 093a 	add.w	r9, r4, #58	; 0x3a
 8011e92:	f10d 0a14 	add.w	sl, sp, #20
 8011e96:	2300      	movs	r3, #0
 8011e98:	4649      	mov	r1, r9
 8011e9a:	4650      	mov	r0, sl
 8011e9c:	aa33      	add	r2, sp, #204	; 0xcc
 8011e9e:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 8011ea2:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 8011ea6:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
 8011eaa:	f7f9 fb63 	bl	800b574 <rotVect>
 8011eae:	aa36      	add	r2, sp, #216	; 0xd8
 8011eb0:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8011eb4:	a808      	add	r0, sp, #32
 8011eb6:	f7f9 fb5d 	bl	800b574 <rotVect>
 8011eba:	aa30      	add	r2, sp, #192	; 0xc0
 8011ebc:	4640      	mov	r0, r8
 8011ebe:	f104 0143 	add.w	r1, r4, #67	; 0x43
 8011ec2:	f7f9 fb57 	bl	800b574 <rotVect>
 8011ec6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8011eca:	b923      	cbnz	r3, 8011ed6 <iNemoEngine_API_Update+0x9e>
 8011ecc:	4b8c      	ldr	r3, [pc, #560]	; (8012100 <iNemoEngine_API_Update+0x2c8>)
 8011ece:	930c      	str	r3, [sp, #48]	; 0x30
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	920b      	str	r2, [sp, #44]	; 0x2c
 8011ed4:	930d      	str	r3, [sp, #52]	; 0x34
 8011ed6:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 8011eda:	2f09      	cmp	r7, #9
 8011edc:	d851      	bhi.n	8011f82 <iNemoEngine_API_Update+0x14a>
 8011ede:	ed9d ba06 	vldr	s22, [sp, #24]
 8011ee2:	eddd ba05 	vldr	s23, [sp, #20]
 8011ee6:	eddd aa07 	vldr	s21, [sp, #28]
 8011eea:	ee6b 7a0b 	vmul.f32	s15, s22, s22
 8011eee:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8011ef2:	eeeb 7aab 	vfma.f32	s15, s23, s23
 8011ef6:	eeea 7aaa 	vfma.f32	s15, s21, s21
 8011efa:	ee17 0a90 	vmov	r0, s15
 8011efe:	f7ee fb23 	bl	8000548 <__aeabi_f2d>
 8011f02:	ec41 0b10 	vmov	d0, r0, r1
 8011f06:	f003 ff5d 	bl	8015dc4 <sqrt>
 8011f0a:	ec51 0b10 	vmov	r0, r1, d0
 8011f0e:	f7ee fe4b 	bl	8000ba8 <__aeabi_d2f>
 8011f12:	ee07 0a90 	vmov	s15, r0
 8011f16:	ee8c 7a27 	vdiv.f32	s14, s24, s15
 8011f1a:	eddd 9a0c 	vldr	s19, [sp, #48]	; 0x30
 8011f1e:	ed9d aa0b 	vldr	s20, [sp, #44]	; 0x2c
 8011f22:	eddd 8a0d 	vldr	s17, [sp, #52]	; 0x34
 8011f26:	ee69 7aa9 	vmul.f32	s15, s19, s19
 8011f2a:	ee6b ba87 	vmul.f32	s23, s23, s14
 8011f2e:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8011f32:	ee2b ba07 	vmul.f32	s22, s22, s14
 8011f36:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8011f3a:	ee6a aa87 	vmul.f32	s21, s21, s14
 8011f3e:	ee17 0a90 	vmov	r0, s15
 8011f42:	edcd ba05 	vstr	s23, [sp, #20]
 8011f46:	ed8d ba06 	vstr	s22, [sp, #24]
 8011f4a:	edcd aa07 	vstr	s21, [sp, #28]
 8011f4e:	f7ee fafb 	bl	8000548 <__aeabi_f2d>
 8011f52:	ec41 0b10 	vmov	d0, r0, r1
 8011f56:	f003 ff35 	bl	8015dc4 <sqrt>
 8011f5a:	ec51 0b10 	vmov	r0, r1, d0
 8011f5e:	f7ee fe23 	bl	8000ba8 <__aeabi_d2f>
 8011f62:	ee07 0a90 	vmov	s15, r0
 8011f66:	eecc 7a27 	vdiv.f32	s15, s24, s15
 8011f6a:	ee2a aa27 	vmul.f32	s20, s20, s15
 8011f6e:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8011f72:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011f76:	ed8d aa0b 	vstr	s20, [sp, #44]	; 0x2c
 8011f7a:	edcd 9a0c 	vstr	s19, [sp, #48]	; 0x30
 8011f7e:	edcd 8a0d 	vstr	s17, [sp, #52]	; 0x34
 8011f82:	7923      	ldrb	r3, [r4, #4]
 8011f84:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 8011f88:	429a      	cmp	r2, r3
 8011f8a:	f080 80dd 	bcs.w	8012148 <iNemoEngine_API_Update+0x310>
 8011f8e:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8011f92:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 8011f96:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 8011f9a:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 8011f9e:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 8011fa2:	3701      	adds	r7, #1
 8011fa4:	aa33      	add	r2, sp, #204	; 0xcc
 8011fa6:	4649      	mov	r1, r9
 8011fa8:	4640      	mov	r0, r8
 8011faa:	f8c4 794c 	str.w	r7, [r4, #2380]	; 0x94c
 8011fae:	9303      	str	r3, [sp, #12]
 8011fb0:	f7f9 fae0 	bl	800b574 <rotVect>
 8011fb4:	9b03      	ldr	r3, [sp, #12]
 8011fb6:	f8db 1000 	ldr.w	r1, [fp]
 8011fba:	6818      	ldr	r0, [r3, #0]
 8011fbc:	f8da 2000 	ldr.w	r2, [sl]
 8011fc0:	6833      	ldr	r3, [r6, #0]
 8011fc2:	61ab      	str	r3, [r5, #24]
 8011fc4:	60e8      	str	r0, [r5, #12]
 8011fc6:	6129      	str	r1, [r5, #16]
 8011fc8:	616a      	str	r2, [r5, #20]
 8011fca:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8011fce:	9301      	str	r3, [sp, #4]
 8011fd0:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8011fd4:	4641      	mov	r1, r8
 8011fd6:	9300      	str	r3, [sp, #0]
 8011fd8:	462a      	mov	r2, r5
 8011fda:	f105 031c 	add.w	r3, r5, #28
 8011fde:	f105 000c 	add.w	r0, r5, #12
 8011fe2:	f7fa fd85 	bl	800caf0 <output_update>
 8011fe6:	ed95 8a00 	vldr	s16, [r5]
 8011fea:	edd5 9a01 	vldr	s19, [r5, #4]
 8011fee:	eeb0 0a48 	vmov.f32	s0, s16
 8011ff2:	f003 fe7b 	bl	8015cec <sinf>
 8011ff6:	eddf 7a43 	vldr	s15, [pc, #268]	; 8012104 <iNemoEngine_API_Update+0x2cc>
 8011ffa:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8012108 <iNemoEngine_API_Update+0x2d0>
 8011ffe:	ee60 8a00 	vmul.f32	s17, s0, s0
 8012002:	eef0 6ae9 	vabs.f32	s13, s19
 8012006:	eee8 7aa7 	vfma.f32	s15, s17, s15
 801200a:	eef4 6ac7 	vcmpe.f32	s13, s14
 801200e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012012:	eef0 8a67 	vmov.f32	s17, s15
 8012016:	d56e      	bpl.n	80120f6 <iNemoEngine_API_Update+0x2be>
 8012018:	eeb0 0a69 	vmov.f32	s0, s19
 801201c:	f003 fea8 	bl	8015d70 <tanf>
 8012020:	ee20 0a00 	vmul.f32	s0, s0, s0
 8012024:	eea0 9a28 	vfma.f32	s18, s0, s17
 8012028:	eef1 7ac9 	vsqrt.f32	s15, s18
 801202c:	eddf 6a37 	vldr	s13, [pc, #220]	; 801210c <iNemoEngine_API_Update+0x2d4>
 8012030:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8012120 <iNemoEngine_API_Update+0x2e8>
 8012034:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 8012038:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801203c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012044:	bf88      	it	hi
 8012046:	eef0 7a66 	vmovhi.f32	s15, s13
 801204a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801204e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012052:	bfb8      	it	lt
 8012054:	eef0 7a47 	vmovlt.f32	s15, s14
 8012058:	edc5 7a0e 	vstr	s15, [r5, #56]	; 0x38
 801205c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012060:	4c2b      	ldr	r4, [pc, #172]	; (8012110 <iNemoEngine_API_Update+0x2d8>)
 8012062:	bba3      	cbnz	r3, 80120ce <iNemoEngine_API_Update+0x296>
 8012064:	6820      	ldr	r0, [r4, #0]
 8012066:	edd5 0a08 	vldr	s1, [r5, #32]
 801206a:	ed95 0a07 	vldr	s0, [r5, #28]
 801206e:	edd5 9a03 	vldr	s19, [r5, #12]
 8012072:	ed95 aa04 	vldr	s20, [r5, #16]
 8012076:	ed95 9a05 	vldr	s18, [r5, #20]
 801207a:	edd5 8a06 	vldr	s17, [r5, #24]
 801207e:	f7f9 fb4b 	bl	800b718 <findDirection>
 8012082:	6020      	str	r0, [r4, #0]
 8012084:	2805      	cmp	r0, #5
 8012086:	f200 833d 	bhi.w	8012704 <iNemoEngine_API_Update+0x8cc>
 801208a:	e8df f010 	tbh	[pc, r0, lsl #1]
 801208e:	000a      	.short	0x000a
 8012090:	00060137 	.word	0x00060137
 8012094:	00060169 	.word	0x00060169
 8012098:	000a      	.short	0x000a
 801209a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8012114 <iNemoEngine_API_Update+0x2dc>
 801209e:	ee38 8a27 	vadd.f32	s16, s16, s15
 80120a2:	eddf 7a28 	vldr	s15, [pc, #160]	; 8012144 <iNemoEngine_API_Update+0x30c>
 80120a6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80120aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120ae:	bfa8      	it	ge
 80120b0:	ee38 8a67 	vsubge.f32	s16, s16, s15
 80120b4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80120b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120bc:	f100 8111 	bmi.w	80122e2 <iNemoEngine_API_Update+0x4aa>
 80120c0:	ed85 8a0d 	vstr	s16, [r5, #52]	; 0x34
 80120c4:	b041      	add	sp, #260	; 0x104
 80120c6:	ecbd 8b0c 	vpop	{d8-d13}
 80120ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120ce:	ed95 9a05 	vldr	s18, [r5, #20]
 80120d2:	6820      	ldr	r0, [r4, #0]
 80120d4:	edd5 0a07 	vldr	s1, [r5, #28]
 80120d8:	ed95 0a08 	vldr	s0, [r5, #32]
 80120dc:	edd5 9a04 	vldr	s19, [r5, #16]
 80120e0:	ed95 aa03 	vldr	s20, [r5, #12]
 80120e4:	edd5 8a06 	vldr	s17, [r5, #24]
 80120e8:	eeb1 1a41 	vneg.f32	s2, s2
 80120ec:	eeb1 9a49 	vneg.f32	s18, s18
 80120f0:	f7f9 fb12 	bl	800b718 <findDirection>
 80120f4:	e7c5      	b.n	8012082 <iNemoEngine_API_Update+0x24a>
 80120f6:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012118 <iNemoEngine_API_Update+0x2e0>
 80120fa:	eea8 9aa7 	vfma.f32	s18, s17, s15
 80120fe:	e793      	b.n	8012028 <iNemoEngine_API_Update+0x1f0>
 8012100:	3f333333 	.word	0x3f333333
 8012104:	00000000 	.word	0x00000000
 8012108:	3fbc430e 	.word	0x3fbc430e
 801210c:	40490fdb 	.word	0x40490fdb
 8012110:	200002e0 	.word	0x200002e0
 8012114:	43340000 	.word	0x43340000
 8012118:	42c6ab07 	.word	0x42c6ab07
 801211c:	3c03126f 	.word	0x3c03126f
 8012120:	3c8efa35 	.word	0x3c8efa35
 8012124:	3e4ccccd 	.word	0x3e4ccccd
 8012128:	3fb50481 	.word	0x3fb50481
 801212c:	3ed93dd9 	.word	0x3ed93dd9
 8012130:	3b656042 	.word	0x3b656042
 8012134:	42c80000 	.word	0x42c80000
 8012138:	3a83126f 	.word	0x3a83126f
 801213c:	3d4ccccd 	.word	0x3d4ccccd
 8012140:	3f333333 	.word	0x3f333333
 8012144:	43b40000 	.word	0x43b40000
 8012148:	ee07 3a90 	vmov	s15, r3
 801214c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012150:	ed5f 5a0e 	vldr	s11, [pc, #-56]	; 801211c <iNemoEngine_API_Update+0x2e4>
 8012154:	ed1f 4a0e 	vldr	s8, [pc, #-56]	; 8012120 <iNemoEngine_API_Update+0x2e8>
 8012158:	ed1f 3a0b 	vldr	s6, [pc, #-44]	; 8012130 <iNemoEngine_API_Update+0x2f8>
 801215c:	ed5f 6a0d 	vldr	s13, [pc, #-52]	; 801212c <iNemoEngine_API_Update+0x2f4>
 8012160:	ed1f 6a0f 	vldr	s12, [pc, #-60]	; 8012128 <iNemoEngine_API_Update+0x2f0>
 8012164:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 8012124 <iNemoEngine_API_Update+0x2ec>
 8012168:	ee27 1a88 	vmul.f32	s2, s15, s16
 801216c:	f604 135c 	addw	r3, r4, #2396	; 0x95c
 8012170:	ee85 5a81 	vdiv.f32	s10, s11, s2
 8012174:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8012178:	2700      	movs	r7, #0
 801217a:	f8a4 7950 	strh.w	r7, [r4, #2384]	; 0x950
 801217e:	f04f 0c00 	mov.w	ip, #0
 8012182:	f504 6716 	add.w	r7, r4, #2400	; 0x960
 8012186:	f10d 0e9c 	add.w	lr, sp, #156	; 0x9c
 801218a:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 801218e:	edd3 5a00 	vldr	s11, [r3]
 8012192:	f8c3 c000 	str.w	ip, [r3]
 8012196:	eef1 7ac5 	vsqrt.f32	s15, s10
 801219a:	f604 1364 	addw	r3, r4, #2404	; 0x964
 801219e:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80121a2:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 80121a6:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 80121aa:	edd7 4a00 	vldr	s9, [r7]
 80121ae:	f8c7 c000 	str.w	ip, [r7]
 80121b2:	ed93 5a00 	vldr	s10, [r3]
 80121b6:	f8c3 c000 	str.w	ip, [r3]
 80121ba:	7963      	ldrb	r3, [r4, #5]
 80121bc:	ee64 4a84 	vmul.f32	s9, s9, s8
 80121c0:	ee25 5a04 	vmul.f32	s10, s10, s8
 80121c4:	ee65 5a84 	vmul.f32	s11, s11, s8
 80121c8:	2b01      	cmp	r3, #1
 80121ca:	eec3 3a27 	vdiv.f32	s7, s6, s15
 80121ce:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80121d2:	ee27 6a86 	vmul.f32	s12, s15, s12
 80121d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80121da:	edcd 4a2b 	vstr	s9, [sp, #172]	; 0xac
 80121de:	ed8d 5a2c 	vstr	s10, [sp, #176]	; 0xb0
 80121e2:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
 80121e6:	f000 812e 	beq.w	8012446 <iNemoEngine_API_Update+0x60e>
 80121ea:	2b02      	cmp	r3, #2
 80121ec:	f000 8122 	beq.w	8012434 <iNemoEngine_API_Update+0x5fc>
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	f000 80ef 	beq.w	80123d4 <iNemoEngine_API_Update+0x59c>
 80121f6:	edd4 0a05 	vldr	s1, [r4, #20]
 80121fa:	ed1f 5a32 	vldr	s10, [pc, #-200]	; 8012134 <iNemoEngine_API_Update+0x2fc>
 80121fe:	ed1f 0a32 	vldr	s0, [pc, #-200]	; 8012138 <iNemoEngine_API_Update+0x300>
 8012202:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8012206:	ee60 0a85 	vmul.f32	s1, s1, s10
 801220a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801220e:	8863      	ldrh	r3, [r4, #2]
 8012210:	1e5a      	subs	r2, r3, #1
 8012212:	2a12      	cmp	r2, #18
 8012214:	f200 80e7 	bhi.w	80123e6 <iNemoEngine_API_Update+0x5ae>
 8012218:	3301      	adds	r3, #1
 801221a:	b21a      	sxth	r2, r3
 801221c:	b29b      	uxth	r3, r3
 801221e:	2b03      	cmp	r3, #3
 8012220:	8062      	strh	r2, [r4, #2]
 8012222:	f240 8115 	bls.w	8012450 <iNemoEngine_API_Update+0x618>
 8012226:	ee05 2a90 	vmov	s11, r2
 801222a:	ed1f 5a3c 	vldr	s10, [pc, #-240]	; 801213c <iNemoEngine_API_Update+0x304>
 801222e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8012232:	ee65 5a85 	vmul.f32	s11, s11, s10
 8012236:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 801223a:	eec3 7aa5 	vdiv.f32	s15, s7, s11
 801223e:	edd4 4a0d 	vldr	s9, [r4, #52]	; 0x34
 8012242:	ed1f 5a41 	vldr	s10, [pc, #-260]	; 8012140 <iNemoEngine_API_Update+0x308>
 8012246:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
 801224a:	ee26 6a24 	vmul.f32	s12, s12, s9
 801224e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8012252:	ee26 6a25 	vmul.f32	s12, s12, s11
 8012256:	ee27 7a05 	vmul.f32	s14, s14, s10
 801225a:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801225e:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 8012262:	ed8d 6a22 	vstr	s12, [sp, #136]	; 0x88
 8012266:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 801226a:	aa1a      	add	r2, sp, #104	; 0x68
 801226c:	af16      	add	r7, sp, #88	; 0x58
 801226e:	e9cd 7200 	strd	r7, r2, [sp]
 8012272:	ab12      	add	r3, sp, #72	; 0x48
 8012274:	aa1e      	add	r2, sp, #120	; 0x78
 8012276:	4641      	mov	r1, r8
 8012278:	4620      	mov	r0, r4
 801227a:	f7fa fd09 	bl	800cc90 <kalman_3gyro.constprop.0>
 801227e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012280:	f504 6714 	add.w	r7, r4, #2368	; 0x940
 8012284:	f8d4 a1bc 	ldr.w	sl, [r4, #444]	; 0x1bc
 8012288:	f8d4 e1c0 	ldr.w	lr, [r4, #448]	; 0x1c0
 801228c:	f8d4 c1c4 	ldr.w	ip, [r4, #452]	; 0x1c4
 8012290:	f8c7 a000 	str.w	sl, [r7]
 8012294:	f604 1744 	addw	r7, r4, #2372	; 0x944
 8012298:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 801229c:	f8c7 e000 	str.w	lr, [r7]
 80122a0:	f604 1748 	addw	r7, r4, #2376	; 0x948
 80122a4:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 80122a8:	f8c7 c000 	str.w	ip, [r7]
 80122ac:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 80122b0:	6030      	str	r0, [r6, #0]
 80122b2:	60f3      	str	r3, [r6, #12]
 80122b4:	6071      	str	r1, [r6, #4]
 80122b6:	60b2      	str	r2, [r6, #8]
 80122b8:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 80122bc:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 80122c0:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 80122c4:	9819      	ldr	r0, [sp, #100]	; 0x64
 80122c6:	ed94 9a75 	vldr	s18, [r4, #468]	; 0x1d4
 80122ca:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 80122ce:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 80122d2:	edc3 7a00 	vstr	s15, [r3]
 80122d6:	f8cb e000 	str.w	lr, [fp]
 80122da:	f8ca c000 	str.w	ip, [sl]
 80122de:	6030      	str	r0, [r6, #0]
 80122e0:	e65f      	b.n	8011fa2 <iNemoEngine_API_Update+0x16a>
 80122e2:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 8012144 <iNemoEngine_API_Update+0x30c>
 80122e6:	ee38 8a27 	vadd.f32	s16, s16, s15
 80122ea:	ed85 8a0d 	vstr	s16, [r5, #52]	; 0x34
 80122ee:	b041      	add	sp, #260	; 0x104
 80122f0:	ecbd 8b0c 	vpop	{d8-d13}
 80122f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122f8:	ae0e      	add	r6, sp, #56	; 0x38
 80122fa:	e5ab      	b.n	8011e54 <iNemoEngine_API_Update+0x1c>
 80122fc:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8012300:	ee69 8a28 	vmul.f32	s17, s18, s17
 8012304:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8012308:	eee9 8a8a 	vfma.f32	s17, s19, s20
 801230c:	eeea 7a4a 	vfms.f32	s15, s20, s20
 8012310:	eee9 7a49 	vfms.f32	s15, s18, s18
 8012314:	ee17 0a90 	vmov	r0, s15
 8012318:	f7ee f916 	bl	8000548 <__aeabi_f2d>
 801231c:	ee78 7aa8 	vadd.f32	s15, s17, s17
 8012320:	4602      	mov	r2, r0
 8012322:	460b      	mov	r3, r1
 8012324:	ee17 0a90 	vmov	r0, s15
 8012328:	ec43 2b18 	vmov	d8, r2, r3
 801232c:	f7ee f90c 	bl	8000548 <__aeabi_f2d>
 8012330:	eeb0 1a48 	vmov.f32	s2, s16
 8012334:	eef0 1a68 	vmov.f32	s3, s17
 8012338:	ec41 0b10 	vmov	d0, r0, r1
 801233c:	f003 fd40 	bl	8015dc0 <atan2>
 8012340:	a3f3      	add	r3, pc, #972	; (adr r3, 8012710 <iNemoEngine_API_Update+0x8d8>)
 8012342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012346:	ec51 0b10 	vmov	r0, r1, d0
 801234a:	f7ee f955 	bl	80005f8 <__aeabi_dmul>
 801234e:	4bf2      	ldr	r3, [pc, #968]	; (8012718 <iNemoEngine_API_Update+0x8e0>)
 8012350:	2200      	movs	r2, #0
 8012352:	f7ed ff99 	bl	8000288 <__aeabi_dsub>
 8012356:	f7ee fc27 	bl	8000ba8 <__aeabi_d2f>
 801235a:	ee08 0a10 	vmov	s16, r0
 801235e:	e6a0      	b.n	80120a2 <iNemoEngine_API_Update+0x26a>
 8012360:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8012364:	ee69 8a28 	vmul.f32	s17, s18, s17
 8012368:	eee9 7aa9 	vfma.f32	s15, s19, s19
 801236c:	eee9 8a8a 	vfma.f32	s17, s19, s20
 8012370:	eeea 7a4a 	vfms.f32	s15, s20, s20
 8012374:	eee9 7a49 	vfms.f32	s15, s18, s18
 8012378:	ee17 0a90 	vmov	r0, s15
 801237c:	f7ee f8e4 	bl	8000548 <__aeabi_f2d>
 8012380:	ee78 7aa8 	vadd.f32	s15, s17, s17
 8012384:	4602      	mov	r2, r0
 8012386:	460b      	mov	r3, r1
 8012388:	ee17 0a90 	vmov	r0, s15
 801238c:	ec43 2b18 	vmov	d8, r2, r3
 8012390:	f7ee f8da 	bl	8000548 <__aeabi_f2d>
 8012394:	eeb0 1a48 	vmov.f32	s2, s16
 8012398:	eef0 1a68 	vmov.f32	s3, s17
 801239c:	ec41 0b10 	vmov	d0, r0, r1
 80123a0:	f003 fd0e 	bl	8015dc0 <atan2>
 80123a4:	a3da      	add	r3, pc, #872	; (adr r3, 8012710 <iNemoEngine_API_Update+0x8d8>)
 80123a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123aa:	ec51 0b10 	vmov	r0, r1, d0
 80123ae:	f7ee f923 	bl	80005f8 <__aeabi_dmul>
 80123b2:	4bd9      	ldr	r3, [pc, #868]	; (8012718 <iNemoEngine_API_Update+0x8e0>)
 80123b4:	2200      	movs	r2, #0
 80123b6:	f7ed ff69 	bl	800028c <__adddf3>
 80123ba:	f7ee fbf5 	bl	8000ba8 <__aeabi_d2f>
 80123be:	ee08 0a10 	vmov	s16, r0
 80123c2:	e66e      	b.n	80120a2 <iNemoEngine_API_Update+0x26a>
 80123c4:	f9b4 3974 	ldrsh.w	r3, [r4, #2420]	; 0x974
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	dd44      	ble.n	8012456 <iNemoEngine_API_Update+0x61e>
 80123cc:	3b01      	subs	r3, #1
 80123ce:	f8a4 3974 	strh.w	r3, [r4, #2420]	; 0x974
 80123d2:	e55c      	b.n	8011e8e <iNemoEngine_API_Update+0x56>
 80123d4:	8863      	ldrh	r3, [r4, #2]
 80123d6:	eddf 0ad1 	vldr	s1, [pc, #836]	; 801271c <iNemoEngine_API_Update+0x8e4>
 80123da:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 8012720 <iNemoEngine_API_Update+0x8e8>
 80123de:	1e5a      	subs	r2, r3, #1
 80123e0:	2a12      	cmp	r2, #18
 80123e2:	f67f af19 	bls.w	8012218 <iNemoEngine_API_Update+0x3e0>
 80123e6:	ed94 4a0c 	vldr	s8, [r4, #48]	; 0x30
 80123ea:	eddf 2ace 	vldr	s5, [pc, #824]	; 8012724 <iNemoEngine_API_Update+0x8ec>
 80123ee:	edd4 4a0b 	vldr	s9, [r4, #44]	; 0x2c
 80123f2:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 80123f6:	ee34 4a22 	vadd.f32	s8, s8, s5
 80123fa:	ee64 7aa6 	vmul.f32	s15, s9, s13
 80123fe:	eec3 4a84 	vdiv.f32	s9, s7, s8
 8012402:	2300      	movs	r3, #0
 8012404:	8063      	strh	r3, [r4, #2]
 8012406:	ed94 5a0a 	vldr	s10, [r4, #40]	; 0x28
 801240a:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
 801240e:	ed9f 3ac6 	vldr	s6, [pc, #792]	; 8012728 <iNemoEngine_API_Update+0x8f0>
 8012412:	edcd 7a1f 	vstr	s15, [sp, #124]	; 0x7c
 8012416:	ee65 6a26 	vmul.f32	s13, s10, s13
 801241a:	ee25 6a86 	vmul.f32	s12, s11, s12
 801241e:	ee27 7a03 	vmul.f32	s14, s14, s6
 8012422:	edcd 4a1e 	vstr	s9, [sp, #120]	; 0x78
 8012426:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 801242a:	ed8d 6a22 	vstr	s12, [sp, #136]	; 0x88
 801242e:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 8012432:	e71a      	b.n	801226a <iNemoEngine_API_Update+0x432>
 8012434:	eef1 5a04 	vmov.f32	s11, #20	; 0x40a00000  5.0
 8012438:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801243c:	edd4 0a05 	vldr	s1, [r4, #20]
 8012440:	ed9f 0aba 	vldr	s0, [pc, #744]	; 801272c <iNemoEngine_API_Update+0x8f4>
 8012444:	e6e3      	b.n	801220e <iNemoEngine_API_Update+0x3d6>
 8012446:	edd4 0a05 	vldr	s1, [r4, #20]
 801244a:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8012730 <iNemoEngine_API_Update+0x8f8>
 801244e:	e6de      	b.n	801220e <iNemoEngine_API_Update+0x3d6>
 8012450:	eddf 5ab8 	vldr	s11, [pc, #736]	; 8012734 <iNemoEngine_API_Update+0x8fc>
 8012454:	e6ef      	b.n	8012236 <iNemoEngine_API_Update+0x3fe>
 8012456:	f204 47bc 	addw	r7, r4, #1212	; 0x4bc
 801245a:	f204 42ec 	addw	r2, r4, #1260	; 0x4ec
 801245e:	f204 632c 	addw	r3, r4, #1580	; 0x62c
 8012462:	ed97 5a00 	vldr	s10, [r7]
 8012466:	ed92 da00 	vldr	s26, [r2]
 801246a:	ed93 6a00 	vldr	s12, [r3]
 801246e:	ed9f 0aab 	vldr	s0, [pc, #684]	; 801271c <iNemoEngine_API_Update+0x8e4>
 8012472:	f504 619c 	add.w	r1, r4, #1248	; 0x4e0
 8012476:	f504 67c7 	add.w	r7, r4, #1592	; 0x638
 801247a:	f504 6297 	add.w	r2, r4, #1208	; 0x4b8
 801247e:	f204 43c4 	addw	r3, r4, #1220	; 0x4c4
 8012482:	ed91 3a00 	vldr	s6, [r1]
 8012486:	ed92 1a00 	vldr	s2, [r2]
 801248a:	ed97 7a00 	vldr	s14, [r7]
 801248e:	edd3 3a00 	vldr	s7, [r3]
 8012492:	f504 6099 	add.w	r0, r4, #1224	; 0x4c8
 8012496:	f204 615c 	addw	r1, r4, #1628	; 0x65c
 801249a:	eeb8 4a00 	vmov.f32	s8, #128	; 0xc0000000 -2.0
 801249e:	ed91 ba00 	vldr	s22, [r1]
 80124a2:	edd0 6a00 	vldr	s13, [r0]
 80124a6:	f504 619d 	add.w	r1, r4, #1256	; 0x4e8
 80124aa:	f204 42b4 	addw	r2, r4, #1204	; 0x4b4
 80124ae:	edd1 aa00 	vldr	s21, [r1]
 80124b2:	ed92 2a00 	vldr	s4, [r2]
 80124b6:	ee96 7a04 	vfnms.f32	s14, s12, s8
 80124ba:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
 80124be:	f504 61c5 	add.w	r1, r4, #1576	; 0x628
 80124c2:	eed1 3a04 	vfnms.f32	s7, s2, s8
 80124c6:	f204 6234 	addw	r2, r4, #1588	; 0x634
 80124ca:	f504 6398 	add.w	r3, r4, #1216	; 0x4c0
 80124ce:	edd0 7a00 	vldr	s15, [r0]
 80124d2:	edd2 1a00 	vldr	s3, [r2]
 80124d6:	ed93 ca00 	vldr	s24, [r3]
 80124da:	eed5 6a04 	vfnms.f32	s13, s10, s8
 80124de:	f204 40dc 	addw	r0, r4, #1244	; 0x4dc
 80124e2:	f204 47e4 	addw	r7, r4, #1252	; 0x4e4
 80124e6:	ed91 5a00 	vldr	s10, [r1]
 80124ea:	edd0 5a00 	vldr	s11, [r0]
 80124ee:	edd7 9a00 	vldr	s19, [r7]
 80124f2:	f204 6024 	addw	r0, r4, #1572	; 0x624
 80124f6:	eed5 1a04 	vfnms.f32	s3, s10, s8
 80124fa:	f504 639e 	add.w	r3, r4, #1264	; 0x4f0
 80124fe:	f504 67f3 	add.w	r7, r4, #1944	; 0x798
 8012502:	edd0 2a00 	vldr	s5, [r0]
 8012506:	edd3 0a00 	vldr	s1, [r3]
 801250a:	f204 70a4 	addw	r0, r4, #1956	; 0x7a4
 801250e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012512:	ee73 3aa5 	vadd.f32	s7, s7, s11
 8012516:	edd7 7a00 	vldr	s15, [r7]
 801251a:	edd0 5a00 	vldr	s11, [r0]
 801251e:	f504 63cb 	add.w	r3, r4, #1624	; 0x658
 8012522:	f504 6ac6 	add.w	sl, r4, #1584	; 0x630
 8012526:	f204 693c 	addw	r9, r4, #1596	; 0x63c
 801252a:	ed93 6a00 	vldr	s12, [r3]
 801252e:	edda ba00 	vldr	s23, [sl]
 8012532:	ed99 5a00 	vldr	s10, [r9]
 8012536:	ee76 6a83 	vadd.f32	s13, s13, s6
 801253a:	f204 4ccc 	addw	ip, r4, #1228	; 0x4cc
 801253e:	f504 63f5 	add.w	r3, r4, #1960	; 0x7a8
 8012542:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 8012546:	eed7 5a84 	vfnms.f32	s11, s15, s8
 801254a:	f504 68cc 	add.w	r8, r4, #1632	; 0x660
 801254e:	f204 6e54 	addw	lr, r4, #1620	; 0x654
 8012552:	eddc 4a00 	vldr	s9, [ip]
 8012556:	edd3 7a00 	vldr	s15, [r3]
 801255a:	ed98 1a00 	vldr	s2, [r8]
 801255e:	edde 8a00 	vldr	s17, [lr]
 8012562:	f204 7c94 	addw	ip, r4, #1940	; 0x794
 8012566:	f504 61f9 	add.w	r1, r4, #1992	; 0x7c8
 801256a:	f204 72bc 	addw	r2, r4, #1980	; 0x7bc
 801256e:	f204 739c 	addw	r3, r4, #1948	; 0x79c
 8012572:	f204 6b4c 	addw	fp, r4, #1612	; 0x64c
 8012576:	ee9b 5a84 	vfnms.f32	s10, s23, s8
 801257a:	f504 68f8 	add.w	r8, r4, #1984	; 0x7c0
 801257e:	f204 7ecc 	addw	lr, r4, #1996	; 0x7cc
 8012582:	ed9c aa00 	vldr	s20, [ip]
 8012586:	eeed 6a03 	vfma.f32	s13, s26, s6
 801258a:	f504 67f4 	add.w	r7, r4, #1952	; 0x7a0
 801258e:	f204 7cac 	addw	ip, r4, #1964	; 0x7ac
 8012592:	ed92 da00 	vldr	s26, [r2]
 8012596:	eeab 7a03 	vfma.f32	s14, s22, s6
 801259a:	f204 70c4 	addw	r0, r4, #1988	; 0x7c4
 801259e:	ed91 ba00 	vldr	s22, [r1]
 80125a2:	eef0 ca61 	vmov.f32	s25, s3
 80125a6:	eddb 1a00 	vldr	s3, [fp]
 80125aa:	edd3 ba00 	vldr	s23, [r3]
 80125ae:	f9b4 2976 	ldrsh.w	r2, [r4, #2422]	; 0x976
 80125b2:	eedb 7a84 	vfnms.f32	s15, s23, s8
 80125b6:	f504 61fa 	add.w	r1, r4, #2000	; 0x7d0
 80125ba:	1c53      	adds	r3, r2, #1
 80125bc:	eeea 3a83 	vfma.f32	s7, s21, s6
 80125c0:	ee7c 1aa1 	vadd.f32	s3, s25, s3
 80125c4:	edd8 aa00 	vldr	s21, [r8]
 80125c8:	eee6 1a03 	vfma.f32	s3, s12, s6
 80125cc:	ee77 7aaa 	vadd.f32	s15, s15, s21
 80125d0:	ed9e 6a00 	vldr	s12, [lr]
 80125d4:	edd7 aa00 	vldr	s21, [r7]
 80125d8:	eee6 7a03 	vfma.f32	s15, s12, s6
 80125dc:	f604 176c 	addw	r7, r4, #2412	; 0x96c
 80125e0:	ed9c 6a00 	vldr	s12, [ip]
 80125e4:	eedc 4a04 	vfnms.f32	s9, s24, s8
 80125e8:	ee9a 6a84 	vfnms.f32	s12, s21, s8
 80125ec:	ee75 5a8d 	vadd.f32	s11, s11, s26
 80125f0:	ee2a 4a00 	vmul.f32	s8, s20, s0
 80125f4:	ee22 2a00 	vmul.f32	s4, s4, s0
 80125f8:	ee62 2a80 	vmul.f32	s5, s5, s0
 80125fc:	eeeb 5a03 	vfma.f32	s11, s22, s6
 8012600:	ed90 0a00 	vldr	s0, [r0]
 8012604:	ee64 7a27 	vmul.f32	s15, s8, s15
 8012608:	ee36 6a00 	vadd.f32	s12, s12, s0
 801260c:	ee74 4aa9 	vadd.f32	s9, s9, s19
 8012610:	ed91 0a00 	vldr	s0, [r1]
 8012614:	ee35 5a28 	vadd.f32	s10, s10, s17
 8012618:	ee66 6a82 	vmul.f32	s13, s13, s4
 801261c:	ee22 7a87 	vmul.f32	s14, s5, s14
 8012620:	ee64 5a25 	vmul.f32	s11, s8, s11
 8012624:	eee0 4a83 	vfma.f32	s9, s1, s6
 8012628:	f604 1068 	addw	r0, r4, #2408	; 0x968
 801262c:	f504 6117 	add.w	r1, r4, #2416	; 0x970
 8012630:	eea1 5a03 	vfma.f32	s10, s2, s6
 8012634:	eea0 6a03 	vfma.f32	s12, s0, s6
 8012638:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801263c:	ee63 3a82 	vmul.f32	s7, s7, s4
 8012640:	ee27 7a07 	vmul.f32	s14, s14, s14
 8012644:	ee62 1aa1 	vmul.f32	s3, s5, s3
 8012648:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801264c:	eee3 6aa3 	vfma.f32	s13, s7, s7
 8012650:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8012654:	eea1 7aa1 	vfma.f32	s14, s3, s3
 8012658:	ee24 6a06 	vmul.f32	s12, s8, s12
 801265c:	ee62 4a24 	vmul.f32	s9, s4, s9
 8012660:	ee22 5a85 	vmul.f32	s10, s5, s10
 8012664:	eee4 6aa4 	vfma.f32	s13, s9, s9
 8012668:	eea5 7a05 	vfma.f32	s14, s10, s10
 801266c:	eee6 7a06 	vfma.f32	s15, s12, s12
 8012670:	eeb1 6ae6 	vsqrt.f32	s12, s13
 8012674:	eef1 6ac7 	vsqrt.f32	s13, s14
 8012678:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801267c:	ee07 3a90 	vmov	s15, r3
 8012680:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012684:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8012688:	ee85 5aa7 	vdiv.f32	s10, s11, s15
 801268c:	b21b      	sxth	r3, r3
 801268e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8012692:	ee07 2a90 	vmov	s15, r2
 8012696:	ed90 4a00 	vldr	s8, [r0]
 801269a:	edd1 4a00 	vldr	s9, [r1]
 801269e:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80126a2:	edd7 7a00 	vldr	s15, [r7]
 80126a6:	eee5 6a84 	vfma.f32	s13, s11, s8
 80126aa:	eea7 6aa5 	vfma.f32	s12, s15, s11
 80126ae:	eea5 7aa4 	vfma.f32	s14, s11, s9
 80126b2:	ee66 7a05 	vmul.f32	s15, s12, s10
 80126b6:	ee66 6a85 	vmul.f32	s13, s13, s10
 80126ba:	ee27 7a05 	vmul.f32	s14, s14, s10
 80126be:	edc7 7a00 	vstr	s15, [r7]
 80126c2:	edc0 6a00 	vstr	s13, [r0]
 80126c6:	ed81 7a00 	vstr	s14, [r1]
 80126ca:	f8a4 3976 	strh.w	r3, [r4, #2422]	; 0x976
 80126ce:	f47f abde 	bne.w	8011e8e <iNemoEngine_API_Update+0x56>
 80126d2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80126d6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80126da:	ee27 7a06 	vmul.f32	s14, s14, s12
 80126de:	ee67 7a86 	vmul.f32	s15, s15, s12
 80126e2:	2300      	movs	r3, #0
 80126e4:	2200      	movs	r2, #0
 80126e6:	edc4 6a07 	vstr	s13, [r4, #28]
 80126ea:	ed84 7a08 	vstr	s14, [r4, #32]
 80126ee:	edc4 7a06 	vstr	s15, [r4, #24]
 80126f2:	603b      	str	r3, [r7, #0]
 80126f4:	6003      	str	r3, [r0, #0]
 80126f6:	600b      	str	r3, [r1, #0]
 80126f8:	f8a4 2976 	strh.w	r2, [r4, #2422]	; 0x976
 80126fc:	f884 2978 	strb.w	r2, [r4, #2424]	; 0x978
 8012700:	f7ff bbc5 	b.w	8011e8e <iNemoEngine_API_Update+0x56>
 8012704:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8012738 <iNemoEngine_API_Update+0x900>
 8012708:	e4da      	b.n	80120c0 <iNemoEngine_API_Update+0x288>
 801270a:	bf00      	nop
 801270c:	f3af 8000 	nop.w
 8012710:	20000000 	.word	0x20000000
 8012714:	404ca5dc 	.word	0x404ca5dc
 8012718:	40568000 	.word	0x40568000
 801271c:	3dcccccd 	.word	0x3dcccccd
 8012720:	3a83126f 	.word	0x3a83126f
 8012724:	358637bd 	.word	0x358637bd
 8012728:	3f333333 	.word	0x3f333333
 801272c:	3727c5ac 	.word	0x3727c5ac
 8012730:	3ac49ba6 	.word	0x3ac49ba6
 8012734:	3e4ccccd 	.word	0x3e4ccccd
 8012738:	00000000 	.word	0x00000000

0801273c <MEMS_getSensorData_I16>:
 801273c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012740:	f8b0 e008 	ldrh.w	lr, [r0, #8]
 8012744:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8012748:	68c5      	ldr	r5, [r0, #12]
 801274a:	4596      	cmp	lr, r2
 801274c:	fa1f f882 	uxth.w	r8, r2
 8012750:	d94d      	bls.n	80127ee <MEMS_getSensorData_I16+0xb2>
 8012752:	f10e 33ff 	add.w	r3, lr, #4294967295
 8012756:	fb04 5313 	mls	r3, r4, r3, r5
 801275a:	ebae 0c02 	sub.w	ip, lr, r2
 801275e:	f8a1 8004 	strh.w	r8, [r1, #4]
 8012762:	600b      	str	r3, [r1, #0]
 8012764:	fa5f fc8c 	uxtb.w	ip, ip
 8012768:	4647      	mov	r7, r8
 801276a:	f1b8 0f00 	cmp.w	r8, #0
 801276e:	d017      	beq.n	80127a0 <MEMS_getSensorData_I16+0x64>
 8012770:	688e      	ldr	r6, [r1, #8]
 8012772:	6905      	ldr	r5, [r0, #16]
 8012774:	2300      	movs	r3, #0
 8012776:	f815 1033 	ldrb.w	r1, [r5, r3, lsl #3]
 801277a:	f806 1033 	strb.w	r1, [r6, r3, lsl #3]
 801277e:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 8012782:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 8012786:	f8d4 9002 	ldr.w	r9, [r4, #2]
 801278a:	f8c1 9002 	str.w	r9, [r1, #2]
 801278e:	3301      	adds	r3, #1
 8012790:	88e4      	ldrh	r4, [r4, #6]
 8012792:	80cc      	strh	r4, [r1, #6]
 8012794:	b2d9      	uxtb	r1, r3
 8012796:	42b9      	cmp	r1, r7
 8012798:	460b      	mov	r3, r1
 801279a:	d3ec      	bcc.n	8012776 <MEMS_getSensorData_I16+0x3a>
 801279c:	45c6      	cmp	lr, r8
 801279e:	d934      	bls.n	801280a <MEMS_getSensorData_I16+0xce>
 80127a0:	ebae 0308 	sub.w	r3, lr, r8
 80127a4:	b29b      	uxth	r3, r3
 80127a6:	8103      	strh	r3, [r0, #8]
 80127a8:	f1bc 0f00 	cmp.w	ip, #0
 80127ac:	d01d      	beq.n	80127ea <MEMS_getSensorData_I16+0xae>
 80127ae:	6903      	ldr	r3, [r0, #16]
 80127b0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80127b4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80127b8:	f103 000a 	add.w	r0, r3, #10
 80127bc:	fa5f fc8c 	uxtb.w	ip, ip
 80127c0:	3202      	adds	r2, #2
 80127c2:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 80127c6:	3302      	adds	r3, #2
 80127c8:	2400      	movs	r4, #0
 80127ca:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 80127ce:	f803 1c02 	strb.w	r1, [r3, #-2]
 80127d2:	6811      	ldr	r1, [r2, #0]
 80127d4:	6019      	str	r1, [r3, #0]
 80127d6:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 80127da:	8099      	strh	r1, [r3, #4]
 80127dc:	3308      	adds	r3, #8
 80127de:	4283      	cmp	r3, r0
 80127e0:	f802 4c02 	strb.w	r4, [r2, #-2]
 80127e4:	f102 0208 	add.w	r2, r2, #8
 80127e8:	d1ef      	bne.n	80127ca <MEMS_getSensorData_I16+0x8e>
 80127ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80127ee:	f10e 33ff 	add.w	r3, lr, #4294967295
 80127f2:	fb04 5313 	mls	r3, r4, r3, r5
 80127f6:	f8a1 e004 	strh.w	lr, [r1, #4]
 80127fa:	600b      	str	r3, [r1, #0]
 80127fc:	f1be 0f00 	cmp.w	lr, #0
 8012800:	d005      	beq.n	801280e <MEMS_getSensorData_I16+0xd2>
 8012802:	4677      	mov	r7, lr
 8012804:	f04f 0c00 	mov.w	ip, #0
 8012808:	e7b2      	b.n	8012770 <MEMS_getSensorData_I16+0x34>
 801280a:	2300      	movs	r3, #0
 801280c:	e7cb      	b.n	80127a6 <MEMS_getSensorData_I16+0x6a>
 801280e:	f8a0 e008 	strh.w	lr, [r0, #8]
 8012812:	e7ea      	b.n	80127ea <MEMS_getSensorData_I16+0xae>

08012814 <MEMS_SolveLinearEq>:
 8012814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012818:	ed2d 8b0c 	vpush	{d8-d13}
 801281c:	4617      	mov	r7, r2
 801281e:	2400      	movs	r4, #0
 8012820:	b0a9      	sub	sp, #164	; 0xa4
 8012822:	2200      	movs	r2, #0
 8012824:	601a      	str	r2, [r3, #0]
 8012826:	460d      	mov	r5, r1
 8012828:	2240      	movs	r2, #64	; 0x40
 801282a:	4621      	mov	r1, r4
 801282c:	4680      	mov	r8, r0
 801282e:	603c      	str	r4, [r7, #0]
 8012830:	607c      	str	r4, [r7, #4]
 8012832:	60bc      	str	r4, [r7, #8]
 8012834:	60fc      	str	r4, [r7, #12]
 8012836:	a808      	add	r0, sp, #32
 8012838:	461e      	mov	r6, r3
 801283a:	eeb0 8a40 	vmov.f32	s16, s0
 801283e:	e9cd 4400 	strd	r4, r4, [sp]
 8012842:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8012846:	f005 f855 	bl	80178f4 <memset>
 801284a:	4621      	mov	r1, r4
 801284c:	a818      	add	r0, sp, #96	; 0x60
 801284e:	2240      	movs	r2, #64	; 0x40
 8012850:	f005 f850 	bl	80178f4 <memset>
 8012854:	edd5 2a03 	vldr	s5, [r5, #12]
 8012858:	eddf 7ae4 	vldr	s15, [pc, #912]	; 8012bec <MEMS_SolveLinearEq+0x3d8>
 801285c:	eef4 2ae7 	vcmpe.f32	s5, s15
 8012860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012864:	d47e      	bmi.n	8012964 <MEMS_SolveLinearEq+0x150>
 8012866:	f898 1000 	ldrb.w	r1, [r8]
 801286a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801286e:	f998 3002 	ldrsb.w	r3, [r8, #2]
 8012872:	4291      	cmp	r1, r2
 8012874:	d07c      	beq.n	8012970 <MEMS_SolveLinearEq+0x15c>
 8012876:	3301      	adds	r3, #1
 8012878:	1a58      	subs	r0, r3, r1
 801287a:	fb90 f3f2 	sdiv	r3, r0, r2
 801287e:	fb02 0313 	mls	r3, r2, r3, r0
 8012882:	2b00      	cmp	r3, #0
 8012884:	bfb8      	it	lt
 8012886:	189b      	addlt	r3, r3, r2
 8012888:	b21b      	sxth	r3, r3
 801288a:	2900      	cmp	r1, #0
 801288c:	f000 81d6 	beq.w	8012c3c <MEMS_SolveLinearEq+0x428>
 8012890:	3901      	subs	r1, #1
 8012892:	b2c9      	uxtb	r1, r1
 8012894:	3101      	adds	r1, #1
 8012896:	edd5 3a00 	vldr	s7, [r5]
 801289a:	ed95 4a01 	vldr	s8, [r5, #4]
 801289e:	edd5 4a02 	vldr	s9, [r5, #8]
 80128a2:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 80128a6:	ed9f 2ad2 	vldr	s4, [pc, #840]	; 8012bf0 <MEMS_SolveLinearEq+0x3dc>
 80128aa:	4419      	add	r1, r3
 80128ac:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80128b0:	fb93 f4f2 	sdiv	r4, r3, r2
 80128b4:	fb02 3414 	mls	r4, r2, r4, r3
 80128b8:	b2e4      	uxtb	r4, r4
 80128ba:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
 80128be:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
 80128c2:	ee07 0a90 	vmov	s15, r0
 80128c6:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80128ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80128ce:	ee06 0a10 	vmov	s12, r0
 80128d2:	ee67 7a88 	vmul.f32	s15, s15, s16
 80128d6:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
 80128da:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80128de:	ee77 6ac4 	vsub.f32	s13, s15, s8
 80128e2:	ee26 6a08 	vmul.f32	s12, s12, s16
 80128e6:	ee07 0a10 	vmov	s14, r0
 80128ea:	ee36 5a63 	vsub.f32	s10, s12, s7
 80128ee:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80128f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80128f6:	eee5 6a05 	vfma.f32	s13, s10, s10
 80128fa:	ee27 7a08 	vmul.f32	s14, s14, s16
 80128fe:	ee33 6ac6 	vsub.f32	s12, s7, s12
 8012902:	ee74 aac7 	vsub.f32	s21, s9, s14
 8012906:	ee37 7a64 	vsub.f32	s14, s14, s9
 801290a:	ee74 7a67 	vsub.f32	s15, s8, s15
 801290e:	eee7 6a07 	vfma.f32	s13, s14, s14
 8012912:	eef4 6ac2 	vcmpe.f32	s13, s4
 8012916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801291a:	d531      	bpl.n	8012980 <MEMS_SolveLinearEq+0x16c>
 801291c:	3301      	adds	r3, #1
 801291e:	4299      	cmp	r1, r3
 8012920:	d1c6      	bne.n	80128b0 <MEMS_SolveLinearEq+0x9c>
 8012922:	eef0 7a65 	vmov.f32	s15, s11
 8012926:	2101      	movs	r1, #1
 8012928:	4608      	mov	r0, r1
 801292a:	2200      	movs	r2, #0
 801292c:	e006      	b.n	801293c <MEMS_SolveLinearEq+0x128>
 801292e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8012932:	ac28      	add	r4, sp, #160	; 0xa0
 8012934:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012938:	ed53 7a20 	vldr	s15, [r3, #-128]	; 0xffffff80
 801293c:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 8012940:	3001      	adds	r0, #1
 8012942:	ac28      	add	r4, sp, #160	; 0xa0
 8012944:	b2c0      	uxtb	r0, r0
 8012946:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801294a:	2804      	cmp	r0, #4
 801294c:	ed43 7a20 	vstr	s15, [r3, #-128]	; 0xffffff80
 8012950:	4613      	mov	r3, r2
 8012952:	d1ec      	bne.n	801292e <MEMS_SolveLinearEq+0x11a>
 8012954:	1c48      	adds	r0, r1, #1
 8012956:	b2c0      	uxtb	r0, r0
 8012958:	2804      	cmp	r0, #4
 801295a:	d076      	beq.n	8012a4a <MEMS_SolveLinearEq+0x236>
 801295c:	460b      	mov	r3, r1
 801295e:	460a      	mov	r2, r1
 8012960:	4601      	mov	r1, r0
 8012962:	e7e4      	b.n	801292e <MEMS_SolveLinearEq+0x11a>
 8012964:	2000      	movs	r0, #0
 8012966:	b029      	add	sp, #164	; 0xa4
 8012968:	ecbd 8b0c 	vpop	{d8-d13}
 801296c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012970:	1c5a      	adds	r2, r3, #1
 8012972:	fb92 f3f1 	sdiv	r3, r2, r1
 8012976:	fb01 2313 	mls	r3, r1, r3, r2
 801297a:	b21b      	sxth	r3, r3
 801297c:	460a      	mov	r2, r1
 801297e:	e784      	b.n	801288a <MEMS_SolveLinearEq+0x76>
 8012980:	eef1 cae6 	vsqrt.f32	s25, s13
 8012984:	3301      	adds	r3, #1
 8012986:	428b      	cmp	r3, r1
 8012988:	ed9d ca00 	vldr	s24, [sp]
 801298c:	eddd ba08 	vldr	s23, [sp, #32]
 8012990:	ed9d ba0a 	vldr	s22, [sp, #40]	; 0x28
 8012994:	ed9d aa01 	vldr	s20, [sp, #4]
 8012998:	eddd 9a02 	vldr	s19, [sp, #8]
 801299c:	ed9d 9a0d 	vldr	s18, [sp, #52]	; 0x34
 80129a0:	eddd 8a0e 	vldr	s17, [sp, #56]	; 0x38
 80129a4:	ed9d 3a12 	vldr	s6, [sp, #72]	; 0x48
 80129a8:	ed9d 0a03 	vldr	s0, [sp, #12]
 80129ac:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
 80129b0:	ed9d 1a0f 	vldr	s2, [sp, #60]	; 0x3c
 80129b4:	ed9d 5a13 	vldr	s10, [sp, #76]	; 0x4c
 80129b8:	ed9d da17 	vldr	s26, [sp, #92]	; 0x5c
 80129bc:	eec1 6aac 	vdiv.f32	s13, s3, s25
 80129c0:	ee3d da21 	vadd.f32	s26, s26, s3
 80129c4:	ee26 7a26 	vmul.f32	s14, s12, s13
 80129c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80129cc:	ee6a 6aa6 	vmul.f32	s13, s21, s13
 80129d0:	ee72 aaec 	vsub.f32	s21, s5, s25
 80129d4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80129d8:	eea7 ba26 	vfma.f32	s22, s14, s13
 80129dc:	eee7 8aa6 	vfma.f32	s17, s15, s13
 80129e0:	eeaa ca87 	vfma.f32	s24, s21, s14
 80129e4:	eee7 ba07 	vfma.f32	s23, s14, s14
 80129e8:	eeaa aaa7 	vfma.f32	s20, s21, s15
 80129ec:	eeea 9aa6 	vfma.f32	s19, s21, s13
 80129f0:	eea7 9aa7 	vfma.f32	s18, s15, s15
 80129f4:	eea6 3aa6 	vfma.f32	s6, s13, s13
 80129f8:	ee3c 6ae2 	vsub.f32	s12, s25, s5
 80129fc:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8012a00:	ee30 6a06 	vadd.f32	s12, s0, s12
 8012a04:	ee71 7a67 	vsub.f32	s15, s2, s15
 8012a08:	ee75 6a66 	vsub.f32	s13, s10, s13
 8012a0c:	ed8d da17 	vstr	s26, [sp, #92]	; 0x5c
 8012a10:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 8012a14:	ed8d ca00 	vstr	s24, [sp]
 8012a18:	edcd ba08 	vstr	s23, [sp, #32]
 8012a1c:	ed8d ba0a 	vstr	s22, [sp, #40]	; 0x28
 8012a20:	ed8d aa01 	vstr	s20, [sp, #4]
 8012a24:	edcd 9a02 	vstr	s19, [sp, #8]
 8012a28:	ed8d 9a0d 	vstr	s18, [sp, #52]	; 0x34
 8012a2c:	edcd 8a0e 	vstr	s17, [sp, #56]	; 0x38
 8012a30:	ed8d 6a03 	vstr	s12, [sp, #12]
 8012a34:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
 8012a38:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 8012a3c:	ed8d 3a12 	vstr	s6, [sp, #72]	; 0x48
 8012a40:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 8012a44:	f47f af34 	bne.w	80128b0 <MEMS_SolveLinearEq+0x9c>
 8012a48:	e76b      	b.n	8012922 <MEMS_SolveLinearEq+0x10e>
 8012a4a:	2240      	movs	r2, #64	; 0x40
 8012a4c:	2100      	movs	r1, #0
 8012a4e:	a818      	add	r0, sp, #96	; 0x60
 8012a50:	f004 ff50 	bl	80178f4 <memset>
 8012a54:	ab08      	add	r3, sp, #32
 8012a56:	ed9f 5a67 	vldr	s10, [pc, #412]	; 8012bf4 <MEMS_SolveLinearEq+0x3e0>
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	aa18      	add	r2, sp, #96	; 0x60
 8012a5e:	2100      	movs	r1, #0
 8012a60:	b24c      	sxtb	r4, r1
 8012a62:	2900      	cmp	r1, #0
 8012a64:	f000 80b5 	beq.w	8012bd2 <MEMS_SolveLinearEq+0x3be>
 8012a68:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8012a6c:	eeb0 7ae7 	vabs.f32	s14, s15
 8012a70:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8012a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a78:	f53f af74 	bmi.w	8012964 <MEMS_SolveLinearEq+0x150>
 8012a7c:	ed93 7a00 	vldr	s14, [r3]
 8012a80:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012a84:	2c01      	cmp	r4, #1
 8012a86:	edc2 6a00 	vstr	s13, [r2]
 8012a8a:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 8012a8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012a92:	f000 80b5 	beq.w	8012c00 <MEMS_SolveLinearEq+0x3ec>
 8012a96:	ed9d 6a1d 	vldr	s12, [sp, #116]	; 0x74
 8012a9a:	eeb0 7ac6 	vabs.f32	s14, s12
 8012a9e:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8012aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aa6:	f53f af5d 	bmi.w	8012964 <MEMS_SolveLinearEq+0x150>
 8012aaa:	ed93 7a01 	vldr	s14, [r3, #4]
 8012aae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012ab2:	2c02      	cmp	r4, #2
 8012ab4:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8012ab8:	edc2 7a01 	vstr	s15, [r2, #4]
 8012abc:	ed9d 7a21 	vldr	s14, [sp, #132]	; 0x84
 8012ac0:	ed9d 6a20 	vldr	s12, [sp, #128]	; 0x80
 8012ac4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012ac8:	eea6 7a26 	vfma.f32	s14, s12, s13
 8012acc:	f000 80a7 	beq.w	8012c1e <MEMS_SolveLinearEq+0x40a>
 8012ad0:	eddd 4a22 	vldr	s9, [sp, #136]	; 0x88
 8012ad4:	eeb0 6ae4 	vabs.f32	s12, s9
 8012ad8:	eeb4 6ac5 	vcmpe.f32	s12, s10
 8012adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ae0:	f53f af40 	bmi.w	8012964 <MEMS_SolveLinearEq+0x150>
 8012ae4:	edd3 5a02 	vldr	s11, [r3, #8]
 8012ae8:	ed90 6a00 	vldr	s12, [r0]
 8012aec:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8012af0:	eec7 5a24 	vdiv.f32	s11, s14, s9
 8012af4:	edc2 5a02 	vstr	s11, [r2, #8]
 8012af8:	ed9d 4a25 	vldr	s8, [sp, #148]	; 0x94
 8012afc:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8012b00:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8012b04:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012b08:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8012b0c:	eee5 7a87 	vfma.f32	s15, s11, s14
 8012b10:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8012b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b18:	f77f af24 	ble.w	8012964 <MEMS_SolveLinearEq+0x150>
 8012b1c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8012b20:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012b24:	ed82 7a03 	vstr	s14, [r2, #12]
 8012b28:	3101      	adds	r1, #1
 8012b2a:	2904      	cmp	r1, #4
 8012b2c:	f103 0310 	add.w	r3, r3, #16
 8012b30:	f102 0210 	add.w	r2, r2, #16
 8012b34:	f100 0014 	add.w	r0, r0, #20
 8012b38:	d192      	bne.n	8012a60 <MEMS_SolveLinearEq+0x24c>
 8012b3a:	466a      	mov	r2, sp
 8012b3c:	4639      	mov	r1, r7
 8012b3e:	a818      	add	r0, sp, #96	; 0x60
 8012b40:	f7f9 f9f2 	bl	800bf28 <llEvaluate.constprop.0>
 8012b44:	4b2c      	ldr	r3, [pc, #176]	; (8012bf8 <MEMS_SolveLinearEq+0x3e4>)
 8012b46:	6033      	str	r3, [r6, #0]
 8012b48:	f10d 0910 	add.w	r9, sp, #16
 8012b4c:	46e8      	mov	r8, sp
 8012b4e:	f10d 0b0c 	add.w	fp, sp, #12
 8012b52:	2400      	movs	r4, #0
 8012b54:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
 8012b58:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8012b5c:	e9cd 4400 	strd	r4, r4, [sp]
 8012b60:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8012b64:	466a      	mov	r2, sp
 8012b66:	f848 ab04 	str.w	sl, [r8], #4
 8012b6a:	a904      	add	r1, sp, #16
 8012b6c:	a818      	add	r0, sp, #96	; 0x60
 8012b6e:	f7f9 f9db 	bl	800bf28 <llEvaluate.constprop.0>
 8012b72:	ecf9 7a01 	vldmia	r9!, {s15}
 8012b76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b7e:	dd23      	ble.n	8012bc8 <MEMS_SolveLinearEq+0x3b4>
 8012b80:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012b84:	edd6 7a00 	vldr	s15, [r6]
 8012b88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b90:	bfb8      	it	lt
 8012b92:	eef0 7a47 	vmovlt.f32	s15, s14
 8012b96:	45c3      	cmp	fp, r8
 8012b98:	edc6 7a00 	vstr	s15, [r6]
 8012b9c:	d1de      	bne.n	8012b5c <MEMS_SolveLinearEq+0x348>
 8012b9e:	edd5 7a03 	vldr	s15, [r5, #12]
 8012ba2:	ed97 7a03 	vldr	s14, [r7, #12]
 8012ba6:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8012baa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012bae:	2001      	movs	r0, #1
 8012bb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bb8:	bf48      	it	mi
 8012bba:	edc7 7a03 	vstrmi	s15, [r7, #12]
 8012bbe:	b029      	add	sp, #164	; 0xa4
 8012bc0:	ecbd 8b0c 	vpop	{d8-d13}
 8012bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bc8:	45c3      	cmp	fp, r8
 8012bca:	ed86 0a00 	vstr	s0, [r6]
 8012bce:	d1c5      	bne.n	8012b5c <MEMS_SolveLinearEq+0x348>
 8012bd0:	e7e5      	b.n	8012b9e <MEMS_SolveLinearEq+0x38a>
 8012bd2:	edd0 7a00 	vldr	s15, [r0]
 8012bd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bde:	f77f aec1 	ble.w	8012964 <MEMS_SolveLinearEq+0x150>
 8012be2:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012be6:	ed82 7a00 	vstr	s14, [r2]
 8012bea:	e79d      	b.n	8012b28 <MEMS_SolveLinearEq+0x314>
 8012bec:	3dcccccd 	.word	0x3dcccccd
 8012bf0:	2b8cbccb 	.word	0x2b8cbccb
 8012bf4:	358637bd 	.word	0x358637bd
 8012bf8:	3dcccccd 	.word	0x3dcccccd
 8012bfc:	00000000 	.word	0x00000000
 8012c00:	ed90 7a00 	vldr	s14, [r0]
 8012c04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c0c:	f77f aeaa 	ble.w	8012964 <MEMS_SolveLinearEq+0x150>
 8012c10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012c14:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012c18:	ed82 7a01 	vstr	s14, [r2, #4]
 8012c1c:	e784      	b.n	8012b28 <MEMS_SolveLinearEq+0x314>
 8012c1e:	edd0 7a00 	vldr	s15, [r0]
 8012c22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c2a:	f77f ae9b 	ble.w	8012964 <MEMS_SolveLinearEq+0x150>
 8012c2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012c32:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012c36:	ed82 7a02 	vstr	s14, [r2, #8]
 8012c3a:	e775      	b.n	8012b28 <MEMS_SolveLinearEq+0x314>
 8012c3c:	ed5f 7a11 	vldr	s15, [pc, #-68]	; 8012bfc <MEMS_SolveLinearEq+0x3e8>
 8012c40:	e671      	b.n	8012926 <MEMS_SolveLinearEq+0x112>
 8012c42:	bf00      	nop

08012c44 <MEMS_EIG3>:
 8012c44:	edd0 6a02 	vldr	s13, [r0, #8]
 8012c48:	ed90 7a01 	vldr	s14, [r0, #4]
 8012c4c:	edd0 4a04 	vldr	s9, [r0, #16]
 8012c50:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8012da0 <MEMS_EIG3+0x15c>
 8012c54:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8012c58:	b510      	push	{r4, lr}
 8012c5a:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012c5e:	460c      	mov	r4, r1
 8012c60:	ed2d 8b04 	vpush	{d8-d9}
 8012c64:	eee4 7aa4 	vfma.f32	s15, s9, s9
 8012c68:	b08a      	sub	sp, #40	; 0x28
 8012c6a:	eef4 7ac6 	vcmpe.f32	s15, s12
 8012c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c72:	d509      	bpl.n	8012c88 <MEMS_EIG3+0x44>
 8012c74:	6803      	ldr	r3, [r0, #0]
 8012c76:	600b      	str	r3, [r1, #0]
 8012c78:	68c3      	ldr	r3, [r0, #12]
 8012c7a:	604b      	str	r3, [r1, #4]
 8012c7c:	6943      	ldr	r3, [r0, #20]
 8012c7e:	608b      	str	r3, [r1, #8]
 8012c80:	b00a      	add	sp, #40	; 0x28
 8012c82:	ecbd 8b04 	vpop	{d8-d9}
 8012c86:	bd10      	pop	{r4, pc}
 8012c88:	ed90 4a00 	vldr	s8, [r0]
 8012c8c:	edd0 5a03 	vldr	s11, [r0, #12]
 8012c90:	edd0 2a05 	vldr	s5, [r0, #20]
 8012c94:	eddf 9a43 	vldr	s19, [pc, #268]	; 8012da4 <MEMS_EIG3+0x160>
 8012c98:	ed9f 6a43 	vldr	s12, [pc, #268]	; 8012da8 <MEMS_EIG3+0x164>
 8012c9c:	ee34 8a25 	vadd.f32	s16, s8, s11
 8012ca0:	eef0 3a00 	vmov.f32	s7, #0	; 0x40000000  2.0
 8012ca4:	ee38 8a22 	vadd.f32	s16, s16, s5
 8012ca8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012cac:	ee28 8a29 	vmul.f32	s16, s16, s19
 8012cb0:	eeb8 3a00 	vmov.f32	s6, #128	; 0xc0000000 -2.0
 8012cb4:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8012cb8:	ee34 4a48 	vsub.f32	s8, s8, s16
 8012cbc:	ee25 5aa5 	vmul.f32	s10, s11, s11
 8012cc0:	ee72 2ac8 	vsub.f32	s5, s5, s16
 8012cc4:	eea4 5a04 	vfma.f32	s10, s8, s8
 8012cc8:	eea7 5aa3 	vfma.f32	s10, s15, s7
 8012ccc:	eef0 7a45 	vmov.f32	s15, s10
 8012cd0:	eee2 7aa2 	vfma.f32	s15, s5, s5
 8012cd4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012cd8:	eef1 8ae7 	vsqrt.f32	s17, s15
 8012cdc:	ee80 6a28 	vdiv.f32	s12, s0, s17
 8012ce0:	ee82 5aa8 	vdiv.f32	s10, s5, s17
 8012ce4:	eec4 2a28 	vdiv.f32	s5, s8, s17
 8012ce8:	ee66 6a26 	vmul.f32	s13, s12, s13
 8012cec:	ee65 5a86 	vmul.f32	s11, s11, s12
 8012cf0:	ee26 7a07 	vmul.f32	s14, s12, s14
 8012cf4:	ee66 7ae5 	vnmul.f32	s15, s13, s11
 8012cf8:	ee26 6a24 	vmul.f32	s12, s12, s9
 8012cfc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012d00:	ee66 4a46 	vnmul.f32	s9, s12, s12
 8012d04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012d08:	eee5 4a85 	vfma.f32	s9, s11, s10
 8012d0c:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8012d10:	eee4 7aa2 	vfma.f32	s15, s9, s5
 8012d14:	eea6 5a26 	vfma.f32	s10, s12, s13
 8012d18:	eee5 7a07 	vfma.f32	s15, s10, s14
 8012d1c:	eef4 7ac3 	vcmpe.f32	s15, s6
 8012d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d24:	d909      	bls.n	8012d3a <MEMS_EIG3+0xf6>
 8012d26:	eef4 7ae3 	vcmpe.f32	s15, s7
 8012d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d2e:	db22      	blt.n	8012d76 <MEMS_EIG3+0x132>
 8012d30:	eeb0 9a40 	vmov.f32	s18, s0
 8012d34:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8012dac <MEMS_EIG3+0x168>
 8012d38:	e003      	b.n	8012d42 <MEMS_EIG3+0xfe>
 8012d3a:	ed9f 9a1d 	vldr	s18, [pc, #116]	; 8012db0 <MEMS_EIG3+0x16c>
 8012d3e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8012d42:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8012d46:	eef0 7a48 	vmov.f32	s15, s16
 8012d4a:	eeb0 7a48 	vmov.f32	s14, s16
 8012d4e:	eee8 7a89 	vfma.f32	s15, s17, s18
 8012d52:	eea8 7a80 	vfma.f32	s14, s17, s0
 8012d56:	edc4 7a00 	vstr	s15, [r4]
 8012d5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012d5e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8012d62:	eed8 7a26 	vfnms.f32	s15, s16, s13
 8012d66:	ed84 7a02 	vstr	s14, [r4, #8]
 8012d6a:	edc4 7a01 	vstr	s15, [r4, #4]
 8012d6e:	b00a      	add	sp, #40	; 0x28
 8012d70:	ecbd 8b04 	vpop	{d8-d9}
 8012d74:	bd10      	pop	{r4, pc}
 8012d76:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8012d7a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012d7e:	f003 f855 	bl	8015e2c <acosf>
 8012d82:	ee60 9a29 	vmul.f32	s19, s0, s19
 8012d86:	eeb0 0a69 	vmov.f32	s0, s19
 8012d8a:	f002 ff49 	bl	8015c20 <cosf>
 8012d8e:	eeb0 9a40 	vmov.f32	s18, s0
 8012d92:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8012db4 <MEMS_EIG3+0x170>
 8012d96:	ee39 0a80 	vadd.f32	s0, s19, s0
 8012d9a:	f002 ff41 	bl	8015c20 <cosf>
 8012d9e:	e7d0      	b.n	8012d42 <MEMS_EIG3+0xfe>
 8012da0:	358637bd 	.word	0x358637bd
 8012da4:	3eaaaaab 	.word	0x3eaaaaab
 8012da8:	3e2aaaab 	.word	0x3e2aaaab
 8012dac:	bf000001 	.word	0xbf000001
 8012db0:	3effffff 	.word	0x3effffff
 8012db4:	40060a92 	.word	0x40060a92

08012db8 <MEMS_runMagCal>:
 8012db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dbc:	ed2d 8b0a 	vpush	{d8-d12}
 8012dc0:	f2ad 4dec 	subw	sp, sp, #1260	; 0x4ec
 8012dc4:	2282      	movs	r2, #130	; 0x82
 8012dc6:	ab36      	add	r3, sp, #216	; 0xd8
 8012dc8:	460c      	mov	r4, r1
 8012dca:	9105      	str	r1, [sp, #20]
 8012dcc:	4683      	mov	fp, r0
 8012dce:	4608      	mov	r0, r1
 8012dd0:	a917      	add	r1, sp, #92	; 0x5c
 8012dd2:	9319      	str	r3, [sp, #100]	; 0x64
 8012dd4:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
 8012dd8:	f7ff fcb0 	bl	801273c <MEMS_getSensorData_I16>
 8012ddc:	f8bd 8060 	ldrh.w	r8, [sp, #96]	; 0x60
 8012de0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8012de4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012de6:	9209      	str	r2, [sp, #36]	; 0x24
 8012de8:	f108 31ff 	add.w	r1, r8, #4294967295
 8012dec:	9106      	str	r1, [sp, #24]
 8012dee:	fb01 2103 	mla	r1, r1, r3, r2
 8012df2:	9108      	str	r1, [sp, #32]
 8012df4:	f8cb 1038 	str.w	r1, [fp, #56]	; 0x38
 8012df8:	f1b8 0f00 	cmp.w	r8, #0
 8012dfc:	f000 8417 	beq.w	801362e <MEMS_runMagCal+0x876>
 8012e00:	f8db 3008 	ldr.w	r3, [fp, #8]
 8012e04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012e08:	f501 31c3 	add.w	r1, r1, #99840	; 0x18600
 8012e0c:	fb02 f203 	mul.w	r2, r2, r3
 8012e10:	31a0      	adds	r1, #160	; 0xa0
 8012e12:	4291      	cmp	r1, r2
 8012e14:	f080 8411 	bcs.w	801363a <MEMS_runMagCal+0x882>
 8012e18:	3b00      	subs	r3, #0
 8012e1a:	bf18      	it	ne
 8012e1c:	2301      	movne	r3, #1
 8012e1e:	e9cb 3301 	strd	r3, r3, [fp, #4]
 8012e22:	2200      	movs	r2, #0
 8012e24:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 8012e28:	f8cb 200c 	str.w	r2, [fp, #12]
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	e9cb 3325 	strd	r3, r3, [fp, #148]	; 0x94
 8012e32:	e9cb 3327 	strd	r3, r3, [fp, #156]	; 0x9c
 8012e36:	e9cb 3329 	strd	r3, r3, [fp, #164]	; 0xa4
 8012e3a:	22ff      	movs	r2, #255	; 0xff
 8012e3c:	f88b 208e 	strb.w	r2, [fp, #142]	; 0x8e
 8012e40:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8012e44:	4cd5      	ldr	r4, [pc, #852]	; (801319c <MEMS_runMagCal+0x3e4>)
 8012e46:	eddf 7ad8 	vldr	s15, [pc, #864]	; 80131a8 <MEMS_runMagCal+0x3f0>
 8012e4a:	9b05      	ldr	r3, [sp, #20]
 8012e4c:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 8012e50:	edd3 5a01 	vldr	s11, [r3, #4]
 8012e54:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8012e58:	4652      	mov	r2, sl
 8012e5a:	2a03      	cmp	r2, #3
 8012e5c:	f647 75ff 	movw	r5, #32767	; 0x7fff
 8012e60:	bf28      	it	cs
 8012e62:	2203      	movcs	r2, #3
 8012e64:	2100      	movs	r1, #0
 8012e66:	9207      	str	r2, [sp, #28]
 8012e68:	eeb0 0a67 	vmov.f32	s0, s15
 8012e6c:	464b      	mov	r3, r9
 8012e6e:	9402      	str	r4, [sp, #8]
 8012e70:	4627      	mov	r7, r4
 8012e72:	9503      	str	r5, [sp, #12]
 8012e74:	462e      	mov	r6, r5
 8012e76:	460a      	mov	r2, r1
 8012e78:	9404      	str	r4, [sp, #16]
 8012e7a:	7818      	ldrb	r0, [r3, #0]
 8012e7c:	3201      	adds	r2, #1
 8012e7e:	b292      	uxth	r2, r2
 8012e80:	2800      	cmp	r0, #0
 8012e82:	d04b      	beq.n	8012f1c <MEMS_runMagCal+0x164>
 8012e84:	f9b3 e004 	ldrsh.w	lr, [r3, #4]
 8012e88:	f9b3 c002 	ldrsh.w	ip, [r3, #2]
 8012e8c:	eddb 3a18 	vldr	s7, [fp, #96]	; 0x60
 8012e90:	eddb 4a1e 	vldr	s9, [fp, #120]	; 0x78
 8012e94:	ed9b 4a17 	vldr	s8, [fp, #92]	; 0x5c
 8012e98:	ed9b 5a1a 	vldr	s10, [fp, #104]	; 0x68
 8012e9c:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8012ea0:	9c02      	ldr	r4, [sp, #8]
 8012ea2:	ed9b 6a19 	vldr	s12, [fp, #100]	; 0x64
 8012ea6:	eddb 6a22 	vldr	s13, [fp, #136]	; 0x88
 8012eaa:	ee07 ea90 	vmov	s15, lr
 8012eae:	ee07 ca10 	vmov	s14, ip
 8012eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012eb6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012eba:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8012ebe:	ee37 7a44 	vsub.f32	s14, s14, s8
 8012ec2:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8012ec6:	ee27 7a05 	vmul.f32	s14, s14, s10
 8012eca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012ece:	4574      	cmp	r4, lr
 8012ed0:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012ed4:	bfb8      	it	lt
 8012ed6:	4674      	movlt	r4, lr
 8012ed8:	9402      	str	r4, [sp, #8]
 8012eda:	ee07 0a10 	vmov	s14, r0
 8012ede:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012ee2:	9c03      	ldr	r4, [sp, #12]
 8012ee4:	ee37 0a80 	vadd.f32	s0, s15, s0
 8012ee8:	ee77 7a46 	vsub.f32	s15, s14, s12
 8012eec:	4574      	cmp	r4, lr
 8012eee:	bfa8      	it	ge
 8012ef0:	4674      	movge	r4, lr
 8012ef2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012ef6:	4567      	cmp	r7, ip
 8012ef8:	9403      	str	r4, [sp, #12]
 8012efa:	9c04      	ldr	r4, [sp, #16]
 8012efc:	bfb8      	it	lt
 8012efe:	4667      	movlt	r7, ip
 8012f00:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8012f04:	4566      	cmp	r6, ip
 8012f06:	bfa8      	it	ge
 8012f08:	4666      	movge	r6, ip
 8012f0a:	4284      	cmp	r4, r0
 8012f0c:	bfb8      	it	lt
 8012f0e:	4604      	movlt	r4, r0
 8012f10:	3101      	adds	r1, #1
 8012f12:	4285      	cmp	r5, r0
 8012f14:	b249      	sxtb	r1, r1
 8012f16:	9404      	str	r4, [sp, #16]
 8012f18:	bfa8      	it	ge
 8012f1a:	4605      	movge	r5, r0
 8012f1c:	9807      	ldr	r0, [sp, #28]
 8012f1e:	4282      	cmp	r2, r0
 8012f20:	f103 0308 	add.w	r3, r3, #8
 8012f24:	d9a9      	bls.n	8012e7a <MEMS_runMagCal+0xc2>
 8012f26:	4590      	cmp	r8, r2
 8012f28:	9c04      	ldr	r4, [sp, #16]
 8012f2a:	f240 8767 	bls.w	8013dfc <MEMS_runMagCal+0x1044>
 8012f2e:	ebaa 0a02 	sub.w	sl, sl, r2
 8012f32:	fa12 fa8a 	uxtah	sl, r2, sl
 8012f36:	f109 0308 	add.w	r3, r9, #8
 8012f3a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012f3e:	9307      	str	r3, [sp, #28]
 8012f40:	2300      	movs	r3, #0
 8012f42:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
 8012f46:	9304      	str	r3, [sp, #16]
 8012f48:	7813      	ldrb	r3, [r2, #0]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	f000 8096 	beq.w	801307c <MEMS_runMagCal+0x2c4>
 8012f50:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8012f54:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8012f58:	f932 ac16 	ldrsh.w	sl, [r2, #-22]
 8012f5c:	f932 8c1e 	ldrsh.w	r8, [r2, #-30]
 8012f60:	f932 0c06 	ldrsh.w	r0, [r2, #-6]
 8012f64:	eddb 6a18 	vldr	s13, [fp, #96]	; 0x60
 8012f68:	f932 9c1c 	ldrsh.w	r9, [r2, #-28]
 8012f6c:	f932 3c04 	ldrsh.w	r3, [r2, #-4]
 8012f70:	eddb 3a17 	vldr	s7, [fp, #92]	; 0x5c
 8012f74:	ed9b 6a1a 	vldr	s12, [fp, #104]	; 0x68
 8012f78:	ed9b 3a1e 	vldr	s6, [fp, #120]	; 0x78
 8012f7c:	ed9b 4a19 	vldr	s8, [fp, #100]	; 0x64
 8012f80:	eddb 4a22 	vldr	s9, [fp, #136]	; 0x88
 8012f84:	ebae 0808 	sub.w	r8, lr, r8
 8012f88:	eba0 000a 	sub.w	r0, r0, sl
 8012f8c:	ee07 ca10 	vmov	s14, ip
 8012f90:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 8012f94:	ee07 0a90 	vmov	s15, r0
 8012f98:	f932 ac14 	ldrsh.w	sl, [r2, #-20]
 8012f9c:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 8012fa0:	f932 8c1a 	ldrsh.w	r8, [r2, #-26]
 8012fa4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012fa8:	eba3 030a 	sub.w	r3, r3, sl
 8012fac:	ee37 7a66 	vsub.f32	s14, s14, s13
 8012fb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012fb4:	ee06 ea90 	vmov	s13, lr
 8012fb8:	ebac 0909 	sub.w	r9, ip, r9
 8012fbc:	eb03 0949 	add.w	r9, r3, r9, lsl #1
 8012fc0:	eeb8 5ae6 	vcvt.f32.s32	s10, s13
 8012fc4:	eef0 7ae7 	vabs.f32	s15, s15
 8012fc8:	ee06 9a90 	vmov	s13, r9
 8012fcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012fd0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012fd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012fd8:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 8012fdc:	f932 9c12 	ldrsh.w	r9, [r2, #-18]
 8012fe0:	eef0 6ae6 	vabs.f32	s13, s13
 8012fe4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012fe8:	eba0 0808 	sub.w	r8, r0, r8
 8012fec:	ee06 0a90 	vmov	s13, r0
 8012ff0:	eba3 0309 	sub.w	r3, r3, r9
 8012ff4:	ee35 5a63 	vsub.f32	s10, s10, s7
 8012ff8:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 8012ffc:	ee25 5a06 	vmul.f32	s10, s10, s12
 8013000:	9b02      	ldr	r3, [sp, #8]
 8013002:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 8013006:	4577      	cmp	r7, lr
 8013008:	ee27 7a03 	vmul.f32	s14, s14, s6
 801300c:	ee06 8a90 	vmov	s13, r8
 8013010:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013014:	bfb8      	it	lt
 8013016:	4677      	movlt	r7, lr
 8013018:	4576      	cmp	r6, lr
 801301a:	ee27 7a07 	vmul.f32	s14, s14, s14
 801301e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013022:	bfa8      	it	ge
 8013024:	4676      	movge	r6, lr
 8013026:	4563      	cmp	r3, ip
 8013028:	bfb8      	it	lt
 801302a:	4663      	movlt	r3, ip
 801302c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013030:	eea5 7a05 	vfma.f32	s14, s10, s10
 8013034:	9302      	str	r3, [sp, #8]
 8013036:	9b03      	ldr	r3, [sp, #12]
 8013038:	eef0 6ae6 	vabs.f32	s13, s13
 801303c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013040:	4563      	cmp	r3, ip
 8013042:	ee36 6a44 	vsub.f32	s12, s12, s8
 8013046:	bfa8      	it	ge
 8013048:	4663      	movge	r3, ip
 801304a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801304e:	4284      	cmp	r4, r0
 8013050:	ee37 0a00 	vadd.f32	s0, s14, s0
 8013054:	bfb8      	it	lt
 8013056:	4604      	movlt	r4, r0
 8013058:	ee26 7a24 	vmul.f32	s14, s12, s9
 801305c:	4285      	cmp	r5, r0
 801305e:	bfa8      	it	ge
 8013060:	4605      	movge	r5, r0
 8013062:	9303      	str	r3, [sp, #12]
 8013064:	ee17 0a90 	vmov	r0, s15
 8013068:	9b04      	ldr	r3, [sp, #16]
 801306a:	eea7 0a07 	vfma.f32	s0, s14, s14
 801306e:	4283      	cmp	r3, r0
 8013070:	f101 0101 	add.w	r1, r1, #1
 8013074:	bf38      	it	cc
 8013076:	4603      	movcc	r3, r0
 8013078:	b249      	sxtb	r1, r1
 801307a:	9304      	str	r3, [sp, #16]
 801307c:	9b07      	ldr	r3, [sp, #28]
 801307e:	3208      	adds	r2, #8
 8013080:	4293      	cmp	r3, r2
 8013082:	f47f af61 	bne.w	8012f48 <MEMS_runMagCal+0x190>
 8013086:	2900      	cmp	r1, #0
 8013088:	f000 86b6 	beq.w	8013df8 <MEMS_runMagCal+0x1040>
 801308c:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
 8013090:	f280 82df 	bge.w	8013652 <MEMS_runMagCal+0x89a>
 8013094:	f516 4f80 	cmn.w	r6, #16384	; 0x4000
 8013098:	f2c0 82db 	blt.w	8013652 <MEMS_runMagCal+0x89a>
 801309c:	9b02      	ldr	r3, [sp, #8]
 801309e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80130a2:	f280 82d6 	bge.w	8013652 <MEMS_runMagCal+0x89a>
 80130a6:	9a03      	ldr	r2, [sp, #12]
 80130a8:	f512 4f80 	cmn.w	r2, #16384	; 0x4000
 80130ac:	f2c0 82d1 	blt.w	8013652 <MEMS_runMagCal+0x89a>
 80130b0:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 80130b4:	f280 82cd 	bge.w	8013652 <MEMS_runMagCal+0x89a>
 80130b8:	f515 4f80 	cmn.w	r5, #16384	; 0x4000
 80130bc:	f2c0 82c9 	blt.w	8013652 <MEMS_runMagCal+0x89a>
 80130c0:	ee07 1a90 	vmov	s15, r1
 80130c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80130c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80130cc:	eec0 7a26 	vdiv.f32	s15, s0, s13
 80130d0:	1bbe      	subs	r6, r7, r6
 80130d2:	1a9f      	subs	r7, r3, r2
 80130d4:	42be      	cmp	r6, r7
 80130d6:	4633      	mov	r3, r6
 80130d8:	eba4 0405 	sub.w	r4, r4, r5
 80130dc:	bfb8      	it	lt
 80130de:	463b      	movlt	r3, r7
 80130e0:	42a3      	cmp	r3, r4
 80130e2:	bfb8      	it	lt
 80130e4:	4623      	movlt	r3, r4
 80130e6:	eec7 6a25 	vdiv.f32	s13, s14, s11
 80130ea:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80130ee:	ee07 3a10 	vmov	s14, r3
 80130f2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80131a0 <MEMS_runMagCal+0x3e8>
 80130f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80130fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80130fe:	ee25 0a80 	vmul.f32	s0, s11, s0
 8013102:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801310a:	f100 82a2 	bmi.w	8013652 <MEMS_runMagCal+0x89a>
 801310e:	eddd 7a04 	vldr	s15, [sp, #16]
 8013112:	ed9f 6a24 	vldr	s12, [pc, #144]	; 80131a4 <MEMS_runMagCal+0x3ec>
 8013116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801311a:	ee67 5aa5 	vmul.f32	s11, s15, s11
 801311e:	eef4 5ac6 	vcmpe.f32	s11, s12
 8013122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013126:	f300 8294 	bgt.w	8013652 <MEMS_runMagCal+0x89a>
 801312a:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 801312e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8013132:	eef4 6ac7 	vcmpe.f32	s13, s14
 8013136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801313a:	f301 81f8 	bgt.w	801452e <MEMS_runMagCal+0x1776>
 801313e:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8013142:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013146:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801314a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801314e:	f340 8552 	ble.w	8013bf6 <MEMS_runMagCal+0xe3e>
 8013152:	ee07 6a90 	vmov	s15, r6
 8013156:	ee76 6aa6 	vadd.f32	s13, s13, s13
 801315a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801315e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013166:	f340 8546 	ble.w	8013bf6 <MEMS_runMagCal+0xe3e>
 801316a:	ee07 7a90 	vmov	s15, r7
 801316e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013172:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801317a:	f140 853c 	bpl.w	8013bf6 <MEMS_runMagCal+0xe3e>
 801317e:	ee07 4a90 	vmov	s15, r4
 8013182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013186:	2300      	movs	r3, #0
 8013188:	eef4 6ae7 	vcmpe.f32	s13, s15
 801318c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013190:	9303      	str	r3, [sp, #12]
 8013192:	bf48      	it	mi
 8013194:	2301      	movmi	r3, #1
 8013196:	9307      	str	r3, [sp, #28]
 8013198:	f000 bd30 	b.w	8013bfc <MEMS_runMagCal+0xe44>
 801319c:	ffff8000 	.word	0xffff8000
 80131a0:	43020000 	.word	0x43020000
 80131a4:	447a0000 	.word	0x447a0000
 80131a8:	00000000 	.word	0x00000000
 80131ac:	41f00001 	.word	0x41f00001
 80131b0:	400ccccd 	.word	0x400ccccd
 80131b4:	3dcccccd 	.word	0x3dcccccd
 80131b8:	423c0000 	.word	0x423c0000
 80131bc:	ed5f 7a06 	vldr	s15, [pc, #-24]	; 80131a8 <MEMS_runMagCal+0x3f0>
 80131c0:	ed5f 6a06 	vldr	s13, [pc, #-24]	; 80131ac <MEMS_runMagCal+0x3f4>
 80131c4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80131c8:	eef4 6ac7 	vcmpe.f32	s13, s14
 80131cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131d0:	dc10      	bgt.n	80131f4 <MEMS_runMagCal+0x43c>
 80131d2:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 80131b0 <MEMS_runMagCal+0x3f8>
 80131d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80131da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131de:	dc09      	bgt.n	80131f4 <MEMS_runMagCal+0x43c>
 80131e0:	ed94 9a03 	vldr	s18, [r4, #12]
 80131e4:	ed5f 7a0d 	vldr	s15, [pc, #-52]	; 80131b4 <MEMS_runMagCal+0x3fc>
 80131e8:	eeb4 9ae7 	vcmpe.f32	s18, s15
 80131ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131f0:	f201 8527 	bhi.w	8014c42 <MEMS_runMagCal+0x1e8a>
 80131f4:	ed5f 7a10 	vldr	s15, [pc, #-64]	; 80131b8 <MEMS_runMagCal+0x400>
 80131f8:	edd4 6a03 	vldr	s13, [r4, #12]
 80131fc:	ed94 5a00 	vldr	s10, [r4]
 8013200:	edd4 5a01 	vldr	s11, [r4, #4]
 8013204:	ed94 6a02 	vldr	s12, [r4, #8]
 8013208:	edc4 7a06 	vstr	s15, [r4, #24]
 801320c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013210:	ad2e      	add	r5, sp, #184	; 0xb8
 8013212:	2300      	movs	r3, #0
 8013214:	e9c5 3300 	strd	r3, r3, [r5]
 8013218:	e9c5 3304 	strd	r3, r3, [r5, #16]
 801321c:	60ab      	str	r3, [r5, #8]
 801321e:	61ab      	str	r3, [r5, #24]
 8013220:	4be7      	ldr	r3, [pc, #924]	; (80135c0 <MEMS_runMagCal+0x808>)
 8013222:	9311      	str	r3, [sp, #68]	; 0x44
 8013224:	ee85 0a08 	vdiv.f32	s0, s10, s16
 8013228:	eec5 9a88 	vdiv.f32	s19, s11, s16
 801322c:	ee86 aa08 	vdiv.f32	s20, s12, s16
 8013230:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 8013234:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 8013238:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 801323c:	eef0 6a67 	vmov.f32	s13, s15
 8013240:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8013244:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8013248:	ee39 9a46 	vsub.f32	s18, s18, s12
 801324c:	eddf 6add 	vldr	s13, [pc, #884]	; 80135c4 <MEMS_runMagCal+0x80c>
 8013250:	ed9f 6add 	vldr	s12, [pc, #884]	; 80135c8 <MEMS_runMagCal+0x810>
 8013254:	ee77 6a66 	vsub.f32	s13, s14, s13
 8013258:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801325c:	eef0 6ae6 	vabs.f32	s13, s13
 8013260:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013264:	eef4 6ac6 	vcmpe.f32	s13, s12
 8013268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801326c:	eef0 7ae7 	vabs.f32	s15, s15
 8013270:	f101 84dd 	bmi.w	8014c2e <MEMS_runMagCal+0x1e76>
 8013274:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 80135cc <MEMS_runMagCal+0x814>
 8013278:	eef4 7ac7 	vcmpe.f32	s15, s14
 801327c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013280:	f281 8438 	bge.w	8014af4 <MEMS_runMagCal+0x1d3c>
 8013284:	eddf 7ad2 	vldr	s15, [pc, #840]	; 80135d0 <MEMS_runMagCal+0x818>
 8013288:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801328c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013290:	f101 8430 	bmi.w	8014af4 <MEMS_runMagCal+0x1d3c>
 8013294:	f002 fd04 	bl	8015ca0 <roundf>
 8013298:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801329c:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 80132a0:	ee17 3a90 	vmov	r3, s15
 80132a4:	eeb0 0a69 	vmov.f32	s0, s19
 80132a8:	f8a9 3000 	strh.w	r3, [r9]
 80132ac:	f002 fcf8 	bl	8015ca0 <roundf>
 80132b0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80132b4:	eeb0 0a4a 	vmov.f32	s0, s20
 80132b8:	ee17 3a90 	vmov	r3, s15
 80132bc:	f8a9 3002 	strh.w	r3, [r9, #2]
 80132c0:	f002 fcee 	bl	8015ca0 <roundf>
 80132c4:	eddd 7a08 	vldr	s15, [sp, #32]
 80132c8:	eefd 6ac0 	vcvt.s32.f32	s13, s0
 80132cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80132d0:	ee16 3a90 	vmov	r3, s13
 80132d4:	eddf 7abf 	vldr	s15, [pc, #764]	; 80135d4 <MEMS_runMagCal+0x81c>
 80132d8:	f8a9 3004 	strh.w	r3, [r9, #4]
 80132dc:	ee27 0a27 	vmul.f32	s0, s14, s15
 80132e0:	f002 fcde 	bl	8015ca0 <roundf>
 80132e4:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80132e8:	ae0f      	add	r6, sp, #60	; 0x3c
 80132ea:	ed8b 0a01 	vstr	s0, [fp, #4]
 80132ee:	ab10      	add	r3, sp, #64	; 0x40
 80132f0:	ee1c 0a10 	vmov	r0, s24
 80132f4:	eeb0 0a48 	vmov.f32	s0, s16
 80132f8:	4649      	mov	r1, r9
 80132fa:	9600      	str	r6, [sp, #0]
 80132fc:	aa2d      	add	r2, sp, #180	; 0xb4
 80132fe:	f7f8 ff33 	bl	800c168 <getMagStats.constprop.0>
 8013302:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8013306:	eddf 6ab4 	vldr	s13, [pc, #720]	; 80135d8 <MEMS_runMagCal+0x820>
 801330a:	461f      	mov	r7, r3
 801330c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8013310:	005b      	lsls	r3, r3, #1
 8013312:	ee07 3a90 	vmov	s15, r3
 8013316:	ee07 0a10 	vmov	s14, r0
 801331a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801331e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013322:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013326:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801332a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801332e:	dc0f      	bgt.n	8013350 <MEMS_runMagCal+0x598>
 8013330:	ed96 7a00 	vldr	s14, [r6]
 8013334:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8013338:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801333c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013340:	bfc3      	ittte	gt
 8013342:	f89b 3040 	ldrbgt.w	r3, [fp, #64]	; 0x40
 8013346:	fab3 f383 	clzgt	r3, r3
 801334a:	095b      	lsrgt	r3, r3, #5
 801334c:	2301      	movle	r3, #1
 801334e:	9303      	str	r3, [sp, #12]
 8013350:	ed96 0a00 	vldr	s0, [r6]
 8013354:	f8db 6004 	ldr.w	r6, [fp, #4]
 8013358:	9620      	str	r6, [sp, #128]	; 0x80
 801335a:	ee28 0a80 	vmul.f32	s0, s17, s0
 801335e:	ee80 0a09 	vdiv.f32	s0, s0, s18
 8013362:	f002 fc9d 	bl	8015ca0 <roundf>
 8013366:	eebc 7ac0 	vcvt.u32.f32	s14, s0
 801336a:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 801336e:	ee17 3a10 	vmov	r3, s14
 8013372:	ee28 0aa7 	vmul.f32	s0, s17, s15
 8013376:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 801337a:	f002 fc91 	bl	8015ca0 <roundf>
 801337e:	ed9f 6a97 	vldr	s12, [pc, #604]	; 80135dc <MEMS_runMagCal+0x824>
 8013382:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 8013386:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801338a:	eddd 7a35 	vldr	s15, [sp, #212]	; 0xd4
 801338e:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8013392:	f8d9 0000 	ldr.w	r0, [r9]
 8013396:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
 801339a:	ee66 6a86 	vmul.f32	s13, s13, s12
 801339e:	ee27 7a06 	vmul.f32	s14, s14, s12
 80133a2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80133a6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80133aa:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80133ae:	ee16 2a90 	vmov	r2, s13
 80133b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80133b6:	eebc 6ac0 	vcvt.u32.f32	s12, s0
 80133ba:	f1b8 0f01 	cmp.w	r8, #1
 80133be:	fa1f fc82 	uxth.w	ip, r2
 80133c2:	bf08      	it	eq
 80133c4:	23ff      	moveq	r3, #255	; 0xff
 80133c6:	ee17 2a10 	vmov	r2, s14
 80133ca:	ee17 1a90 	vmov	r1, s15
 80133ce:	f8cd 0086 	str.w	r0, [sp, #134]	; 0x86
 80133d2:	ee16 0a10 	vmov	r0, s12
 80133d6:	bf08      	it	eq
 80133d8:	f88d 3084 	strbeq.w	r3, [sp, #132]	; 0x84
 80133dc:	9b03      	ldr	r3, [sp, #12]
 80133de:	f88d 0085 	strb.w	r0, [sp, #133]	; 0x85
 80133e2:	b292      	uxth	r2, r2
 80133e4:	b289      	uxth	r1, r1
 80133e6:	2000      	movs	r0, #0
 80133e8:	f8ad c08c 	strh.w	ip, [sp, #140]	; 0x8c
 80133ec:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
 80133f0:	f8ad 1090 	strh.w	r1, [sp, #144]	; 0x90
 80133f4:	f88b 0000 	strb.w	r0, [fp]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	f000 8118 	beq.w	801362e <MEMS_runMagCal+0x876>
 80133fe:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8013402:	f88b 0001 	strb.w	r0, [fp, #1]
 8013406:	2b00      	cmp	r3, #0
 8013408:	f041 80fd 	bne.w	8014606 <MEMS_runMagCal+0x184e>
 801340c:	f10b 0868 	add.w	r8, fp, #104	; 0x68
 8013410:	ad0e      	add	r5, sp, #56	; 0x38
 8013412:	f10d 0c80 	add.w	ip, sp, #128	; 0x80
 8013416:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801341a:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801341e:	f8bd e090 	ldrh.w	lr, [sp, #144]	; 0x90
 8013422:	f8cb 6008 	str.w	r6, [fp, #8]
 8013426:	f8cb 0044 	str.w	r0, [fp, #68]	; 0x44
 801342a:	f8bd 608e 	ldrh.w	r6, [sp, #142]	; 0x8e
 801342e:	eddf 7a6c 	vldr	s15, [pc, #432]	; 80135e0 <MEMS_runMagCal+0x828>
 8013432:	f8cb 1048 	str.w	r1, [fp, #72]	; 0x48
 8013436:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801343a:	fb00 f404 	mul.w	r4, r0, r4
 801343e:	ee05 4a90 	vmov	s11, r4
 8013442:	fb00 f406 	mul.w	r4, r0, r6
 8013446:	fb00 f00e 	mul.w	r0, r0, lr
 801344a:	ee06 0a10 	vmov	s12, r0
 801344e:	f9bd 0086 	ldrsh.w	r0, [sp, #134]	; 0x86
 8013452:	f8cb 204c 	str.w	r2, [fp, #76]	; 0x4c
 8013456:	ee03 0a90 	vmov	s7, r0
 801345a:	f9bd 0088 	ldrsh.w	r0, [sp, #136]	; 0x88
 801345e:	f8cb 3050 	str.w	r3, [fp, #80]	; 0x50
 8013462:	ee05 4a10 	vmov	s10, r4
 8013466:	ee04 0a10 	vmov	s8, r0
 801346a:	f9bd 008a 	ldrsh.w	r0, [sp, #138]	; 0x8a
 801346e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8013472:	ee04 0a90 	vmov	s9, r0
 8013476:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801347a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801347e:	f8dc 0000 	ldr.w	r0, [ip]
 8013482:	f8cb 0054 	str.w	r0, [fp, #84]	; 0x54
 8013486:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801348a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801348e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8013492:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8013496:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801349a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801349e:	2001      	movs	r0, #1
 80134a0:	24ff      	movs	r4, #255	; 0xff
 80134a2:	edcb 5a1a 	vstr	s11, [fp, #104]	; 0x68
 80134a6:	ed8b 5a1e 	vstr	s10, [fp, #120]	; 0x78
 80134aa:	ed8b 6a22 	vstr	s12, [fp, #136]	; 0x88
 80134ae:	edcb 3a17 	vstr	s7, [fp, #92]	; 0x5c
 80134b2:	ed8b 4a18 	vstr	s8, [fp, #96]	; 0x60
 80134b6:	edcb 4a19 	vstr	s9, [fp, #100]	; 0x64
 80134ba:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
 80134be:	f88b 0059 	strb.w	r0, [fp, #89]	; 0x59
 80134c2:	f88b 4012 	strb.w	r4, [fp, #18]
 80134c6:	2f00      	cmp	r7, #0
 80134c8:	f001 82c8 	beq.w	8014a5c <MEMS_runMagCal+0x1ca4>
 80134cc:	9b05      	ldr	r3, [sp, #20]
 80134ce:	ed9f 3a47 	vldr	s6, [pc, #284]	; 80135ec <MEMS_runMagCal+0x834>
 80134d2:	ed93 0a01 	vldr	s0, [r3, #4]
 80134d6:	f89b 1011 	ldrb.w	r1, [fp, #17]
 80134da:	f89b 008d 	ldrb.w	r0, [fp, #141]	; 0x8d
 80134de:	2200      	movs	r2, #0
 80134e0:	ee20 3a03 	vmul.f32	s6, s0, s6
 80134e4:	f04f 34ff 	mov.w	r4, #4294967295
 80134e8:	4616      	mov	r6, r2
 80134ea:	fb96 f3f0 	sdiv	r3, r6, r0
 80134ee:	fb00 6313 	mls	r3, r0, r3, r6
 80134f2:	b2db      	uxtb	r3, r3
 80134f4:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80134f8:	1c66      	adds	r6, r4, #1
 80134fa:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 80134fe:	ee07 4a90 	vmov	s15, r4
 8013502:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 8013506:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 801350a:	ee06 4a90 	vmov	s13, r4
 801350e:	fb96 f4f1 	sdiv	r4, r6, r1
 8013512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013516:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801351a:	ee77 7ac4 	vsub.f32	s15, s15, s8
 801351e:	ee07 3a10 	vmov	s14, r3
 8013522:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8013526:	ee67 7a85 	vmul.f32	s15, s15, s10
 801352a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801352e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013532:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013536:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801353a:	fb01 6414 	mls	r4, r1, r4, r6
 801353e:	b264      	sxtb	r4, r4
 8013540:	ee37 7a64 	vsub.f32	s14, s14, s9
 8013544:	3201      	adds	r2, #1
 8013546:	ee27 7a06 	vmul.f32	s14, s14, s12
 801354a:	b212      	sxth	r2, r2
 801354c:	eee7 7a07 	vfma.f32	s15, s14, s14
 8013550:	eb0b 0344 	add.w	r3, fp, r4, lsl #1
 8013554:	42ba      	cmp	r2, r7
 8013556:	4616      	mov	r6, r2
 8013558:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801355c:	ee67 7a03 	vmul.f32	s15, s14, s6
 8013560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013564:	ee17 ca90 	vmov	ip, s15
 8013568:	f8a3 c014 	strh.w	ip, [r3, #20]
 801356c:	dbbd      	blt.n	80134ea <MEMS_runMagCal+0x732>
 801356e:	f88b 4012 	strb.w	r4, [fp, #18]
 8013572:	428f      	cmp	r7, r1
 8013574:	bf28      	it	cs
 8013576:	460f      	movcs	r7, r1
 8013578:	f88b 7010 	strb.w	r7, [fp, #16]
 801357c:	ee1c 0a10 	vmov	r0, s24
 8013580:	9500      	str	r5, [sp, #0]
 8013582:	4642      	mov	r2, r8
 8013584:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 8013588:	ab0d      	add	r3, sp, #52	; 0x34
 801358a:	f7f8 fded 	bl	800c168 <getMagStats.constprop.0>
 801358e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80135e4 <MEMS_runMagCal+0x82c>
 8013592:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8013596:	edd5 6a00 	vldr	s13, [r5]
 801359a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801359e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80135a2:	eef0 7ae7 	vabs.f32	s15, s15
 80135a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80135aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135ae:	d525      	bpl.n	80135fc <MEMS_runMagCal+0x844>
 80135b0:	eef4 6ac7 	vcmpe.f32	s13, s14
 80135b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135b8:	f101 8257 	bmi.w	8014a6a <MEMS_runMagCal+0x1cb2>
 80135bc:	e01e      	b.n	80135fc <MEMS_runMagCal+0x844>
 80135be:	bf00      	nop
 80135c0:	41f00001 	.word	0x41f00001
 80135c4:	3f8ccccd 	.word	0x3f8ccccd
 80135c8:	3f266666 	.word	0x3f266666
 80135cc:	3eb33333 	.word	0x3eb33333
 80135d0:	3f19999a 	.word	0x3f19999a
 80135d4:	3a83126f 	.word	0x3a83126f
 80135d8:	3c23d70a 	.word	0x3c23d70a
 80135dc:	447a0000 	.word	0x447a0000
 80135e0:	358637bd 	.word	0x358637bd
 80135e4:	423c0000 	.word	0x423c0000
 80135e8:	4423d666 	.word	0x4423d666
 80135ec:	42c80000 	.word	0x42c80000
 80135f0:	427c0000 	.word	0x427c0000
 80135f4:	3f666666 	.word	0x3f666666
 80135f8:	3eaaaaab 	.word	0x3eaaaaab
 80135fc:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8013600:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013608:	d507      	bpl.n	801361a <MEMS_runMagCal+0x862>
 801360a:	eef4 6a47 	vcmp.f32	s13, s14
 801360e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013612:	9b03      	ldr	r3, [sp, #12]
 8013614:	bf48      	it	mi
 8013616:	2302      	movmi	r3, #2
 8013618:	9303      	str	r3, [sp, #12]
 801361a:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 801361e:	9a03      	ldr	r2, [sp, #12]
 8013620:	f88b 2058 	strb.w	r2, [fp, #88]	; 0x58
 8013624:	2bc8      	cmp	r3, #200	; 0xc8
 8013626:	d902      	bls.n	801362e <MEMS_runMagCal+0x876>
 8013628:	2302      	movs	r3, #2
 801362a:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 801362e:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 8013632:	ecbd 8b0a 	vpop	{d8-d12}
 8013636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801363a:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 801363e:	4291      	cmp	r1, r2
 8013640:	f4ff abea 	bcc.w	8012e18 <MEMS_runMagCal+0x60>
 8013644:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8013648:	2b00      	cmp	r3, #0
 801364a:	f47f abf9 	bne.w	8012e40 <MEMS_runMagCal+0x88>
 801364e:	f7ff bbed 	b.w	8012e2c <MEMS_runMagCal+0x74>
 8013652:	2702      	movs	r7, #2
 8013654:	2300      	movs	r3, #0
 8013656:	9307      	str	r3, [sp, #28]
 8013658:	9303      	str	r3, [sp, #12]
 801365a:	ed5f 7a1d 	vldr	s15, [pc, #-116]	; 80135e8 <MEMS_runMagCal+0x830>
 801365e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013666:	f140 8260 	bpl.w	8013b2a <MEMS_runMagCal+0xd72>
 801366a:	ed5f 7a20 	vldr	s15, [pc, #-128]	; 80135ec <MEMS_runMagCal+0x834>
 801366e:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8013672:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013676:	2b01      	cmp	r3, #1
 8013678:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 801367c:	d911      	bls.n	80136a2 <MEMS_runMagCal+0x8ea>
 801367e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013682:	ee17 3a90 	vmov	r3, s15
 8013686:	b29b      	uxth	r3, r3
 8013688:	2bc7      	cmp	r3, #199	; 0xc7
 801368a:	f201 8359 	bhi.w	8014d40 <MEMS_runMagCal+0x1f88>
 801368e:	2300      	movs	r3, #0
 8013690:	22ff      	movs	r2, #255	; 0xff
 8013692:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8013696:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 801369a:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
 801369e:	f88b 208e 	strb.w	r2, [fp, #142]	; 0x8e
 80136a2:	2f00      	cmp	r7, #0
 80136a4:	f040 824d 	bne.w	8013b42 <MEMS_runMagCal+0xd8a>
 80136a8:	f99b 3012 	ldrsb.w	r3, [fp, #18]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	f2c0 839e 	blt.w	8013dee <MEMS_runMagCal+0x1036>
 80136b2:	f89b 6011 	ldrb.w	r6, [fp, #17]
 80136b6:	1c5a      	adds	r2, r3, #1
 80136b8:	fbb2 f3f6 	udiv	r3, r2, r6
 80136bc:	fb06 2313 	mls	r3, r6, r3, r2
 80136c0:	b25b      	sxtb	r3, r3
 80136c2:	461d      	mov	r5, r3
 80136c4:	f89b 4010 	ldrb.w	r4, [fp, #16]
 80136c8:	f88b 3012 	strb.w	r3, [fp, #18]
 80136cc:	3401      	adds	r4, #1
 80136ce:	42b4      	cmp	r4, r6
 80136d0:	bfa8      	it	ge
 80136d2:	4634      	movge	r4, r6
 80136d4:	fa5f f884 	uxtb.w	r8, r4
 80136d8:	f88b 8010 	strb.w	r8, [fp, #16]
 80136dc:	f002 fae0 	bl	8015ca0 <roundf>
 80136e0:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80136e4:	eb0b 0345 	add.w	r3, fp, r5, lsl #1
 80136e8:	ee10 2a10 	vmov	r2, s0
 80136ec:	829a      	strh	r2, [r3, #20]
 80136ee:	2f00      	cmp	r7, #0
 80136f0:	f040 8227 	bne.w	8013b42 <MEMS_runMagCal+0xd8a>
 80136f4:	f8db 200c 	ldr.w	r2, [fp, #12]
 80136f8:	b122      	cbz	r2, 8013704 <MEMS_runMagCal+0x94c>
 80136fa:	9908      	ldr	r1, [sp, #32]
 80136fc:	f502 6396 	add.w	r3, r2, #1200	; 0x4b0
 8013700:	4299      	cmp	r1, r3
 8013702:	d394      	bcc.n	801362e <MEMS_runMagCal+0x876>
 8013704:	9b03      	ldr	r3, [sp, #12]
 8013706:	2b01      	cmp	r3, #1
 8013708:	d091      	beq.n	801362e <MEMS_runMagCal+0x876>
 801370a:	f89b 7058 	ldrb.w	r7, [fp, #88]	; 0x58
 801370e:	1ebb      	subs	r3, r7, #2
 8013710:	2b01      	cmp	r3, #1
 8013712:	f240 8232 	bls.w	8013b7a <MEMS_runMagCal+0xdc2>
 8013716:	9b05      	ldr	r3, [sp, #20]
 8013718:	ed5f 7a4b 	vldr	s15, [pc, #-300]	; 80135f0 <MEMS_runMagCal+0x838>
 801371c:	ed93 8a01 	vldr	s16, [r3, #4]
 8013720:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 8013724:	9a06      	ldr	r2, [sp, #24]
 8013726:	f8db 6090 	ldr.w	r6, [fp, #144]	; 0x90
 801372a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801372c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013730:	eec7 8a08 	vdiv.f32	s17, s14, s16
 8013734:	fb02 1404 	mla	r4, r2, r4, r1
 8013738:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 801373c:	f10b 028c 	add.w	r2, fp, #140	; 0x8c
 8013740:	3310      	adds	r3, #16
 8013742:	42a3      	cmp	r3, r4
 8013744:	eeb0 9a08 	vmov.f32	s18, #8	; 0x40400000  3.0
 8013748:	ee28 9a89 	vmul.f32	s18, s17, s18
 801374c:	ee0c 2a10 	vmov	s24, r2
 8013750:	ee69 7a27 	vmul.f32	s15, s18, s15
 8013754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013758:	ee17 2a90 	vmov	r2, s15
 801375c:	fa1f f982 	uxth.w	r9, r2
 8013760:	f080 81fe 	bcs.w	8013b60 <MEMS_runMagCal+0xda8>
 8013764:	f242 3328 	movw	r3, #9000	; 0x2328
 8013768:	429c      	cmp	r4, r3
 801376a:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 801376e:	f89b 508d 	ldrb.w	r5, [fp, #141]	; 0x8d
 8013772:	f99b 208e 	ldrsb.w	r2, [fp, #142]	; 0x8e
 8013776:	bf1a      	itte	ne
 8013778:	f5a4 540c 	subne.w	r4, r4, #8960	; 0x2300
 801377c:	3c28      	subne	r4, #40	; 0x28
 801377e:	2400      	moveq	r4, #0
 8013780:	42a8      	cmp	r0, r5
 8013782:	f102 0201 	add.w	r2, r2, #1
 8013786:	f000 8727 	beq.w	80145d8 <MEMS_runMagCal+0x1820>
 801378a:	1a12      	subs	r2, r2, r0
 801378c:	fb92 f1f5 	sdiv	r1, r2, r5
 8013790:	fb05 2211 	mls	r2, r5, r1, r2
 8013794:	2a00      	cmp	r2, #0
 8013796:	bfb8      	it	lt
 8013798:	1952      	addlt	r2, r2, r5
 801379a:	b211      	sxth	r1, r2
 801379c:	b358      	cbz	r0, 80137f6 <MEMS_runMagCal+0xa3e>
 801379e:	3801      	subs	r0, #1
 80137a0:	b280      	uxth	r0, r0
 80137a2:	3001      	adds	r0, #1
 80137a4:	1b36      	subs	r6, r6, r4
 80137a6:	9f03      	ldr	r7, [sp, #12]
 80137a8:	b2b6      	uxth	r6, r6
 80137aa:	4408      	add	r0, r1
 80137ac:	e002      	b.n	80137b4 <MEMS_runMagCal+0x9fc>
 80137ae:	3101      	adds	r1, #1
 80137b0:	4281      	cmp	r1, r0
 80137b2:	d01b      	beq.n	80137ec <MEMS_runMagCal+0xa34>
 80137b4:	fb91 f3f5 	sdiv	r3, r1, r5
 80137b8:	fb05 1313 	mls	r3, r5, r3, r1
 80137bc:	b2db      	uxtb	r3, r3
 80137be:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80137c2:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 80137c6:	4432      	add	r2, r6
 80137c8:	b212      	sxth	r2, r2
 80137ca:	2a00      	cmp	r2, #0
 80137cc:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 80137d0:	daed      	bge.n	80137ae <MEMS_runMagCal+0x9f6>
 80137d2:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 80137d6:	1e5a      	subs	r2, r3, #1
 80137d8:	2b00      	cmp	r3, #0
 80137da:	f000 8306 	beq.w	8013dea <MEMS_runMagCal+0x1032>
 80137de:	3101      	adds	r1, #1
 80137e0:	4281      	cmp	r1, r0
 80137e2:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 80137e6:	f04f 0701 	mov.w	r7, #1
 80137ea:	d1e3      	bne.n	80137b4 <MEMS_runMagCal+0x9fc>
 80137ec:	2f01      	cmp	r7, #1
 80137ee:	f001 80ea 	beq.w	80149c6 <MEMS_runMagCal+0x1c0e>
 80137f2:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 80137f6:	f8cb 4090 	str.w	r4, [fp, #144]	; 0x90
 80137fa:	2800      	cmp	r0, #0
 80137fc:	f000 81b6 	beq.w	8013b6c <MEMS_runMagCal+0xdb4>
 8013800:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8013804:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013806:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801380a:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 801380e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8013812:	3308      	adds	r3, #8
 8013814:	441c      	add	r4, r3
 8013816:	42a2      	cmp	r2, r4
 8013818:	f200 86e6 	bhi.w	80145e8 <MEMS_runMagCal+0x1830>
 801381c:	9b07      	ldr	r3, [sp, #28]
 801381e:	b923      	cbnz	r3, 801382a <MEMS_runMagCal+0xa72>
 8013820:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8013824:	2b0a      	cmp	r3, #10
 8013826:	f240 81a5 	bls.w	8013b74 <MEMS_runMagCal+0xdbc>
 801382a:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 801382e:	9302      	str	r3, [sp, #8]
 8013830:	2b00      	cmp	r3, #0
 8013832:	f000 819f 	beq.w	8013b74 <MEMS_runMagCal+0xdbc>
 8013836:	ee29 aa09 	vmul.f32	s20, s18, s18
 801383a:	ed5f 6a92 	vldr	s13, [pc, #-584]	; 80135f4 <MEMS_runMagCal+0x83c>
 801383e:	ed1f 7a92 	vldr	s14, [pc, #-584]	; 80135f8 <MEMS_runMagCal+0x840>
 8013842:	9b03      	ldr	r3, [sp, #12]
 8013844:	9309      	str	r3, [sp, #36]	; 0x24
 8013846:	eef7 9a08 	vmov.f32	s19, #120	; 0x3fc00000  1.5
 801384a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801384e:	2100      	movs	r1, #0
 8013850:	ee2a aa26 	vmul.f32	s20, s20, s13
 8013854:	ee28 8a07 	vmul.f32	s16, s16, s14
 8013858:	ee69 9a29 	vmul.f32	s19, s18, s19
 801385c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8013860:	468a      	mov	sl, r1
 8013862:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013864:	f812 303a 	ldrb.w	r3, [r2, sl, lsl #3]
 8013868:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
 801386c:	2b00      	cmp	r3, #0
 801386e:	f000 80e2 	beq.w	8013a36 <MEMS_runMagCal+0xc7e>
 8013872:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8013876:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 801387a:	ee07 4a90 	vmov	s15, r4
 801387e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013882:	eef0 7ae7 	vabs.f32	s15, s15
 8013886:	eef4 7ae8 	vcmpe.f32	s15, s17
 801388a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801388e:	f100 820b 	bmi.w	8013ca8 <MEMS_runMagCal+0xef0>
 8013892:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8013896:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 801389a:	2f00      	cmp	r7, #0
 801389c:	f000 8223 	beq.w	8013ce6 <MEMS_runMagCal+0xf2e>
 80138a0:	f9bb 23a6 	ldrsh.w	r2, [fp, #934]	; 0x3a6
 80138a4:	f9bb 03a4 	ldrsh.w	r0, [fp, #932]	; 0x3a4
 80138a8:	f9bb 33a8 	ldrsh.w	r3, [fp, #936]	; 0x3a8
 80138ac:	1b52      	subs	r2, r2, r5
 80138ae:	fb02 f102 	mul.w	r1, r2, r2
 80138b2:	1b02      	subs	r2, r0, r4
 80138b4:	fb02 1202 	mla	r2, r2, r2, r1
 80138b8:	1b9b      	subs	r3, r3, r6
 80138ba:	fb03 2303 	mla	r3, r3, r3, r2
 80138be:	ee07 3a90 	vmov	s15, r3
 80138c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80138c6:	eeb4 aae7 	vcmpe.f32	s20, s15
 80138ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138ce:	f300 80b2 	bgt.w	8013a36 <MEMS_runMagCal+0xc7e>
 80138d2:	fb94 f3f9 	sdiv	r3, r4, r9
 80138d6:	fb09 4313 	mls	r3, r9, r3, r4
 80138da:	2b00      	cmp	r3, #0
 80138dc:	bfb8      	it	lt
 80138de:	444b      	addlt	r3, r9
 80138e0:	b21b      	sxth	r3, r3
 80138e2:	ee00 3a10 	vmov	s0, r3
 80138e6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80138ea:	ee20 0a08 	vmul.f32	s0, s0, s16
 80138ee:	f002 f9d7 	bl	8015ca0 <roundf>
 80138f2:	fb95 f3f9 	sdiv	r3, r5, r9
 80138f6:	fb09 5313 	mls	r3, r9, r3, r5
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	bfb8      	it	lt
 80138fe:	444b      	addlt	r3, r9
 8013900:	b21b      	sxth	r3, r3
 8013902:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013906:	ee00 3a10 	vmov	s0, r3
 801390a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801390e:	edcd 7a04 	vstr	s15, [sp, #16]
 8013912:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013916:	f002 f9c3 	bl	8015ca0 <roundf>
 801391a:	fb96 f3f9 	sdiv	r3, r6, r9
 801391e:	fb09 6313 	mls	r3, r9, r3, r6
 8013922:	2b00      	cmp	r3, #0
 8013924:	bfb8      	it	lt
 8013926:	444b      	addlt	r3, r9
 8013928:	b21b      	sxth	r3, r3
 801392a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801392e:	ee00 3a10 	vmov	s0, r3
 8013932:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013936:	f89d 8010 	ldrb.w	r8, [sp, #16]
 801393a:	edcd 7a04 	vstr	s15, [sp, #16]
 801393e:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8013942:	9204      	str	r2, [sp, #16]
 8013944:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013948:	f002 f9aa 	bl	8015ca0 <roundf>
 801394c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013950:	f1b8 0f1f 	cmp.w	r8, #31
 8013954:	edcd 7a06 	vstr	s15, [sp, #24]
 8013958:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801395c:	9106      	str	r1, [sp, #24]
 801395e:	e9db 3225 	ldrd	r3, r2, [fp, #148]	; 0x94
 8013962:	f240 823d 	bls.w	8013de0 <MEMS_runMagCal+0x1028>
 8013966:	f1a8 0220 	sub.w	r2, r8, #32
 801396a:	2101      	movs	r1, #1
 801396c:	fa01 f202 	lsl.w	r2, r1, r2
 8013970:	401a      	ands	r2, r3
 8013972:	9804      	ldr	r0, [sp, #16]
 8013974:	281f      	cmp	r0, #31
 8013976:	e9db 3127 	ldrd	r3, r1, [fp, #156]	; 0x9c
 801397a:	f240 821f 	bls.w	8013dbc <MEMS_runMagCal+0x1004>
 801397e:	f1a0 0120 	sub.w	r1, r0, #32
 8013982:	2001      	movs	r0, #1
 8013984:	fa00 f101 	lsl.w	r1, r0, r1
 8013988:	ea01 0c03 	and.w	ip, r1, r3
 801398c:	9906      	ldr	r1, [sp, #24]
 801398e:	291f      	cmp	r1, #31
 8013990:	e9db 0329 	ldrd	r0, r3, [fp, #164]	; 0xa4
 8013994:	f240 821e 	bls.w	8013dd4 <MEMS_runMagCal+0x101c>
 8013998:	f1a1 0020 	sub.w	r0, r1, #32
 801399c:	2101      	movs	r1, #1
 801399e:	fa01 f000 	lsl.w	r0, r1, r0
 80139a2:	4003      	ands	r3, r0
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	f040 812b 	bne.w	8013c00 <MEMS_runMagCal+0xe48>
 80139aa:	ea52 030c 	orrs.w	r3, r2, ip
 80139ae:	f040 812c 	bne.w	8013c0a <MEMS_runMagCal+0xe52>
 80139b2:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 80139b6:	930a      	str	r3, [sp, #40]	; 0x28
 80139b8:	461a      	mov	r2, r3
 80139ba:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 80139be:	3301      	adds	r3, #1
 80139c0:	4694      	mov	ip, r2
 80139c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80139c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80139c6:	fb92 f3fc 	sdiv	r3, r2, ip
 80139ca:	3701      	adds	r7, #1
 80139cc:	4567      	cmp	r7, ip
 80139ce:	bfa8      	it	ge
 80139d0:	4667      	movge	r7, ip
 80139d2:	fb0c 2c13 	mls	ip, ip, r3, r2
 80139d6:	b2ff      	uxtb	r7, r7
 80139d8:	fa4f fc8c 	sxtb.w	ip, ip
 80139dc:	9905      	ldr	r1, [sp, #20]
 80139de:	f88b c08e 	strb.w	ip, [fp, #142]	; 0x8e
 80139e2:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 80139e6:	f88b 708c 	strb.w	r7, [fp, #140]	; 0x8c
 80139ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80139ec:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80139f0:	eb0b 0ccc 	add.w	ip, fp, ip, lsl #3
 80139f4:	1a9b      	subs	r3, r3, r2
 80139f6:	fb01 330a 	mla	r3, r1, sl, r3
 80139fa:	f8ac 30ac 	strh.w	r3, [ip, #172]	; 0xac
 80139fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a00:	f8ac 40ae 	strh.w	r4, [ip, #174]	; 0xae
 8013a04:	429f      	cmp	r7, r3
 8013a06:	f8ac 50b0 	strh.w	r5, [ip, #176]	; 0xb0
 8013a0a:	f8ac 60b2 	strh.w	r6, [ip, #178]	; 0xb2
 8013a0e:	f8ab 43a4 	strh.w	r4, [fp, #932]	; 0x3a4
 8013a12:	f8ab 53a6 	strh.w	r5, [fp, #934]	; 0x3a6
 8013a16:	f8ab 63a8 	strh.w	r6, [fp, #936]	; 0x3a8
 8013a1a:	f000 8758 	beq.w	80148ce <MEMS_runMagCal+0x1b16>
 8013a1e:	9b06      	ldr	r3, [sp, #24]
 8013a20:	9a04      	ldr	r2, [sp, #16]
 8013a22:	ee1c 0a10 	vmov	r0, s24
 8013a26:	4641      	mov	r1, r8
 8013a28:	f7f8 f874 	bl	800bb14 <MEMS_setMagIndexToOne>
 8013a2c:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8013a30:	9302      	str	r3, [sp, #8]
 8013a32:	2301      	movs	r3, #1
 8013a34:	9309      	str	r3, [sp, #36]	; 0x24
 8013a36:	9b02      	ldr	r3, [sp, #8]
 8013a38:	f10a 0a01 	add.w	sl, sl, #1
 8013a3c:	fa0f fa8a 	sxth.w	sl, sl
 8013a40:	459a      	cmp	sl, r3
 8013a42:	4651      	mov	r1, sl
 8013a44:	f6ff af0d 	blt.w	8013862 <MEMS_runMagCal+0xaaa>
 8013a48:	f89b 3000 	ldrb.w	r3, [fp]
 8013a4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013a4e:	431a      	orrs	r2, r3
 8013a50:	b2d3      	uxtb	r3, r2
 8013a52:	f88b 3000 	strb.w	r3, [fp]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	f43f ade9 	beq.w	801362e <MEMS_runMagCal+0x876>
 8013a5c:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8013a60:	9306      	str	r3, [sp, #24]
 8013a62:	2b19      	cmp	r3, #25
 8013a64:	f67f ade3 	bls.w	801362e <MEMS_runMagCal+0x876>
 8013a68:	f8db 3008 	ldr.w	r3, [fp, #8]
 8013a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8013a6e:	b123      	cbz	r3, 8013a7a <MEMS_runMagCal+0xcc2>
 8013a70:	f8db 3004 	ldr.w	r3, [fp, #4]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	f040 8583 	bne.w	8014580 <MEMS_runMagCal+0x17c8>
 8013a7a:	9b07      	ldr	r3, [sp, #28]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	f040 872f 	bne.w	80148e0 <MEMS_runMagCal+0x1b28>
 8013a82:	9b05      	ldr	r3, [sp, #20]
 8013a84:	9903      	ldr	r1, [sp, #12]
 8013a86:	ed93 8a01 	vldr	s16, [r3, #4]
 8013a8a:	f8db 30a8 	ldr.w	r3, [fp, #168]	; 0xa8
 8013a8e:	9302      	str	r3, [sp, #8]
 8013a90:	2600      	movs	r6, #0
 8013a92:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
 8013a96:	9304      	str	r3, [sp, #16]
 8013a98:	f04f 0a01 	mov.w	sl, #1
 8013a9c:	e9db 8e25 	ldrd	r8, lr, [fp, #148]	; 0x94
 8013aa0:	e9cd 6620 	strd	r6, r6, [sp, #128]	; 0x80
 8013aa4:	e9cd 6622 	strd	r6, r6, [sp, #136]	; 0x88
 8013aa8:	9624      	str	r6, [sp, #144]	; 0x90
 8013aaa:	4657      	mov	r7, sl
 8013aac:	460b      	mov	r3, r1
 8013aae:	460c      	mov	r4, r1
 8013ab0:	e013      	b.n	8013ada <MEMS_runMagCal+0xd22>
 8013ab2:	f1b9 0f00 	cmp.w	r9, #0
 8013ab6:	bf18      	it	ne
 8013ab8:	3101      	addne	r1, #1
 8013aba:	2d00      	cmp	r5, #0
 8013abc:	bf18      	it	ne
 8013abe:	3401      	addne	r4, #1
 8013ac0:	2a00      	cmp	r2, #0
 8013ac2:	bf18      	it	ne
 8013ac4:	3301      	addne	r3, #1
 8013ac6:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8013aca:	b2c9      	uxtb	r1, r1
 8013acc:	b2e4      	uxtb	r4, r4
 8013ace:	b2db      	uxtb	r3, r3
 8013ad0:	f000 81a2 	beq.w	8013e18 <MEMS_runMagCal+0x1060>
 8013ad4:	3601      	adds	r6, #1
 8013ad6:	fa5f fa8c 	uxtb.w	sl, ip
 8013ada:	9804      	ldr	r0, [sp, #16]
 8013adc:	f1a6 0220 	sub.w	r2, r6, #32
 8013ae0:	fa07 f202 	lsl.w	r2, r7, r2
 8013ae4:	ea02 0500 	and.w	r5, r2, r0
 8013ae8:	9802      	ldr	r0, [sp, #8]
 8013aea:	2e1f      	cmp	r6, #31
 8013aec:	ea08 0902 	and.w	r9, r8, r2
 8013af0:	f10a 0c01 	add.w	ip, sl, #1
 8013af4:	ea02 0200 	and.w	r2, r2, r0
 8013af8:	fa07 f006 	lsl.w	r0, r7, r6
 8013afc:	d8d9      	bhi.n	8013ab2 <MEMS_runMagCal+0xcfa>
 8013afe:	e9db 2528 	ldrd	r2, r5, [fp, #160]	; 0xa0
 8013b02:	ea00 0902 	and.w	r9, r0, r2
 8013b06:	4005      	ands	r5, r0
 8013b08:	ea0e 0000 	and.w	r0, lr, r0
 8013b0c:	f1b9 0f00 	cmp.w	r9, #0
 8013b10:	bf18      	it	ne
 8013b12:	3401      	addne	r4, #1
 8013b14:	2d00      	cmp	r5, #0
 8013b16:	bf0c      	ite	eq
 8013b18:	461d      	moveq	r5, r3
 8013b1a:	1c5d      	addne	r5, r3, #1
 8013b1c:	2800      	cmp	r0, #0
 8013b1e:	bf18      	it	ne
 8013b20:	3101      	addne	r1, #1
 8013b22:	b2e4      	uxtb	r4, r4
 8013b24:	b2eb      	uxtb	r3, r5
 8013b26:	b2c9      	uxtb	r1, r1
 8013b28:	e7d4      	b.n	8013ad4 <MEMS_runMagCal+0xd1c>
 8013b2a:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8013b2e:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 8013e04 <MEMS_runMagCal+0x104c>
 8013b32:	2b01      	cmp	r3, #1
 8013b34:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 8013b38:	f63f ada9 	bhi.w	801368e <MEMS_runMagCal+0x8d6>
 8013b3c:	2f00      	cmp	r7, #0
 8013b3e:	f43f adb3 	beq.w	80136a8 <MEMS_runMagCal+0x8f0>
 8013b42:	9908      	ldr	r1, [sp, #32]
 8013b44:	f8cb 100c 	str.w	r1, [fp, #12]
 8013b48:	2200      	movs	r2, #0
 8013b4a:	23ff      	movs	r3, #255	; 0xff
 8013b4c:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 8013b50:	f88b 308e 	strb.w	r3, [fp, #142]	; 0x8e
 8013b54:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 8013b58:	ecbd 8b0a 	vpop	{d8-d12}
 8013b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b60:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 8013b64:	4634      	mov	r4, r6
 8013b66:	2800      	cmp	r0, #0
 8013b68:	f47f ae4a 	bne.w	8013800 <MEMS_runMagCal+0xa48>
 8013b6c:	9b07      	ldr	r3, [sp, #28]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	f47f ae5b 	bne.w	801382a <MEMS_runMagCal+0xa72>
 8013b74:	9b03      	ldr	r3, [sp, #12]
 8013b76:	9309      	str	r3, [sp, #36]	; 0x24
 8013b78:	e766      	b.n	8013a48 <MEMS_runMagCal+0xc90>
 8013b7a:	45b0      	cmp	r8, r6
 8013b7c:	f000 86b9 	beq.w	80148f2 <MEMS_runMagCal+0x1b3a>
 8013b80:	2f03      	cmp	r7, #3
 8013b82:	f47f adc8 	bne.w	8013716 <MEMS_runMagCal+0x95e>
 8013b86:	ee07 2a90 	vmov	s15, r2
 8013b8a:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8013e08 <MEMS_runMagCal+0x1050>
 8013b8e:	ed9b 7a01 	vldr	s14, [fp, #4]
 8013b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b96:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013b9a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013b9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ba6:	f77f adb6 	ble.w	8013716 <MEMS_runMagCal+0x95e>
 8013baa:	f8db 3008 	ldr.w	r3, [fp, #8]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	f43f adb1 	beq.w	8013716 <MEMS_runMagCal+0x95e>
 8013bb4:	eddd 7a08 	vldr	s15, [sp, #32]
 8013bb8:	330a      	adds	r3, #10
 8013bba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013bbe:	ee07 3a90 	vmov	s15, r3
 8013bc2:	ee67 6a26 	vmul.f32	s13, s14, s13
 8013bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013bca:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bd2:	f77f ada0 	ble.w	8013716 <MEMS_runMagCal+0x95e>
 8013bd6:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	f47f ad9b 	bne.w	8013716 <MEMS_runMagCal+0x95e>
 8013be0:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	f43f ad22 	beq.w	801362e <MEMS_runMagCal+0x876>
 8013bea:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8013bee:	2bff      	cmp	r3, #255	; 0xff
 8013bf0:	f47f ad1d 	bne.w	801362e <MEMS_runMagCal+0x876>
 8013bf4:	e58f      	b.n	8013716 <MEMS_runMagCal+0x95e>
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	9307      	str	r3, [sp, #28]
 8013bfa:	9303      	str	r3, [sp, #12]
 8013bfc:	2700      	movs	r7, #0
 8013bfe:	e52c      	b.n	801365a <MEMS_runMagCal+0x8a2>
 8013c00:	b11a      	cbz	r2, 8013c0a <MEMS_runMagCal+0xe52>
 8013c02:	f1bc 0f00 	cmp.w	ip, #0
 8013c06:	f47f af16 	bne.w	8013a36 <MEMS_runMagCal+0xc7e>
 8013c0a:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 8013c0e:	930a      	str	r3, [sp, #40]	; 0x28
 8013c10:	461a      	mov	r2, r3
 8013c12:	4297      	cmp	r7, r2
 8013c14:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8013c18:	f000 848f 	beq.w	801453a <MEMS_runMagCal+0x1782>
 8013c1c:	3301      	adds	r3, #1
 8013c1e:	4611      	mov	r1, r2
 8013c20:	930b      	str	r3, [sp, #44]	; 0x2c
 8013c22:	1bdb      	subs	r3, r3, r7
 8013c24:	fb93 f2f2 	sdiv	r2, r3, r2
 8013c28:	fb01 3212 	mls	r2, r1, r2, r3
 8013c2c:	2a00      	cmp	r2, #0
 8013c2e:	bfbc      	itt	lt
 8013c30:	460b      	movlt	r3, r1
 8013c32:	18d2      	addlt	r2, r2, r3
 8013c34:	468c      	mov	ip, r1
 8013c36:	b212      	sxth	r2, r2
 8013c38:	f107 3eff 	add.w	lr, r7, #4294967295
 8013c3c:	fa5f fe8e 	uxtb.w	lr, lr
 8013c40:	f10e 0e01 	add.w	lr, lr, #1
 8013c44:	4496      	add	lr, r2
 8013c46:	e002      	b.n	8013c4e <MEMS_runMagCal+0xe96>
 8013c48:	4572      	cmp	r2, lr
 8013c4a:	f43f aebb 	beq.w	80139c4 <MEMS_runMagCal+0xc0c>
 8013c4e:	fb92 f3fc 	sdiv	r3, r2, ip
 8013c52:	fb0c 2313 	mls	r3, ip, r3, r2
 8013c56:	b2db      	uxtb	r3, r3
 8013c58:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013c5c:	3201      	adds	r2, #1
 8013c5e:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 8013c62:	f9b3 10b0 	ldrsh.w	r1, [r3, #176]	; 0xb0
 8013c66:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8013c6a:	1a20      	subs	r0, r4, r0
 8013c6c:	1a69      	subs	r1, r5, r1
 8013c6e:	ee07 0a90 	vmov	s15, r0
 8013c72:	ee06 1a90 	vmov	s13, r1
 8013c76:	1af3      	subs	r3, r6, r3
 8013c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c7c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013c80:	ee07 3a10 	vmov	s14, r3
 8013c84:	eef0 7ae7 	vabs.f32	s15, s15
 8013c88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013c8c:	eef0 6ae6 	vabs.f32	s13, s13
 8013c90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c94:	eeb0 7ac7 	vabs.f32	s14, s14
 8013c98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013c9c:	eef4 9ae7 	vcmpe.f32	s19, s15
 8013ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ca4:	ddd0      	ble.n	8013c48 <MEMS_runMagCal+0xe90>
 8013ca6:	e6c6      	b.n	8013a36 <MEMS_runMagCal+0xc7e>
 8013ca8:	ee07 5a90 	vmov	s15, r5
 8013cac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013cb0:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8013cb4:	eef0 7ae7 	vabs.f32	s15, s15
 8013cb8:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cc0:	f77f ade9 	ble.w	8013896 <MEMS_runMagCal+0xade>
 8013cc4:	ee07 6a90 	vmov	s15, r6
 8013cc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ccc:	eef0 7ae7 	vabs.f32	s15, s15
 8013cd0:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cd8:	f73f aead 	bgt.w	8013a36 <MEMS_runMagCal+0xc7e>
 8013cdc:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 8013ce0:	2f00      	cmp	r7, #0
 8013ce2:	f47f addd 	bne.w	80138a0 <MEMS_runMagCal+0xae8>
 8013ce6:	fb94 f2f9 	sdiv	r2, r4, r9
 8013cea:	f04f 0301 	mov.w	r3, #1
 8013cee:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 8013cf2:	9b05      	ldr	r3, [sp, #20]
 8013cf4:	f88b 708e 	strb.w	r7, [fp, #142]	; 0x8e
 8013cf8:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 8013cfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013cfe:	f8ab 40ae 	strh.w	r4, [fp, #174]	; 0xae
 8013d02:	fb09 4212 	mls	r2, r9, r2, r4
 8013d06:	2a00      	cmp	r2, #0
 8013d08:	fb01 3300 	mla	r3, r1, r0, r3
 8013d0c:	bfb8      	it	lt
 8013d0e:	444a      	addlt	r2, r9
 8013d10:	f8cb 3090 	str.w	r3, [fp, #144]	; 0x90
 8013d14:	b213      	sxth	r3, r2
 8013d16:	ee00 3a10 	vmov	s0, r3
 8013d1a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013d1e:	f8ab 43a4 	strh.w	r4, [fp, #932]	; 0x3a4
 8013d22:	f8ab 50b0 	strh.w	r5, [fp, #176]	; 0xb0
 8013d26:	f8ab 53a6 	strh.w	r5, [fp, #934]	; 0x3a6
 8013d2a:	f8ab 60b2 	strh.w	r6, [fp, #178]	; 0xb2
 8013d2e:	f8ab 63a8 	strh.w	r6, [fp, #936]	; 0x3a8
 8013d32:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013d36:	f8ab 70ac 	strh.w	r7, [fp, #172]	; 0xac
 8013d3a:	f001 ffb1 	bl	8015ca0 <roundf>
 8013d3e:	fb95 f3f9 	sdiv	r3, r5, r9
 8013d42:	fb09 5513 	mls	r5, r9, r3, r5
 8013d46:	2d00      	cmp	r5, #0
 8013d48:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013d4c:	bfb8      	it	lt
 8013d4e:	444d      	addlt	r5, r9
 8013d50:	b22d      	sxth	r5, r5
 8013d52:	edcd 7a02 	vstr	s15, [sp, #8]
 8013d56:	ee07 5a90 	vmov	s15, r5
 8013d5a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013d5e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8013d62:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013d66:	f001 ff9b 	bl	8015ca0 <roundf>
 8013d6a:	fb96 f3f9 	sdiv	r3, r6, r9
 8013d6e:	fb09 6613 	mls	r6, r9, r3, r6
 8013d72:	2e00      	cmp	r6, #0
 8013d74:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013d78:	bfb8      	it	lt
 8013d7a:	444e      	addlt	r6, r9
 8013d7c:	b236      	sxth	r6, r6
 8013d7e:	edcd 7a02 	vstr	s15, [sp, #8]
 8013d82:	ee07 6a90 	vmov	s15, r6
 8013d86:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013d8a:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8013d8e:	9204      	str	r2, [sp, #16]
 8013d90:	2301      	movs	r3, #1
 8013d92:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013d96:	9309      	str	r3, [sp, #36]	; 0x24
 8013d98:	f001 ff82 	bl	8015ca0 <roundf>
 8013d9c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013da0:	9a04      	ldr	r2, [sp, #16]
 8013da2:	edcd 7a02 	vstr	s15, [sp, #8]
 8013da6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013daa:	ee1c 0a10 	vmov	r0, s24
 8013dae:	4621      	mov	r1, r4
 8013db0:	f7f7 feb0 	bl	800bb14 <MEMS_setMagIndexToOne>
 8013db4:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8013db8:	9302      	str	r3, [sp, #8]
 8013dba:	e63c      	b.n	8013a36 <MEMS_runMagCal+0xc7e>
 8013dbc:	4603      	mov	r3, r0
 8013dbe:	2001      	movs	r0, #1
 8013dc0:	fa00 f303 	lsl.w	r3, r0, r3
 8013dc4:	ea01 0c03 	and.w	ip, r1, r3
 8013dc8:	9906      	ldr	r1, [sp, #24]
 8013dca:	291f      	cmp	r1, #31
 8013dcc:	e9db 0329 	ldrd	r0, r3, [fp, #164]	; 0xa4
 8013dd0:	f63f ade2 	bhi.w	8013998 <MEMS_runMagCal+0xbe0>
 8013dd4:	460b      	mov	r3, r1
 8013dd6:	2101      	movs	r1, #1
 8013dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8013ddc:	4003      	ands	r3, r0
 8013dde:	e5e1      	b.n	80139a4 <MEMS_runMagCal+0xbec>
 8013de0:	2301      	movs	r3, #1
 8013de2:	fa03 f308 	lsl.w	r3, r3, r8
 8013de6:	401a      	ands	r2, r3
 8013de8:	e5c3      	b.n	8013972 <MEMS_runMagCal+0xbba>
 8013dea:	2701      	movs	r7, #1
 8013dec:	e4df      	b.n	80137ae <MEMS_runMagCal+0x9f6>
 8013dee:	2500      	movs	r5, #0
 8013df0:	f89b 6011 	ldrb.w	r6, [fp, #17]
 8013df4:	462b      	mov	r3, r5
 8013df6:	e465      	b.n	80136c4 <MEMS_runMagCal+0x90c>
 8013df8:	460f      	mov	r7, r1
 8013dfa:	e42b      	b.n	8013654 <MEMS_runMagCal+0x89c>
 8013dfc:	2300      	movs	r3, #0
 8013dfe:	9304      	str	r3, [sp, #16]
 8013e00:	f7ff b941 	b.w	8013086 <MEMS_runMagCal+0x2ce>
 8013e04:	477fff00 	.word	0x477fff00
 8013e08:	3a83126f 	.word	0x3a83126f
 8013e0c:	42340000 	.word	0x42340000
 8013e10:	3faccccd 	.word	0x3faccccd
 8013e14:	00000000 	.word	0x00000000
 8013e18:	2905      	cmp	r1, #5
 8013e1a:	f240 8383 	bls.w	8014524 <MEMS_runMagCal+0x176c>
 8013e1e:	2c05      	cmp	r4, #5
 8013e20:	f240 8380 	bls.w	8014524 <MEMS_runMagCal+0x176c>
 8013e24:	2b05      	cmp	r3, #5
 8013e26:	f240 837d 	bls.w	8014524 <MEMS_runMagCal+0x176c>
 8013e2a:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8013e2e:	f89b a08d 	ldrb.w	sl, [fp, #141]	; 0x8d
 8013e32:	9302      	str	r3, [sp, #8]
 8013e34:	9b06      	ldr	r3, [sp, #24]
 8013e36:	4553      	cmp	r3, sl
 8013e38:	f000 85f1 	beq.w	8014a1e <MEMS_runMagCal+0x1c66>
 8013e3c:	461a      	mov	r2, r3
 8013e3e:	9b02      	ldr	r3, [sp, #8]
 8013e40:	3301      	adds	r3, #1
 8013e42:	9304      	str	r3, [sp, #16]
 8013e44:	1a9b      	subs	r3, r3, r2
 8013e46:	fb93 f2fa 	sdiv	r2, r3, sl
 8013e4a:	fb0a 3212 	mls	r2, sl, r2, r3
 8013e4e:	2a00      	cmp	r2, #0
 8013e50:	bfb8      	it	lt
 8013e52:	4452      	addlt	r2, sl
 8013e54:	46d1      	mov	r9, sl
 8013e56:	b212      	sxth	r2, r2
 8013e58:	9906      	ldr	r1, [sp, #24]
 8013e5a:	eb0b 03c2 	add.w	r3, fp, r2, lsl #3
 8013e5e:	f101 38ff 	add.w	r8, r1, #4294967295
 8013e62:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 8013e66:	f9b3 10ae 	ldrsh.w	r1, [r3, #174]	; 0xae
 8013e6a:	f9b3 70b2 	ldrsh.w	r7, [r3, #178]	; 0xb2
 8013e6e:	fa5f f888 	uxtb.w	r8, r8
 8013e72:	f108 0801 	add.w	r8, r8, #1
 8013e76:	468e      	mov	lr, r1
 8013e78:	463e      	mov	r6, r7
 8013e7a:	46ac      	mov	ip, r5
 8013e7c:	4490      	add	r8, r2
 8013e7e:	fb92 f3f9 	sdiv	r3, r2, r9
 8013e82:	fb09 2313 	mls	r3, r9, r3, r2
 8013e86:	b2db      	uxtb	r3, r3
 8013e88:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013e8c:	3201      	adds	r2, #1
 8013e8e:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 8013e92:	f9b3 00b0 	ldrsh.w	r0, [r3, #176]	; 0xb0
 8013e96:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8013e9a:	42a1      	cmp	r1, r4
 8013e9c:	bfb8      	it	lt
 8013e9e:	4621      	movlt	r1, r4
 8013ea0:	45a6      	cmp	lr, r4
 8013ea2:	bfa8      	it	ge
 8013ea4:	46a6      	movge	lr, r4
 8013ea6:	4285      	cmp	r5, r0
 8013ea8:	bfb8      	it	lt
 8013eaa:	4605      	movlt	r5, r0
 8013eac:	4584      	cmp	ip, r0
 8013eae:	bfa8      	it	ge
 8013eb0:	4684      	movge	ip, r0
 8013eb2:	429f      	cmp	r7, r3
 8013eb4:	bfb8      	it	lt
 8013eb6:	461f      	movlt	r7, r3
 8013eb8:	429e      	cmp	r6, r3
 8013eba:	bfa8      	it	ge
 8013ebc:	461e      	movge	r6, r3
 8013ebe:	4542      	cmp	r2, r8
 8013ec0:	d1dd      	bne.n	8013e7e <MEMS_runMagCal+0x10c6>
 8013ec2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013ec6:	eec7 8a88 	vdiv.f32	s17, s15, s16
 8013eca:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8013ece:	eba1 010e 	sub.w	r1, r1, lr
 8013ed2:	eba5 050c 	sub.w	r5, r5, ip
 8013ed6:	1bbe      	subs	r6, r7, r6
 8013ed8:	b209      	sxth	r1, r1
 8013eda:	b22d      	sxth	r5, r5
 8013edc:	b236      	sxth	r6, r6
 8013ede:	ed1f 7a35 	vldr	s14, [pc, #-212]	; 8013e0c <MEMS_runMagCal+0x1054>
 8013ee2:	ee28 7a87 	vmul.f32	s14, s17, s14
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	f040 8593 	bne.w	8014a12 <MEMS_runMagCal+0x1c5a>
 8013eec:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8013ef0:	fab3 f883 	clz	r8, r3
 8013ef4:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8013ef8:	ee06 1a90 	vmov	s13, r1
 8013efc:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8013f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f04:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013f08:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f10:	f300 8562 	bgt.w	80149d8 <MEMS_runMagCal+0x1c20>
 8013f14:	ee06 5a10 	vmov	s12, r5
 8013f18:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8013f1c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8013f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f24:	f100 8558 	bmi.w	80149d8 <MEMS_runMagCal+0x1c20>
 8013f28:	ee05 6a90 	vmov	s11, r6
 8013f2c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8013f30:	eef4 7ae5 	vcmpe.f32	s15, s11
 8013f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f38:	f100 854e 	bmi.w	80149d8 <MEMS_runMagCal+0x1c20>
 8013f3c:	428d      	cmp	r5, r1
 8013f3e:	462b      	mov	r3, r5
 8013f40:	bfb8      	it	lt
 8013f42:	460b      	movlt	r3, r1
 8013f44:	42b3      	cmp	r3, r6
 8013f46:	461a      	mov	r2, r3
 8013f48:	bfb8      	it	lt
 8013f4a:	4632      	movlt	r2, r6
 8013f4c:	428e      	cmp	r6, r1
 8013f4e:	4633      	mov	r3, r6
 8013f50:	bfa8      	it	ge
 8013f52:	460b      	movge	r3, r1
 8013f54:	42ab      	cmp	r3, r5
 8013f56:	bfa8      	it	ge
 8013f58:	462b      	movge	r3, r5
 8013f5a:	428a      	cmp	r2, r1
 8013f5c:	9202      	str	r2, [sp, #8]
 8013f5e:	f340 8588 	ble.w	8014a72 <MEMS_runMagCal+0x1cba>
 8013f62:	4299      	cmp	r1, r3
 8013f64:	bfb8      	it	lt
 8013f66:	4619      	movlt	r1, r3
 8013f68:	42aa      	cmp	r2, r5
 8013f6a:	dd02      	ble.n	8013f72 <MEMS_runMagCal+0x11ba>
 8013f6c:	42ab      	cmp	r3, r5
 8013f6e:	bfb8      	it	lt
 8013f70:	4629      	movlt	r1, r5
 8013f72:	9a02      	ldr	r2, [sp, #8]
 8013f74:	4296      	cmp	r6, r2
 8013f76:	da02      	bge.n	8013f7e <MEMS_runMagCal+0x11c6>
 8013f78:	429e      	cmp	r6, r3
 8013f7a:	bfc8      	it	gt
 8013f7c:	4631      	movgt	r1, r6
 8013f7e:	f1b8 0f00 	cmp.w	r8, #0
 8013f82:	f000 8299 	beq.w	80144b8 <MEMS_runMagCal+0x1700>
 8013f86:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f8e:	dc0d      	bgt.n	8013fac <MEMS_runMagCal+0x11f4>
 8013f90:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8013f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f98:	dc08      	bgt.n	8013fac <MEMS_runMagCal+0x11f4>
 8013f9a:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8013f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fa2:	bfcc      	ite	gt
 8013fa4:	f04f 0801 	movgt.w	r8, #1
 8013fa8:	f04f 0800 	movle.w	r8, #0
 8013fac:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 8013e10 <MEMS_runMagCal+0x1058>
 8013fb0:	ed9d 5a02 	vldr	s10, [sp, #8]
 8013fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013fb8:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8013fbc:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8013fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fc4:	f2c0 8558 	blt.w	8014a78 <MEMS_runMagCal+0x1cc0>
 8013fc8:	ee07 1a90 	vmov	s15, r1
 8013fcc:	eeb7 5a02 	vmov.f32	s10, #114	; 0x3f900000  1.125
 8013fd0:	ee27 5a05 	vmul.f32	s10, s14, s10
 8013fd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013fd8:	eef4 7ac5 	vcmpe.f32	s15, s10
 8013fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fe0:	f2c0 854a 	blt.w	8014a78 <MEMS_runMagCal+0x1cc0>
 8013fe4:	9a02      	ldr	r2, [sp, #8]
 8013fe6:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8013fea:	f280 8545 	bge.w	8014a78 <MEMS_runMagCal+0x1cc0>
 8013fee:	ee07 3a90 	vmov	s15, r3
 8013ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ff6:	eeb7 5a04 	vmov.f32	s10, #116	; 0x3fa00000  1.250
 8013ffa:	ee67 7a85 	vmul.f32	s15, s15, s10
 8013ffe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014006:	f140 8537 	bpl.w	8014a78 <MEMS_runMagCal+0x1cc0>
 801400a:	9b06      	ldr	r3, [sp, #24]
 801400c:	4553      	cmp	r3, sl
 801400e:	f000 8569 	beq.w	8014ae4 <MEMS_runMagCal+0x1d2c>
 8014012:	461a      	mov	r2, r3
 8014014:	9b04      	ldr	r3, [sp, #16]
 8014016:	1a9b      	subs	r3, r3, r2
 8014018:	fb93 f7f9 	sdiv	r7, r3, r9
 801401c:	fb09 3717 	mls	r7, r9, r7, r3
 8014020:	2f00      	cmp	r7, #0
 8014022:	bfb8      	it	lt
 8014024:	4457      	addlt	r7, sl
 8014026:	b23f      	sxth	r7, r7
 8014028:	9b03      	ldr	r3, [sp, #12]
 801402a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 801402e:	b27f      	sxtb	r7, r7
 8014030:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8014034:	9304      	str	r3, [sp, #16]
 8014036:	f1c7 0e01 	rsb	lr, r7, #1
 801403a:	469c      	mov	ip, r3
 801403c:	463b      	mov	r3, r7
 801403e:	fb93 f1f9 	sdiv	r1, r3, r9
 8014042:	fb09 3111 	mls	r1, r9, r1, r3
 8014046:	b24a      	sxtb	r2, r1
 8014048:	2a00      	cmp	r2, #0
 801404a:	f107 0701 	add.w	r7, r7, #1
 801404e:	bfb8      	it	lt
 8014050:	eb0a 0201 	addlt.w	r2, sl, r1
 8014054:	fb97 f3f9 	sdiv	r3, r7, r9
 8014058:	fb09 7313 	mls	r3, r9, r3, r7
 801405c:	bfb8      	it	lt
 801405e:	b252      	sxtblt	r2, r2
 8014060:	b25b      	sxtb	r3, r3
 8014062:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8014066:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 801406a:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 801406e:	f9b2 10ae 	ldrsh.w	r1, [r2, #174]	; 0xae
 8014072:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 8014076:	1a45      	subs	r5, r0, r1
 8014078:	bf48      	it	mi
 801407a:	1a09      	submi	r1, r1, r0
 801407c:	f9b2 00b0 	ldrsh.w	r0, [r2, #176]	; 0xb0
 8014080:	bf4c      	ite	mi
 8014082:	b20d      	sxthmi	r5, r1
 8014084:	b22d      	sxthpl	r5, r5
 8014086:	1a21      	subs	r1, r4, r0
 8014088:	bf48      	it	mi
 801408a:	1b01      	submi	r1, r0, r4
 801408c:	f9b3 40b2 	ldrsh.w	r4, [r3, #178]	; 0xb2
 8014090:	f9b2 00b2 	ldrsh.w	r0, [r2, #178]	; 0xb2
 8014094:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8014098:	f8b2 20ac 	ldrh.w	r2, [r2, #172]	; 0xac
 801409c:	1a9b      	subs	r3, r3, r2
 801409e:	1a26      	subs	r6, r4, r0
 80140a0:	b21b      	sxth	r3, r3
 80140a2:	bf48      	it	mi
 80140a4:	1b06      	submi	r6, r0, r4
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	b209      	sxth	r1, r1
 80140aa:	b236      	sxth	r6, r6
 80140ac:	dd20      	ble.n	80140f0 <MEMS_runMagCal+0x1338>
 80140ae:	4429      	add	r1, r5
 80140b0:	440e      	add	r6, r1
 80140b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80140b6:	fb02 f606 	mul.w	r6, r2, r6
 80140ba:	ee07 6a90 	vmov	s15, r6
 80140be:	ee07 3a10 	vmov	s14, r3
 80140c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80140c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80140ca:	ee67 7a88 	vmul.f32	s15, s15, s16
 80140ce:	f10c 0c01 	add.w	ip, ip, #1
 80140d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80140d6:	fa5f fc8c 	uxtb.w	ip, ip
 80140da:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80140de:	ee17 3a90 	vmov	r3, s15
 80140e2:	b21b      	sxth	r3, r3
 80140e4:	2b96      	cmp	r3, #150	; 0x96
 80140e6:	dd03      	ble.n	80140f0 <MEMS_runMagCal+0x1338>
 80140e8:	9b04      	ldr	r3, [sp, #16]
 80140ea:	3301      	adds	r3, #1
 80140ec:	b2db      	uxtb	r3, r3
 80140ee:	9304      	str	r3, [sp, #16]
 80140f0:	eb0e 0307 	add.w	r3, lr, r7
 80140f4:	b2db      	uxtb	r3, r3
 80140f6:	4598      	cmp	r8, r3
 80140f8:	d8a0      	bhi.n	801403c <MEMS_runMagCal+0x1284>
 80140fa:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80140fe:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8014102:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014106:	4563      	cmp	r3, ip
 8014108:	f340 820c 	ble.w	8014524 <MEMS_runMagCal+0x176c>
 801410c:	9b07      	ldr	r3, [sp, #28]
 801410e:	b92b      	cbnz	r3, 801411c <MEMS_runMagCal+0x1364>
 8014110:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8014114:	3b02      	subs	r3, #2
 8014116:	2b01      	cmp	r3, #1
 8014118:	f240 851e 	bls.w	8014b58 <MEMS_runMagCal+0x1da0>
 801411c:	ac25      	add	r4, sp, #148	; 0x94
 801411e:	2220      	movs	r2, #32
 8014120:	4620      	mov	r0, r4
 8014122:	2100      	movs	r1, #0
 8014124:	f003 fbe6 	bl	80178f4 <memset>
 8014128:	f89b 608c 	ldrb.w	r6, [fp, #140]	; 0x8c
 801412c:	f89b 008d 	ldrb.w	r0, [fp, #141]	; 0x8d
 8014130:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8014134:	2200      	movs	r2, #0
 8014136:	4286      	cmp	r6, r0
 8014138:	e9cd 221d 	strd	r2, r2, [sp, #116]	; 0x74
 801413c:	921f      	str	r2, [sp, #124]	; 0x7c
 801413e:	f103 0301 	add.w	r3, r3, #1
 8014142:	f000 8501 	beq.w	8014b48 <MEMS_runMagCal+0x1d90>
 8014146:	1b9b      	subs	r3, r3, r6
 8014148:	fb93 f2f0 	sdiv	r2, r3, r0
 801414c:	fb00 3312 	mls	r3, r0, r2, r3
 8014150:	2b00      	cmp	r3, #0
 8014152:	bfb8      	it	lt
 8014154:	181b      	addlt	r3, r3, r0
 8014156:	b21a      	sxth	r2, r3
 8014158:	2e00      	cmp	r6, #0
 801415a:	f000 854c 	beq.w	8014bf6 <MEMS_runMagCal+0x1e3e>
 801415e:	1e77      	subs	r7, r6, #1
 8014160:	ed5f 5ad4 	vldr	s11, [pc, #-848]	; 8013e14 <MEMS_runMagCal+0x105c>
 8014164:	b2fd      	uxtb	r5, r7
 8014166:	3501      	adds	r5, #1
 8014168:	eeb0 5a65 	vmov.f32	s10, s11
 801416c:	eef0 4a65 	vmov.f32	s9, s11
 8014170:	4415      	add	r5, r2
 8014172:	4611      	mov	r1, r2
 8014174:	fb91 f3f0 	sdiv	r3, r1, r0
 8014178:	fb00 1313 	mls	r3, r0, r3, r1
 801417c:	b2db      	uxtb	r3, r3
 801417e:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8014182:	3101      	adds	r1, #1
 8014184:	f9b3 c0ae 	ldrsh.w	ip, [r3, #174]	; 0xae
 8014188:	ee06 ca90 	vmov	s13, ip
 801418c:	f9b3 c0b0 	ldrsh.w	ip, [r3, #176]	; 0xb0
 8014190:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8014194:	ee07 ca10 	vmov	s14, ip
 8014198:	ee07 3a90 	vmov	s15, r3
 801419c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80141a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80141a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80141a8:	42a9      	cmp	r1, r5
 80141aa:	ee74 4aa6 	vadd.f32	s9, s9, s13
 80141ae:	ee35 5a07 	vadd.f32	s10, s10, s14
 80141b2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80141b6:	d1dd      	bne.n	8014174 <MEMS_runMagCal+0x13bc>
 80141b8:	ee07 6a90 	vmov	s15, r6
 80141bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80141c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80141c4:	eec7 9a27 	vdiv.f32	s19, s14, s15
 80141c8:	b2f9      	uxtb	r1, r7
 80141ca:	3101      	adds	r1, #1
 80141cc:	4411      	add	r1, r2
 80141ce:	ed9f 6aeb 	vldr	s12, [pc, #940]	; 801457c <MEMS_runMagCal+0x17c4>
 80141d2:	edcd 4a1d 	vstr	s9, [sp, #116]	; 0x74
 80141d6:	ee29 9aa4 	vmul.f32	s18, s19, s9
 80141da:	ee29 aa85 	vmul.f32	s20, s19, s10
 80141de:	ee69 9aa5 	vmul.f32	s19, s19, s11
 80141e2:	eef0 4a46 	vmov.f32	s9, s12
 80141e6:	eeb0 4a46 	vmov.f32	s8, s12
 80141ea:	eef0 3a46 	vmov.f32	s7, s12
 80141ee:	eeb0 3a46 	vmov.f32	s6, s12
 80141f2:	eef0 2a46 	vmov.f32	s5, s12
 80141f6:	ed8d 5a1e 	vstr	s10, [sp, #120]	; 0x78
 80141fa:	edcd 5a1f 	vstr	s11, [sp, #124]	; 0x7c
 80141fe:	fb92 f3f0 	sdiv	r3, r2, r0
 8014202:	fb00 2313 	mls	r3, r0, r3, r2
 8014206:	b2db      	uxtb	r3, r3
 8014208:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801420c:	3201      	adds	r2, #1
 801420e:	f9b3 50ae 	ldrsh.w	r5, [r3, #174]	; 0xae
 8014212:	ee06 5a90 	vmov	s13, r5
 8014216:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 801421a:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 801421e:	ee07 5a10 	vmov	s14, r5
 8014222:	ee07 3a90 	vmov	s15, r3
 8014226:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801422a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801422e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014232:	ee76 6ac9 	vsub.f32	s13, s13, s18
 8014236:	ee37 7a4a 	vsub.f32	s14, s14, s20
 801423a:	ee77 7ae9 	vsub.f32	s15, s15, s19
 801423e:	4291      	cmp	r1, r2
 8014240:	eee6 2aa6 	vfma.f32	s5, s13, s13
 8014244:	eea6 3a87 	vfma.f32	s6, s13, s14
 8014248:	eea7 4a07 	vfma.f32	s8, s14, s14
 801424c:	eee6 3aa7 	vfma.f32	s7, s13, s15
 8014250:	eee7 4a27 	vfma.f32	s9, s14, s15
 8014254:	eea7 6aa7 	vfma.f32	s12, s15, s15
 8014258:	d1d1      	bne.n	80141fe <MEMS_runMagCal+0x1446>
 801425a:	edc4 2a00 	vstr	s5, [r4]
 801425e:	ed84 3a01 	vstr	s6, [r4, #4]
 8014262:	edc4 3a02 	vstr	s7, [r4, #8]
 8014266:	ed84 4a03 	vstr	s8, [r4, #12]
 801426a:	edc4 4a04 	vstr	s9, [r4, #16]
 801426e:	ed84 6a05 	vstr	s12, [r4, #20]
 8014272:	a91a      	add	r1, sp, #104	; 0x68
 8014274:	4620      	mov	r0, r4
 8014276:	f7fe fce5 	bl	8012c44 <MEMS_EIG3>
 801427a:	ed9d 6a1b 	vldr	s12, [sp, #108]	; 0x6c
 801427e:	eddd 4a1a 	vldr	s9, [sp, #104]	; 0x68
 8014282:	ed9d 5a1c 	vldr	s10, [sp, #112]	; 0x70
 8014286:	eef0 5ae4 	vabs.f32	s11, s9
 801428a:	eef0 6ac6 	vabs.f32	s13, s12
 801428e:	eef4 6ae5 	vcmpe.f32	s13, s11
 8014292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014296:	bf8c      	ite	hi
 8014298:	eef0 7a65 	vmovhi.f32	s15, s11
 801429c:	eef0 7a66 	vmovls.f32	s15, s13
 80142a0:	eeb0 7ac5 	vabs.f32	s14, s10
 80142a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80142a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142ac:	eef4 6ae5 	vcmpe.f32	s13, s11
 80142b0:	bf88      	it	hi
 80142b2:	eef0 7a47 	vmovhi.f32	s15, s14
 80142b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142ba:	bfb8      	it	lt
 80142bc:	eef0 6a65 	vmovlt.f32	s13, s11
 80142c0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80142c4:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 80142c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142cc:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80142d0:	bfb8      	it	lt
 80142d2:	eeb0 7a66 	vmovlt.f32	s14, s13
 80142d6:	eeb4 7ae5 	vcmpe.f32	s14, s11
 80142da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142de:	f300 8420 	bgt.w	8014b22 <MEMS_runMagCal+0x1d6a>
 80142e2:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80142e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80142ea:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 80142ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80142f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142f6:	dd02      	ble.n	80142fe <MEMS_runMagCal+0x1546>
 80142f8:	2b22      	cmp	r3, #34	; 0x22
 80142fa:	f240 8412 	bls.w	8014b22 <MEMS_runMagCal+0x1d6a>
 80142fe:	ee76 7a24 	vadd.f32	s15, s12, s9
 8014302:	ee07 3a10 	vmov	s14, r3
 8014306:	ee77 7a85 	vadd.f32	s15, s15, s10
 801430a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801430e:	eddf 6a90 	vldr	s13, [pc, #576]	; 8014550 <MEMS_runMagCal+0x1798>
 8014312:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8014316:	eef1 7ac6 	vsqrt.f32	s15, s12
 801431a:	ee68 7a27 	vmul.f32	s15, s16, s15
 801431e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014326:	f300 83fc 	bgt.w	8014b22 <MEMS_runMagCal+0x1d6a>
 801432a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 801432e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014336:	f100 83f4 	bmi.w	8014b22 <MEMS_runMagCal+0x1d6a>
 801433a:	eddf 7a86 	vldr	s15, [pc, #536]	; 8014554 <MEMS_runMagCal+0x179c>
 801433e:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8014342:	2300      	movs	r3, #0
 8014344:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 8014348:	932c      	str	r3, [sp, #176]	; 0xb0
 801434a:	eddd 7a02 	vldr	s15, [sp, #8]
 801434e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014352:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801435a:	d408      	bmi.n	801436e <MEMS_runMagCal+0x15b6>
 801435c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014360:	ee17 3a10 	vmov	r3, s14
 8014364:	b21b      	sxth	r3, r3
 8014366:	ee07 3a90 	vmov	s15, r3
 801436a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801436e:	eddf 6a81 	vldr	s13, [pc, #516]	; 8014574 <MEMS_runMagCal+0x17bc>
 8014372:	ee86 7a88 	vdiv.f32	s14, s13, s16
 8014376:	eef4 7ac7 	vcmpe.f32	s15, s14
 801437a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801437e:	dc08      	bgt.n	8014392 <MEMS_runMagCal+0x15da>
 8014380:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014384:	ee17 3a10 	vmov	r3, s14
 8014388:	b21b      	sxth	r3, r3
 801438a:	ee07 3a90 	vmov	s15, r3
 801438e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014392:	ee27 7a88 	vmul.f32	s14, s15, s16
 8014396:	eddf 7a70 	vldr	s15, [pc, #448]	; 8014558 <MEMS_runMagCal+0x17a0>
 801439a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801439e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143a2:	f340 8424 	ble.w	8014bee <MEMS_runMagCal+0x1e36>
 80143a6:	eddf 7a6d 	vldr	s15, [pc, #436]	; 801455c <MEMS_runMagCal+0x17a4>
 80143aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80143ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143b2:	f140 841c 	bpl.w	8014bee <MEMS_runMagCal+0x1e36>
 80143b6:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8014560 <MEMS_runMagCal+0x17a8>
 80143ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80143be:	eee7 7a26 	vfma.f32	s15, s14, s13
 80143c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80143c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80143ca:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8014574 <MEMS_runMagCal+0x17bc>
 80143ce:	eddf ba6b 	vldr	s23, [pc, #428]	; 801457c <MEMS_runMagCal+0x17c4>
 80143d2:	ed9f ba64 	vldr	s22, [pc, #400]	; 8014564 <MEMS_runMagCal+0x17ac>
 80143d6:	eddf aa64 	vldr	s21, [pc, #400]	; 8014568 <MEMS_runMagCal+0x17b0>
 80143da:	9d03      	ldr	r5, [sp, #12]
 80143dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80143e0:	ee68 4a09 	vmul.f32	s9, s16, s18
 80143e4:	ee28 aa0a 	vmul.f32	s20, s16, s20
 80143e8:	ee68 9a29 	vmul.f32	s19, s16, s19
 80143ec:	edc4 4a00 	vstr	s9, [r4]
 80143f0:	ed84 aa01 	vstr	s20, [r4, #4]
 80143f4:	edc4 9a02 	vstr	s19, [r4, #8]
 80143f8:	edc4 7a03 	vstr	s15, [r4, #12]
 80143fc:	edc4 7a06 	vstr	s15, [r4, #24]
 8014400:	ab11      	add	r3, sp, #68	; 0x44
 8014402:	ee1c 0a10 	vmov	r0, s24
 8014406:	aa2d      	add	r2, sp, #180	; 0xb4
 8014408:	eeb0 0a48 	vmov.f32	s0, s16
 801440c:	4621      	mov	r1, r4
 801440e:	f7fe fa01 	bl	8012814 <MEMS_SolveLinearEq>
 8014412:	1c6b      	adds	r3, r5, #1
 8014414:	2800      	cmp	r0, #0
 8014416:	f43e aed1 	beq.w	80131bc <MEMS_runMagCal+0x404>
 801441a:	ed9d 3a2d 	vldr	s6, [sp, #180]	; 0xb4
 801441e:	eddd 3a2e 	vldr	s7, [sp, #184]	; 0xb8
 8014422:	ed9d 4a2f 	vldr	s8, [sp, #188]	; 0xbc
 8014426:	edd4 4a00 	vldr	s9, [r4]
 801442a:	ed94 5a01 	vldr	s10, [r4, #4]
 801442e:	edd4 5a02 	vldr	s11, [r4, #8]
 8014432:	ed9d 7a30 	vldr	s14, [sp, #192]	; 0xc0
 8014436:	ed94 6a03 	vldr	s12, [r4, #12]
 801443a:	eef0 6ae3 	vabs.f32	s13, s7
 801443e:	eef0 7ac3 	vabs.f32	s15, s6
 8014442:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801444a:	bfb8      	it	lt
 801444c:	eef0 7a66 	vmovlt.f32	s15, s13
 8014450:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014458:	bfb8      	it	lt
 801445a:	eef0 7a6b 	vmovlt.f32	s15, s23
 801445e:	eef0 6ac4 	vabs.f32	s13, s8
 8014462:	eef4 6ae7 	vcmpe.f32	s13, s15
 8014466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801446a:	bfb8      	it	lt
 801446c:	eef0 6a67 	vmovlt.f32	s13, s15
 8014470:	ee74 4a83 	vadd.f32	s9, s9, s6
 8014474:	ee35 5a23 	vadd.f32	s10, s10, s7
 8014478:	ee75 5a84 	vadd.f32	s11, s11, s8
 801447c:	ee36 6a07 	vadd.f32	s12, s12, s14
 8014480:	eef4 6acb 	vcmpe.f32	s13, s22
 8014484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014488:	edc4 4a00 	vstr	s9, [r4]
 801448c:	ed84 5a01 	vstr	s10, [r4, #4]
 8014490:	edc4 5a02 	vstr	s11, [r4, #8]
 8014494:	ed84 6a03 	vstr	s12, [r4, #12]
 8014498:	eef0 7ac7 	vabs.f32	s15, s14
 801449c:	d507      	bpl.n	80144ae <MEMS_runMagCal+0x16f6>
 801449e:	eef4 7aea 	vcmpe.f32	s15, s21
 80144a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144a6:	d502      	bpl.n	80144ae <MEMS_runMagCal+0x16f6>
 80144a8:	2d01      	cmp	r5, #1
 80144aa:	f63e ae8b 	bhi.w	80131c4 <MEMS_runMagCal+0x40c>
 80144ae:	b2dd      	uxtb	r5, r3
 80144b0:	2d05      	cmp	r5, #5
 80144b2:	d1a5      	bne.n	8014400 <MEMS_runMagCal+0x1648>
 80144b4:	f7fe be86 	b.w	80131c4 <MEMS_runMagCal+0x40c>
 80144b8:	eddb 4a1e 	vldr	s9, [fp, #120]	; 0x78
 80144bc:	eddb 7a1a 	vldr	s15, [fp, #104]	; 0x68
 80144c0:	ed9b 5a22 	vldr	s10, [fp, #136]	; 0x88
 80144c4:	ed9f 4a29 	vldr	s8, [pc, #164]	; 801456c <MEMS_runMagCal+0x17b4>
 80144c8:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80144cc:	eef7 4a02 	vmov.f32	s9, #114	; 0x3f900000  1.125
 80144d0:	ee77 7a85 	vadd.f32	s15, s15, s10
 80144d4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80144d8:	ee67 7a84 	vmul.f32	s15, s15, s8
 80144dc:	eef4 7ae4 	vcmpe.f32	s15, s9
 80144e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144e4:	bf88      	it	hi
 80144e6:	eef0 7a64 	vmovhi.f32	s15, s9
 80144ea:	eef4 7ac5 	vcmpe.f32	s15, s10
 80144ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144f2:	bfb8      	it	lt
 80144f4:	eef0 7a45 	vmovlt.f32	s15, s10
 80144f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80144fc:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014504:	dc0e      	bgt.n	8014524 <MEMS_runMagCal+0x176c>
 8014506:	ee26 6a27 	vmul.f32	s12, s12, s15
 801450a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801450e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014512:	dc07      	bgt.n	8014524 <MEMS_runMagCal+0x176c>
 8014514:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014518:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801451c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014520:	f77f ad73 	ble.w	801400a <MEMS_runMagCal+0x1252>
 8014524:	2300      	movs	r3, #0
 8014526:	f88b 3000 	strb.w	r3, [fp]
 801452a:	f7ff b880 	b.w	801362e <MEMS_runMagCal+0x876>
 801452e:	2300      	movs	r3, #0
 8014530:	9307      	str	r3, [sp, #28]
 8014532:	2301      	movs	r3, #1
 8014534:	9303      	str	r3, [sp, #12]
 8014536:	f7ff bb61 	b.w	8013bfc <MEMS_runMagCal+0xe44>
 801453a:	3301      	adds	r3, #1
 801453c:	fb93 f2f7 	sdiv	r2, r3, r7
 8014540:	fb07 3212 	mls	r2, r7, r2, r3
 8014544:	930b      	str	r3, [sp, #44]	; 0x2c
 8014546:	b212      	sxth	r2, r2
 8014548:	46bc      	mov	ip, r7
 801454a:	f7ff bb75 	b.w	8013c38 <MEMS_runMagCal+0xe80>
 801454e:	bf00      	nop
 8014550:	42960000 	.word	0x42960000
 8014554:	430d0000 	.word	0x430d0000
 8014558:	41966667 	.word	0x41966667
 801455c:	433c0000 	.word	0x433c0000
 8014560:	3c2e4c41 	.word	0x3c2e4c41
 8014564:	3e99999a 	.word	0x3e99999a
 8014568:	3f666666 	.word	0x3f666666
 801456c:	3eaaaaab 	.word	0x3eaaaaab
 8014570:	358637bd 	.word	0x358637bd
 8014574:	423c0000 	.word	0x423c0000
 8014578:	3a83126f 	.word	0x3a83126f
 801457c:	00000000 	.word	0x00000000
 8014580:	eddd 7a08 	vldr	s15, [sp, #32]
 8014584:	ed5f 6a04 	vldr	s13, [pc, #-16]	; 8014578 <MEMS_runMagCal+0x17c0>
 8014588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801458c:	ee07 3a10 	vmov	s14, r3
 8014590:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014594:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8014598:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 801459c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80145a0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80145a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145a8:	f63f aa67 	bhi.w	8013a7a <MEMS_runMagCal+0xcc2>
 80145ac:	9b07      	ldr	r3, [sp, #28]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	f43f a83d 	beq.w	801362e <MEMS_runMagCal+0x876>
 80145b4:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 80145b8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80145bc:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80145c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80145c4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80145c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145cc:	bf4c      	ite	mi
 80145ce:	2301      	movmi	r3, #1
 80145d0:	2300      	movpl	r3, #0
 80145d2:	9307      	str	r3, [sp, #28]
 80145d4:	f7ff ba55 	b.w	8013a82 <MEMS_runMagCal+0xcca>
 80145d8:	fb92 f1f0 	sdiv	r1, r2, r0
 80145dc:	fb00 2211 	mls	r2, r0, r1, r2
 80145e0:	b211      	sxth	r1, r2
 80145e2:	4605      	mov	r5, r0
 80145e4:	f7ff b8da 	b.w	801379c <MEMS_runMagCal+0x9e4>
 80145e8:	2200      	movs	r2, #0
 80145ea:	23ff      	movs	r3, #255	; 0xff
 80145ec:	ee1c 0a10 	vmov	r0, s24
 80145f0:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 80145f4:	f88b 308e 	strb.w	r3, [fp, #142]	; 0x8e
 80145f8:	eeb0 0a49 	vmov.f32	s0, s18
 80145fc:	4649      	mov	r1, r9
 80145fe:	f7f7 fd11 	bl	800c024 <MEMS_updateMagBufferIndex>
 8014602:	f7ff b90b 	b.w	801381c <MEMS_runMagCal+0xa64>
 8014606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801460a:	fb03 f60c 	mul.w	r6, r3, ip
 801460e:	fb03 f202 	mul.w	r2, r3, r2
 8014612:	fb03 f301 	mul.w	r3, r3, r1
 8014616:	ee06 6a90 	vmov	s13, r6
 801461a:	ee07 2a10 	vmov	s14, r2
 801461e:	ee07 3a90 	vmov	s15, r3
 8014622:	ed1f 6a2d 	vldr	s12, [pc, #-180]	; 8014570 <MEMS_runMagCal+0x17b8>
 8014626:	9e05      	ldr	r6, [sp, #20]
 8014628:	9400      	str	r4, [sp, #0]
 801462a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801462e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014636:	ee66 6a86 	vmul.f32	s13, s13, s12
 801463a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801463e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014642:	f10b 0868 	add.w	r8, fp, #104	; 0x68
 8014646:	e9c5 0001 	strd	r0, r0, [r5, #4]
 801464a:	e9c5 0003 	strd	r0, r0, [r5, #12]
 801464e:	e9c5 0005 	strd	r0, r0, [r5, #20]
 8014652:	6028      	str	r0, [r5, #0]
 8014654:	ed96 0a01 	vldr	s0, [r6, #4]
 8014658:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 801465c:	4642      	mov	r2, r8
 801465e:	ab0d      	add	r3, sp, #52	; 0x34
 8014660:	f10b 014a 	add.w	r1, fp, #74	; 0x4a
 8014664:	ad0e      	add	r5, sp, #56	; 0x38
 8014666:	ee1c 0a10 	vmov	r0, s24
 801466a:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 801466e:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 8014672:	f7f7 fd79 	bl	800c168 <getMagStats.constprop.0>
 8014676:	9500      	str	r5, [sp, #0]
 8014678:	ed96 0a01 	vldr	s0, [r6, #4]
 801467c:	ee1c 0a10 	vmov	r0, s24
 8014680:	aa2d      	add	r2, sp, #180	; 0xb4
 8014682:	ab0d      	add	r3, sp, #52	; 0x34
 8014684:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 8014688:	f7f7 fd6e 	bl	800c168 <getMagStats.constprop.0>
 801468c:	ed5f 6a47 	vldr	s13, [pc, #-284]	; 8014574 <MEMS_runMagCal+0x17bc>
 8014690:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8014694:	ed95 7a00 	vldr	s14, [r5]
 8014698:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801469c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80146a0:	eef0 7ae7 	vabs.f32	s15, s15
 80146a4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80146a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146ac:	d505      	bpl.n	80146ba <MEMS_runMagCal+0x1902>
 80146ae:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80146b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146b6:	f100 81fa 	bmi.w	8014aae <MEMS_runMagCal+0x1cf6>
 80146ba:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80146be:	eef4 7ae6 	vcmpe.f32	s15, s13
 80146c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146c6:	f140 81a8 	bpl.w	8014a1a <MEMS_runMagCal+0x1c62>
 80146ca:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80146ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146d2:	9b03      	ldr	r3, [sp, #12]
 80146d4:	bfb8      	it	lt
 80146d6:	2302      	movlt	r3, #2
 80146d8:	edd4 6a00 	vldr	s13, [r4]
 80146dc:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80146e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80146e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80146e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146ec:	f57e af9f 	bpl.w	801362e <MEMS_runMagCal+0x876>
 80146f0:	f89b 2058 	ldrb.w	r2, [fp, #88]	; 0x58
 80146f4:	429a      	cmp	r2, r3
 80146f6:	f63e af9a 	bhi.w	801362e <MEMS_runMagCal+0x876>
 80146fa:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80146fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014702:	eef4 6ae7 	vcmpe.f32	s13, s15
 8014706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801470a:	d40e      	bmi.n	801472a <MEMS_runMagCal+0x1972>
 801470c:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8014710:	eef4 6ae7 	vcmpe.f32	s13, s15
 8014714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014718:	f140 80d4 	bpl.w	80148c4 <MEMS_runMagCal+0x1b0c>
 801471c:	f89b 2048 	ldrb.w	r2, [fp, #72]	; 0x48
 8014720:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8014724:	429a      	cmp	r2, r3
 8014726:	f080 80cd 	bcs.w	80148c4 <MEMS_runMagCal+0x1b0c>
 801472a:	9b05      	ldr	r3, [sp, #20]
 801472c:	f9bd 6088 	ldrsh.w	r6, [sp, #136]	; 0x88
 8014730:	f9bb 104c 	ldrsh.w	r1, [fp, #76]	; 0x4c
 8014734:	f9bd 7086 	ldrsh.w	r7, [sp, #134]	; 0x86
 8014738:	f9bb 004a 	ldrsh.w	r0, [fp, #74]	; 0x4a
 801473c:	edd3 5a01 	vldr	s11, [r3, #4]
 8014740:	f9bd 408a 	ldrsh.w	r4, [sp, #138]	; 0x8a
 8014744:	f9bb 204e 	ldrsh.w	r2, [fp, #78]	; 0x4e
 8014748:	1b8b      	subs	r3, r1, r6
 801474a:	eba0 0c07 	sub.w	ip, r0, r7
 801474e:	2b00      	cmp	r3, #0
 8014750:	bfb8      	it	lt
 8014752:	425b      	neglt	r3, r3
 8014754:	f1bc 0f00 	cmp.w	ip, #0
 8014758:	bfb8      	it	lt
 801475a:	f1cc 0c00 	rsblt	ip, ip, #0
 801475e:	4563      	cmp	r3, ip
 8014760:	bfb8      	it	lt
 8014762:	4663      	movlt	r3, ip
 8014764:	eba2 0c04 	sub.w	ip, r2, r4
 8014768:	f1bc 0f00 	cmp.w	ip, #0
 801476c:	b21b      	sxth	r3, r3
 801476e:	bfb8      	it	lt
 8014770:	f1cc 0c00 	rsblt	ip, ip, #0
 8014774:	4563      	cmp	r3, ip
 8014776:	bfb8      	it	lt
 8014778:	4663      	movlt	r3, ip
 801477a:	b21b      	sxth	r3, r3
 801477c:	ee07 3a90 	vmov	s15, r3
 8014780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014784:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8014788:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801478c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8014790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014794:	f140 8096 	bpl.w	80148c4 <MEMS_runMagCal+0x1b0c>
 8014798:	ee37 7a26 	vadd.f32	s14, s14, s13
 801479c:	f8bb 3050 	ldrh.w	r3, [fp, #80]	; 0x50
 80147a0:	ee86 2a87 	vdiv.f32	s4, s13, s14
 80147a4:	ee04 3a90 	vmov	s9, r3
 80147a8:	f8bb 3052 	ldrh.w	r3, [fp, #82]	; 0x52
 80147ac:	ee05 3a10 	vmov	s10, r3
 80147b0:	f8bb 3054 	ldrh.w	r3, [fp, #84]	; 0x54
 80147b4:	ee07 0a90 	vmov	s15, r0
 80147b8:	ee05 3a90 	vmov	s11, r3
 80147bc:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 80147c0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80147c4:	ee36 4a42 	vsub.f32	s8, s12, s4
 80147c8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80147cc:	ee06 3a10 	vmov	s12, r3
 80147d0:	ee03 7a90 	vmov	s7, r7
 80147d4:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 80147d8:	ee07 1a90 	vmov	s15, r1
 80147dc:	ee00 3a90 	vmov	s1, r3
 80147e0:	ee66 6a84 	vmul.f32	s13, s13, s8
 80147e4:	eef8 2ae3 	vcvt.f32.s32	s5, s7
 80147e8:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 80147ec:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
 80147f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80147f4:	ee64 4a84 	vmul.f32	s9, s9, s8
 80147f8:	ee03 6a90 	vmov	s7, r6
 80147fc:	eee2 6a22 	vfma.f32	s13, s4, s5
 8014800:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8014804:	ee07 2a90 	vmov	s15, r2
 8014808:	ee01 3a10 	vmov	s2, r3
 801480c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014810:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 8014814:	eeb8 3ae3 	vcvt.f32.s32	s6, s7
 8014818:	eee2 4a20 	vfma.f32	s9, s4, s1
 801481c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8014820:	ee01 3a90 	vmov	s3, r3
 8014824:	ee25 5a04 	vmul.f32	s10, s10, s8
 8014828:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 801482c:	eea2 7a03 	vfma.f32	s14, s4, s6
 8014830:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014834:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8014838:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801483c:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8014840:	ee03 4a90 	vmov	s7, r4
 8014844:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8014848:	ee67 7a84 	vmul.f32	s15, s15, s8
 801484c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8014850:	ee26 6a04 	vmul.f32	s12, s12, s8
 8014854:	ee16 2a90 	vmov	r2, s13
 8014858:	ee04 3a10 	vmov	s8, r3
 801485c:	eea2 5a01 	vfma.f32	s10, s4, s2
 8014860:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
 8014864:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8014868:	eefc 4ae4 	vcvt.u32.f32	s9, s9
 801486c:	eee2 7a23 	vfma.f32	s15, s4, s7
 8014870:	ee14 2a90 	vmov	r2, s9
 8014874:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8014878:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801487c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014880:	eee2 5a21 	vfma.f32	s11, s4, s3
 8014884:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
 8014888:	eea2 6a04 	vfma.f32	s12, s4, s8
 801488c:	ee17 2a10 	vmov	r2, s14
 8014890:	eebc 5ac5 	vcvt.u32.f32	s10, s10
 8014894:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014898:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
 801489c:	ee15 2a10 	vmov	r2, s10
 80148a0:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 80148a4:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 80148a8:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
 80148ac:	ee17 2a90 	vmov	r2, s15
 80148b0:	ee16 3a10 	vmov	r3, s12
 80148b4:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
 80148b8:	ee15 2a90 	vmov	r2, s11
 80148bc:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 80148c0:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
 80148c4:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80148c6:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 80148ca:	f7fe bda2 	b.w	8013412 <MEMS_runMagCal+0x65a>
 80148ce:	ee1c 0a10 	vmov	r0, s24
 80148d2:	eeb0 0a49 	vmov.f32	s0, s18
 80148d6:	4649      	mov	r1, r9
 80148d8:	f7f7 fba4 	bl	800c024 <MEMS_updateMagBufferIndex>
 80148dc:	f7ff b89f 	b.w	8013a1e <MEMS_runMagCal+0xc66>
 80148e0:	eddd 7a08 	vldr	s15, [sp, #32]
 80148e4:	ed1f 7adc 	vldr	s14, [pc, #-880]	; 8014578 <MEMS_runMagCal+0x17c0>
 80148e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80148ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80148f0:	e660      	b.n	80145b4 <MEMS_runMagCal+0x17fc>
 80148f2:	ed5f 6ade 	vldr	s13, [pc, #-888]	; 801457c <MEMS_runMagCal+0x17c4>
 80148f6:	1c6b      	adds	r3, r5, #1
 80148f8:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 80148fc:	ad0e      	add	r5, sp, #56	; 0x38
 80148fe:	fb93 f1f6 	sdiv	r1, r3, r6
 8014902:	fa1f fc86 	uxth.w	ip, r6
 8014906:	fb06 3311 	mls	r3, r6, r1, r3
 801490a:	edc5 6a00 	vstr	s13, [r5]
 801490e:	2e00      	cmp	r6, #0
 8014910:	f000 80e1 	beq.w	8014ad6 <MEMS_runMagCal+0x1d1e>
 8014914:	b29b      	uxth	r3, r3
 8014916:	f10c 3cff 	add.w	ip, ip, #4294967295
 801491a:	1c58      	adds	r0, r3, #1
 801491c:	eeb0 6a66 	vmov.f32	s12, s13
 8014920:	fa10 fc8c 	uxtah	ip, r0, ip
 8014924:	f241 2e5c 	movw	lr, #4700	; 0x125c
 8014928:	4619      	mov	r1, r3
 801492a:	e000      	b.n	801492e <MEMS_runMagCal+0x1b76>
 801492c:	3001      	adds	r0, #1
 801492e:	fbb1 f3f6 	udiv	r3, r1, r6
 8014932:	fb06 1313 	mls	r3, r6, r3, r1
 8014936:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 801493a:	8a99      	ldrh	r1, [r3, #20]
 801493c:	4571      	cmp	r1, lr
 801493e:	f5a1 5392 	sub.w	r3, r1, #4672	; 0x1240
 8014942:	f1a3 031c 	sub.w	r3, r3, #28
 8014946:	bf98      	it	ls
 8014948:	ebae 0301 	subls.w	r3, lr, r1
 801494c:	b29b      	uxth	r3, r3
 801494e:	fb03 f303 	mul.w	r3, r3, r3
 8014952:	ee07 1a10 	vmov	s14, r1
 8014956:	ee07 3a90 	vmov	s15, r3
 801495a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801495e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014962:	4584      	cmp	ip, r0
 8014964:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8014968:	ee36 6a07 	vadd.f32	s12, s12, s14
 801496c:	4601      	mov	r1, r0
 801496e:	d1dd      	bne.n	801492c <MEMS_runMagCal+0x1b74>
 8014970:	ee07 4a90 	vmov	s15, r4
 8014974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014978:	eddf 5ae6 	vldr	s11, [pc, #920]	; 8014d14 <MEMS_runMagCal+0x1f5c>
 801497c:	ed9f 5ae6 	vldr	s10, [pc, #920]	; 8014d18 <MEMS_runMagCal+0x1f60>
 8014980:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014984:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8014988:	eef1 7ac7 	vsqrt.f32	s15, s14
 801498c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8014990:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8014994:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8014998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801499c:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 80149a0:	edc5 7a00 	vstr	s15, [r5]
 80149a4:	dd47      	ble.n	8014a36 <MEMS_runMagCal+0x1c7e>
 80149a6:	eddf 7add 	vldr	s15, [pc, #884]	; 8014d1c <MEMS_runMagCal+0x1f64>
 80149aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80149ae:	2302      	movs	r3, #2
 80149b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149b4:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 80149b8:	f77e aead 	ble.w	8013716 <MEMS_runMagCal+0x95e>
 80149bc:	2301      	movs	r3, #1
 80149be:	f88b 3001 	strb.w	r3, [fp, #1]
 80149c2:	f7fe bea8 	b.w	8013716 <MEMS_runMagCal+0x95e>
 80149c6:	ee1c 0a10 	vmov	r0, s24
 80149ca:	eeb0 0a49 	vmov.f32	s0, s18
 80149ce:	4649      	mov	r1, r9
 80149d0:	f7f7 fb28 	bl	800c024 <MEMS_updateMagBufferIndex>
 80149d4:	f7fe bf0d 	b.w	80137f2 <MEMS_runMagCal+0xa3a>
 80149d8:	9b02      	ldr	r3, [sp, #8]
 80149da:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 80149de:	f8db 100c 	ldr.w	r1, [fp, #12]
 80149e2:	eb0b 0ac3 	add.w	sl, fp, r3, lsl #3
 80149e6:	f9ba 30ac 	ldrsh.w	r3, [sl, #172]	; 0xac
 80149ea:	4413      	add	r3, r2
 80149ec:	4299      	cmp	r1, r3
 80149ee:	f4bf ad99 	bcs.w	8014524 <MEMS_runMagCal+0x176c>
 80149f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80149f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80149f8:	fb03 f301 	mul.w	r3, r3, r1
 80149fc:	3364      	adds	r3, #100	; 0x64
 80149fe:	4293      	cmp	r3, r2
 8014a00:	bf38      	it	cc
 8014a02:	4613      	movcc	r3, r2
 8014a04:	2200      	movs	r2, #0
 8014a06:	f8cb 300c 	str.w	r3, [fp, #12]
 8014a0a:	f88b 2000 	strb.w	r2, [fp]
 8014a0e:	f7fe be0e 	b.w	801362e <MEMS_runMagCal+0x876>
 8014a12:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8014a16:	f7ff ba6f 	b.w	8013ef8 <MEMS_runMagCal+0x1140>
 8014a1a:	9b03      	ldr	r3, [sp, #12]
 8014a1c:	e65c      	b.n	80146d8 <MEMS_runMagCal+0x1920>
 8014a1e:	4619      	mov	r1, r3
 8014a20:	9b02      	ldr	r3, [sp, #8]
 8014a22:	3301      	adds	r3, #1
 8014a24:	fb93 f2f1 	sdiv	r2, r3, r1
 8014a28:	fb01 3212 	mls	r2, r1, r2, r3
 8014a2c:	9304      	str	r3, [sp, #16]
 8014a2e:	b212      	sxth	r2, r2
 8014a30:	4689      	mov	r9, r1
 8014a32:	f7ff ba11 	b.w	8013e58 <MEMS_runMagCal+0x10a0>
 8014a36:	eddf 7aba 	vldr	s15, [pc, #744]	; 8014d20 <MEMS_runMagCal+0x1f68>
 8014a3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a42:	eddf 7ab6 	vldr	s15, [pc, #728]	; 8014d1c <MEMS_runMagCal+0x1f64>
 8014a46:	d434      	bmi.n	8014ab2 <MEMS_runMagCal+0x1cfa>
 8014a48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a50:	bfc4      	itt	gt
 8014a52:	2301      	movgt	r3, #1
 8014a54:	f88b 3001 	strbgt.w	r3, [fp, #1]
 8014a58:	f7ff b892 	b.w	8013b80 <MEMS_runMagCal+0xdc8>
 8014a5c:	9b05      	ldr	r3, [sp, #20]
 8014a5e:	f89b 1011 	ldrb.w	r1, [fp, #17]
 8014a62:	ed93 0a01 	vldr	s0, [r3, #4]
 8014a66:	f7fe bd84 	b.w	8013572 <MEMS_runMagCal+0x7ba>
 8014a6a:	2303      	movs	r3, #3
 8014a6c:	9303      	str	r3, [sp, #12]
 8014a6e:	f7fe bdd4 	b.w	801361a <MEMS_runMagCal+0x862>
 8014a72:	4619      	mov	r1, r3
 8014a74:	f7ff ba78 	b.w	8013f68 <MEMS_runMagCal+0x11b0>
 8014a78:	eef7 7a02 	vmov.f32	s15, #114	; 0x3f900000  1.125
 8014a7c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8014a80:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a88:	f73f ad4c 	bgt.w	8014524 <MEMS_runMagCal+0x176c>
 8014a8c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014a90:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8014a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a98:	f73f ad44 	bgt.w	8014524 <MEMS_runMagCal+0x176c>
 8014a9c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8014aa0:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8014aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aa8:	f77f aaaf 	ble.w	801400a <MEMS_runMagCal+0x1252>
 8014aac:	e53a      	b.n	8014524 <MEMS_runMagCal+0x176c>
 8014aae:	2303      	movs	r3, #3
 8014ab0:	e612      	b.n	80146d8 <MEMS_runMagCal+0x1920>
 8014ab2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014ab6:	2300      	movs	r3, #0
 8014ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014abc:	f88b 3001 	strb.w	r3, [fp, #1]
 8014ac0:	f04f 0103 	mov.w	r1, #3
 8014ac4:	bfc8      	it	gt
 8014ac6:	2301      	movgt	r3, #1
 8014ac8:	f88b 1058 	strb.w	r1, [fp, #88]	; 0x58
 8014acc:	bfc8      	it	gt
 8014ace:	f88b 3001 	strbgt.w	r3, [fp, #1]
 8014ad2:	f7ff b858 	b.w	8013b86 <MEMS_runMagCal+0xdce>
 8014ad6:	2303      	movs	r3, #3
 8014ad8:	f88b c001 	strb.w	ip, [fp, #1]
 8014adc:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8014ae0:	f7ff b851 	b.w	8013b86 <MEMS_runMagCal+0xdce>
 8014ae4:	9b04      	ldr	r3, [sp, #16]
 8014ae6:	fb93 f7f9 	sdiv	r7, r3, r9
 8014aea:	fb09 3717 	mls	r7, r9, r7, r3
 8014aee:	b23f      	sxth	r7, r7
 8014af0:	f7ff ba9a 	b.w	8014028 <MEMS_runMagCal+0x1270>
 8014af4:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8014d24 <MEMS_runMagCal+0x1f6c>
 8014af8:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8014afc:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8014b00:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8014b04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014b08:	ee87 0a08 	vdiv.f32	s0, s14, s16
 8014b0c:	ee17 2a90 	vmov	r2, s15
 8014b10:	b291      	uxth	r1, r2
 8014b12:	b113      	cbz	r3, 8014b1a <MEMS_runMagCal+0x1d62>
 8014b14:	3b01      	subs	r3, #1
 8014b16:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 8014b1a:	ee1c 0a10 	vmov	r0, s24
 8014b1e:	f7f7 fa81 	bl	800c024 <MEMS_updateMagBufferIndex>
 8014b22:	eddd 7a08 	vldr	s15, [sp, #32]
 8014b26:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8014b2a:	eddf 7a7f 	vldr	s15, [pc, #508]	; 8014d28 <MEMS_runMagCal+0x1f70>
 8014b2e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014b32:	f001 f8b5 	bl	8015ca0 <roundf>
 8014b36:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8014b3a:	2300      	movs	r3, #0
 8014b3c:	ed8b 0a01 	vstr	s0, [fp, #4]
 8014b40:	f88b 3000 	strb.w	r3, [fp]
 8014b44:	f7fe bd73 	b.w	801362e <MEMS_runMagCal+0x876>
 8014b48:	fb93 f2f6 	sdiv	r2, r3, r6
 8014b4c:	fb06 3312 	mls	r3, r6, r2, r3
 8014b50:	b21a      	sxth	r2, r3
 8014b52:	4630      	mov	r0, r6
 8014b54:	f7ff bb00 	b.w	8014158 <MEMS_runMagCal+0x13a0>
 8014b58:	ed9b 0a17 	vldr	s0, [fp, #92]	; 0x5c
 8014b5c:	f001 f8a0 	bl	8015ca0 <roundf>
 8014b60:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014b64:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8014b68:	ee17 3a90 	vmov	r3, s15
 8014b6c:	ed9b 0a18 	vldr	s0, [fp, #96]	; 0x60
 8014b70:	f8a9 3000 	strh.w	r3, [r9]
 8014b74:	f001 f894 	bl	8015ca0 <roundf>
 8014b78:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014b7c:	ed9b 0a19 	vldr	s0, [fp, #100]	; 0x64
 8014b80:	ee17 3a90 	vmov	r3, s15
 8014b84:	f8a9 3002 	strh.w	r3, [r9, #2]
 8014b88:	f001 f88a 	bl	8015ca0 <roundf>
 8014b8c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014b90:	ac0f      	add	r4, sp, #60	; 0x3c
 8014b92:	ee17 5a90 	vmov	r5, s15
 8014b96:	9400      	str	r4, [sp, #0]
 8014b98:	ee1c 0a10 	vmov	r0, s24
 8014b9c:	4649      	mov	r1, r9
 8014b9e:	ab10      	add	r3, sp, #64	; 0x40
 8014ba0:	eeb0 0a48 	vmov.f32	s0, s16
 8014ba4:	f10b 0268 	add.w	r2, fp, #104	; 0x68
 8014ba8:	f8a9 5004 	strh.w	r5, [r9, #4]
 8014bac:	f7f7 fadc 	bl	800c168 <getMagStats.constprop.0>
 8014bb0:	ed94 7a00 	vldr	s14, [r4]
 8014bb4:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8014d2c <MEMS_runMagCal+0x1f74>
 8014bb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bc0:	d50e      	bpl.n	8014be0 <MEMS_runMagCal+0x1e28>
 8014bc2:	b968      	cbnz	r0, 8014be0 <MEMS_runMagCal+0x1e28>
 8014bc4:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8014bc8:	b32b      	cbz	r3, 8014c16 <MEMS_runMagCal+0x1e5e>
 8014bca:	f89b 3049 	ldrb.w	r3, [fp, #73]	; 0x49
 8014bce:	ee07 3a90 	vmov	s15, r3
 8014bd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014bd6:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bde:	dc1a      	bgt.n	8014c16 <MEMS_runMagCal+0x1e5e>
 8014be0:	2300      	movs	r3, #0
 8014be2:	f8c9 3000 	str.w	r3, [r9]
 8014be6:	f8a9 3004 	strh.w	r3, [r9, #4]
 8014bea:	f7ff ba97 	b.w	801411c <MEMS_runMagCal+0x1364>
 8014bee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014bf2:	f7ff bbea 	b.w	80143ca <MEMS_runMagCal+0x1612>
 8014bf6:	eddf 9a4e 	vldr	s19, [pc, #312]	; 8014d30 <MEMS_runMagCal+0x1f78>
 8014bfa:	eddd 4a1d 	vldr	s9, [sp, #116]	; 0x74
 8014bfe:	ed9d aa1e 	vldr	s20, [sp, #120]	; 0x78
 8014c02:	eddd 7a1f 	vldr	s15, [sp, #124]	; 0x7c
 8014c06:	ee29 9aa4 	vmul.f32	s18, s19, s9
 8014c0a:	ee29 aa8a 	vmul.f32	s20, s19, s20
 8014c0e:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8014c12:	f7ff bb2e 	b.w	8014272 <MEMS_runMagCal+0x14ba>
 8014c16:	eddd 7a08 	vldr	s15, [sp, #32]
 8014c1a:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8014c1e:	eddf 7a42 	vldr	s15, [pc, #264]	; 8014d28 <MEMS_runMagCal+0x1f70>
 8014c22:	2303      	movs	r3, #3
 8014c24:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014c28:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8014c2c:	e781      	b.n	8014b32 <MEMS_runMagCal+0x1d7a>
 8014c2e:	eddf 6a41 	vldr	s13, [pc, #260]	; 8014d34 <MEMS_runMagCal+0x1f7c>
 8014c32:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c3a:	f77e ab1b 	ble.w	8013274 <MEMS_runMagCal+0x4bc>
 8014c3e:	f7fe bb21 	b.w	8013284 <MEMS_runMagCal+0x4cc>
 8014c42:	2224      	movs	r2, #36	; 0x24
 8014c44:	2100      	movs	r1, #0
 8014c46:	a82d      	add	r0, sp, #180	; 0xb4
 8014c48:	f002 fe54 	bl	80178f4 <memset>
 8014c4c:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8014d38 <MEMS_runMagCal+0x1f80>
 8014c50:	eec7 9a89 	vdiv.f32	s19, s15, s18
 8014c54:	f10d 0954 	add.w	r9, sp, #84	; 0x54
 8014c58:	4627      	mov	r7, r4
 8014c5a:	ae2d      	add	r6, sp, #180	; 0xb4
 8014c5c:	2500      	movs	r5, #0
 8014c5e:	3501      	adds	r5, #1
 8014c60:	ecb7 0a01 	vldmia	r7!, {s0}
 8014c64:	ee28 0a80 	vmul.f32	s0, s17, s0
 8014c68:	f001 f81a 	bl	8015ca0 <roundf>
 8014c6c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014c70:	4633      	mov	r3, r6
 8014c72:	edc3 9a00 	vstr	s19, [r3]
 8014c76:	ee10 3a10 	vmov	r3, s0
 8014c7a:	2d03      	cmp	r5, #3
 8014c7c:	f829 3b02 	strh.w	r3, [r9], #2
 8014c80:	f106 0610 	add.w	r6, r6, #16
 8014c84:	d1eb      	bne.n	8014c5e <MEMS_runMagCal+0x1ea6>
 8014c86:	ad12      	add	r5, sp, #72	; 0x48
 8014c88:	9500      	str	r5, [sp, #0]
 8014c8a:	ab2b      	add	r3, sp, #172	; 0xac
 8014c8c:	eeb0 0a48 	vmov.f32	s0, s16
 8014c90:	ee1c 0a10 	vmov	r0, s24
 8014c94:	a915      	add	r1, sp, #84	; 0x54
 8014c96:	aa2d      	add	r2, sp, #180	; 0xb4
 8014c98:	f7f7 fa66 	bl	800c168 <getMagStats.constprop.0>
 8014c9c:	eddf 3a26 	vldr	s7, [pc, #152]	; 8014d38 <MEMS_runMagCal+0x1f80>
 8014ca0:	ed94 4a03 	vldr	s8, [r4, #12]
 8014ca4:	edd5 7a00 	vldr	s15, [r5]
 8014ca8:	ed9d 6a11 	vldr	s12, [sp, #68]	; 0x44
 8014cac:	edd4 6a06 	vldr	s13, [r4, #24]
 8014cb0:	edd4 4a00 	vldr	s9, [r4]
 8014cb4:	ed94 5a01 	vldr	s10, [r4, #4]
 8014cb8:	edd4 5a02 	vldr	s11, [r4, #8]
 8014cbc:	ee83 7a84 	vdiv.f32	s14, s7, s8
 8014cc0:	ad2e      	add	r5, sp, #184	; 0xb8
 8014cc2:	2300      	movs	r3, #0
 8014cc4:	e9c5 3300 	strd	r3, r3, [r5]
 8014cc8:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8014ccc:	60ab      	str	r3, [r5, #8]
 8014cce:	61ab      	str	r3, [r5, #24]
 8014cd0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014cd4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8014cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cdc:	ee84 0a88 	vdiv.f32	s0, s9, s16
 8014ce0:	eec5 9a08 	vdiv.f32	s19, s10, s16
 8014ce4:	ee85 aa88 	vdiv.f32	s20, s11, s16
 8014ce8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014cec:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8014cf0:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 8014cf4:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 8014cf8:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 8014cfc:	d405      	bmi.n	8014d0a <MEMS_runMagCal+0x1f52>
 8014cfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d06:	f57e aa9b 	bpl.w	8013240 <MEMS_runMagCal+0x488>
 8014d0a:	ed9f 9a0c 	vldr	s18, [pc, #48]	; 8014d3c <MEMS_runMagCal+0x1f84>
 8014d0e:	f7fe ba9d 	b.w	801324c <MEMS_runMagCal+0x494>
 8014d12:	bf00      	nop
 8014d14:	3c23d70a 	.word	0x3c23d70a
 8014d18:	4b095440 	.word	0x4b095440
 8014d1c:	481c4000 	.word	0x481c4000
 8014d20:	471c4000 	.word	0x471c4000
 8014d24:	433d0000 	.word	0x433d0000
 8014d28:	3a83126f 	.word	0x3a83126f
 8014d2c:	3ff4cccd 	.word	0x3ff4cccd
 8014d30:	7f800000 	.word	0x7f800000
 8014d34:	3ee66666 	.word	0x3ee66666
 8014d38:	423c0000 	.word	0x423c0000
 8014d3c:	00000000 	.word	0x00000000
 8014d40:	f644 42f4 	movw	r2, #19700	; 0x4cf4
 8014d44:	4293      	cmp	r3, r2
 8014d46:	f67e acac 	bls.w	80136a2 <MEMS_runMagCal+0x8ea>
 8014d4a:	f7fe bca0 	b.w	801368e <MEMS_runMagCal+0x8d6>
 8014d4e:	bf00      	nop

08014d50 <MotionFX_GetStateSize>:
 8014d50:	f44f 6018 	mov.w	r0, #2432	; 0x980
 8014d54:	4770      	bx	lr
 8014d56:	bf00      	nop

08014d58 <MotionFX_initialize>:
 8014d58:	4a3b      	ldr	r2, [pc, #236]	; (8014e48 <MotionFX_initialize+0xf0>)
 8014d5a:	493c      	ldr	r1, [pc, #240]	; (8014e4c <MotionFX_initialize+0xf4>)
 8014d5c:	6813      	ldr	r3, [r2, #0]
 8014d5e:	f023 0301 	bic.w	r3, r3, #1
 8014d62:	b530      	push	{r4, r5, lr}
 8014d64:	6013      	str	r3, [r2, #0]
 8014d66:	680b      	ldr	r3, [r1, #0]
 8014d68:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8014d6c:	4013      	ands	r3, r2
 8014d6e:	f24c 2540 	movw	r5, #49728	; 0xc240
 8014d72:	42ab      	cmp	r3, r5
 8014d74:	b085      	sub	sp, #20
 8014d76:	4604      	mov	r4, r0
 8014d78:	d013      	beq.n	8014da2 <MotionFX_initialize+0x4a>
 8014d7a:	680b      	ldr	r3, [r1, #0]
 8014d7c:	f24c 2170 	movw	r1, #49776	; 0xc270
 8014d80:	4013      	ands	r3, r2
 8014d82:	428b      	cmp	r3, r1
 8014d84:	d00d      	beq.n	8014da2 <MotionFX_initialize+0x4a>
 8014d86:	4b32      	ldr	r3, [pc, #200]	; (8014e50 <MotionFX_initialize+0xf8>)
 8014d88:	2201      	movs	r2, #1
 8014d8a:	601a      	str	r2, [r3, #0]
 8014d8c:	681a      	ldr	r2, [r3, #0]
 8014d8e:	2a00      	cmp	r2, #0
 8014d90:	d1fc      	bne.n	8014d8c <MotionFX_initialize+0x34>
 8014d92:	4b30      	ldr	r3, [pc, #192]	; (8014e54 <MotionFX_initialize+0xfc>)
 8014d94:	4a30      	ldr	r2, [pc, #192]	; (8014e58 <MotionFX_initialize+0x100>)
 8014d96:	601a      	str	r2, [r3, #0]
 8014d98:	681a      	ldr	r2, [r3, #0]
 8014d9a:	4b30      	ldr	r3, [pc, #192]	; (8014e5c <MotionFX_initialize+0x104>)
 8014d9c:	429a      	cmp	r2, r3
 8014d9e:	d01f      	beq.n	8014de0 <MotionFX_initialize+0x88>
 8014da0:	e7fe      	b.n	8014da0 <MotionFX_initialize+0x48>
 8014da2:	4b2f      	ldr	r3, [pc, #188]	; (8014e60 <MotionFX_initialize+0x108>)
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d1ed      	bne.n	8014d86 <MotionFX_initialize+0x2e>
 8014daa:	4a2e      	ldr	r2, [pc, #184]	; (8014e64 <MotionFX_initialize+0x10c>)
 8014dac:	6813      	ldr	r3, [r2, #0]
 8014dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014db2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8014db6:	d006      	beq.n	8014dc6 <MotionFX_initialize+0x6e>
 8014db8:	6813      	ldr	r3, [r2, #0]
 8014dba:	f240 4283 	movw	r2, #1155	; 0x483
 8014dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014dc2:	4293      	cmp	r3, r2
 8014dc4:	d1df      	bne.n	8014d86 <MotionFX_initialize+0x2e>
 8014dc6:	4b28      	ldr	r3, [pc, #160]	; (8014e68 <MotionFX_initialize+0x110>)
 8014dc8:	2201      	movs	r2, #1
 8014dca:	601a      	str	r2, [r3, #0]
 8014dcc:	681a      	ldr	r2, [r3, #0]
 8014dce:	2a00      	cmp	r2, #0
 8014dd0:	d1fc      	bne.n	8014dcc <MotionFX_initialize+0x74>
 8014dd2:	4b26      	ldr	r3, [pc, #152]	; (8014e6c <MotionFX_initialize+0x114>)
 8014dd4:	4a20      	ldr	r2, [pc, #128]	; (8014e58 <MotionFX_initialize+0x100>)
 8014dd6:	601a      	str	r2, [r3, #0]
 8014dd8:	681a      	ldr	r2, [r3, #0]
 8014dda:	4b20      	ldr	r3, [pc, #128]	; (8014e5c <MotionFX_initialize+0x104>)
 8014ddc:	429a      	cmp	r2, r3
 8014dde:	d1df      	bne.n	8014da0 <MotionFX_initialize+0x48>
 8014de0:	4b23      	ldr	r3, [pc, #140]	; (8014e70 <MotionFX_initialize+0x118>)
 8014de2:	4a24      	ldr	r2, [pc, #144]	; (8014e74 <MotionFX_initialize+0x11c>)
 8014de4:	9301      	str	r3, [sp, #4]
 8014de6:	2501      	movs	r5, #1
 8014de8:	4620      	mov	r0, r4
 8014dea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014dee:	7115      	strb	r5, [r2, #4]
 8014df0:	f7f7 faa0 	bl	800c334 <MFX_emptyAttitude>
 8014df4:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8014df8:	a901      	add	r1, sp, #4
 8014dfa:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8014dfe:	f7f6 fdc3 	bl	800b988 <updateOrientation>
 8014e02:	a903      	add	r1, sp, #12
 8014e04:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8014e08:	f7f6 fdbe 	bl	800b988 <updateOrientation>
 8014e0c:	a902      	add	r1, sp, #8
 8014e0e:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8014e12:	f7f6 fdb9 	bl	800b988 <updateOrientation>
 8014e16:	4818      	ldr	r0, [pc, #96]	; (8014e78 <MotionFX_initialize+0x120>)
 8014e18:	4918      	ldr	r1, [pc, #96]	; (8014e7c <MotionFX_initialize+0x124>)
 8014e1a:	4a19      	ldr	r2, [pc, #100]	; (8014e80 <MotionFX_initialize+0x128>)
 8014e1c:	4b19      	ldr	r3, [pc, #100]	; (8014e84 <MotionFX_initialize+0x12c>)
 8014e1e:	7365      	strb	r5, [r4, #13]
 8014e20:	4d19      	ldr	r5, [pc, #100]	; (8014e88 <MotionFX_initialize+0x130>)
 8014e22:	62a0      	str	r0, [r4, #40]	; 0x28
 8014e24:	6361      	str	r1, [r4, #52]	; 0x34
 8014e26:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8014e2a:	2100      	movs	r1, #0
 8014e2c:	61a2      	str	r2, [r4, #24]
 8014e2e:	61e3      	str	r3, [r4, #28]
 8014e30:	f44f 7281 	mov.w	r2, #258	; 0x102
 8014e34:	f240 1301 	movw	r3, #257	; 0x101
 8014e38:	6225      	str	r5, [r4, #32]
 8014e3a:	62e0      	str	r0, [r4, #44]	; 0x2c
 8014e3c:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
 8014e40:	80a2      	strh	r2, [r4, #4]
 8014e42:	81e3      	strh	r3, [r4, #14]
 8014e44:	b005      	add	sp, #20
 8014e46:	bd30      	pop	{r4, r5, pc}
 8014e48:	e0002000 	.word	0xe0002000
 8014e4c:	e000ed00 	.word	0xe000ed00
 8014e50:	40023008 	.word	0x40023008
 8014e54:	40023000 	.word	0x40023000
 8014e58:	f407a5c2 	.word	0xf407a5c2
 8014e5c:	b5e8b5cd 	.word	0xb5e8b5cd
 8014e60:	e0042000 	.word	0xe0042000
 8014e64:	5c001000 	.word	0x5c001000
 8014e68:	58024c08 	.word	0x58024c08
 8014e6c:	58024c00 	.word	0x58024c00
 8014e70:	00756e65 	.word	0x00756e65
 8014e74:	200002e0 	.word	0x200002e0
 8014e78:	3f666666 	.word	0x3f666666
 8014e7c:	3f2ac083 	.word	0x3f2ac083
 8014e80:	3a51b717 	.word	0x3a51b717
 8014e84:	3a378034 	.word	0x3a378034
 8014e88:	3b378034 	.word	0x3b378034

08014e8c <MotionFX_setKnobs>:
 8014e8c:	4b23      	ldr	r3, [pc, #140]	; (8014f1c <MotionFX_setKnobs+0x90>)
 8014e8e:	791b      	ldrb	r3, [r3, #4]
 8014e90:	b903      	cbnz	r3, 8014e94 <MotionFX_setKnobs+0x8>
 8014e92:	4770      	bx	lr
 8014e94:	2900      	cmp	r1, #0
 8014e96:	d0fc      	beq.n	8014e92 <MotionFX_setKnobs+0x6>
 8014e98:	b570      	push	{r4, r5, r6, lr}
 8014e9a:	4604      	mov	r4, r0
 8014e9c:	684a      	ldr	r2, [r1, #4]
 8014e9e:	6808      	ldr	r0, [r1, #0]
 8014ea0:	688b      	ldr	r3, [r1, #8]
 8014ea2:	6363      	str	r3, [r4, #52]	; 0x34
 8014ea4:	62a0      	str	r0, [r4, #40]	; 0x28
 8014ea6:	62e2      	str	r2, [r4, #44]	; 0x2c
 8014ea8:	7b0b      	ldrb	r3, [r1, #12]
 8014eaa:	7163      	strb	r3, [r4, #5]
 8014eac:	6908      	ldr	r0, [r1, #16]
 8014eae:	694a      	ldr	r2, [r1, #20]
 8014eb0:	698b      	ldr	r3, [r1, #24]
 8014eb2:	6223      	str	r3, [r4, #32]
 8014eb4:	61e2      	str	r2, [r4, #28]
 8014eb6:	61a0      	str	r0, [r4, #24]
 8014eb8:	7f0b      	ldrb	r3, [r1, #28]
 8014eba:	7123      	strb	r3, [r4, #4]
 8014ebc:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 8014ec0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8014ec4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8014ec6:	f884 3978 	strb.w	r3, [r4, #2424]	; 0x978
 8014eca:	460a      	mov	r2, r1
 8014ecc:	460b      	mov	r3, r1
 8014ece:	f831 6f1d 	ldrh.w	r6, [r1, #29]!
 8014ed2:	f832 5f21 	ldrh.w	r5, [r2, #33]!
 8014ed6:	f833 0f25 	ldrh.w	r0, [r3, #37]!
 8014eda:	7889      	ldrb	r1, [r1, #2]
 8014edc:	7892      	ldrb	r2, [r2, #2]
 8014ede:	789b      	ldrb	r3, [r3, #2]
 8014ee0:	b084      	sub	sp, #16
 8014ee2:	f88d 1006 	strb.w	r1, [sp, #6]
 8014ee6:	f8ad 000c 	strh.w	r0, [sp, #12]
 8014eea:	a901      	add	r1, sp, #4
 8014eec:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8014ef0:	f88d 200a 	strb.w	r2, [sp, #10]
 8014ef4:	f8ad 6004 	strh.w	r6, [sp, #4]
 8014ef8:	f8ad 5008 	strh.w	r5, [sp, #8]
 8014efc:	f88d 300e 	strb.w	r3, [sp, #14]
 8014f00:	f7f6 fd42 	bl	800b988 <updateOrientation>
 8014f04:	a903      	add	r1, sp, #12
 8014f06:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8014f0a:	f7f6 fd3d 	bl	800b988 <updateOrientation>
 8014f0e:	a902      	add	r1, sp, #8
 8014f10:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8014f14:	f7f6 fd38 	bl	800b988 <updateOrientation>
 8014f18:	b004      	add	sp, #16
 8014f1a:	bd70      	pop	{r4, r5, r6, pc}
 8014f1c:	200002e0 	.word	0x200002e0

08014f20 <MotionFX_getKnobs>:
 8014f20:	4b1c      	ldr	r3, [pc, #112]	; (8014f94 <MotionFX_getKnobs+0x74>)
 8014f22:	791b      	ldrb	r3, [r3, #4]
 8014f24:	b903      	cbnz	r3, 8014f28 <MotionFX_getKnobs+0x8>
 8014f26:	4770      	bx	lr
 8014f28:	460a      	mov	r2, r1
 8014f2a:	2900      	cmp	r1, #0
 8014f2c:	d0fb      	beq.n	8014f26 <MotionFX_getKnobs+0x6>
 8014f2e:	b510      	push	{r4, lr}
 8014f30:	4604      	mov	r4, r0
 8014f32:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8014f34:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8014f36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014f38:	6093      	str	r3, [r2, #8]
 8014f3a:	6010      	str	r0, [r2, #0]
 8014f3c:	6051      	str	r1, [r2, #4]
 8014f3e:	7963      	ldrb	r3, [r4, #5]
 8014f40:	7313      	strb	r3, [r2, #12]
 8014f42:	69a0      	ldr	r0, [r4, #24]
 8014f44:	69e1      	ldr	r1, [r4, #28]
 8014f46:	6a23      	ldr	r3, [r4, #32]
 8014f48:	6193      	str	r3, [r2, #24]
 8014f4a:	6110      	str	r0, [r2, #16]
 8014f4c:	6151      	str	r1, [r2, #20]
 8014f4e:	7923      	ldrb	r3, [r4, #4]
 8014f50:	7713      	strb	r3, [r2, #28]
 8014f52:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014f56:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 8014f5a:	f894 3978 	ldrb.w	r3, [r4, #2424]	; 0x978
 8014f5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014f60:	f102 011d 	add.w	r1, r2, #29
 8014f64:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8014f68:	f7f6 fb66 	bl	800b638 <findAxis>
 8014f6c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8014f70:	f102 0121 	add.w	r1, r2, #33	; 0x21
 8014f74:	f7f6 fb60 	bl	800b638 <findAxis>
 8014f78:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8014f7c:	f102 0125 	add.w	r1, r2, #37	; 0x25
 8014f80:	f7f6 fb5a 	bl	800b638 <findAxis>
 8014f84:	2300      	movs	r3, #0
 8014f86:	f882 3020 	strb.w	r3, [r2, #32]
 8014f8a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8014f8e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8014f92:	bd10      	pop	{r4, pc}
 8014f94:	200002e0 	.word	0x200002e0

08014f98 <MotionFX_enable_6X>:
 8014f98:	4b0e      	ldr	r3, [pc, #56]	; (8014fd4 <MotionFX_enable_6X+0x3c>)
 8014f9a:	791b      	ldrb	r3, [r3, #4]
 8014f9c:	b903      	cbnz	r3, 8014fa0 <MotionFX_enable_6X+0x8>
 8014f9e:	4770      	bx	lr
 8014fa0:	2900      	cmp	r1, #0
 8014fa2:	d0fc      	beq.n	8014f9e <MotionFX_enable_6X+0x6>
 8014fa4:	b530      	push	{r4, r5, lr}
 8014fa6:	1d05      	adds	r5, r0, #4
 8014fa8:	b099      	sub	sp, #100	; 0x64
 8014faa:	4604      	mov	r4, r0
 8014fac:	4629      	mov	r1, r5
 8014fae:	225c      	movs	r2, #92	; 0x5c
 8014fb0:	a801      	add	r0, sp, #4
 8014fb2:	f002 fc77 	bl	80178a4 <memcpy>
 8014fb6:	4620      	mov	r0, r4
 8014fb8:	f7f7 f9bc 	bl	800c334 <MFX_emptyAttitude>
 8014fbc:	a901      	add	r1, sp, #4
 8014fbe:	4628      	mov	r0, r5
 8014fc0:	225c      	movs	r2, #92	; 0x5c
 8014fc2:	f002 fc6f 	bl	80178a4 <memcpy>
 8014fc6:	2300      	movs	r3, #0
 8014fc8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8014fcc:	7363      	strb	r3, [r4, #13]
 8014fce:	b019      	add	sp, #100	; 0x64
 8014fd0:	bd30      	pop	{r4, r5, pc}
 8014fd2:	bf00      	nop
 8014fd4:	200002e0 	.word	0x200002e0

08014fd8 <MotionFX_enable_9X>:
 8014fd8:	4b0e      	ldr	r3, [pc, #56]	; (8015014 <MotionFX_enable_9X+0x3c>)
 8014fda:	791b      	ldrb	r3, [r3, #4]
 8014fdc:	b903      	cbnz	r3, 8014fe0 <MotionFX_enable_9X+0x8>
 8014fde:	4770      	bx	lr
 8014fe0:	2900      	cmp	r1, #0
 8014fe2:	d0fc      	beq.n	8014fde <MotionFX_enable_9X+0x6>
 8014fe4:	b530      	push	{r4, r5, lr}
 8014fe6:	1d05      	adds	r5, r0, #4
 8014fe8:	b099      	sub	sp, #100	; 0x64
 8014fea:	4604      	mov	r4, r0
 8014fec:	4629      	mov	r1, r5
 8014fee:	225c      	movs	r2, #92	; 0x5c
 8014ff0:	a801      	add	r0, sp, #4
 8014ff2:	f002 fc57 	bl	80178a4 <memcpy>
 8014ff6:	4620      	mov	r0, r4
 8014ff8:	f7f7 f99c 	bl	800c334 <MFX_emptyAttitude>
 8014ffc:	a901      	add	r1, sp, #4
 8014ffe:	4628      	mov	r0, r5
 8015000:	225c      	movs	r2, #92	; 0x5c
 8015002:	f002 fc4f 	bl	80178a4 <memcpy>
 8015006:	2301      	movs	r3, #1
 8015008:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 801500c:	7363      	strb	r3, [r4, #13]
 801500e:	b019      	add	sp, #100	; 0x64
 8015010:	bd30      	pop	{r4, r5, pc}
 8015012:	bf00      	nop
 8015014:	200002e0 	.word	0x200002e0

08015018 <MotionFX_update>:
 8015018:	b470      	push	{r4, r5, r6}
 801501a:	4c06      	ldr	r4, [pc, #24]	; (8015034 <MotionFX_update+0x1c>)
 801501c:	9e03      	ldr	r6, [sp, #12]
 801501e:	7925      	ldrb	r5, [r4, #4]
 8015020:	b90d      	cbnz	r5, 8015026 <MotionFX_update+0xe>
 8015022:	bc70      	pop	{r4, r5, r6}
 8015024:	4770      	bx	lr
 8015026:	461c      	mov	r4, r3
 8015028:	ed94 0a00 	vldr	s0, [r4]
 801502c:	4633      	mov	r3, r6
 801502e:	bc70      	pop	{r4, r5, r6}
 8015030:	f7fc bf02 	b.w	8011e38 <iNemoEngine_API_Update>
 8015034:	200002e0 	.word	0x200002e0

08015038 <MotionFX_propagate>:
 8015038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801503c:	ed2d 8b06 	vpush	{d8-d10}
 8015040:	4ca3      	ldr	r4, [pc, #652]	; (80152d0 <MotionFX_propagate+0x298>)
 8015042:	7927      	ldrb	r7, [r4, #4]
 8015044:	b0a0      	sub	sp, #128	; 0x80
 8015046:	b927      	cbnz	r7, 8015052 <MotionFX_propagate+0x1a>
 8015048:	b020      	add	sp, #128	; 0x80
 801504a:	ecbd 8b06 	vpop	{d8-d10}
 801504e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015052:	4616      	mov	r6, r2
 8015054:	4604      	mov	r4, r0
 8015056:	f852 0f0c 	ldr.w	r0, [r2, #12]!
 801505a:	edd3 9a00 	vldr	s19, [r3]
 801505e:	460d      	mov	r5, r1
 8015060:	6851      	ldr	r1, [r2, #4]
 8015062:	6892      	ldr	r2, [r2, #8]
 8015064:	ab13      	add	r3, sp, #76	; 0x4c
 8015066:	c307      	stmia	r3!, {r0, r1, r2}
 8015068:	6830      	ldr	r0, [r6, #0]
 801506a:	6871      	ldr	r1, [r6, #4]
 801506c:	68b2      	ldr	r2, [r6, #8]
 801506e:	ab10      	add	r3, sp, #64	; 0x40
 8015070:	c307      	stmia	r3!, {r0, r1, r2}
 8015072:	4637      	mov	r7, r6
 8015074:	ab16      	add	r3, sp, #88	; 0x58
 8015076:	f857 0f18 	ldr.w	r0, [r7, #24]!
 801507a:	6879      	ldr	r1, [r7, #4]
 801507c:	68ba      	ldr	r2, [r7, #8]
 801507e:	f104 0a3a 	add.w	sl, r4, #58	; 0x3a
 8015082:	c307      	stmia	r3!, {r0, r1, r2}
 8015084:	aa13      	add	r2, sp, #76	; 0x4c
 8015086:	4651      	mov	r1, sl
 8015088:	a803      	add	r0, sp, #12
 801508a:	f7f6 fa73 	bl	800b574 <rotVect>
 801508e:	aa16      	add	r2, sp, #88	; 0x58
 8015090:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8015094:	a806      	add	r0, sp, #24
 8015096:	f7f6 fa6d 	bl	800b574 <rotVect>
 801509a:	f8d4 394c 	ldr.w	r3, [r4, #2380]	; 0x94c
 801509e:	2b09      	cmp	r3, #9
 80150a0:	d829      	bhi.n	80150f6 <MotionFX_propagate+0xbe>
 80150a2:	eddd 8a04 	vldr	s17, [sp, #16]
 80150a6:	ed9d 9a03 	vldr	s18, [sp, #12]
 80150aa:	ed9d 8a05 	vldr	s16, [sp, #20]
 80150ae:	ee68 7aa8 	vmul.f32	s15, s17, s17
 80150b2:	eee9 7a09 	vfma.f32	s15, s18, s18
 80150b6:	eee8 7a08 	vfma.f32	s15, s16, s16
 80150ba:	ee17 0a90 	vmov	r0, s15
 80150be:	f7eb fa43 	bl	8000548 <__aeabi_f2d>
 80150c2:	ec41 0b10 	vmov	d0, r0, r1
 80150c6:	f000 fe7d 	bl	8015dc4 <sqrt>
 80150ca:	ec51 0b10 	vmov	r0, r1, d0
 80150ce:	f7eb fd6b 	bl	8000ba8 <__aeabi_d2f>
 80150d2:	ee07 0a90 	vmov	s15, r0
 80150d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80150da:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80150de:	ee29 9a27 	vmul.f32	s18, s18, s15
 80150e2:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80150e6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80150ea:	ed8d 9a03 	vstr	s18, [sp, #12]
 80150ee:	edcd 8a04 	vstr	s17, [sp, #16]
 80150f2:	ed8d 8a05 	vstr	s16, [sp, #20]
 80150f6:	7923      	ldrb	r3, [r4, #4]
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	f000 80d3 	beq.w	80152a4 <MotionFX_propagate+0x26c>
 80150fe:	ee07 3a90 	vmov	s15, r3
 8015102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015106:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801510a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801510e:	f604 125c 	addw	r2, r4, #2396	; 0x95c
 8015112:	f504 6316 	add.w	r3, r4, #2400	; 0x960
 8015116:	f504 6613 	add.w	r6, r4, #2352	; 0x930
 801511a:	edd2 7a00 	vldr	s15, [r2]
 801511e:	eddd 8a06 	vldr	s17, [sp, #24]
 8015122:	ed9d 6a07 	vldr	s12, [sp, #28]
 8015126:	ed9d 8a08 	vldr	s16, [sp, #32]
 801512a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80152d4 <MotionFX_propagate+0x29c>
 801512e:	eddf 5a6a 	vldr	s11, [pc, #424]	; 80152d8 <MotionFX_propagate+0x2a0>
 8015132:	eee6 7aa8 	vfma.f32	s15, s13, s17
 8015136:	ee26 9a07 	vmul.f32	s18, s12, s14
 801513a:	edc2 7a00 	vstr	s15, [r2]
 801513e:	edd3 7a00 	vldr	s15, [r3]
 8015142:	ed8d 9a07 	vstr	s18, [sp, #28]
 8015146:	eee6 7a86 	vfma.f32	s15, s13, s12
 801514a:	f604 1264 	addw	r2, r4, #2404	; 0x964
 801514e:	ee68 8a87 	vmul.f32	s17, s17, s14
 8015152:	edc3 7a00 	vstr	s15, [r3]
 8015156:	edd2 7a00 	vldr	s15, [r2]
 801515a:	edcd 8a06 	vstr	s17, [sp, #24]
 801515e:	eee6 7a88 	vfma.f32	s15, s13, s16
 8015162:	f604 1344 	addw	r3, r4, #2372	; 0x944
 8015166:	ee28 8a07 	vmul.f32	s16, s16, s14
 801516a:	edc2 7a00 	vstr	s15, [r2]
 801516e:	edd3 7a00 	vldr	s15, [r3]
 8015172:	ed8d 8a08 	vstr	s16, [sp, #32]
 8015176:	f504 6314 	add.w	r3, r4, #2368	; 0x940
 801517a:	ed93 7a00 	vldr	s14, [r3]
 801517e:	ee39 9a67 	vsub.f32	s18, s18, s15
 8015182:	ee78 8ac7 	vsub.f32	s17, s17, s14
 8015186:	ee69 7a09 	vmul.f32	s15, s18, s18
 801518a:	f604 1348 	addw	r3, r4, #2376	; 0x948
 801518e:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8015192:	ed93 7a00 	vldr	s14, [r3]
 8015196:	ee38 8a47 	vsub.f32	s16, s16, s14
 801519a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801519e:	eee8 7a08 	vfma.f32	s15, s16, s16
 80151a2:	ee29 0a80 	vmul.f32	s0, s19, s0
 80151a6:	eef4 7ae5 	vcmpe.f32	s15, s11
 80151aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151ae:	dd7e      	ble.n	80152ae <MotionFX_propagate+0x276>
 80151b0:	eeb1 aae7 	vsqrt.f32	s20, s15
 80151b4:	ee6a 9a00 	vmul.f32	s19, s20, s0
 80151b8:	eeb0 0a69 	vmov.f32	s0, s19
 80151bc:	f000 fd96 	bl	8015cec <sinf>
 80151c0:	eec0 7a0a 	vdiv.f32	s15, s0, s20
 80151c4:	eeb0 0a69 	vmov.f32	s0, s19
 80151c8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80151cc:	ee29 9a27 	vmul.f32	s18, s18, s15
 80151d0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80151d4:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 80151d8:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 80151dc:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 80151e0:	f000 fd1e 	bl	8015c20 <cosf>
 80151e4:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
 80151e8:	f604 1838 	addw	r8, r4, #2360	; 0x938
 80151ec:	a809      	add	r0, sp, #36	; 0x24
 80151ee:	4632      	mov	r2, r6
 80151f0:	4631      	mov	r1, r6
 80151f2:	f7f6 fc55 	bl	800baa0 <qmult>
 80151f6:	edd8 7a00 	vldr	s15, [r8]
 80151fa:	ed96 7a00 	vldr	s14, [r6]
 80151fe:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	; 0x950
 8015202:	f604 1934 	addw	r9, r4, #2356	; 0x934
 8015206:	edd9 6a00 	vldr	s13, [r9]
 801520a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801520e:	f604 173c 	addw	r7, r4, #2364	; 0x93c
 8015212:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8015216:	3301      	adds	r3, #1
 8015218:	aa13      	add	r2, sp, #76	; 0x4c
 801521a:	edd7 6a00 	vldr	s13, [r7]
 801521e:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8015222:	4651      	mov	r1, sl
 8015224:	a809      	add	r0, sp, #36	; 0x24
 8015226:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801522a:	eee7 7a07 	vfma.f32	s15, s14, s14
 801522e:	eef1 6ae7 	vsqrt.f32	s13, s15
 8015232:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8015236:	ee27 7a27 	vmul.f32	s14, s14, s15
 801523a:	ed86 7a00 	vstr	s14, [r6]
 801523e:	ed99 7a00 	vldr	s14, [r9]
 8015242:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015246:	ed89 7a00 	vstr	s14, [r9]
 801524a:	ed98 7a00 	vldr	s14, [r8]
 801524e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015252:	ed88 7a00 	vstr	s14, [r8]
 8015256:	ed97 7a00 	vldr	s14, [r7]
 801525a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801525e:	edc7 7a00 	vstr	s15, [r7]
 8015262:	f8a4 3950 	strh.w	r3, [r4, #2384]	; 0x950
 8015266:	f7f6 f985 	bl	800b574 <rotVect>
 801526a:	f8d9 0000 	ldr.w	r0, [r9]
 801526e:	f8d8 1000 	ldr.w	r1, [r8]
 8015272:	683a      	ldr	r2, [r7, #0]
 8015274:	6833      	ldr	r3, [r6, #0]
 8015276:	60eb      	str	r3, [r5, #12]
 8015278:	6128      	str	r0, [r5, #16]
 801527a:	6169      	str	r1, [r5, #20]
 801527c:	61aa      	str	r2, [r5, #24]
 801527e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8015282:	9301      	str	r3, [sp, #4]
 8015284:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8015288:	9300      	str	r3, [sp, #0]
 801528a:	a909      	add	r1, sp, #36	; 0x24
 801528c:	f105 031c 	add.w	r3, r5, #28
 8015290:	462a      	mov	r2, r5
 8015292:	f105 000c 	add.w	r0, r5, #12
 8015296:	f7f7 fc2b 	bl	800caf0 <output_update>
 801529a:	b020      	add	sp, #128	; 0x80
 801529c:	ecbd 8b06 	vpop	{d8-d10}
 80152a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152a4:	2301      	movs	r3, #1
 80152a6:	7123      	strb	r3, [r4, #4]
 80152a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80152ac:	e72f      	b.n	801510e <MotionFX_propagate+0xd6>
 80152ae:	ee68 8a80 	vmul.f32	s17, s17, s0
 80152b2:	ee29 9a00 	vmul.f32	s18, s18, s0
 80152b6:	ee28 8a00 	vmul.f32	s16, s16, s0
 80152ba:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80152be:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 80152c2:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 80152c6:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 80152ca:	930c      	str	r3, [sp, #48]	; 0x30
 80152cc:	e78c      	b.n	80151e8 <MotionFX_propagate+0x1b0>
 80152ce:	bf00      	nop
 80152d0:	200002e0 	.word	0x200002e0
 80152d4:	3c8efa35 	.word	0x3c8efa35
 80152d8:	38d1b718 	.word	0x38d1b718

080152dc <MotionFX_MagCal_init>:
 80152dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152de:	4c44      	ldr	r4, [pc, #272]	; (80153f0 <MotionFX_MagCal_init+0x114>)
 80152e0:	7923      	ldrb	r3, [r4, #4]
 80152e2:	b903      	cbnz	r3, 80152e6 <MotionFX_MagCal_init+0xa>
 80152e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80152e6:	1e43      	subs	r3, r0, #1
 80152e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80152ec:	4605      	mov	r5, r0
 80152ee:	d2f9      	bcs.n	80152e4 <MotionFX_MagCal_init+0x8>
 80152f0:	2900      	cmp	r1, #0
 80152f2:	d139      	bne.n	8015368 <MotionFX_MagCal_init+0x8c>
 80152f4:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
 80152f8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80152fc:	4a3d      	ldr	r2, [pc, #244]	; (80153f4 <MotionFX_MagCal_init+0x118>)
 80152fe:	1b5b      	subs	r3, r3, r5
 8015300:	ee07 3a90 	vmov	s15, r3
 8015304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015308:	23c8      	movs	r3, #200	; 0xc8
 801530a:	eef0 7ae7 	vabs.f32	s15, s15
 801530e:	fb93 f3f5 	sdiv	r3, r3, r5
 8015312:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015316:	b2db      	uxtb	r3, r3
 8015318:	2b0f      	cmp	r3, #15
 801531a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801531e:	bf28      	it	cs
 8015320:	230f      	movcs	r3, #15
 8015322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015326:	6015      	str	r5, [r2, #0]
 8015328:	f884 33ce 	strb.w	r3, [r4, #974]	; 0x3ce
 801532c:	b22d      	sxth	r5, r5
 801532e:	dc0e      	bgt.n	801534e <MotionFX_MagCal_init+0x72>
 8015330:	edd4 7a03 	vldr	s15, [r4, #12]
 8015334:	eddf 6a30 	vldr	s13, [pc, #192]	; 80153f8 <MotionFX_MagCal_init+0x11c>
 8015338:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80153fc <MotionFX_MagCal_init+0x120>
 801533c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015340:	eef0 7ae7 	vabs.f32	s15, s15
 8015344:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801534c:	dd08      	ble.n	8015360 <MotionFX_MagCal_init+0x84>
 801534e:	2300      	movs	r3, #0
 8015350:	492b      	ldr	r1, [pc, #172]	; (8015400 <MotionFX_MagCal_init+0x124>)
 8015352:	8165      	strh	r5, [r4, #10]
 8015354:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8015358:	60e1      	str	r1, [r4, #12]
 801535a:	8223      	strh	r3, [r4, #16]
 801535c:	6163      	str	r3, [r4, #20]
 801535e:	8122      	strh	r2, [r4, #8]
 8015360:	2300      	movs	r3, #0
 8015362:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
 8015366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015368:	2600      	movs	r6, #0
 801536a:	4826      	ldr	r0, [pc, #152]	; (8015404 <MotionFX_MagCal_init+0x128>)
 801536c:	61a0      	str	r0, [r4, #24]
 801536e:	f44f 0202 	mov.w	r2, #8519680	; 0x820000
 8015372:	4631      	mov	r1, r6
 8015374:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015378:	6122      	str	r2, [r4, #16]
 801537a:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 801537e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015382:	6166      	str	r6, [r4, #20]
 8015384:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
 8015388:	6566      	str	r6, [r4, #84]	; 0x54
 801538a:	83a6      	strh	r6, [r4, #28]
 801538c:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 8015390:	f002 fab0 	bl	80178f4 <memset>
 8015394:	23ff      	movs	r3, #255	; 0xff
 8015396:	225f      	movs	r2, #95	; 0x5f
 8015398:	f884 20a9 	strb.w	r2, [r4, #169]	; 0xa9
 801539c:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
 80153a0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 80153a4:	2200      	movs	r2, #0
 80153a6:	2300      	movs	r3, #0
 80153a8:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80153ac:	f44f 7780 	mov.w	r7, #256	; 0x100
 80153b0:	4631      	mov	r1, r6
 80153b2:	62a6      	str	r6, [r4, #40]	; 0x28
 80153b4:	2230      	movs	r2, #48	; 0x30
 80153b6:	f44f 6670 	mov.w	r6, #3840	; 0xf00
 80153ba:	f104 0074 	add.w	r0, r4, #116	; 0x74
 80153be:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
 80153c2:	85a6      	strh	r6, [r4, #44]	; 0x2c
 80153c4:	f002 fa96 	bl	80178f4 <memset>
 80153c8:	f1a5 030a 	sub.w	r3, r5, #10
 80153cc:	b29b      	uxth	r3, r3
 80153ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80153d2:	2b32      	cmp	r3, #50	; 0x32
 80153d4:	f8a4 7074 	strh.w	r7, [r4, #116]	; 0x74
 80153d8:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
 80153dc:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
 80153e0:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
 80153e4:	d888      	bhi.n	80152f8 <MotionFX_MagCal_init+0x1c>
 80153e6:	2301      	movs	r3, #1
 80153e8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80153ec:	e784      	b.n	80152f8 <MotionFX_MagCal_init+0x1c>
 80153ee:	bf00      	nop
 80153f0:	200002e0 	.word	0x200002e0
 80153f4:	20000000 	.word	0x20000000
 80153f8:	3dcccccd 	.word	0x3dcccccd
 80153fc:	3c23d70a 	.word	0x3c23d70a
 8015400:	3dcccccd 	.word	0x3dcccccd
 8015404:	200015d4 	.word	0x200015d4

08015408 <MotionFX_MagCal_run>:
 8015408:	4a3e      	ldr	r2, [pc, #248]	; (8015504 <MotionFX_MagCal_run+0xfc>)
 801540a:	7913      	ldrb	r3, [r2, #4]
 801540c:	2b00      	cmp	r3, #0
 801540e:	d077      	beq.n	8015500 <MotionFX_MagCal_run+0xf8>
 8015410:	ed90 7a00 	vldr	s14, [r0]
 8015414:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8015508 <MotionFX_MagCal_run+0x100>
 8015418:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801541c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015420:	bfb4      	ite	lt
 8015422:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8015426:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 801542a:	eee7 7a26 	vfma.f32	s15, s14, s13
 801542e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015430:	ed90 7a01 	vldr	s14, [r0, #4]
 8015434:	eddf 6a34 	vldr	s13, [pc, #208]	; 8015508 <MotionFX_MagCal_run+0x100>
 8015438:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 801543c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015440:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015448:	ee17 1a90 	vmov	r1, s15
 801544c:	bfb4      	ite	lt
 801544e:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8015452:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8015456:	eee7 7a26 	vfma.f32	s15, s14, s13
 801545a:	ed90 7a02 	vldr	s14, [r0, #8]
 801545e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8015508 <MotionFX_MagCal_run+0x100>
 8015462:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015466:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801546a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801546e:	ee17 4a90 	vmov	r4, s15
 8015472:	bfac      	ite	ge
 8015474:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8015478:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 801547c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8015480:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015484:	ee17 7a90 	vmov	r7, s15
 8015488:	b383      	cbz	r3, 80154ec <MotionFX_MagCal_run+0xe4>
 801548a:	4820      	ldr	r0, [pc, #128]	; (801550c <MotionFX_MagCal_run+0x104>)
 801548c:	6805      	ldr	r5, [r0, #0]
 801548e:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
 8015492:	fb15 f503 	smulbb	r5, r5, r3
 8015496:	f8a0 53d0 	strh.w	r5, [r0, #976]	; 0x3d0
 801549a:	00dd      	lsls	r5, r3, #3
 801549c:	f647 76fe 	movw	r6, #32766	; 0x7ffe
 80154a0:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8015510 <MotionFX_MagCal_run+0x108>
 80154a4:	42b1      	cmp	r1, r6
 80154a6:	bfa8      	it	ge
 80154a8:	4631      	movge	r1, r6
 80154aa:	42b7      	cmp	r7, r6
 80154ac:	bfa8      	it	ge
 80154ae:	4637      	movge	r7, r6
 80154b0:	4561      	cmp	r1, ip
 80154b2:	4608      	mov	r0, r1
 80154b4:	bfb8      	it	lt
 80154b6:	4660      	movlt	r0, ip
 80154b8:	4564      	cmp	r4, ip
 80154ba:	db1f      	blt.n	80154fc <MotionFX_MagCal_run+0xf4>
 80154bc:	42b4      	cmp	r4, r6
 80154be:	bfa8      	it	ge
 80154c0:	4634      	movge	r4, r6
 80154c2:	b224      	sxth	r4, r4
 80154c4:	4e12      	ldr	r6, [pc, #72]	; (8015510 <MotionFX_MagCal_run+0x108>)
 80154c6:	f892 13ce 	ldrb.w	r1, [r2, #974]	; 0x3ce
 80154ca:	3301      	adds	r3, #1
 80154cc:	4415      	add	r5, r2
 80154ce:	b2db      	uxtb	r3, r3
 80154d0:	42b7      	cmp	r7, r6
 80154d2:	bfb8      	it	lt
 80154d4:	4637      	movlt	r7, r6
 80154d6:	428b      	cmp	r3, r1
 80154d8:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
 80154dc:	f8a5 03d2 	strh.w	r0, [r5, #978]	; 0x3d2
 80154e0:	f8a5 43d4 	strh.w	r4, [r5, #980]	; 0x3d4
 80154e4:	f8a5 73d6 	strh.w	r7, [r5, #982]	; 0x3d6
 80154e8:	d014      	beq.n	8015514 <MotionFX_MagCal_run+0x10c>
 80154ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154ec:	68c0      	ldr	r0, [r0, #12]
 80154ee:	f8c2 03c8 	str.w	r0, [r2, #968]	; 0x3c8
 80154f2:	2001      	movs	r0, #1
 80154f4:	f882 03cc 	strb.w	r0, [r2, #972]	; 0x3cc
 80154f8:	461d      	mov	r5, r3
 80154fa:	e7cf      	b.n	801549c <MotionFX_MagCal_run+0x94>
 80154fc:	4634      	mov	r4, r6
 80154fe:	e7e1      	b.n	80154c4 <MotionFX_MagCal_run+0xbc>
 8015500:	4770      	bx	lr
 8015502:	bf00      	nop
 8015504:	200002e0 	.word	0x200002e0
 8015508:	43fa0000 	.word	0x43fa0000
 801550c:	20000000 	.word	0x20000000
 8015510:	ffff8002 	.word	0xffff8002
 8015514:	f892 33cc 	ldrb.w	r3, [r2, #972]	; 0x3cc
 8015518:	f8d2 63c8 	ldr.w	r6, [r2, #968]	; 0x3c8
 801551c:	2000      	movs	r0, #0
 801551e:	f882 0448 	strb.w	r0, [r2, #1096]	; 0x448
 8015522:	2b00      	cmp	r3, #0
 8015524:	f000 8159 	beq.w	80157da <MotionFX_MagCal_run+0x3d2>
 8015528:	e9d2 4005 	ldrd	r4, r0, [r2, #20]
 801552c:	8a57      	ldrh	r7, [r2, #18]
 801552e:	8a13      	ldrh	r3, [r2, #16]
 8015530:	2900      	cmp	r1, #0
 8015532:	f000 8150 	beq.w	80157d6 <MotionFX_MagCal_run+0x3ce>
 8015536:	2f00      	cmp	r7, #0
 8015538:	f000 814d 	beq.w	80157d6 <MotionFX_MagCal_run+0x3ce>
 801553c:	42bb      	cmp	r3, r7
 801553e:	bf28      	it	cs
 8015540:	463b      	movcs	r3, r7
 8015542:	3301      	adds	r3, #1
 8015544:	b29b      	uxth	r3, r3
 8015546:	42bb      	cmp	r3, r7
 8015548:	bf28      	it	cs
 801554a:	463b      	movcs	r3, r7
 801554c:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
 8015550:	191d      	adds	r5, r3, r4
 8015552:	f04f 0c01 	mov.w	ip, #1
 8015556:	f800 c035 	strb.w	ip, [r0, r5, lsl #3]
 801555a:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 801555e:	f8d2 e3d2 	ldr.w	lr, [r2, #978]	; 0x3d2
 8015562:	f8c5 e002 	str.w	lr, [r5, #2]
 8015566:	f8b2 e3d6 	ldrh.w	lr, [r2, #982]	; 0x3d6
 801556a:	f8a5 e006 	strh.w	lr, [r5, #6]
 801556e:	4561      	cmp	r1, ip
 8015570:	f000 812a 	beq.w	80157c8 <MotionFX_MagCal_run+0x3c0>
 8015574:	4463      	add	r3, ip
 8015576:	b29b      	uxth	r3, r3
 8015578:	42bb      	cmp	r3, r7
 801557a:	bf28      	it	cs
 801557c:	463b      	movcs	r3, r7
 801557e:	eb03 0e04 	add.w	lr, r3, r4
 8015582:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 8015586:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 801558a:	f8d2 e3da 	ldr.w	lr, [r2, #986]	; 0x3da
 801558e:	f8c5 e002 	str.w	lr, [r5, #2]
 8015592:	f8b2 e3de 	ldrh.w	lr, [r2, #990]	; 0x3de
 8015596:	f8a5 e006 	strh.w	lr, [r5, #6]
 801559a:	2902      	cmp	r1, #2
 801559c:	f000 8114 	beq.w	80157c8 <MotionFX_MagCal_run+0x3c0>
 80155a0:	4463      	add	r3, ip
 80155a2:	b29b      	uxth	r3, r3
 80155a4:	42bb      	cmp	r3, r7
 80155a6:	bf28      	it	cs
 80155a8:	463b      	movcs	r3, r7
 80155aa:	eb03 0e04 	add.w	lr, r3, r4
 80155ae:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 80155b2:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 80155b6:	f8d2 e3e2 	ldr.w	lr, [r2, #994]	; 0x3e2
 80155ba:	f8c5 e002 	str.w	lr, [r5, #2]
 80155be:	f8b2 e3e6 	ldrh.w	lr, [r2, #998]	; 0x3e6
 80155c2:	f8a5 e006 	strh.w	lr, [r5, #6]
 80155c6:	2903      	cmp	r1, #3
 80155c8:	f000 80fe 	beq.w	80157c8 <MotionFX_MagCal_run+0x3c0>
 80155cc:	4463      	add	r3, ip
 80155ce:	b29b      	uxth	r3, r3
 80155d0:	42bb      	cmp	r3, r7
 80155d2:	bf28      	it	cs
 80155d4:	463b      	movcs	r3, r7
 80155d6:	eb03 0e04 	add.w	lr, r3, r4
 80155da:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 80155de:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 80155e2:	f8d2 e3ea 	ldr.w	lr, [r2, #1002]	; 0x3ea
 80155e6:	f8c5 e002 	str.w	lr, [r5, #2]
 80155ea:	f8b2 e3ee 	ldrh.w	lr, [r2, #1006]	; 0x3ee
 80155ee:	f8a5 e006 	strh.w	lr, [r5, #6]
 80155f2:	2904      	cmp	r1, #4
 80155f4:	f000 80e8 	beq.w	80157c8 <MotionFX_MagCal_run+0x3c0>
 80155f8:	4463      	add	r3, ip
 80155fa:	b29b      	uxth	r3, r3
 80155fc:	42bb      	cmp	r3, r7
 80155fe:	bf28      	it	cs
 8015600:	463b      	movcs	r3, r7
 8015602:	eb03 0e04 	add.w	lr, r3, r4
 8015606:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 801560a:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 801560e:	f8d2 e3f2 	ldr.w	lr, [r2, #1010]	; 0x3f2
 8015612:	f8c5 e002 	str.w	lr, [r5, #2]
 8015616:	f8b2 e3f6 	ldrh.w	lr, [r2, #1014]	; 0x3f6
 801561a:	f8a5 e006 	strh.w	lr, [r5, #6]
 801561e:	2905      	cmp	r1, #5
 8015620:	f000 80d2 	beq.w	80157c8 <MotionFX_MagCal_run+0x3c0>
 8015624:	4463      	add	r3, ip
 8015626:	b29b      	uxth	r3, r3
 8015628:	42bb      	cmp	r3, r7
 801562a:	bf28      	it	cs
 801562c:	463b      	movcs	r3, r7
 801562e:	441c      	add	r4, r3
 8015630:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
 8015634:	f800 c034 	strb.w	ip, [r0, r4, lsl #3]
 8015638:	f8d2 43fa 	ldr.w	r4, [r2, #1018]	; 0x3fa
 801563c:	f8c5 4002 	str.w	r4, [r5, #2]
 8015640:	f8b2 43fe 	ldrh.w	r4, [r2, #1022]	; 0x3fe
 8015644:	80ec      	strh	r4, [r5, #6]
 8015646:	2906      	cmp	r1, #6
 8015648:	f000 80be 	beq.w	80157c8 <MotionFX_MagCal_run+0x3c0>
 801564c:	4463      	add	r3, ip
 801564e:	b29b      	uxth	r3, r3
 8015650:	42bb      	cmp	r3, r7
 8015652:	bf28      	it	cs
 8015654:	463b      	movcs	r3, r7
 8015656:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
 801565a:	eb03 0c04 	add.w	ip, r3, r4
 801565e:	2501      	movs	r5, #1
 8015660:	f800 503c 	strb.w	r5, [r0, ip, lsl #3]
 8015664:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8015668:	f8d2 e402 	ldr.w	lr, [r2, #1026]	; 0x402
 801566c:	f8cc e002 	str.w	lr, [ip, #2]
 8015670:	f8b2 e406 	ldrh.w	lr, [r2, #1030]	; 0x406
 8015674:	f8ac e006 	strh.w	lr, [ip, #6]
 8015678:	2907      	cmp	r1, #7
 801567a:	f000 80a5 	beq.w	80157c8 <MotionFX_MagCal_run+0x3c0>
 801567e:	442b      	add	r3, r5
 8015680:	b29b      	uxth	r3, r3
 8015682:	42bb      	cmp	r3, r7
 8015684:	bf28      	it	cs
 8015686:	463b      	movcs	r3, r7
 8015688:	eb03 0e04 	add.w	lr, r3, r4
 801568c:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8015690:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8015694:	f8d2 e40a 	ldr.w	lr, [r2, #1034]	; 0x40a
 8015698:	f8cc e002 	str.w	lr, [ip, #2]
 801569c:	f8b2 e40e 	ldrh.w	lr, [r2, #1038]	; 0x40e
 80156a0:	f8ac e006 	strh.w	lr, [ip, #6]
 80156a4:	2908      	cmp	r1, #8
 80156a6:	f000 808f 	beq.w	80157c8 <MotionFX_MagCal_run+0x3c0>
 80156aa:	442b      	add	r3, r5
 80156ac:	b29b      	uxth	r3, r3
 80156ae:	42bb      	cmp	r3, r7
 80156b0:	bf28      	it	cs
 80156b2:	463b      	movcs	r3, r7
 80156b4:	eb03 0e04 	add.w	lr, r3, r4
 80156b8:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 80156bc:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 80156c0:	f8d2 e412 	ldr.w	lr, [r2, #1042]	; 0x412
 80156c4:	f8cc e002 	str.w	lr, [ip, #2]
 80156c8:	f8b2 e416 	ldrh.w	lr, [r2, #1046]	; 0x416
 80156cc:	f8ac e006 	strh.w	lr, [ip, #6]
 80156d0:	2909      	cmp	r1, #9
 80156d2:	d079      	beq.n	80157c8 <MotionFX_MagCal_run+0x3c0>
 80156d4:	442b      	add	r3, r5
 80156d6:	b29b      	uxth	r3, r3
 80156d8:	42bb      	cmp	r3, r7
 80156da:	bf28      	it	cs
 80156dc:	463b      	movcs	r3, r7
 80156de:	eb03 0e04 	add.w	lr, r3, r4
 80156e2:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 80156e6:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 80156ea:	f8d2 e41a 	ldr.w	lr, [r2, #1050]	; 0x41a
 80156ee:	f8cc e002 	str.w	lr, [ip, #2]
 80156f2:	f8b2 e41e 	ldrh.w	lr, [r2, #1054]	; 0x41e
 80156f6:	f8ac e006 	strh.w	lr, [ip, #6]
 80156fa:	290a      	cmp	r1, #10
 80156fc:	d064      	beq.n	80157c8 <MotionFX_MagCal_run+0x3c0>
 80156fe:	442b      	add	r3, r5
 8015700:	b29b      	uxth	r3, r3
 8015702:	42bb      	cmp	r3, r7
 8015704:	bf28      	it	cs
 8015706:	463b      	movcs	r3, r7
 8015708:	eb03 0e04 	add.w	lr, r3, r4
 801570c:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8015710:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8015714:	f8d2 e422 	ldr.w	lr, [r2, #1058]	; 0x422
 8015718:	f8cc e002 	str.w	lr, [ip, #2]
 801571c:	f8b2 e426 	ldrh.w	lr, [r2, #1062]	; 0x426
 8015720:	f8ac e006 	strh.w	lr, [ip, #6]
 8015724:	290b      	cmp	r1, #11
 8015726:	d04f      	beq.n	80157c8 <MotionFX_MagCal_run+0x3c0>
 8015728:	442b      	add	r3, r5
 801572a:	b29b      	uxth	r3, r3
 801572c:	42bb      	cmp	r3, r7
 801572e:	bf28      	it	cs
 8015730:	463b      	movcs	r3, r7
 8015732:	eb03 0e04 	add.w	lr, r3, r4
 8015736:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 801573a:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 801573e:	f8d2 e42a 	ldr.w	lr, [r2, #1066]	; 0x42a
 8015742:	f8cc e002 	str.w	lr, [ip, #2]
 8015746:	f8b2 e42e 	ldrh.w	lr, [r2, #1070]	; 0x42e
 801574a:	f8ac e006 	strh.w	lr, [ip, #6]
 801574e:	290c      	cmp	r1, #12
 8015750:	d03a      	beq.n	80157c8 <MotionFX_MagCal_run+0x3c0>
 8015752:	442b      	add	r3, r5
 8015754:	b29b      	uxth	r3, r3
 8015756:	42bb      	cmp	r3, r7
 8015758:	bf28      	it	cs
 801575a:	463b      	movcs	r3, r7
 801575c:	eb03 0e04 	add.w	lr, r3, r4
 8015760:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8015764:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8015768:	f8d2 e432 	ldr.w	lr, [r2, #1074]	; 0x432
 801576c:	f8cc e002 	str.w	lr, [ip, #2]
 8015770:	f8b2 e436 	ldrh.w	lr, [r2, #1078]	; 0x436
 8015774:	f8ac e006 	strh.w	lr, [ip, #6]
 8015778:	290d      	cmp	r1, #13
 801577a:	d025      	beq.n	80157c8 <MotionFX_MagCal_run+0x3c0>
 801577c:	442b      	add	r3, r5
 801577e:	b29b      	uxth	r3, r3
 8015780:	42bb      	cmp	r3, r7
 8015782:	bf28      	it	cs
 8015784:	463b      	movcs	r3, r7
 8015786:	eb03 0e04 	add.w	lr, r3, r4
 801578a:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 801578e:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8015792:	f8d2 e43a 	ldr.w	lr, [r2, #1082]	; 0x43a
 8015796:	f8cc e002 	str.w	lr, [ip, #2]
 801579a:	f8b2 e43e 	ldrh.w	lr, [r2, #1086]	; 0x43e
 801579e:	f8ac e006 	strh.w	lr, [ip, #6]
 80157a2:	290e      	cmp	r1, #14
 80157a4:	d010      	beq.n	80157c8 <MotionFX_MagCal_run+0x3c0>
 80157a6:	442b      	add	r3, r5
 80157a8:	b29b      	uxth	r3, r3
 80157aa:	42bb      	cmp	r3, r7
 80157ac:	bf28      	it	cs
 80157ae:	463b      	movcs	r3, r7
 80157b0:	441c      	add	r4, r3
 80157b2:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
 80157b6:	f800 5034 	strb.w	r5, [r0, r4, lsl #3]
 80157ba:	f8d2 0442 	ldr.w	r0, [r2, #1090]	; 0x442
 80157be:	f8c7 0002 	str.w	r0, [r7, #2]
 80157c2:	f8b2 0446 	ldrh.w	r0, [r2, #1094]	; 0x446
 80157c6:	80f8      	strh	r0, [r7, #6]
 80157c8:	3901      	subs	r1, #1
 80157ca:	b2c9      	uxtb	r1, r1
 80157cc:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80157d0:	f8b1 43d0 	ldrh.w	r4, [r1, #976]	; 0x3d0
 80157d4:	4434      	add	r4, r6
 80157d6:	8213      	strh	r3, [r2, #16]
 80157d8:	6154      	str	r4, [r2, #20]
 80157da:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 80157de:	2b00      	cmp	r3, #0
 80157e0:	f43f ae83 	beq.w	80154ea <MotionFX_MagCal_run+0xe2>
 80157e4:	8a11      	ldrh	r1, [r2, #16]
 80157e6:	8a53      	ldrh	r3, [r2, #18]
 80157e8:	428b      	cmp	r3, r1
 80157ea:	d022      	beq.n	8015832 <MotionFX_MagCal_run+0x42a>
 80157ec:	b341      	cbz	r1, 8015840 <MotionFX_MagCal_run+0x438>
 80157ee:	6953      	ldr	r3, [r2, #20]
 80157f0:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 80157f4:	3301      	adds	r3, #1
 80157f6:	4403      	add	r3, r0
 80157f8:	1c58      	adds	r0, r3, #1
 80157fa:	d021      	beq.n	8015840 <MotionFX_MagCal_run+0x438>
 80157fc:	f503 541c 	add.w	r4, r3, #9984	; 0x2700
 8015800:	3410      	adds	r4, #16
 8015802:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8015804:	42a0      	cmp	r0, r4
 8015806:	f8b2 4058 	ldrh.w	r4, [r2, #88]	; 0x58
 801580a:	bf84      	itt	hi
 801580c:	6553      	strhi	r3, [r2, #84]	; 0x54
 801580e:	4618      	movhi	r0, r3
 8015810:	4420      	add	r0, r4
 8015812:	4283      	cmp	r3, r0
 8015814:	f4ff ae69 	bcc.w	80154ea <MotionFX_MagCal_run+0xe2>
 8015818:	b131      	cbz	r1, 8015828 <MotionFX_MagCal_run+0x420>
 801581a:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 801581e:	6952      	ldr	r2, [r2, #20]
 8015820:	3901      	subs	r1, #1
 8015822:	fb00 2111 	mls	r1, r0, r1, r2
 8015826:	b289      	uxth	r1, r1
 8015828:	1a5b      	subs	r3, r3, r1
 801582a:	b21b      	sxth	r3, r3
 801582c:	42a3      	cmp	r3, r4
 801582e:	f6ff ae5c 	blt.w	80154ea <MotionFX_MagCal_run+0xe2>
 8015832:	4905      	ldr	r1, [pc, #20]	; (8015848 <MotionFX_MagCal_run+0x440>)
 8015834:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015838:	f101 0014 	add.w	r0, r1, #20
 801583c:	f7fd babc 	b.w	8012db8 <MEMS_runMagCal>
 8015840:	f242 7410 	movw	r4, #10000	; 0x2710
 8015844:	2300      	movs	r3, #0
 8015846:	e7dc      	b.n	8015802 <MotionFX_MagCal_run+0x3fa>
 8015848:	200002e8 	.word	0x200002e8

0801584c <MotionFX_MagCal_getParams>:
 801584c:	b4f0      	push	{r4, r5, r6, r7}
 801584e:	4f1b      	ldr	r7, [pc, #108]	; (80158bc <MotionFX_MagCal_getParams+0x70>)
 8015850:	793b      	ldrb	r3, [r7, #4]
 8015852:	b08e      	sub	sp, #56	; 0x38
 8015854:	b373      	cbz	r3, 80158b4 <MotionFX_MagCal_getParams+0x68>
 8015856:	f107 0574 	add.w	r5, r7, #116	; 0x74
 801585a:	4606      	mov	r6, r0
 801585c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801585e:	ac01      	add	r4, sp, #4
 8015860:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015862:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015864:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015866:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015868:	ed9d 7a03 	vldr	s14, [sp, #12]
 801586c:	eddd 6a02 	vldr	s13, [sp, #8]
 8015870:	eddd 7a04 	vldr	s15, [sp, #16]
 8015874:	ed9f 6a12 	vldr	s12, [pc, #72]	; 80158c0 <MotionFX_MagCal_getParams+0x74>
 8015878:	682d      	ldr	r5, [r5, #0]
 801587a:	f897 7074 	ldrb.w	r7, [r7, #116]	; 0x74
 801587e:	7337      	strb	r7, [r6, #12]
 8015880:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8015884:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8015888:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801588c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801588e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015892:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015896:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801589a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801589e:	ee66 6a86 	vmul.f32	s13, s13, s12
 80158a2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80158a6:	6025      	str	r5, [r4, #0]
 80158a8:	edc6 6a00 	vstr	s13, [r6]
 80158ac:	ed86 7a01 	vstr	s14, [r6, #4]
 80158b0:	edc6 7a02 	vstr	s15, [r6, #8]
 80158b4:	b00e      	add	sp, #56	; 0x38
 80158b6:	bcf0      	pop	{r4, r5, r6, r7}
 80158b8:	4770      	bx	lr
 80158ba:	bf00      	nop
 80158bc:	200002e0 	.word	0x200002e0
 80158c0:	3b03126f 	.word	0x3b03126f

080158c4 <_Znwj>:
 80158c4:	2801      	cmp	r0, #1
 80158c6:	bf38      	it	cc
 80158c8:	2001      	movcc	r0, #1
 80158ca:	b510      	push	{r4, lr}
 80158cc:	4604      	mov	r4, r0
 80158ce:	4620      	mov	r0, r4
 80158d0:	f001 ffd8 	bl	8017884 <malloc>
 80158d4:	b930      	cbnz	r0, 80158e4 <_Znwj+0x20>
 80158d6:	f000 f88b 	bl	80159f0 <_ZSt15get_new_handlerv>
 80158da:	b908      	cbnz	r0, 80158e0 <_Znwj+0x1c>
 80158dc:	f001 ffa0 	bl	8017820 <abort>
 80158e0:	4780      	blx	r0
 80158e2:	e7f4      	b.n	80158ce <_Znwj+0xa>
 80158e4:	bd10      	pop	{r4, pc}

080158e6 <_ZNSaIcEC1Ev>:
 80158e6:	4770      	bx	lr

080158e8 <_ZNSaIcED1Ev>:
 80158e8:	4770      	bx	lr

080158ea <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 80158ea:	b10a      	cbz	r2, 80158f0 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 80158ec:	f001 bfda 	b.w	80178a4 <memcpy>
 80158f0:	4770      	bx	lr
	...

080158f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80158f4:	b508      	push	{r3, lr}
 80158f6:	680b      	ldr	r3, [r1, #0]
 80158f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80158fc:	d302      	bcc.n	8015904 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80158fe:	480d      	ldr	r0, [pc, #52]	; (8015934 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8015900:	f000 f884 	bl	8015a0c <_ZSt20__throw_length_errorPKc>
 8015904:	4293      	cmp	r3, r2
 8015906:	d90b      	bls.n	8015920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8015908:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 801590c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8015910:	d206      	bcs.n	8015920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8015912:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8015916:	bf2a      	itet	cs
 8015918:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 801591c:	6008      	strcc	r0, [r1, #0]
 801591e:	600b      	strcs	r3, [r1, #0]
 8015920:	6808      	ldr	r0, [r1, #0]
 8015922:	3001      	adds	r0, #1
 8015924:	d501      	bpl.n	801592a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8015926:	f000 f86b 	bl	8015a00 <_ZSt17__throw_bad_allocv>
 801592a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801592e:	f7ff bfc9 	b.w	80158c4 <_Znwj>
 8015932:	bf00      	nop
 8015934:	0801a97c 	.word	0x0801a97c

08015938 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8015938:	f850 3b08 	ldr.w	r3, [r0], #8
 801593c:	4283      	cmp	r3, r0
 801593e:	d002      	beq.n	8015946 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8015940:	4618      	mov	r0, r3
 8015942:	f000 b853 	b.w	80159ec <_ZdlPv>
 8015946:	4770      	bx	lr

08015948 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8015948:	2a01      	cmp	r2, #1
 801594a:	b510      	push	{r4, lr}
 801594c:	d102      	bne.n	8015954 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 801594e:	780a      	ldrb	r2, [r1, #0]
 8015950:	7002      	strb	r2, [r0, #0]
 8015952:	bd10      	pop	{r4, pc}
 8015954:	f7ff ffc9 	bl	80158ea <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8015958:	e7fb      	b.n	8015952 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0801595a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 801595a:	b508      	push	{r3, lr}
 801595c:	1a52      	subs	r2, r2, r1
 801595e:	f7ff fff3 	bl	8015948 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8015962:	bd08      	pop	{r3, pc}

08015964 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8015964:	b510      	push	{r4, lr}
 8015966:	4604      	mov	r4, r0
 8015968:	f7ff ffe6 	bl	8015938 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801596c:	4620      	mov	r0, r4
 801596e:	bd10      	pop	{r4, pc}

08015970 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8015970:	6840      	ldr	r0, [r0, #4]
 8015972:	4770      	bx	lr

08015974 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8015974:	6800      	ldr	r0, [r0, #0]
 8015976:	4770      	bx	lr

08015978 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8015978:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801597a:	4604      	mov	r4, r0
 801597c:	4616      	mov	r6, r2
 801597e:	460d      	mov	r5, r1
 8015980:	b919      	cbnz	r1, 801598a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8015982:	b112      	cbz	r2, 801598a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8015984:	480d      	ldr	r0, [pc, #52]	; (80159bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8015986:	f000 f83e 	bl	8015a06 <_ZSt19__throw_logic_errorPKc>
 801598a:	1b73      	subs	r3, r6, r5
 801598c:	2b0f      	cmp	r3, #15
 801598e:	9301      	str	r3, [sp, #4]
 8015990:	d907      	bls.n	80159a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8015992:	2200      	movs	r2, #0
 8015994:	a901      	add	r1, sp, #4
 8015996:	4620      	mov	r0, r4
 8015998:	f7ff ffac 	bl	80158f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801599c:	9b01      	ldr	r3, [sp, #4]
 801599e:	6020      	str	r0, [r4, #0]
 80159a0:	60a3      	str	r3, [r4, #8]
 80159a2:	4632      	mov	r2, r6
 80159a4:	4629      	mov	r1, r5
 80159a6:	6820      	ldr	r0, [r4, #0]
 80159a8:	f7ff ffd7 	bl	801595a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80159ac:	9b01      	ldr	r3, [sp, #4]
 80159ae:	6822      	ldr	r2, [r4, #0]
 80159b0:	6063      	str	r3, [r4, #4]
 80159b2:	2100      	movs	r1, #0
 80159b4:	54d1      	strb	r1, [r2, r3]
 80159b6:	b002      	add	sp, #8
 80159b8:	bd70      	pop	{r4, r5, r6, pc}
 80159ba:	bf00      	nop
 80159bc:	0801a994 	.word	0x0801a994

080159c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80159c0:	b538      	push	{r3, r4, r5, lr}
 80159c2:	f100 0308 	add.w	r3, r0, #8
 80159c6:	4604      	mov	r4, r0
 80159c8:	6003      	str	r3, [r0, #0]
 80159ca:	460d      	mov	r5, r1
 80159cc:	b159      	cbz	r1, 80159e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 80159ce:	4608      	mov	r0, r1
 80159d0:	f7ea fc4e 	bl	8000270 <strlen>
 80159d4:	182a      	adds	r2, r5, r0
 80159d6:	4620      	mov	r0, r4
 80159d8:	f04f 0300 	mov.w	r3, #0
 80159dc:	4629      	mov	r1, r5
 80159de:	f7ff ffcb 	bl	8015978 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80159e2:	4620      	mov	r0, r4
 80159e4:	bd38      	pop	{r3, r4, r5, pc}
 80159e6:	f04f 32ff 	mov.w	r2, #4294967295
 80159ea:	e7f4      	b.n	80159d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

080159ec <_ZdlPv>:
 80159ec:	f001 bf52 	b.w	8017894 <free>

080159f0 <_ZSt15get_new_handlerv>:
 80159f0:	4b02      	ldr	r3, [pc, #8]	; (80159fc <_ZSt15get_new_handlerv+0xc>)
 80159f2:	6818      	ldr	r0, [r3, #0]
 80159f4:	f3bf 8f5b 	dmb	ish
 80159f8:	4770      	bx	lr
 80159fa:	bf00      	nop
 80159fc:	200011b4 	.word	0x200011b4

08015a00 <_ZSt17__throw_bad_allocv>:
 8015a00:	b508      	push	{r3, lr}
 8015a02:	f001 ff0d 	bl	8017820 <abort>

08015a06 <_ZSt19__throw_logic_errorPKc>:
 8015a06:	b508      	push	{r3, lr}
 8015a08:	f001 ff0a 	bl	8017820 <abort>

08015a0c <_ZSt20__throw_length_errorPKc>:
 8015a0c:	b508      	push	{r3, lr}
 8015a0e:	f001 ff07 	bl	8017820 <abort>
 8015a12:	0000      	movs	r0, r0
 8015a14:	0000      	movs	r0, r0
	...

08015a18 <ceil>:
 8015a18:	ec51 0b10 	vmov	r0, r1, d0
 8015a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a20:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8015a24:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015a28:	2e13      	cmp	r6, #19
 8015a2a:	ee10 5a10 	vmov	r5, s0
 8015a2e:	ee10 8a10 	vmov	r8, s0
 8015a32:	460c      	mov	r4, r1
 8015a34:	dc30      	bgt.n	8015a98 <ceil+0x80>
 8015a36:	2e00      	cmp	r6, #0
 8015a38:	da12      	bge.n	8015a60 <ceil+0x48>
 8015a3a:	a335      	add	r3, pc, #212	; (adr r3, 8015b10 <ceil+0xf8>)
 8015a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a40:	f7ea fc24 	bl	800028c <__adddf3>
 8015a44:	2200      	movs	r2, #0
 8015a46:	2300      	movs	r3, #0
 8015a48:	f7eb f866 	bl	8000b18 <__aeabi_dcmpgt>
 8015a4c:	b128      	cbz	r0, 8015a5a <ceil+0x42>
 8015a4e:	2c00      	cmp	r4, #0
 8015a50:	db55      	blt.n	8015afe <ceil+0xe6>
 8015a52:	432c      	orrs	r4, r5
 8015a54:	d057      	beq.n	8015b06 <ceil+0xee>
 8015a56:	4c30      	ldr	r4, [pc, #192]	; (8015b18 <ceil+0x100>)
 8015a58:	2500      	movs	r5, #0
 8015a5a:	4621      	mov	r1, r4
 8015a5c:	4628      	mov	r0, r5
 8015a5e:	e025      	b.n	8015aac <ceil+0x94>
 8015a60:	4f2e      	ldr	r7, [pc, #184]	; (8015b1c <ceil+0x104>)
 8015a62:	4137      	asrs	r7, r6
 8015a64:	ea01 0307 	and.w	r3, r1, r7
 8015a68:	4303      	orrs	r3, r0
 8015a6a:	d01f      	beq.n	8015aac <ceil+0x94>
 8015a6c:	a328      	add	r3, pc, #160	; (adr r3, 8015b10 <ceil+0xf8>)
 8015a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a72:	f7ea fc0b 	bl	800028c <__adddf3>
 8015a76:	2200      	movs	r2, #0
 8015a78:	2300      	movs	r3, #0
 8015a7a:	f7eb f84d 	bl	8000b18 <__aeabi_dcmpgt>
 8015a7e:	2800      	cmp	r0, #0
 8015a80:	d0eb      	beq.n	8015a5a <ceil+0x42>
 8015a82:	2c00      	cmp	r4, #0
 8015a84:	bfc2      	ittt	gt
 8015a86:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8015a8a:	fa43 f606 	asrgt.w	r6, r3, r6
 8015a8e:	19a4      	addgt	r4, r4, r6
 8015a90:	ea24 0407 	bic.w	r4, r4, r7
 8015a94:	2500      	movs	r5, #0
 8015a96:	e7e0      	b.n	8015a5a <ceil+0x42>
 8015a98:	2e33      	cmp	r6, #51	; 0x33
 8015a9a:	dd0b      	ble.n	8015ab4 <ceil+0x9c>
 8015a9c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015aa0:	d104      	bne.n	8015aac <ceil+0x94>
 8015aa2:	ee10 2a10 	vmov	r2, s0
 8015aa6:	460b      	mov	r3, r1
 8015aa8:	f7ea fbf0 	bl	800028c <__adddf3>
 8015aac:	ec41 0b10 	vmov	d0, r0, r1
 8015ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ab4:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8015ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8015abc:	fa23 f707 	lsr.w	r7, r3, r7
 8015ac0:	4207      	tst	r7, r0
 8015ac2:	d0f3      	beq.n	8015aac <ceil+0x94>
 8015ac4:	a312      	add	r3, pc, #72	; (adr r3, 8015b10 <ceil+0xf8>)
 8015ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aca:	f7ea fbdf 	bl	800028c <__adddf3>
 8015ace:	2200      	movs	r2, #0
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	f7eb f821 	bl	8000b18 <__aeabi_dcmpgt>
 8015ad6:	2800      	cmp	r0, #0
 8015ad8:	d0bf      	beq.n	8015a5a <ceil+0x42>
 8015ada:	2c00      	cmp	r4, #0
 8015adc:	dd02      	ble.n	8015ae4 <ceil+0xcc>
 8015ade:	2e14      	cmp	r6, #20
 8015ae0:	d103      	bne.n	8015aea <ceil+0xd2>
 8015ae2:	3401      	adds	r4, #1
 8015ae4:	ea25 0507 	bic.w	r5, r5, r7
 8015ae8:	e7b7      	b.n	8015a5a <ceil+0x42>
 8015aea:	2301      	movs	r3, #1
 8015aec:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015af0:	fa03 f606 	lsl.w	r6, r3, r6
 8015af4:	4435      	add	r5, r6
 8015af6:	4545      	cmp	r5, r8
 8015af8:	bf38      	it	cc
 8015afa:	18e4      	addcc	r4, r4, r3
 8015afc:	e7f2      	b.n	8015ae4 <ceil+0xcc>
 8015afe:	2500      	movs	r5, #0
 8015b00:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8015b04:	e7a9      	b.n	8015a5a <ceil+0x42>
 8015b06:	4625      	mov	r5, r4
 8015b08:	e7a7      	b.n	8015a5a <ceil+0x42>
 8015b0a:	bf00      	nop
 8015b0c:	f3af 8000 	nop.w
 8015b10:	8800759c 	.word	0x8800759c
 8015b14:	7e37e43c 	.word	0x7e37e43c
 8015b18:	3ff00000 	.word	0x3ff00000
 8015b1c:	000fffff 	.word	0x000fffff

08015b20 <floor>:
 8015b20:	ec51 0b10 	vmov	r0, r1, d0
 8015b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b28:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8015b2c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015b30:	2e13      	cmp	r6, #19
 8015b32:	ee10 5a10 	vmov	r5, s0
 8015b36:	ee10 8a10 	vmov	r8, s0
 8015b3a:	460c      	mov	r4, r1
 8015b3c:	dc32      	bgt.n	8015ba4 <floor+0x84>
 8015b3e:	2e00      	cmp	r6, #0
 8015b40:	da14      	bge.n	8015b6c <floor+0x4c>
 8015b42:	a333      	add	r3, pc, #204	; (adr r3, 8015c10 <floor+0xf0>)
 8015b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b48:	f7ea fba0 	bl	800028c <__adddf3>
 8015b4c:	2200      	movs	r2, #0
 8015b4e:	2300      	movs	r3, #0
 8015b50:	f7ea ffe2 	bl	8000b18 <__aeabi_dcmpgt>
 8015b54:	b138      	cbz	r0, 8015b66 <floor+0x46>
 8015b56:	2c00      	cmp	r4, #0
 8015b58:	da57      	bge.n	8015c0a <floor+0xea>
 8015b5a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015b5e:	431d      	orrs	r5, r3
 8015b60:	d001      	beq.n	8015b66 <floor+0x46>
 8015b62:	4c2d      	ldr	r4, [pc, #180]	; (8015c18 <floor+0xf8>)
 8015b64:	2500      	movs	r5, #0
 8015b66:	4621      	mov	r1, r4
 8015b68:	4628      	mov	r0, r5
 8015b6a:	e025      	b.n	8015bb8 <floor+0x98>
 8015b6c:	4f2b      	ldr	r7, [pc, #172]	; (8015c1c <floor+0xfc>)
 8015b6e:	4137      	asrs	r7, r6
 8015b70:	ea01 0307 	and.w	r3, r1, r7
 8015b74:	4303      	orrs	r3, r0
 8015b76:	d01f      	beq.n	8015bb8 <floor+0x98>
 8015b78:	a325      	add	r3, pc, #148	; (adr r3, 8015c10 <floor+0xf0>)
 8015b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b7e:	f7ea fb85 	bl	800028c <__adddf3>
 8015b82:	2200      	movs	r2, #0
 8015b84:	2300      	movs	r3, #0
 8015b86:	f7ea ffc7 	bl	8000b18 <__aeabi_dcmpgt>
 8015b8a:	2800      	cmp	r0, #0
 8015b8c:	d0eb      	beq.n	8015b66 <floor+0x46>
 8015b8e:	2c00      	cmp	r4, #0
 8015b90:	bfbe      	ittt	lt
 8015b92:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8015b96:	fa43 f606 	asrlt.w	r6, r3, r6
 8015b9a:	19a4      	addlt	r4, r4, r6
 8015b9c:	ea24 0407 	bic.w	r4, r4, r7
 8015ba0:	2500      	movs	r5, #0
 8015ba2:	e7e0      	b.n	8015b66 <floor+0x46>
 8015ba4:	2e33      	cmp	r6, #51	; 0x33
 8015ba6:	dd0b      	ble.n	8015bc0 <floor+0xa0>
 8015ba8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015bac:	d104      	bne.n	8015bb8 <floor+0x98>
 8015bae:	ee10 2a10 	vmov	r2, s0
 8015bb2:	460b      	mov	r3, r1
 8015bb4:	f7ea fb6a 	bl	800028c <__adddf3>
 8015bb8:	ec41 0b10 	vmov	d0, r0, r1
 8015bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015bc0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8015bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8015bc8:	fa23 f707 	lsr.w	r7, r3, r7
 8015bcc:	4207      	tst	r7, r0
 8015bce:	d0f3      	beq.n	8015bb8 <floor+0x98>
 8015bd0:	a30f      	add	r3, pc, #60	; (adr r3, 8015c10 <floor+0xf0>)
 8015bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bd6:	f7ea fb59 	bl	800028c <__adddf3>
 8015bda:	2200      	movs	r2, #0
 8015bdc:	2300      	movs	r3, #0
 8015bde:	f7ea ff9b 	bl	8000b18 <__aeabi_dcmpgt>
 8015be2:	2800      	cmp	r0, #0
 8015be4:	d0bf      	beq.n	8015b66 <floor+0x46>
 8015be6:	2c00      	cmp	r4, #0
 8015be8:	da02      	bge.n	8015bf0 <floor+0xd0>
 8015bea:	2e14      	cmp	r6, #20
 8015bec:	d103      	bne.n	8015bf6 <floor+0xd6>
 8015bee:	3401      	adds	r4, #1
 8015bf0:	ea25 0507 	bic.w	r5, r5, r7
 8015bf4:	e7b7      	b.n	8015b66 <floor+0x46>
 8015bf6:	2301      	movs	r3, #1
 8015bf8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015bfc:	fa03 f606 	lsl.w	r6, r3, r6
 8015c00:	4435      	add	r5, r6
 8015c02:	4545      	cmp	r5, r8
 8015c04:	bf38      	it	cc
 8015c06:	18e4      	addcc	r4, r4, r3
 8015c08:	e7f2      	b.n	8015bf0 <floor+0xd0>
 8015c0a:	2500      	movs	r5, #0
 8015c0c:	462c      	mov	r4, r5
 8015c0e:	e7aa      	b.n	8015b66 <floor+0x46>
 8015c10:	8800759c 	.word	0x8800759c
 8015c14:	7e37e43c 	.word	0x7e37e43c
 8015c18:	bff00000 	.word	0xbff00000
 8015c1c:	000fffff 	.word	0x000fffff

08015c20 <cosf>:
 8015c20:	ee10 3a10 	vmov	r3, s0
 8015c24:	b507      	push	{r0, r1, r2, lr}
 8015c26:	4a1c      	ldr	r2, [pc, #112]	; (8015c98 <cosf+0x78>)
 8015c28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015c2c:	4293      	cmp	r3, r2
 8015c2e:	dc04      	bgt.n	8015c3a <cosf+0x1a>
 8015c30:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8015c9c <cosf+0x7c>
 8015c34:	f000 fe9e 	bl	8016974 <__kernel_cosf>
 8015c38:	e004      	b.n	8015c44 <cosf+0x24>
 8015c3a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015c3e:	db04      	blt.n	8015c4a <cosf+0x2a>
 8015c40:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015c44:	b003      	add	sp, #12
 8015c46:	f85d fb04 	ldr.w	pc, [sp], #4
 8015c4a:	4668      	mov	r0, sp
 8015c4c:	f000 fd52 	bl	80166f4 <__ieee754_rem_pio2f>
 8015c50:	f000 0003 	and.w	r0, r0, #3
 8015c54:	2801      	cmp	r0, #1
 8015c56:	d007      	beq.n	8015c68 <cosf+0x48>
 8015c58:	2802      	cmp	r0, #2
 8015c5a:	d00e      	beq.n	8015c7a <cosf+0x5a>
 8015c5c:	b9a0      	cbnz	r0, 8015c88 <cosf+0x68>
 8015c5e:	eddd 0a01 	vldr	s1, [sp, #4]
 8015c62:	ed9d 0a00 	vldr	s0, [sp]
 8015c66:	e7e5      	b.n	8015c34 <cosf+0x14>
 8015c68:	eddd 0a01 	vldr	s1, [sp, #4]
 8015c6c:	ed9d 0a00 	vldr	s0, [sp]
 8015c70:	f001 f96a 	bl	8016f48 <__kernel_sinf>
 8015c74:	eeb1 0a40 	vneg.f32	s0, s0
 8015c78:	e7e4      	b.n	8015c44 <cosf+0x24>
 8015c7a:	eddd 0a01 	vldr	s1, [sp, #4]
 8015c7e:	ed9d 0a00 	vldr	s0, [sp]
 8015c82:	f000 fe77 	bl	8016974 <__kernel_cosf>
 8015c86:	e7f5      	b.n	8015c74 <cosf+0x54>
 8015c88:	eddd 0a01 	vldr	s1, [sp, #4]
 8015c8c:	ed9d 0a00 	vldr	s0, [sp]
 8015c90:	2001      	movs	r0, #1
 8015c92:	f001 f959 	bl	8016f48 <__kernel_sinf>
 8015c96:	e7d5      	b.n	8015c44 <cosf+0x24>
 8015c98:	3f490fd8 	.word	0x3f490fd8
 8015c9c:	00000000 	.word	0x00000000

08015ca0 <roundf>:
 8015ca0:	ee10 0a10 	vmov	r0, s0
 8015ca4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8015ca8:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8015cac:	2a16      	cmp	r2, #22
 8015cae:	dc15      	bgt.n	8015cdc <roundf+0x3c>
 8015cb0:	2a00      	cmp	r2, #0
 8015cb2:	da08      	bge.n	8015cc6 <roundf+0x26>
 8015cb4:	3201      	adds	r2, #1
 8015cb6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8015cba:	d101      	bne.n	8015cc0 <roundf+0x20>
 8015cbc:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8015cc0:	ee00 3a10 	vmov	s0, r3
 8015cc4:	4770      	bx	lr
 8015cc6:	4908      	ldr	r1, [pc, #32]	; (8015ce8 <roundf+0x48>)
 8015cc8:	4111      	asrs	r1, r2
 8015cca:	4208      	tst	r0, r1
 8015ccc:	d0fa      	beq.n	8015cc4 <roundf+0x24>
 8015cce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8015cd2:	4113      	asrs	r3, r2
 8015cd4:	4403      	add	r3, r0
 8015cd6:	ea23 0301 	bic.w	r3, r3, r1
 8015cda:	e7f1      	b.n	8015cc0 <roundf+0x20>
 8015cdc:	2a80      	cmp	r2, #128	; 0x80
 8015cde:	d1f1      	bne.n	8015cc4 <roundf+0x24>
 8015ce0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015ce4:	4770      	bx	lr
 8015ce6:	bf00      	nop
 8015ce8:	007fffff 	.word	0x007fffff

08015cec <sinf>:
 8015cec:	ee10 3a10 	vmov	r3, s0
 8015cf0:	b507      	push	{r0, r1, r2, lr}
 8015cf2:	4a1d      	ldr	r2, [pc, #116]	; (8015d68 <sinf+0x7c>)
 8015cf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015cf8:	4293      	cmp	r3, r2
 8015cfa:	dc05      	bgt.n	8015d08 <sinf+0x1c>
 8015cfc:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8015d6c <sinf+0x80>
 8015d00:	2000      	movs	r0, #0
 8015d02:	f001 f921 	bl	8016f48 <__kernel_sinf>
 8015d06:	e004      	b.n	8015d12 <sinf+0x26>
 8015d08:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015d0c:	db04      	blt.n	8015d18 <sinf+0x2c>
 8015d0e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015d12:	b003      	add	sp, #12
 8015d14:	f85d fb04 	ldr.w	pc, [sp], #4
 8015d18:	4668      	mov	r0, sp
 8015d1a:	f000 fceb 	bl	80166f4 <__ieee754_rem_pio2f>
 8015d1e:	f000 0003 	and.w	r0, r0, #3
 8015d22:	2801      	cmp	r0, #1
 8015d24:	d008      	beq.n	8015d38 <sinf+0x4c>
 8015d26:	2802      	cmp	r0, #2
 8015d28:	d00d      	beq.n	8015d46 <sinf+0x5a>
 8015d2a:	b9b0      	cbnz	r0, 8015d5a <sinf+0x6e>
 8015d2c:	eddd 0a01 	vldr	s1, [sp, #4]
 8015d30:	ed9d 0a00 	vldr	s0, [sp]
 8015d34:	2001      	movs	r0, #1
 8015d36:	e7e4      	b.n	8015d02 <sinf+0x16>
 8015d38:	eddd 0a01 	vldr	s1, [sp, #4]
 8015d3c:	ed9d 0a00 	vldr	s0, [sp]
 8015d40:	f000 fe18 	bl	8016974 <__kernel_cosf>
 8015d44:	e7e5      	b.n	8015d12 <sinf+0x26>
 8015d46:	eddd 0a01 	vldr	s1, [sp, #4]
 8015d4a:	ed9d 0a00 	vldr	s0, [sp]
 8015d4e:	2001      	movs	r0, #1
 8015d50:	f001 f8fa 	bl	8016f48 <__kernel_sinf>
 8015d54:	eeb1 0a40 	vneg.f32	s0, s0
 8015d58:	e7db      	b.n	8015d12 <sinf+0x26>
 8015d5a:	eddd 0a01 	vldr	s1, [sp, #4]
 8015d5e:	ed9d 0a00 	vldr	s0, [sp]
 8015d62:	f000 fe07 	bl	8016974 <__kernel_cosf>
 8015d66:	e7f5      	b.n	8015d54 <sinf+0x68>
 8015d68:	3f490fd8 	.word	0x3f490fd8
 8015d6c:	00000000 	.word	0x00000000

08015d70 <tanf>:
 8015d70:	ee10 3a10 	vmov	r3, s0
 8015d74:	b507      	push	{r0, r1, r2, lr}
 8015d76:	4a10      	ldr	r2, [pc, #64]	; (8015db8 <tanf+0x48>)
 8015d78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015d7c:	4293      	cmp	r3, r2
 8015d7e:	dc05      	bgt.n	8015d8c <tanf+0x1c>
 8015d80:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8015dbc <tanf+0x4c>
 8015d84:	2001      	movs	r0, #1
 8015d86:	f001 f927 	bl	8016fd8 <__kernel_tanf>
 8015d8a:	e004      	b.n	8015d96 <tanf+0x26>
 8015d8c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015d90:	db04      	blt.n	8015d9c <tanf+0x2c>
 8015d92:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015d96:	b003      	add	sp, #12
 8015d98:	f85d fb04 	ldr.w	pc, [sp], #4
 8015d9c:	4668      	mov	r0, sp
 8015d9e:	f000 fca9 	bl	80166f4 <__ieee754_rem_pio2f>
 8015da2:	0040      	lsls	r0, r0, #1
 8015da4:	f000 0002 	and.w	r0, r0, #2
 8015da8:	eddd 0a01 	vldr	s1, [sp, #4]
 8015dac:	ed9d 0a00 	vldr	s0, [sp]
 8015db0:	f1c0 0001 	rsb	r0, r0, #1
 8015db4:	e7e7      	b.n	8015d86 <tanf+0x16>
 8015db6:	bf00      	nop
 8015db8:	3f490fda 	.word	0x3f490fda
 8015dbc:	00000000 	.word	0x00000000

08015dc0 <atan2>:
 8015dc0:	f000 b89a 	b.w	8015ef8 <__ieee754_atan2>

08015dc4 <sqrt>:
 8015dc4:	b538      	push	{r3, r4, r5, lr}
 8015dc6:	ed2d 8b02 	vpush	{d8}
 8015dca:	ec55 4b10 	vmov	r4, r5, d0
 8015dce:	f000 f95d 	bl	801608c <__ieee754_sqrt>
 8015dd2:	4b15      	ldr	r3, [pc, #84]	; (8015e28 <sqrt+0x64>)
 8015dd4:	eeb0 8a40 	vmov.f32	s16, s0
 8015dd8:	eef0 8a60 	vmov.f32	s17, s1
 8015ddc:	f993 3000 	ldrsb.w	r3, [r3]
 8015de0:	3301      	adds	r3, #1
 8015de2:	d019      	beq.n	8015e18 <sqrt+0x54>
 8015de4:	4622      	mov	r2, r4
 8015de6:	462b      	mov	r3, r5
 8015de8:	4620      	mov	r0, r4
 8015dea:	4629      	mov	r1, r5
 8015dec:	f7ea fe9e 	bl	8000b2c <__aeabi_dcmpun>
 8015df0:	b990      	cbnz	r0, 8015e18 <sqrt+0x54>
 8015df2:	2200      	movs	r2, #0
 8015df4:	2300      	movs	r3, #0
 8015df6:	4620      	mov	r0, r4
 8015df8:	4629      	mov	r1, r5
 8015dfa:	f7ea fe6f 	bl	8000adc <__aeabi_dcmplt>
 8015dfe:	b158      	cbz	r0, 8015e18 <sqrt+0x54>
 8015e00:	f001 fd16 	bl	8017830 <__errno>
 8015e04:	2321      	movs	r3, #33	; 0x21
 8015e06:	6003      	str	r3, [r0, #0]
 8015e08:	2200      	movs	r2, #0
 8015e0a:	2300      	movs	r3, #0
 8015e0c:	4610      	mov	r0, r2
 8015e0e:	4619      	mov	r1, r3
 8015e10:	f7ea fd1c 	bl	800084c <__aeabi_ddiv>
 8015e14:	ec41 0b18 	vmov	d8, r0, r1
 8015e18:	eeb0 0a48 	vmov.f32	s0, s16
 8015e1c:	eef0 0a68 	vmov.f32	s1, s17
 8015e20:	ecbd 8b02 	vpop	{d8}
 8015e24:	bd38      	pop	{r3, r4, r5, pc}
 8015e26:	bf00      	nop
 8015e28:	200000ed 	.word	0x200000ed

08015e2c <acosf>:
 8015e2c:	b508      	push	{r3, lr}
 8015e2e:	ed2d 8b02 	vpush	{d8}
 8015e32:	eeb0 8a40 	vmov.f32	s16, s0
 8015e36:	f000 f9dd 	bl	80161f4 <__ieee754_acosf>
 8015e3a:	4b13      	ldr	r3, [pc, #76]	; (8015e88 <acosf+0x5c>)
 8015e3c:	f993 3000 	ldrsb.w	r3, [r3]
 8015e40:	3301      	adds	r3, #1
 8015e42:	eef0 8a40 	vmov.f32	s17, s0
 8015e46:	d01a      	beq.n	8015e7e <acosf+0x52>
 8015e48:	eeb4 8a48 	vcmp.f32	s16, s16
 8015e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e50:	d615      	bvs.n	8015e7e <acosf+0x52>
 8015e52:	eeb0 0a48 	vmov.f32	s0, s16
 8015e56:	f001 fc21 	bl	801769c <fabsf>
 8015e5a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015e5e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e66:	dd0a      	ble.n	8015e7e <acosf+0x52>
 8015e68:	f001 fce2 	bl	8017830 <__errno>
 8015e6c:	ecbd 8b02 	vpop	{d8}
 8015e70:	2321      	movs	r3, #33	; 0x21
 8015e72:	6003      	str	r3, [r0, #0]
 8015e74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015e78:	4804      	ldr	r0, [pc, #16]	; (8015e8c <acosf+0x60>)
 8015e7a:	f001 bc59 	b.w	8017730 <nanf>
 8015e7e:	eeb0 0a68 	vmov.f32	s0, s17
 8015e82:	ecbd 8b02 	vpop	{d8}
 8015e86:	bd08      	pop	{r3, pc}
 8015e88:	200000ed 	.word	0x200000ed
 8015e8c:	0801b110 	.word	0x0801b110

08015e90 <asinf>:
 8015e90:	b508      	push	{r3, lr}
 8015e92:	ed2d 8b02 	vpush	{d8}
 8015e96:	eeb0 8a40 	vmov.f32	s16, s0
 8015e9a:	f000 faa5 	bl	80163e8 <__ieee754_asinf>
 8015e9e:	4b13      	ldr	r3, [pc, #76]	; (8015eec <asinf+0x5c>)
 8015ea0:	f993 3000 	ldrsb.w	r3, [r3]
 8015ea4:	3301      	adds	r3, #1
 8015ea6:	eef0 8a40 	vmov.f32	s17, s0
 8015eaa:	d01a      	beq.n	8015ee2 <asinf+0x52>
 8015eac:	eeb4 8a48 	vcmp.f32	s16, s16
 8015eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eb4:	d615      	bvs.n	8015ee2 <asinf+0x52>
 8015eb6:	eeb0 0a48 	vmov.f32	s0, s16
 8015eba:	f001 fbef 	bl	801769c <fabsf>
 8015ebe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015ec2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eca:	dd0a      	ble.n	8015ee2 <asinf+0x52>
 8015ecc:	f001 fcb0 	bl	8017830 <__errno>
 8015ed0:	ecbd 8b02 	vpop	{d8}
 8015ed4:	2321      	movs	r3, #33	; 0x21
 8015ed6:	6003      	str	r3, [r0, #0]
 8015ed8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015edc:	4804      	ldr	r0, [pc, #16]	; (8015ef0 <asinf+0x60>)
 8015ede:	f001 bc27 	b.w	8017730 <nanf>
 8015ee2:	eeb0 0a68 	vmov.f32	s0, s17
 8015ee6:	ecbd 8b02 	vpop	{d8}
 8015eea:	bd08      	pop	{r3, pc}
 8015eec:	200000ed 	.word	0x200000ed
 8015ef0:	0801b110 	.word	0x0801b110

08015ef4 <atan2f>:
 8015ef4:	f000 bb5e 	b.w	80165b4 <__ieee754_atan2f>

08015ef8 <__ieee754_atan2>:
 8015ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015efc:	ec57 6b11 	vmov	r6, r7, d1
 8015f00:	4273      	negs	r3, r6
 8015f02:	f8df e184 	ldr.w	lr, [pc, #388]	; 8016088 <__ieee754_atan2+0x190>
 8015f06:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8015f0a:	4333      	orrs	r3, r6
 8015f0c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8015f10:	4573      	cmp	r3, lr
 8015f12:	ec51 0b10 	vmov	r0, r1, d0
 8015f16:	ee11 8a10 	vmov	r8, s2
 8015f1a:	d80a      	bhi.n	8015f32 <__ieee754_atan2+0x3a>
 8015f1c:	4244      	negs	r4, r0
 8015f1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015f22:	4304      	orrs	r4, r0
 8015f24:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8015f28:	4574      	cmp	r4, lr
 8015f2a:	ee10 9a10 	vmov	r9, s0
 8015f2e:	468c      	mov	ip, r1
 8015f30:	d907      	bls.n	8015f42 <__ieee754_atan2+0x4a>
 8015f32:	4632      	mov	r2, r6
 8015f34:	463b      	mov	r3, r7
 8015f36:	f7ea f9a9 	bl	800028c <__adddf3>
 8015f3a:	ec41 0b10 	vmov	d0, r0, r1
 8015f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f42:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8015f46:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015f4a:	4334      	orrs	r4, r6
 8015f4c:	d103      	bne.n	8015f56 <__ieee754_atan2+0x5e>
 8015f4e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f52:	f001 b925 	b.w	80171a0 <atan>
 8015f56:	17bc      	asrs	r4, r7, #30
 8015f58:	f004 0402 	and.w	r4, r4, #2
 8015f5c:	ea53 0909 	orrs.w	r9, r3, r9
 8015f60:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8015f64:	d107      	bne.n	8015f76 <__ieee754_atan2+0x7e>
 8015f66:	2c02      	cmp	r4, #2
 8015f68:	d060      	beq.n	801602c <__ieee754_atan2+0x134>
 8015f6a:	2c03      	cmp	r4, #3
 8015f6c:	d1e5      	bne.n	8015f3a <__ieee754_atan2+0x42>
 8015f6e:	a142      	add	r1, pc, #264	; (adr r1, 8016078 <__ieee754_atan2+0x180>)
 8015f70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015f74:	e7e1      	b.n	8015f3a <__ieee754_atan2+0x42>
 8015f76:	ea52 0808 	orrs.w	r8, r2, r8
 8015f7a:	d106      	bne.n	8015f8a <__ieee754_atan2+0x92>
 8015f7c:	f1bc 0f00 	cmp.w	ip, #0
 8015f80:	da5f      	bge.n	8016042 <__ieee754_atan2+0x14a>
 8015f82:	a13f      	add	r1, pc, #252	; (adr r1, 8016080 <__ieee754_atan2+0x188>)
 8015f84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015f88:	e7d7      	b.n	8015f3a <__ieee754_atan2+0x42>
 8015f8a:	4572      	cmp	r2, lr
 8015f8c:	d10f      	bne.n	8015fae <__ieee754_atan2+0xb6>
 8015f8e:	4293      	cmp	r3, r2
 8015f90:	f104 34ff 	add.w	r4, r4, #4294967295
 8015f94:	d107      	bne.n	8015fa6 <__ieee754_atan2+0xae>
 8015f96:	2c02      	cmp	r4, #2
 8015f98:	d84c      	bhi.n	8016034 <__ieee754_atan2+0x13c>
 8015f9a:	4b35      	ldr	r3, [pc, #212]	; (8016070 <__ieee754_atan2+0x178>)
 8015f9c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8015fa0:	e9d4 0100 	ldrd	r0, r1, [r4]
 8015fa4:	e7c9      	b.n	8015f3a <__ieee754_atan2+0x42>
 8015fa6:	2c02      	cmp	r4, #2
 8015fa8:	d848      	bhi.n	801603c <__ieee754_atan2+0x144>
 8015faa:	4b32      	ldr	r3, [pc, #200]	; (8016074 <__ieee754_atan2+0x17c>)
 8015fac:	e7f6      	b.n	8015f9c <__ieee754_atan2+0xa4>
 8015fae:	4573      	cmp	r3, lr
 8015fb0:	d0e4      	beq.n	8015f7c <__ieee754_atan2+0x84>
 8015fb2:	1a9b      	subs	r3, r3, r2
 8015fb4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8015fb8:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015fbc:	da1e      	bge.n	8015ffc <__ieee754_atan2+0x104>
 8015fbe:	2f00      	cmp	r7, #0
 8015fc0:	da01      	bge.n	8015fc6 <__ieee754_atan2+0xce>
 8015fc2:	323c      	adds	r2, #60	; 0x3c
 8015fc4:	db1e      	blt.n	8016004 <__ieee754_atan2+0x10c>
 8015fc6:	4632      	mov	r2, r6
 8015fc8:	463b      	mov	r3, r7
 8015fca:	f7ea fc3f 	bl	800084c <__aeabi_ddiv>
 8015fce:	ec41 0b10 	vmov	d0, r0, r1
 8015fd2:	f001 fa85 	bl	80174e0 <fabs>
 8015fd6:	f001 f8e3 	bl	80171a0 <atan>
 8015fda:	ec51 0b10 	vmov	r0, r1, d0
 8015fde:	2c01      	cmp	r4, #1
 8015fe0:	d013      	beq.n	801600a <__ieee754_atan2+0x112>
 8015fe2:	2c02      	cmp	r4, #2
 8015fe4:	d015      	beq.n	8016012 <__ieee754_atan2+0x11a>
 8015fe6:	2c00      	cmp	r4, #0
 8015fe8:	d0a7      	beq.n	8015f3a <__ieee754_atan2+0x42>
 8015fea:	a319      	add	r3, pc, #100	; (adr r3, 8016050 <__ieee754_atan2+0x158>)
 8015fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ff0:	f7ea f94a 	bl	8000288 <__aeabi_dsub>
 8015ff4:	a318      	add	r3, pc, #96	; (adr r3, 8016058 <__ieee754_atan2+0x160>)
 8015ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ffa:	e014      	b.n	8016026 <__ieee754_atan2+0x12e>
 8015ffc:	a118      	add	r1, pc, #96	; (adr r1, 8016060 <__ieee754_atan2+0x168>)
 8015ffe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016002:	e7ec      	b.n	8015fde <__ieee754_atan2+0xe6>
 8016004:	2000      	movs	r0, #0
 8016006:	2100      	movs	r1, #0
 8016008:	e7e9      	b.n	8015fde <__ieee754_atan2+0xe6>
 801600a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801600e:	4619      	mov	r1, r3
 8016010:	e793      	b.n	8015f3a <__ieee754_atan2+0x42>
 8016012:	a30f      	add	r3, pc, #60	; (adr r3, 8016050 <__ieee754_atan2+0x158>)
 8016014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016018:	f7ea f936 	bl	8000288 <__aeabi_dsub>
 801601c:	4602      	mov	r2, r0
 801601e:	460b      	mov	r3, r1
 8016020:	a10d      	add	r1, pc, #52	; (adr r1, 8016058 <__ieee754_atan2+0x160>)
 8016022:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016026:	f7ea f92f 	bl	8000288 <__aeabi_dsub>
 801602a:	e786      	b.n	8015f3a <__ieee754_atan2+0x42>
 801602c:	a10a      	add	r1, pc, #40	; (adr r1, 8016058 <__ieee754_atan2+0x160>)
 801602e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016032:	e782      	b.n	8015f3a <__ieee754_atan2+0x42>
 8016034:	a10c      	add	r1, pc, #48	; (adr r1, 8016068 <__ieee754_atan2+0x170>)
 8016036:	e9d1 0100 	ldrd	r0, r1, [r1]
 801603a:	e77e      	b.n	8015f3a <__ieee754_atan2+0x42>
 801603c:	2000      	movs	r0, #0
 801603e:	2100      	movs	r1, #0
 8016040:	e77b      	b.n	8015f3a <__ieee754_atan2+0x42>
 8016042:	a107      	add	r1, pc, #28	; (adr r1, 8016060 <__ieee754_atan2+0x168>)
 8016044:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016048:	e777      	b.n	8015f3a <__ieee754_atan2+0x42>
 801604a:	bf00      	nop
 801604c:	f3af 8000 	nop.w
 8016050:	33145c07 	.word	0x33145c07
 8016054:	3ca1a626 	.word	0x3ca1a626
 8016058:	54442d18 	.word	0x54442d18
 801605c:	400921fb 	.word	0x400921fb
 8016060:	54442d18 	.word	0x54442d18
 8016064:	3ff921fb 	.word	0x3ff921fb
 8016068:	54442d18 	.word	0x54442d18
 801606c:	3fe921fb 	.word	0x3fe921fb
 8016070:	0801a9c0 	.word	0x0801a9c0
 8016074:	0801a9d8 	.word	0x0801a9d8
 8016078:	54442d18 	.word	0x54442d18
 801607c:	c00921fb 	.word	0xc00921fb
 8016080:	54442d18 	.word	0x54442d18
 8016084:	bff921fb 	.word	0xbff921fb
 8016088:	7ff00000 	.word	0x7ff00000

0801608c <__ieee754_sqrt>:
 801608c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016090:	ec55 4b10 	vmov	r4, r5, d0
 8016094:	4e56      	ldr	r6, [pc, #344]	; (80161f0 <__ieee754_sqrt+0x164>)
 8016096:	43ae      	bics	r6, r5
 8016098:	ee10 0a10 	vmov	r0, s0
 801609c:	ee10 3a10 	vmov	r3, s0
 80160a0:	4629      	mov	r1, r5
 80160a2:	462a      	mov	r2, r5
 80160a4:	d110      	bne.n	80160c8 <__ieee754_sqrt+0x3c>
 80160a6:	ee10 2a10 	vmov	r2, s0
 80160aa:	462b      	mov	r3, r5
 80160ac:	f7ea faa4 	bl	80005f8 <__aeabi_dmul>
 80160b0:	4602      	mov	r2, r0
 80160b2:	460b      	mov	r3, r1
 80160b4:	4620      	mov	r0, r4
 80160b6:	4629      	mov	r1, r5
 80160b8:	f7ea f8e8 	bl	800028c <__adddf3>
 80160bc:	4604      	mov	r4, r0
 80160be:	460d      	mov	r5, r1
 80160c0:	ec45 4b10 	vmov	d0, r4, r5
 80160c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160c8:	2d00      	cmp	r5, #0
 80160ca:	dc10      	bgt.n	80160ee <__ieee754_sqrt+0x62>
 80160cc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80160d0:	4330      	orrs	r0, r6
 80160d2:	d0f5      	beq.n	80160c0 <__ieee754_sqrt+0x34>
 80160d4:	b15d      	cbz	r5, 80160ee <__ieee754_sqrt+0x62>
 80160d6:	ee10 2a10 	vmov	r2, s0
 80160da:	462b      	mov	r3, r5
 80160dc:	ee10 0a10 	vmov	r0, s0
 80160e0:	f7ea f8d2 	bl	8000288 <__aeabi_dsub>
 80160e4:	4602      	mov	r2, r0
 80160e6:	460b      	mov	r3, r1
 80160e8:	f7ea fbb0 	bl	800084c <__aeabi_ddiv>
 80160ec:	e7e6      	b.n	80160bc <__ieee754_sqrt+0x30>
 80160ee:	1509      	asrs	r1, r1, #20
 80160f0:	d076      	beq.n	80161e0 <__ieee754_sqrt+0x154>
 80160f2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80160f6:	07ce      	lsls	r6, r1, #31
 80160f8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80160fc:	bf5e      	ittt	pl
 80160fe:	0fda      	lsrpl	r2, r3, #31
 8016100:	005b      	lslpl	r3, r3, #1
 8016102:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8016106:	0fda      	lsrs	r2, r3, #31
 8016108:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801610c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8016110:	2000      	movs	r0, #0
 8016112:	106d      	asrs	r5, r5, #1
 8016114:	005b      	lsls	r3, r3, #1
 8016116:	f04f 0e16 	mov.w	lr, #22
 801611a:	4684      	mov	ip, r0
 801611c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8016120:	eb0c 0401 	add.w	r4, ip, r1
 8016124:	4294      	cmp	r4, r2
 8016126:	bfde      	ittt	le
 8016128:	1b12      	suble	r2, r2, r4
 801612a:	eb04 0c01 	addle.w	ip, r4, r1
 801612e:	1840      	addle	r0, r0, r1
 8016130:	0052      	lsls	r2, r2, #1
 8016132:	f1be 0e01 	subs.w	lr, lr, #1
 8016136:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801613a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801613e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016142:	d1ed      	bne.n	8016120 <__ieee754_sqrt+0x94>
 8016144:	4671      	mov	r1, lr
 8016146:	2720      	movs	r7, #32
 8016148:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801614c:	4562      	cmp	r2, ip
 801614e:	eb04 060e 	add.w	r6, r4, lr
 8016152:	dc02      	bgt.n	801615a <__ieee754_sqrt+0xce>
 8016154:	d113      	bne.n	801617e <__ieee754_sqrt+0xf2>
 8016156:	429e      	cmp	r6, r3
 8016158:	d811      	bhi.n	801617e <__ieee754_sqrt+0xf2>
 801615a:	2e00      	cmp	r6, #0
 801615c:	eb06 0e04 	add.w	lr, r6, r4
 8016160:	da43      	bge.n	80161ea <__ieee754_sqrt+0x15e>
 8016162:	f1be 0f00 	cmp.w	lr, #0
 8016166:	db40      	blt.n	80161ea <__ieee754_sqrt+0x15e>
 8016168:	f10c 0801 	add.w	r8, ip, #1
 801616c:	eba2 020c 	sub.w	r2, r2, ip
 8016170:	429e      	cmp	r6, r3
 8016172:	bf88      	it	hi
 8016174:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8016178:	1b9b      	subs	r3, r3, r6
 801617a:	4421      	add	r1, r4
 801617c:	46c4      	mov	ip, r8
 801617e:	0052      	lsls	r2, r2, #1
 8016180:	3f01      	subs	r7, #1
 8016182:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8016186:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801618a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801618e:	d1dd      	bne.n	801614c <__ieee754_sqrt+0xc0>
 8016190:	4313      	orrs	r3, r2
 8016192:	d006      	beq.n	80161a2 <__ieee754_sqrt+0x116>
 8016194:	1c4c      	adds	r4, r1, #1
 8016196:	bf13      	iteet	ne
 8016198:	3101      	addne	r1, #1
 801619a:	3001      	addeq	r0, #1
 801619c:	4639      	moveq	r1, r7
 801619e:	f021 0101 	bicne.w	r1, r1, #1
 80161a2:	1043      	asrs	r3, r0, #1
 80161a4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80161a8:	0849      	lsrs	r1, r1, #1
 80161aa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80161ae:	07c2      	lsls	r2, r0, #31
 80161b0:	bf48      	it	mi
 80161b2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80161b6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80161ba:	460c      	mov	r4, r1
 80161bc:	463d      	mov	r5, r7
 80161be:	e77f      	b.n	80160c0 <__ieee754_sqrt+0x34>
 80161c0:	0ada      	lsrs	r2, r3, #11
 80161c2:	3815      	subs	r0, #21
 80161c4:	055b      	lsls	r3, r3, #21
 80161c6:	2a00      	cmp	r2, #0
 80161c8:	d0fa      	beq.n	80161c0 <__ieee754_sqrt+0x134>
 80161ca:	02d7      	lsls	r7, r2, #11
 80161cc:	d50a      	bpl.n	80161e4 <__ieee754_sqrt+0x158>
 80161ce:	f1c1 0420 	rsb	r4, r1, #32
 80161d2:	fa23 f404 	lsr.w	r4, r3, r4
 80161d6:	1e4d      	subs	r5, r1, #1
 80161d8:	408b      	lsls	r3, r1
 80161da:	4322      	orrs	r2, r4
 80161dc:	1b41      	subs	r1, r0, r5
 80161de:	e788      	b.n	80160f2 <__ieee754_sqrt+0x66>
 80161e0:	4608      	mov	r0, r1
 80161e2:	e7f0      	b.n	80161c6 <__ieee754_sqrt+0x13a>
 80161e4:	0052      	lsls	r2, r2, #1
 80161e6:	3101      	adds	r1, #1
 80161e8:	e7ef      	b.n	80161ca <__ieee754_sqrt+0x13e>
 80161ea:	46e0      	mov	r8, ip
 80161ec:	e7be      	b.n	801616c <__ieee754_sqrt+0xe0>
 80161ee:	bf00      	nop
 80161f0:	7ff00000 	.word	0x7ff00000

080161f4 <__ieee754_acosf>:
 80161f4:	b508      	push	{r3, lr}
 80161f6:	ee10 3a10 	vmov	r3, s0
 80161fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80161fe:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8016202:	ed2d 8b0c 	vpush	{d8-d13}
 8016206:	d10a      	bne.n	801621e <__ieee754_acosf+0x2a>
 8016208:	ed9f 0a66 	vldr	s0, [pc, #408]	; 80163a4 <__ieee754_acosf+0x1b0>
 801620c:	ed9f 8a66 	vldr	s16, [pc, #408]	; 80163a8 <__ieee754_acosf+0x1b4>
 8016210:	2b00      	cmp	r3, #0
 8016212:	bfd8      	it	le
 8016214:	eeb0 0a48 	vmovle.f32	s0, s16
 8016218:	ecbd 8b0c 	vpop	{d8-d13}
 801621c:	bd08      	pop	{r3, pc}
 801621e:	dd04      	ble.n	801622a <__ieee754_acosf+0x36>
 8016220:	ee30 8a40 	vsub.f32	s16, s0, s0
 8016224:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8016228:	e7f6      	b.n	8016218 <__ieee754_acosf+0x24>
 801622a:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 801622e:	da3e      	bge.n	80162ae <__ieee754_acosf+0xba>
 8016230:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8016234:	f340 80b3 	ble.w	801639e <__ieee754_acosf+0x1aa>
 8016238:	ee60 7a00 	vmul.f32	s15, s0, s0
 801623c:	eddf 6a5b 	vldr	s13, [pc, #364]	; 80163ac <__ieee754_acosf+0x1b8>
 8016240:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80163b0 <__ieee754_acosf+0x1bc>
 8016244:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 80163b4 <__ieee754_acosf+0x1c0>
 8016248:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 80163b8 <__ieee754_acosf+0x1c4>
 801624c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8016250:	eddf 6a5a 	vldr	s13, [pc, #360]	; 80163bc <__ieee754_acosf+0x1c8>
 8016254:	eee7 6a27 	vfma.f32	s13, s14, s15
 8016258:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80163c0 <__ieee754_acosf+0x1cc>
 801625c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016260:	eddf 6a58 	vldr	s13, [pc, #352]	; 80163c4 <__ieee754_acosf+0x1d0>
 8016264:	eee7 6a27 	vfma.f32	s13, s14, s15
 8016268:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80163c8 <__ieee754_acosf+0x1d4>
 801626c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016270:	eddf 6a56 	vldr	s13, [pc, #344]	; 80163cc <__ieee754_acosf+0x1d8>
 8016274:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8016278:	eddf 6a55 	vldr	s13, [pc, #340]	; 80163d0 <__ieee754_acosf+0x1dc>
 801627c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016280:	ed9f 6a54 	vldr	s12, [pc, #336]	; 80163d4 <__ieee754_acosf+0x1e0>
 8016284:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8016288:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801628c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016290:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016294:	eef0 7a66 	vmov.f32	s15, s13
 8016298:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801629c:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80163d8 <__ieee754_acosf+0x1e4>
 80162a0:	eea0 8a66 	vfms.f32	s16, s0, s13
 80162a4:	ee30 0a48 	vsub.f32	s0, s0, s16
 80162a8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80162ac:	e7b4      	b.n	8016218 <__ieee754_acosf+0x24>
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	eddf da3e 	vldr	s27, [pc, #248]	; 80163ac <__ieee754_acosf+0x1b8>
 80162b4:	eddf ca3e 	vldr	s25, [pc, #248]	; 80163b0 <__ieee754_acosf+0x1bc>
 80162b8:	ed9f ca40 	vldr	s24, [pc, #256]	; 80163bc <__ieee754_acosf+0x1c8>
 80162bc:	eddf ba40 	vldr	s23, [pc, #256]	; 80163c0 <__ieee754_acosf+0x1cc>
 80162c0:	ed9f ba40 	vldr	s22, [pc, #256]	; 80163c4 <__ieee754_acosf+0x1d0>
 80162c4:	eddf 8a40 	vldr	s17, [pc, #256]	; 80163c8 <__ieee754_acosf+0x1d4>
 80162c8:	ed9f da40 	vldr	s26, [pc, #256]	; 80163cc <__ieee754_acosf+0x1d8>
 80162cc:	eddf aa39 	vldr	s21, [pc, #228]	; 80163b4 <__ieee754_acosf+0x1c0>
 80162d0:	ed9f aa3f 	vldr	s20, [pc, #252]	; 80163d0 <__ieee754_acosf+0x1dc>
 80162d4:	eddf 9a3f 	vldr	s19, [pc, #252]	; 80163d4 <__ieee754_acosf+0x1e0>
 80162d8:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80162dc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80162e0:	da28      	bge.n	8016334 <__ieee754_acosf+0x140>
 80162e2:	ee30 0a09 	vadd.f32	s0, s0, s18
 80162e6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80162ea:	eee0 ca2d 	vfma.f32	s25, s0, s27
 80162ee:	eee0 aa0d 	vfma.f32	s21, s0, s26
 80162f2:	eeac ca80 	vfma.f32	s24, s25, s0
 80162f6:	eeaa aa80 	vfma.f32	s20, s21, s0
 80162fa:	eeec ba00 	vfma.f32	s23, s24, s0
 80162fe:	eeea 9a00 	vfma.f32	s19, s20, s0
 8016302:	eeab ba80 	vfma.f32	s22, s23, s0
 8016306:	eea9 9a80 	vfma.f32	s18, s19, s0
 801630a:	eeeb 8a00 	vfma.f32	s17, s22, s0
 801630e:	ee68 8a80 	vmul.f32	s17, s17, s0
 8016312:	f000 fb2b 	bl	801696c <__ieee754_sqrtf>
 8016316:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801631a:	eddf 7a30 	vldr	s15, [pc, #192]	; 80163dc <__ieee754_acosf+0x1e8>
 801631e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016322:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8016326:	ee77 7a80 	vadd.f32	s15, s15, s0
 801632a:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80163e0 <__ieee754_acosf+0x1ec>
 801632e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8016332:	e771      	b.n	8016218 <__ieee754_acosf+0x24>
 8016334:	ee39 8a40 	vsub.f32	s16, s18, s0
 8016338:	ee28 8a27 	vmul.f32	s16, s16, s15
 801633c:	eeb0 0a48 	vmov.f32	s0, s16
 8016340:	f000 fb14 	bl	801696c <__ieee754_sqrtf>
 8016344:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8016348:	eee8 aa0d 	vfma.f32	s21, s16, s26
 801634c:	eeac ca88 	vfma.f32	s24, s25, s16
 8016350:	eeaa aa88 	vfma.f32	s20, s21, s16
 8016354:	eeec ba08 	vfma.f32	s23, s24, s16
 8016358:	ee10 3a10 	vmov	r3, s0
 801635c:	eeab ba88 	vfma.f32	s22, s23, s16
 8016360:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8016364:	f023 030f 	bic.w	r3, r3, #15
 8016368:	eeea 9a08 	vfma.f32	s19, s20, s16
 801636c:	ee07 3a90 	vmov	s15, r3
 8016370:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8016374:	eeb0 6a48 	vmov.f32	s12, s16
 8016378:	eea7 6ae7 	vfms.f32	s12, s15, s15
 801637c:	eea9 9a88 	vfma.f32	s18, s19, s16
 8016380:	ee70 6a27 	vadd.f32	s13, s0, s15
 8016384:	ee68 8a88 	vmul.f32	s17, s17, s16
 8016388:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801638c:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8016390:	eea0 7a26 	vfma.f32	s14, s0, s13
 8016394:	ee37 0a87 	vadd.f32	s0, s15, s14
 8016398:	ee30 0a00 	vadd.f32	s0, s0, s0
 801639c:	e73c      	b.n	8016218 <__ieee754_acosf+0x24>
 801639e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80163e4 <__ieee754_acosf+0x1f0>
 80163a2:	e739      	b.n	8016218 <__ieee754_acosf+0x24>
 80163a4:	00000000 	.word	0x00000000
 80163a8:	40490fdb 	.word	0x40490fdb
 80163ac:	3811ef08 	.word	0x3811ef08
 80163b0:	3a4f7f04 	.word	0x3a4f7f04
 80163b4:	bf303361 	.word	0xbf303361
 80163b8:	33a22168 	.word	0x33a22168
 80163bc:	bd241146 	.word	0xbd241146
 80163c0:	3e4e0aa8 	.word	0x3e4e0aa8
 80163c4:	bea6b090 	.word	0xbea6b090
 80163c8:	3e2aaaab 	.word	0x3e2aaaab
 80163cc:	3d9dc62e 	.word	0x3d9dc62e
 80163d0:	4001572d 	.word	0x4001572d
 80163d4:	c019d139 	.word	0xc019d139
 80163d8:	3fc90fda 	.word	0x3fc90fda
 80163dc:	b3a22168 	.word	0xb3a22168
 80163e0:	40490fda 	.word	0x40490fda
 80163e4:	3fc90fdb 	.word	0x3fc90fdb

080163e8 <__ieee754_asinf>:
 80163e8:	b538      	push	{r3, r4, r5, lr}
 80163ea:	ee10 5a10 	vmov	r5, s0
 80163ee:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80163f2:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80163f6:	ed2d 8b04 	vpush	{d8-d9}
 80163fa:	d10c      	bne.n	8016416 <__ieee754_asinf+0x2e>
 80163fc:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8016574 <__ieee754_asinf+0x18c>
 8016400:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8016578 <__ieee754_asinf+0x190>
 8016404:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016408:	eee0 7a07 	vfma.f32	s15, s0, s14
 801640c:	eeb0 0a67 	vmov.f32	s0, s15
 8016410:	ecbd 8b04 	vpop	{d8-d9}
 8016414:	bd38      	pop	{r3, r4, r5, pc}
 8016416:	dd04      	ble.n	8016422 <__ieee754_asinf+0x3a>
 8016418:	ee70 7a40 	vsub.f32	s15, s0, s0
 801641c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8016420:	e7f6      	b.n	8016410 <__ieee754_asinf+0x28>
 8016422:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8016426:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801642a:	da0b      	bge.n	8016444 <__ieee754_asinf+0x5c>
 801642c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8016430:	da52      	bge.n	80164d8 <__ieee754_asinf+0xf0>
 8016432:	eddf 7a52 	vldr	s15, [pc, #328]	; 801657c <__ieee754_asinf+0x194>
 8016436:	ee70 7a27 	vadd.f32	s15, s0, s15
 801643a:	eef4 7ae8 	vcmpe.f32	s15, s17
 801643e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016442:	dce5      	bgt.n	8016410 <__ieee754_asinf+0x28>
 8016444:	f001 f92a 	bl	801769c <fabsf>
 8016448:	ee38 0ac0 	vsub.f32	s0, s17, s0
 801644c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8016450:	ee20 8a08 	vmul.f32	s16, s0, s16
 8016454:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8016580 <__ieee754_asinf+0x198>
 8016458:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8016584 <__ieee754_asinf+0x19c>
 801645c:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8016588 <__ieee754_asinf+0x1a0>
 8016460:	eea8 7a27 	vfma.f32	s14, s16, s15
 8016464:	eddf 7a49 	vldr	s15, [pc, #292]	; 801658c <__ieee754_asinf+0x1a4>
 8016468:	eee7 7a08 	vfma.f32	s15, s14, s16
 801646c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8016590 <__ieee754_asinf+0x1a8>
 8016470:	eea7 7a88 	vfma.f32	s14, s15, s16
 8016474:	eddf 7a47 	vldr	s15, [pc, #284]	; 8016594 <__ieee754_asinf+0x1ac>
 8016478:	eee7 7a08 	vfma.f32	s15, s14, s16
 801647c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8016598 <__ieee754_asinf+0x1b0>
 8016480:	eea7 9a88 	vfma.f32	s18, s15, s16
 8016484:	eddf 7a45 	vldr	s15, [pc, #276]	; 801659c <__ieee754_asinf+0x1b4>
 8016488:	eee8 7a07 	vfma.f32	s15, s16, s14
 801648c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80165a0 <__ieee754_asinf+0x1b8>
 8016490:	eea7 7a88 	vfma.f32	s14, s15, s16
 8016494:	eddf 7a43 	vldr	s15, [pc, #268]	; 80165a4 <__ieee754_asinf+0x1bc>
 8016498:	eee7 7a08 	vfma.f32	s15, s14, s16
 801649c:	eeb0 0a48 	vmov.f32	s0, s16
 80164a0:	eee7 8a88 	vfma.f32	s17, s15, s16
 80164a4:	f000 fa62 	bl	801696c <__ieee754_sqrtf>
 80164a8:	4b3f      	ldr	r3, [pc, #252]	; (80165a8 <__ieee754_asinf+0x1c0>)
 80164aa:	ee29 9a08 	vmul.f32	s18, s18, s16
 80164ae:	429c      	cmp	r4, r3
 80164b0:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80164b4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80164b8:	dd3d      	ble.n	8016536 <__ieee754_asinf+0x14e>
 80164ba:	eea0 0a06 	vfma.f32	s0, s0, s12
 80164be:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80165ac <__ieee754_asinf+0x1c4>
 80164c2:	eee0 7a26 	vfma.f32	s15, s0, s13
 80164c6:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8016578 <__ieee754_asinf+0x190>
 80164ca:	ee30 0a67 	vsub.f32	s0, s0, s15
 80164ce:	2d00      	cmp	r5, #0
 80164d0:	bfd8      	it	le
 80164d2:	eeb1 0a40 	vnegle.f32	s0, s0
 80164d6:	e79b      	b.n	8016410 <__ieee754_asinf+0x28>
 80164d8:	ee60 7a00 	vmul.f32	s15, s0, s0
 80164dc:	eddf 6a28 	vldr	s13, [pc, #160]	; 8016580 <__ieee754_asinf+0x198>
 80164e0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8016584 <__ieee754_asinf+0x19c>
 80164e4:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8016598 <__ieee754_asinf+0x1b0>
 80164e8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80164ec:	eddf 6a27 	vldr	s13, [pc, #156]	; 801658c <__ieee754_asinf+0x1a4>
 80164f0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80164f4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8016590 <__ieee754_asinf+0x1a8>
 80164f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80164fc:	eddf 6a25 	vldr	s13, [pc, #148]	; 8016594 <__ieee754_asinf+0x1ac>
 8016500:	eee7 6a27 	vfma.f32	s13, s14, s15
 8016504:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8016588 <__ieee754_asinf+0x1a0>
 8016508:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801650c:	eddf 6a23 	vldr	s13, [pc, #140]	; 801659c <__ieee754_asinf+0x1b4>
 8016510:	eee7 6a86 	vfma.f32	s13, s15, s12
 8016514:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80165a0 <__ieee754_asinf+0x1b8>
 8016518:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801651c:	eddf 6a21 	vldr	s13, [pc, #132]	; 80165a4 <__ieee754_asinf+0x1bc>
 8016520:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016524:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016528:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801652c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8016530:	eea0 0a27 	vfma.f32	s0, s0, s15
 8016534:	e76c      	b.n	8016410 <__ieee754_asinf+0x28>
 8016536:	ee10 3a10 	vmov	r3, s0
 801653a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801653e:	f023 030f 	bic.w	r3, r3, #15
 8016542:	ee07 3a10 	vmov	s14, r3
 8016546:	eea7 8a47 	vfms.f32	s16, s14, s14
 801654a:	ee70 7a07 	vadd.f32	s15, s0, s14
 801654e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016552:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8016556:	eddf 7a07 	vldr	s15, [pc, #28]	; 8016574 <__ieee754_asinf+0x18c>
 801655a:	eee5 7ae6 	vfms.f32	s15, s11, s13
 801655e:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8016562:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80165b0 <__ieee754_asinf+0x1c8>
 8016566:	eeb0 6a40 	vmov.f32	s12, s0
 801656a:	eea7 6a66 	vfms.f32	s12, s14, s13
 801656e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8016572:	e7aa      	b.n	80164ca <__ieee754_asinf+0xe2>
 8016574:	b33bbd2e 	.word	0xb33bbd2e
 8016578:	3fc90fdb 	.word	0x3fc90fdb
 801657c:	7149f2ca 	.word	0x7149f2ca
 8016580:	3811ef08 	.word	0x3811ef08
 8016584:	3a4f7f04 	.word	0x3a4f7f04
 8016588:	3e2aaaab 	.word	0x3e2aaaab
 801658c:	bd241146 	.word	0xbd241146
 8016590:	3e4e0aa8 	.word	0x3e4e0aa8
 8016594:	bea6b090 	.word	0xbea6b090
 8016598:	3d9dc62e 	.word	0x3d9dc62e
 801659c:	bf303361 	.word	0xbf303361
 80165a0:	4001572d 	.word	0x4001572d
 80165a4:	c019d139 	.word	0xc019d139
 80165a8:	3f799999 	.word	0x3f799999
 80165ac:	333bbd2e 	.word	0x333bbd2e
 80165b0:	3f490fdb 	.word	0x3f490fdb

080165b4 <__ieee754_atan2f>:
 80165b4:	ee10 2a90 	vmov	r2, s1
 80165b8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80165bc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80165c0:	b510      	push	{r4, lr}
 80165c2:	eef0 7a40 	vmov.f32	s15, s0
 80165c6:	dc06      	bgt.n	80165d6 <__ieee754_atan2f+0x22>
 80165c8:	ee10 0a10 	vmov	r0, s0
 80165cc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80165d0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80165d4:	dd04      	ble.n	80165e0 <__ieee754_atan2f+0x2c>
 80165d6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80165da:	eeb0 0a67 	vmov.f32	s0, s15
 80165de:	bd10      	pop	{r4, pc}
 80165e0:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80165e4:	d103      	bne.n	80165ee <__ieee754_atan2f+0x3a>
 80165e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80165ea:	f000 bf83 	b.w	80174f4 <atanf>
 80165ee:	1794      	asrs	r4, r2, #30
 80165f0:	f004 0402 	and.w	r4, r4, #2
 80165f4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80165f8:	b943      	cbnz	r3, 801660c <__ieee754_atan2f+0x58>
 80165fa:	2c02      	cmp	r4, #2
 80165fc:	d05e      	beq.n	80166bc <__ieee754_atan2f+0x108>
 80165fe:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80166d0 <__ieee754_atan2f+0x11c>
 8016602:	2c03      	cmp	r4, #3
 8016604:	bf08      	it	eq
 8016606:	eef0 7a47 	vmoveq.f32	s15, s14
 801660a:	e7e6      	b.n	80165da <__ieee754_atan2f+0x26>
 801660c:	b941      	cbnz	r1, 8016620 <__ieee754_atan2f+0x6c>
 801660e:	eddf 7a31 	vldr	s15, [pc, #196]	; 80166d4 <__ieee754_atan2f+0x120>
 8016612:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80166d8 <__ieee754_atan2f+0x124>
 8016616:	2800      	cmp	r0, #0
 8016618:	bfb8      	it	lt
 801661a:	eef0 7a40 	vmovlt.f32	s15, s0
 801661e:	e7dc      	b.n	80165da <__ieee754_atan2f+0x26>
 8016620:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8016624:	d110      	bne.n	8016648 <__ieee754_atan2f+0x94>
 8016626:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801662a:	f104 34ff 	add.w	r4, r4, #4294967295
 801662e:	d107      	bne.n	8016640 <__ieee754_atan2f+0x8c>
 8016630:	2c02      	cmp	r4, #2
 8016632:	d846      	bhi.n	80166c2 <__ieee754_atan2f+0x10e>
 8016634:	4b29      	ldr	r3, [pc, #164]	; (80166dc <__ieee754_atan2f+0x128>)
 8016636:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801663a:	edd4 7a00 	vldr	s15, [r4]
 801663e:	e7cc      	b.n	80165da <__ieee754_atan2f+0x26>
 8016640:	2c02      	cmp	r4, #2
 8016642:	d841      	bhi.n	80166c8 <__ieee754_atan2f+0x114>
 8016644:	4b26      	ldr	r3, [pc, #152]	; (80166e0 <__ieee754_atan2f+0x12c>)
 8016646:	e7f6      	b.n	8016636 <__ieee754_atan2f+0x82>
 8016648:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801664c:	d0df      	beq.n	801660e <__ieee754_atan2f+0x5a>
 801664e:	1a5b      	subs	r3, r3, r1
 8016650:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8016654:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8016658:	da1a      	bge.n	8016690 <__ieee754_atan2f+0xdc>
 801665a:	2a00      	cmp	r2, #0
 801665c:	da01      	bge.n	8016662 <__ieee754_atan2f+0xae>
 801665e:	313c      	adds	r1, #60	; 0x3c
 8016660:	db19      	blt.n	8016696 <__ieee754_atan2f+0xe2>
 8016662:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8016666:	f001 f819 	bl	801769c <fabsf>
 801666a:	f000 ff43 	bl	80174f4 <atanf>
 801666e:	eef0 7a40 	vmov.f32	s15, s0
 8016672:	2c01      	cmp	r4, #1
 8016674:	d012      	beq.n	801669c <__ieee754_atan2f+0xe8>
 8016676:	2c02      	cmp	r4, #2
 8016678:	d017      	beq.n	80166aa <__ieee754_atan2f+0xf6>
 801667a:	2c00      	cmp	r4, #0
 801667c:	d0ad      	beq.n	80165da <__ieee754_atan2f+0x26>
 801667e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80166e4 <__ieee754_atan2f+0x130>
 8016682:	ee77 7a80 	vadd.f32	s15, s15, s0
 8016686:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80166e8 <__ieee754_atan2f+0x134>
 801668a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801668e:	e7a4      	b.n	80165da <__ieee754_atan2f+0x26>
 8016690:	eddf 7a10 	vldr	s15, [pc, #64]	; 80166d4 <__ieee754_atan2f+0x120>
 8016694:	e7ed      	b.n	8016672 <__ieee754_atan2f+0xbe>
 8016696:	eddf 7a15 	vldr	s15, [pc, #84]	; 80166ec <__ieee754_atan2f+0x138>
 801669a:	e7ea      	b.n	8016672 <__ieee754_atan2f+0xbe>
 801669c:	ee17 3a90 	vmov	r3, s15
 80166a0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80166a4:	ee07 3a90 	vmov	s15, r3
 80166a8:	e797      	b.n	80165da <__ieee754_atan2f+0x26>
 80166aa:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80166e4 <__ieee754_atan2f+0x130>
 80166ae:	ee77 7a80 	vadd.f32	s15, s15, s0
 80166b2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80166e8 <__ieee754_atan2f+0x134>
 80166b6:	ee70 7a67 	vsub.f32	s15, s0, s15
 80166ba:	e78e      	b.n	80165da <__ieee754_atan2f+0x26>
 80166bc:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80166e8 <__ieee754_atan2f+0x134>
 80166c0:	e78b      	b.n	80165da <__ieee754_atan2f+0x26>
 80166c2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80166f0 <__ieee754_atan2f+0x13c>
 80166c6:	e788      	b.n	80165da <__ieee754_atan2f+0x26>
 80166c8:	eddf 7a08 	vldr	s15, [pc, #32]	; 80166ec <__ieee754_atan2f+0x138>
 80166cc:	e785      	b.n	80165da <__ieee754_atan2f+0x26>
 80166ce:	bf00      	nop
 80166d0:	c0490fdb 	.word	0xc0490fdb
 80166d4:	3fc90fdb 	.word	0x3fc90fdb
 80166d8:	bfc90fdb 	.word	0xbfc90fdb
 80166dc:	0801a9f0 	.word	0x0801a9f0
 80166e0:	0801a9fc 	.word	0x0801a9fc
 80166e4:	33bbbd2e 	.word	0x33bbbd2e
 80166e8:	40490fdb 	.word	0x40490fdb
 80166ec:	00000000 	.word	0x00000000
 80166f0:	3f490fdb 	.word	0x3f490fdb

080166f4 <__ieee754_rem_pio2f>:
 80166f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166f6:	ee10 6a10 	vmov	r6, s0
 80166fa:	4b8e      	ldr	r3, [pc, #568]	; (8016934 <__ieee754_rem_pio2f+0x240>)
 80166fc:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8016700:	429d      	cmp	r5, r3
 8016702:	b087      	sub	sp, #28
 8016704:	eef0 7a40 	vmov.f32	s15, s0
 8016708:	4604      	mov	r4, r0
 801670a:	dc05      	bgt.n	8016718 <__ieee754_rem_pio2f+0x24>
 801670c:	2300      	movs	r3, #0
 801670e:	ed80 0a00 	vstr	s0, [r0]
 8016712:	6043      	str	r3, [r0, #4]
 8016714:	2000      	movs	r0, #0
 8016716:	e01a      	b.n	801674e <__ieee754_rem_pio2f+0x5a>
 8016718:	4b87      	ldr	r3, [pc, #540]	; (8016938 <__ieee754_rem_pio2f+0x244>)
 801671a:	429d      	cmp	r5, r3
 801671c:	dc46      	bgt.n	80167ac <__ieee754_rem_pio2f+0xb8>
 801671e:	2e00      	cmp	r6, #0
 8016720:	ed9f 0a86 	vldr	s0, [pc, #536]	; 801693c <__ieee754_rem_pio2f+0x248>
 8016724:	4b86      	ldr	r3, [pc, #536]	; (8016940 <__ieee754_rem_pio2f+0x24c>)
 8016726:	f025 050f 	bic.w	r5, r5, #15
 801672a:	dd1f      	ble.n	801676c <__ieee754_rem_pio2f+0x78>
 801672c:	429d      	cmp	r5, r3
 801672e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016732:	d00e      	beq.n	8016752 <__ieee754_rem_pio2f+0x5e>
 8016734:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8016944 <__ieee754_rem_pio2f+0x250>
 8016738:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801673c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016740:	ed80 0a00 	vstr	s0, [r0]
 8016744:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016748:	2001      	movs	r0, #1
 801674a:	edc4 7a01 	vstr	s15, [r4, #4]
 801674e:	b007      	add	sp, #28
 8016750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016752:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8016948 <__ieee754_rem_pio2f+0x254>
 8016756:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801694c <__ieee754_rem_pio2f+0x258>
 801675a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801675e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8016762:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016766:	edc0 6a00 	vstr	s13, [r0]
 801676a:	e7eb      	b.n	8016744 <__ieee754_rem_pio2f+0x50>
 801676c:	429d      	cmp	r5, r3
 801676e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8016772:	d00e      	beq.n	8016792 <__ieee754_rem_pio2f+0x9e>
 8016774:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8016944 <__ieee754_rem_pio2f+0x250>
 8016778:	ee37 0a87 	vadd.f32	s0, s15, s14
 801677c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016780:	ed80 0a00 	vstr	s0, [r0]
 8016784:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016788:	f04f 30ff 	mov.w	r0, #4294967295
 801678c:	edc4 7a01 	vstr	s15, [r4, #4]
 8016790:	e7dd      	b.n	801674e <__ieee754_rem_pio2f+0x5a>
 8016792:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8016948 <__ieee754_rem_pio2f+0x254>
 8016796:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 801694c <__ieee754_rem_pio2f+0x258>
 801679a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801679e:	ee77 6a87 	vadd.f32	s13, s15, s14
 80167a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80167a6:	edc0 6a00 	vstr	s13, [r0]
 80167aa:	e7eb      	b.n	8016784 <__ieee754_rem_pio2f+0x90>
 80167ac:	4b68      	ldr	r3, [pc, #416]	; (8016950 <__ieee754_rem_pio2f+0x25c>)
 80167ae:	429d      	cmp	r5, r3
 80167b0:	dc72      	bgt.n	8016898 <__ieee754_rem_pio2f+0x1a4>
 80167b2:	f000 ff73 	bl	801769c <fabsf>
 80167b6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8016954 <__ieee754_rem_pio2f+0x260>
 80167ba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80167be:	eee0 7a07 	vfma.f32	s15, s0, s14
 80167c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80167c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80167ca:	ee17 0a90 	vmov	r0, s15
 80167ce:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801693c <__ieee754_rem_pio2f+0x248>
 80167d2:	eea7 0a67 	vfms.f32	s0, s14, s15
 80167d6:	281f      	cmp	r0, #31
 80167d8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8016944 <__ieee754_rem_pio2f+0x250>
 80167dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80167e0:	eeb1 6a47 	vneg.f32	s12, s14
 80167e4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80167e8:	ee16 2a90 	vmov	r2, s13
 80167ec:	dc1c      	bgt.n	8016828 <__ieee754_rem_pio2f+0x134>
 80167ee:	495a      	ldr	r1, [pc, #360]	; (8016958 <__ieee754_rem_pio2f+0x264>)
 80167f0:	1e47      	subs	r7, r0, #1
 80167f2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80167f6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80167fa:	428b      	cmp	r3, r1
 80167fc:	d014      	beq.n	8016828 <__ieee754_rem_pio2f+0x134>
 80167fe:	6022      	str	r2, [r4, #0]
 8016800:	ed94 7a00 	vldr	s14, [r4]
 8016804:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016808:	2e00      	cmp	r6, #0
 801680a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801680e:	ed84 0a01 	vstr	s0, [r4, #4]
 8016812:	da9c      	bge.n	801674e <__ieee754_rem_pio2f+0x5a>
 8016814:	eeb1 7a47 	vneg.f32	s14, s14
 8016818:	eeb1 0a40 	vneg.f32	s0, s0
 801681c:	ed84 7a00 	vstr	s14, [r4]
 8016820:	ed84 0a01 	vstr	s0, [r4, #4]
 8016824:	4240      	negs	r0, r0
 8016826:	e792      	b.n	801674e <__ieee754_rem_pio2f+0x5a>
 8016828:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801682c:	15eb      	asrs	r3, r5, #23
 801682e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8016832:	2d08      	cmp	r5, #8
 8016834:	dde3      	ble.n	80167fe <__ieee754_rem_pio2f+0x10a>
 8016836:	eddf 7a44 	vldr	s15, [pc, #272]	; 8016948 <__ieee754_rem_pio2f+0x254>
 801683a:	eef0 6a40 	vmov.f32	s13, s0
 801683e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016842:	ee30 0a66 	vsub.f32	s0, s0, s13
 8016846:	eea6 0a27 	vfma.f32	s0, s12, s15
 801684a:	eddf 7a40 	vldr	s15, [pc, #256]	; 801694c <__ieee754_rem_pio2f+0x258>
 801684e:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8016852:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8016856:	eef0 7a40 	vmov.f32	s15, s0
 801685a:	ee15 2a90 	vmov	r2, s11
 801685e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8016862:	1a5b      	subs	r3, r3, r1
 8016864:	2b19      	cmp	r3, #25
 8016866:	dc04      	bgt.n	8016872 <__ieee754_rem_pio2f+0x17e>
 8016868:	edc4 5a00 	vstr	s11, [r4]
 801686c:	eeb0 0a66 	vmov.f32	s0, s13
 8016870:	e7c6      	b.n	8016800 <__ieee754_rem_pio2f+0x10c>
 8016872:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801695c <__ieee754_rem_pio2f+0x268>
 8016876:	eeb0 0a66 	vmov.f32	s0, s13
 801687a:	eea6 0a25 	vfma.f32	s0, s12, s11
 801687e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8016882:	eddf 6a37 	vldr	s13, [pc, #220]	; 8016960 <__ieee754_rem_pio2f+0x26c>
 8016886:	eee6 7a25 	vfma.f32	s15, s12, s11
 801688a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801688e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8016892:	ed84 7a00 	vstr	s14, [r4]
 8016896:	e7b3      	b.n	8016800 <__ieee754_rem_pio2f+0x10c>
 8016898:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801689c:	db06      	blt.n	80168ac <__ieee754_rem_pio2f+0x1b8>
 801689e:	ee70 7a40 	vsub.f32	s15, s0, s0
 80168a2:	edc0 7a01 	vstr	s15, [r0, #4]
 80168a6:	edc0 7a00 	vstr	s15, [r0]
 80168aa:	e733      	b.n	8016714 <__ieee754_rem_pio2f+0x20>
 80168ac:	15ea      	asrs	r2, r5, #23
 80168ae:	3a86      	subs	r2, #134	; 0x86
 80168b0:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80168b4:	ee07 3a90 	vmov	s15, r3
 80168b8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80168bc:	eddf 6a29 	vldr	s13, [pc, #164]	; 8016964 <__ieee754_rem_pio2f+0x270>
 80168c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80168c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80168c8:	ed8d 7a03 	vstr	s14, [sp, #12]
 80168cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80168d0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80168d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80168d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80168dc:	ed8d 7a04 	vstr	s14, [sp, #16]
 80168e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80168e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80168e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168ec:	edcd 7a05 	vstr	s15, [sp, #20]
 80168f0:	d11e      	bne.n	8016930 <__ieee754_rem_pio2f+0x23c>
 80168f2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80168f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168fa:	bf14      	ite	ne
 80168fc:	2302      	movne	r3, #2
 80168fe:	2301      	moveq	r3, #1
 8016900:	4919      	ldr	r1, [pc, #100]	; (8016968 <__ieee754_rem_pio2f+0x274>)
 8016902:	9101      	str	r1, [sp, #4]
 8016904:	2102      	movs	r1, #2
 8016906:	9100      	str	r1, [sp, #0]
 8016908:	a803      	add	r0, sp, #12
 801690a:	4621      	mov	r1, r4
 801690c:	f000 f892 	bl	8016a34 <__kernel_rem_pio2f>
 8016910:	2e00      	cmp	r6, #0
 8016912:	f6bf af1c 	bge.w	801674e <__ieee754_rem_pio2f+0x5a>
 8016916:	edd4 7a00 	vldr	s15, [r4]
 801691a:	eef1 7a67 	vneg.f32	s15, s15
 801691e:	edc4 7a00 	vstr	s15, [r4]
 8016922:	edd4 7a01 	vldr	s15, [r4, #4]
 8016926:	eef1 7a67 	vneg.f32	s15, s15
 801692a:	edc4 7a01 	vstr	s15, [r4, #4]
 801692e:	e779      	b.n	8016824 <__ieee754_rem_pio2f+0x130>
 8016930:	2303      	movs	r3, #3
 8016932:	e7e5      	b.n	8016900 <__ieee754_rem_pio2f+0x20c>
 8016934:	3f490fd8 	.word	0x3f490fd8
 8016938:	4016cbe3 	.word	0x4016cbe3
 801693c:	3fc90f80 	.word	0x3fc90f80
 8016940:	3fc90fd0 	.word	0x3fc90fd0
 8016944:	37354443 	.word	0x37354443
 8016948:	37354400 	.word	0x37354400
 801694c:	2e85a308 	.word	0x2e85a308
 8016950:	43490f80 	.word	0x43490f80
 8016954:	3f22f984 	.word	0x3f22f984
 8016958:	0801aa08 	.word	0x0801aa08
 801695c:	2e85a300 	.word	0x2e85a300
 8016960:	248d3132 	.word	0x248d3132
 8016964:	43800000 	.word	0x43800000
 8016968:	0801aa88 	.word	0x0801aa88

0801696c <__ieee754_sqrtf>:
 801696c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016970:	4770      	bx	lr
	...

08016974 <__kernel_cosf>:
 8016974:	ee10 3a10 	vmov	r3, s0
 8016978:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801697c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8016980:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8016984:	da05      	bge.n	8016992 <__kernel_cosf+0x1e>
 8016986:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801698a:	ee17 2a90 	vmov	r2, s15
 801698e:	2a00      	cmp	r2, #0
 8016990:	d03d      	beq.n	8016a0e <__kernel_cosf+0x9a>
 8016992:	ee60 5a00 	vmul.f32	s11, s0, s0
 8016996:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8016a14 <__kernel_cosf+0xa0>
 801699a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8016a18 <__kernel_cosf+0xa4>
 801699e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8016a1c <__kernel_cosf+0xa8>
 80169a2:	4a1f      	ldr	r2, [pc, #124]	; (8016a20 <__kernel_cosf+0xac>)
 80169a4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80169a8:	4293      	cmp	r3, r2
 80169aa:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8016a24 <__kernel_cosf+0xb0>
 80169ae:	eee7 7a25 	vfma.f32	s15, s14, s11
 80169b2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8016a28 <__kernel_cosf+0xb4>
 80169b6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80169ba:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8016a2c <__kernel_cosf+0xb8>
 80169be:	eee7 7a25 	vfma.f32	s15, s14, s11
 80169c2:	eeb0 7a66 	vmov.f32	s14, s13
 80169c6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80169ca:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80169ce:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80169d2:	ee67 6a25 	vmul.f32	s13, s14, s11
 80169d6:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80169da:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80169de:	dc04      	bgt.n	80169ea <__kernel_cosf+0x76>
 80169e0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80169e4:	ee36 0a47 	vsub.f32	s0, s12, s14
 80169e8:	4770      	bx	lr
 80169ea:	4a11      	ldr	r2, [pc, #68]	; (8016a30 <__kernel_cosf+0xbc>)
 80169ec:	4293      	cmp	r3, r2
 80169ee:	bfda      	itte	le
 80169f0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80169f4:	ee06 3a90 	vmovle	s13, r3
 80169f8:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80169fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016a00:	ee36 0a66 	vsub.f32	s0, s12, s13
 8016a04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016a08:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016a0c:	4770      	bx	lr
 8016a0e:	eeb0 0a46 	vmov.f32	s0, s12
 8016a12:	4770      	bx	lr
 8016a14:	ad47d74e 	.word	0xad47d74e
 8016a18:	310f74f6 	.word	0x310f74f6
 8016a1c:	3d2aaaab 	.word	0x3d2aaaab
 8016a20:	3e999999 	.word	0x3e999999
 8016a24:	b493f27c 	.word	0xb493f27c
 8016a28:	37d00d01 	.word	0x37d00d01
 8016a2c:	bab60b61 	.word	0xbab60b61
 8016a30:	3f480000 	.word	0x3f480000

08016a34 <__kernel_rem_pio2f>:
 8016a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a38:	ed2d 8b04 	vpush	{d8-d9}
 8016a3c:	b0d7      	sub	sp, #348	; 0x15c
 8016a3e:	4616      	mov	r6, r2
 8016a40:	4698      	mov	r8, r3
 8016a42:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016a44:	4bbb      	ldr	r3, [pc, #748]	; (8016d34 <__kernel_rem_pio2f+0x300>)
 8016a46:	9001      	str	r0, [sp, #4]
 8016a48:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8016a4c:	1d33      	adds	r3, r6, #4
 8016a4e:	460d      	mov	r5, r1
 8016a50:	f108 39ff 	add.w	r9, r8, #4294967295
 8016a54:	db29      	blt.n	8016aaa <__kernel_rem_pio2f+0x76>
 8016a56:	1ef1      	subs	r1, r6, #3
 8016a58:	bf48      	it	mi
 8016a5a:	1d31      	addmi	r1, r6, #4
 8016a5c:	10c9      	asrs	r1, r1, #3
 8016a5e:	1c4c      	adds	r4, r1, #1
 8016a60:	00e3      	lsls	r3, r4, #3
 8016a62:	9302      	str	r3, [sp, #8]
 8016a64:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8016a66:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8016d44 <__kernel_rem_pio2f+0x310>
 8016a6a:	eba1 0009 	sub.w	r0, r1, r9
 8016a6e:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8016a72:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8016a76:	eb07 0c09 	add.w	ip, r7, r9
 8016a7a:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8016a7e:	2300      	movs	r3, #0
 8016a80:	4563      	cmp	r3, ip
 8016a82:	dd14      	ble.n	8016aae <__kernel_rem_pio2f+0x7a>
 8016a84:	ab1a      	add	r3, sp, #104	; 0x68
 8016a86:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8016a8a:	46cc      	mov	ip, r9
 8016a8c:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8016a90:	f1c8 0b01 	rsb	fp, r8, #1
 8016a94:	eb0b 020c 	add.w	r2, fp, ip
 8016a98:	4297      	cmp	r7, r2
 8016a9a:	db27      	blt.n	8016aec <__kernel_rem_pio2f+0xb8>
 8016a9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8016aa0:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8016d44 <__kernel_rem_pio2f+0x310>
 8016aa4:	4618      	mov	r0, r3
 8016aa6:	2200      	movs	r2, #0
 8016aa8:	e016      	b.n	8016ad8 <__kernel_rem_pio2f+0xa4>
 8016aaa:	2100      	movs	r1, #0
 8016aac:	e7d7      	b.n	8016a5e <__kernel_rem_pio2f+0x2a>
 8016aae:	42d8      	cmn	r0, r3
 8016ab0:	bf5d      	ittte	pl
 8016ab2:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8016ab6:	ee07 2a90 	vmovpl	s15, r2
 8016aba:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8016abe:	eef0 7a47 	vmovmi.f32	s15, s14
 8016ac2:	ecea 7a01 	vstmia	sl!, {s15}
 8016ac6:	3301      	adds	r3, #1
 8016ac8:	e7da      	b.n	8016a80 <__kernel_rem_pio2f+0x4c>
 8016aca:	ecfe 6a01 	vldmia	lr!, {s13}
 8016ace:	ed90 7a00 	vldr	s14, [r0]
 8016ad2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016ad6:	3201      	adds	r2, #1
 8016ad8:	454a      	cmp	r2, r9
 8016ada:	f1a0 0004 	sub.w	r0, r0, #4
 8016ade:	ddf4      	ble.n	8016aca <__kernel_rem_pio2f+0x96>
 8016ae0:	ecea 7a01 	vstmia	sl!, {s15}
 8016ae4:	3304      	adds	r3, #4
 8016ae6:	f10c 0c01 	add.w	ip, ip, #1
 8016aea:	e7d3      	b.n	8016a94 <__kernel_rem_pio2f+0x60>
 8016aec:	ab06      	add	r3, sp, #24
 8016aee:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8016af2:	9304      	str	r3, [sp, #16]
 8016af4:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8016af6:	eddf 8a92 	vldr	s17, [pc, #584]	; 8016d40 <__kernel_rem_pio2f+0x30c>
 8016afa:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8016d3c <__kernel_rem_pio2f+0x308>
 8016afe:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8016b02:	9303      	str	r3, [sp, #12]
 8016b04:	46ba      	mov	sl, r7
 8016b06:	ab56      	add	r3, sp, #344	; 0x158
 8016b08:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8016b0c:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8016b10:	ab06      	add	r3, sp, #24
 8016b12:	4618      	mov	r0, r3
 8016b14:	4652      	mov	r2, sl
 8016b16:	2a00      	cmp	r2, #0
 8016b18:	dc51      	bgt.n	8016bbe <__kernel_rem_pio2f+0x18a>
 8016b1a:	4620      	mov	r0, r4
 8016b1c:	9305      	str	r3, [sp, #20]
 8016b1e:	f000 fe0d 	bl	801773c <scalbnf>
 8016b22:	eeb0 8a40 	vmov.f32	s16, s0
 8016b26:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8016b2a:	ee28 0a00 	vmul.f32	s0, s16, s0
 8016b2e:	f000 fdbd 	bl	80176ac <floorf>
 8016b32:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8016b36:	eea0 8a67 	vfms.f32	s16, s0, s15
 8016b3a:	2c00      	cmp	r4, #0
 8016b3c:	9b05      	ldr	r3, [sp, #20]
 8016b3e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8016b42:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8016b46:	edcd 7a00 	vstr	s15, [sp]
 8016b4a:	ee38 8a40 	vsub.f32	s16, s16, s0
 8016b4e:	dd4b      	ble.n	8016be8 <__kernel_rem_pio2f+0x1b4>
 8016b50:	f10a 3cff 	add.w	ip, sl, #4294967295
 8016b54:	aa06      	add	r2, sp, #24
 8016b56:	f1c4 0e08 	rsb	lr, r4, #8
 8016b5a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8016b5e:	ee17 1a90 	vmov	r1, s15
 8016b62:	fa42 f00e 	asr.w	r0, r2, lr
 8016b66:	4401      	add	r1, r0
 8016b68:	9100      	str	r1, [sp, #0]
 8016b6a:	fa00 f00e 	lsl.w	r0, r0, lr
 8016b6e:	a906      	add	r1, sp, #24
 8016b70:	1a12      	subs	r2, r2, r0
 8016b72:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8016b76:	f1c4 0007 	rsb	r0, r4, #7
 8016b7a:	fa42 fb00 	asr.w	fp, r2, r0
 8016b7e:	f1bb 0f00 	cmp.w	fp, #0
 8016b82:	dd43      	ble.n	8016c0c <__kernel_rem_pio2f+0x1d8>
 8016b84:	9a00      	ldr	r2, [sp, #0]
 8016b86:	f04f 0e00 	mov.w	lr, #0
 8016b8a:	3201      	adds	r2, #1
 8016b8c:	9200      	str	r2, [sp, #0]
 8016b8e:	4670      	mov	r0, lr
 8016b90:	45f2      	cmp	sl, lr
 8016b92:	dc6c      	bgt.n	8016c6e <__kernel_rem_pio2f+0x23a>
 8016b94:	2c00      	cmp	r4, #0
 8016b96:	dd04      	ble.n	8016ba2 <__kernel_rem_pio2f+0x16e>
 8016b98:	2c01      	cmp	r4, #1
 8016b9a:	d079      	beq.n	8016c90 <__kernel_rem_pio2f+0x25c>
 8016b9c:	2c02      	cmp	r4, #2
 8016b9e:	f000 8082 	beq.w	8016ca6 <__kernel_rem_pio2f+0x272>
 8016ba2:	f1bb 0f02 	cmp.w	fp, #2
 8016ba6:	d131      	bne.n	8016c0c <__kernel_rem_pio2f+0x1d8>
 8016ba8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016bac:	ee30 8a48 	vsub.f32	s16, s0, s16
 8016bb0:	b360      	cbz	r0, 8016c0c <__kernel_rem_pio2f+0x1d8>
 8016bb2:	4620      	mov	r0, r4
 8016bb4:	f000 fdc2 	bl	801773c <scalbnf>
 8016bb8:	ee38 8a40 	vsub.f32	s16, s16, s0
 8016bbc:	e026      	b.n	8016c0c <__kernel_rem_pio2f+0x1d8>
 8016bbe:	ee60 7a28 	vmul.f32	s15, s0, s17
 8016bc2:	3a01      	subs	r2, #1
 8016bc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016bc8:	a942      	add	r1, sp, #264	; 0x108
 8016bca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016bce:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8016bd2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8016bd6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016bda:	eca0 0a01 	vstmia	r0!, {s0}
 8016bde:	ed9c 0a00 	vldr	s0, [ip]
 8016be2:	ee37 0a80 	vadd.f32	s0, s15, s0
 8016be6:	e796      	b.n	8016b16 <__kernel_rem_pio2f+0xe2>
 8016be8:	d107      	bne.n	8016bfa <__kernel_rem_pio2f+0x1c6>
 8016bea:	f10a 32ff 	add.w	r2, sl, #4294967295
 8016bee:	a906      	add	r1, sp, #24
 8016bf0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8016bf4:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8016bf8:	e7c1      	b.n	8016b7e <__kernel_rem_pio2f+0x14a>
 8016bfa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016bfe:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c06:	da2f      	bge.n	8016c68 <__kernel_rem_pio2f+0x234>
 8016c08:	f04f 0b00 	mov.w	fp, #0
 8016c0c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8016c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c14:	f040 8098 	bne.w	8016d48 <__kernel_rem_pio2f+0x314>
 8016c18:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016c1c:	469c      	mov	ip, r3
 8016c1e:	2200      	movs	r2, #0
 8016c20:	45bc      	cmp	ip, r7
 8016c22:	da48      	bge.n	8016cb6 <__kernel_rem_pio2f+0x282>
 8016c24:	2a00      	cmp	r2, #0
 8016c26:	d05f      	beq.n	8016ce8 <__kernel_rem_pio2f+0x2b4>
 8016c28:	aa06      	add	r2, sp, #24
 8016c2a:	3c08      	subs	r4, #8
 8016c2c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8016c30:	2900      	cmp	r1, #0
 8016c32:	d07d      	beq.n	8016d30 <__kernel_rem_pio2f+0x2fc>
 8016c34:	4620      	mov	r0, r4
 8016c36:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016c3a:	9301      	str	r3, [sp, #4]
 8016c3c:	f000 fd7e 	bl	801773c <scalbnf>
 8016c40:	9b01      	ldr	r3, [sp, #4]
 8016c42:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8016d40 <__kernel_rem_pio2f+0x30c>
 8016c46:	4619      	mov	r1, r3
 8016c48:	2900      	cmp	r1, #0
 8016c4a:	f280 80af 	bge.w	8016dac <__kernel_rem_pio2f+0x378>
 8016c4e:	4618      	mov	r0, r3
 8016c50:	2400      	movs	r4, #0
 8016c52:	2800      	cmp	r0, #0
 8016c54:	f2c0 80d0 	blt.w	8016df8 <__kernel_rem_pio2f+0x3c4>
 8016c58:	a942      	add	r1, sp, #264	; 0x108
 8016c5a:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8016c5e:	4a36      	ldr	r2, [pc, #216]	; (8016d38 <__kernel_rem_pio2f+0x304>)
 8016c60:	eddf 7a38 	vldr	s15, [pc, #224]	; 8016d44 <__kernel_rem_pio2f+0x310>
 8016c64:	2100      	movs	r1, #0
 8016c66:	e0bb      	b.n	8016de0 <__kernel_rem_pio2f+0x3ac>
 8016c68:	f04f 0b02 	mov.w	fp, #2
 8016c6c:	e78a      	b.n	8016b84 <__kernel_rem_pio2f+0x150>
 8016c6e:	681a      	ldr	r2, [r3, #0]
 8016c70:	b948      	cbnz	r0, 8016c86 <__kernel_rem_pio2f+0x252>
 8016c72:	b11a      	cbz	r2, 8016c7c <__kernel_rem_pio2f+0x248>
 8016c74:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8016c78:	601a      	str	r2, [r3, #0]
 8016c7a:	2201      	movs	r2, #1
 8016c7c:	f10e 0e01 	add.w	lr, lr, #1
 8016c80:	3304      	adds	r3, #4
 8016c82:	4610      	mov	r0, r2
 8016c84:	e784      	b.n	8016b90 <__kernel_rem_pio2f+0x15c>
 8016c86:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8016c8a:	601a      	str	r2, [r3, #0]
 8016c8c:	4602      	mov	r2, r0
 8016c8e:	e7f5      	b.n	8016c7c <__kernel_rem_pio2f+0x248>
 8016c90:	f10a 3cff 	add.w	ip, sl, #4294967295
 8016c94:	ab06      	add	r3, sp, #24
 8016c96:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8016c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016c9e:	aa06      	add	r2, sp, #24
 8016ca0:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8016ca4:	e77d      	b.n	8016ba2 <__kernel_rem_pio2f+0x16e>
 8016ca6:	f10a 3cff 	add.w	ip, sl, #4294967295
 8016caa:	ab06      	add	r3, sp, #24
 8016cac:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8016cb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016cb4:	e7f3      	b.n	8016c9e <__kernel_rem_pio2f+0x26a>
 8016cb6:	a906      	add	r1, sp, #24
 8016cb8:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8016cbc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016cc0:	4302      	orrs	r2, r0
 8016cc2:	e7ad      	b.n	8016c20 <__kernel_rem_pio2f+0x1ec>
 8016cc4:	3001      	adds	r0, #1
 8016cc6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8016cca:	2a00      	cmp	r2, #0
 8016ccc:	d0fa      	beq.n	8016cc4 <__kernel_rem_pio2f+0x290>
 8016cce:	a91a      	add	r1, sp, #104	; 0x68
 8016cd0:	eb0a 0208 	add.w	r2, sl, r8
 8016cd4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8016cd8:	f10a 0301 	add.w	r3, sl, #1
 8016cdc:	eb0a 0100 	add.w	r1, sl, r0
 8016ce0:	4299      	cmp	r1, r3
 8016ce2:	da04      	bge.n	8016cee <__kernel_rem_pio2f+0x2ba>
 8016ce4:	468a      	mov	sl, r1
 8016ce6:	e70e      	b.n	8016b06 <__kernel_rem_pio2f+0xd2>
 8016ce8:	9b04      	ldr	r3, [sp, #16]
 8016cea:	2001      	movs	r0, #1
 8016cec:	e7eb      	b.n	8016cc6 <__kernel_rem_pio2f+0x292>
 8016cee:	9803      	ldr	r0, [sp, #12]
 8016cf0:	f8dd c004 	ldr.w	ip, [sp, #4]
 8016cf4:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8016cf8:	9000      	str	r0, [sp, #0]
 8016cfa:	ee07 0a90 	vmov	s15, r0
 8016cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016d02:	2000      	movs	r0, #0
 8016d04:	ece2 7a01 	vstmia	r2!, {s15}
 8016d08:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8016d44 <__kernel_rem_pio2f+0x310>
 8016d0c:	4696      	mov	lr, r2
 8016d0e:	4548      	cmp	r0, r9
 8016d10:	dd06      	ble.n	8016d20 <__kernel_rem_pio2f+0x2ec>
 8016d12:	a842      	add	r0, sp, #264	; 0x108
 8016d14:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8016d18:	edc0 7a00 	vstr	s15, [r0]
 8016d1c:	3301      	adds	r3, #1
 8016d1e:	e7df      	b.n	8016ce0 <__kernel_rem_pio2f+0x2ac>
 8016d20:	ecfc 6a01 	vldmia	ip!, {s13}
 8016d24:	ed3e 7a01 	vldmdb	lr!, {s14}
 8016d28:	3001      	adds	r0, #1
 8016d2a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016d2e:	e7ee      	b.n	8016d0e <__kernel_rem_pio2f+0x2da>
 8016d30:	3b01      	subs	r3, #1
 8016d32:	e779      	b.n	8016c28 <__kernel_rem_pio2f+0x1f4>
 8016d34:	0801adcc 	.word	0x0801adcc
 8016d38:	0801ada0 	.word	0x0801ada0
 8016d3c:	43800000 	.word	0x43800000
 8016d40:	3b800000 	.word	0x3b800000
 8016d44:	00000000 	.word	0x00000000
 8016d48:	9b02      	ldr	r3, [sp, #8]
 8016d4a:	eeb0 0a48 	vmov.f32	s0, s16
 8016d4e:	1b98      	subs	r0, r3, r6
 8016d50:	f000 fcf4 	bl	801773c <scalbnf>
 8016d54:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8016d3c <__kernel_rem_pio2f+0x308>
 8016d58:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8016d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d60:	db1b      	blt.n	8016d9a <__kernel_rem_pio2f+0x366>
 8016d62:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8016d40 <__kernel_rem_pio2f+0x30c>
 8016d66:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016d6a:	aa06      	add	r2, sp, #24
 8016d6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016d70:	a906      	add	r1, sp, #24
 8016d72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016d76:	3408      	adds	r4, #8
 8016d78:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8016d7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016d80:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016d84:	ee10 3a10 	vmov	r3, s0
 8016d88:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8016d8c:	ee17 2a90 	vmov	r2, s15
 8016d90:	f10a 0301 	add.w	r3, sl, #1
 8016d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016d98:	e74c      	b.n	8016c34 <__kernel_rem_pio2f+0x200>
 8016d9a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016d9e:	aa06      	add	r2, sp, #24
 8016da0:	ee10 3a10 	vmov	r3, s0
 8016da4:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8016da8:	4653      	mov	r3, sl
 8016daa:	e743      	b.n	8016c34 <__kernel_rem_pio2f+0x200>
 8016dac:	aa42      	add	r2, sp, #264	; 0x108
 8016dae:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8016db2:	aa06      	add	r2, sp, #24
 8016db4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8016db8:	9201      	str	r2, [sp, #4]
 8016dba:	ee07 2a90 	vmov	s15, r2
 8016dbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016dc2:	3901      	subs	r1, #1
 8016dc4:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016dc8:	ee20 0a07 	vmul.f32	s0, s0, s14
 8016dcc:	edc0 7a00 	vstr	s15, [r0]
 8016dd0:	e73a      	b.n	8016c48 <__kernel_rem_pio2f+0x214>
 8016dd2:	ecf2 6a01 	vldmia	r2!, {s13}
 8016dd6:	ecb6 7a01 	vldmia	r6!, {s14}
 8016dda:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016dde:	3101      	adds	r1, #1
 8016de0:	42b9      	cmp	r1, r7
 8016de2:	dc01      	bgt.n	8016de8 <__kernel_rem_pio2f+0x3b4>
 8016de4:	428c      	cmp	r4, r1
 8016de6:	daf4      	bge.n	8016dd2 <__kernel_rem_pio2f+0x39e>
 8016de8:	aa56      	add	r2, sp, #344	; 0x158
 8016dea:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8016dee:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8016df2:	3801      	subs	r0, #1
 8016df4:	3401      	adds	r4, #1
 8016df6:	e72c      	b.n	8016c52 <__kernel_rem_pio2f+0x21e>
 8016df8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016dfa:	2a02      	cmp	r2, #2
 8016dfc:	dc0a      	bgt.n	8016e14 <__kernel_rem_pio2f+0x3e0>
 8016dfe:	2a00      	cmp	r2, #0
 8016e00:	dc61      	bgt.n	8016ec6 <__kernel_rem_pio2f+0x492>
 8016e02:	d03c      	beq.n	8016e7e <__kernel_rem_pio2f+0x44a>
 8016e04:	9b00      	ldr	r3, [sp, #0]
 8016e06:	f003 0007 	and.w	r0, r3, #7
 8016e0a:	b057      	add	sp, #348	; 0x15c
 8016e0c:	ecbd 8b04 	vpop	{d8-d9}
 8016e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e14:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016e16:	2a03      	cmp	r2, #3
 8016e18:	d1f4      	bne.n	8016e04 <__kernel_rem_pio2f+0x3d0>
 8016e1a:	aa2e      	add	r2, sp, #184	; 0xb8
 8016e1c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8016e20:	4608      	mov	r0, r1
 8016e22:	461c      	mov	r4, r3
 8016e24:	2c00      	cmp	r4, #0
 8016e26:	f1a0 0004 	sub.w	r0, r0, #4
 8016e2a:	dc59      	bgt.n	8016ee0 <__kernel_rem_pio2f+0x4ac>
 8016e2c:	4618      	mov	r0, r3
 8016e2e:	2801      	cmp	r0, #1
 8016e30:	f1a1 0104 	sub.w	r1, r1, #4
 8016e34:	dc64      	bgt.n	8016f00 <__kernel_rem_pio2f+0x4cc>
 8016e36:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8016d44 <__kernel_rem_pio2f+0x310>
 8016e3a:	2b01      	cmp	r3, #1
 8016e3c:	dc70      	bgt.n	8016f20 <__kernel_rem_pio2f+0x4ec>
 8016e3e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8016e42:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8016e46:	f1bb 0f00 	cmp.w	fp, #0
 8016e4a:	d172      	bne.n	8016f32 <__kernel_rem_pio2f+0x4fe>
 8016e4c:	edc5 6a00 	vstr	s13, [r5]
 8016e50:	ed85 7a01 	vstr	s14, [r5, #4]
 8016e54:	edc5 7a02 	vstr	s15, [r5, #8]
 8016e58:	e7d4      	b.n	8016e04 <__kernel_rem_pio2f+0x3d0>
 8016e5a:	aa2e      	add	r2, sp, #184	; 0xb8
 8016e5c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8016e60:	ed91 7a00 	vldr	s14, [r1]
 8016e64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016e68:	3b01      	subs	r3, #1
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	daf5      	bge.n	8016e5a <__kernel_rem_pio2f+0x426>
 8016e6e:	f1bb 0f00 	cmp.w	fp, #0
 8016e72:	d001      	beq.n	8016e78 <__kernel_rem_pio2f+0x444>
 8016e74:	eef1 7a67 	vneg.f32	s15, s15
 8016e78:	edc5 7a00 	vstr	s15, [r5]
 8016e7c:	e7c2      	b.n	8016e04 <__kernel_rem_pio2f+0x3d0>
 8016e7e:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8016d44 <__kernel_rem_pio2f+0x310>
 8016e82:	e7f2      	b.n	8016e6a <__kernel_rem_pio2f+0x436>
 8016e84:	aa2e      	add	r2, sp, #184	; 0xb8
 8016e86:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8016e8a:	edd0 7a00 	vldr	s15, [r0]
 8016e8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016e92:	3901      	subs	r1, #1
 8016e94:	2900      	cmp	r1, #0
 8016e96:	daf5      	bge.n	8016e84 <__kernel_rem_pio2f+0x450>
 8016e98:	f1bb 0f00 	cmp.w	fp, #0
 8016e9c:	d017      	beq.n	8016ece <__kernel_rem_pio2f+0x49a>
 8016e9e:	eef1 7a47 	vneg.f32	s15, s14
 8016ea2:	edc5 7a00 	vstr	s15, [r5]
 8016ea6:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8016eaa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016eae:	a82f      	add	r0, sp, #188	; 0xbc
 8016eb0:	2101      	movs	r1, #1
 8016eb2:	428b      	cmp	r3, r1
 8016eb4:	da0e      	bge.n	8016ed4 <__kernel_rem_pio2f+0x4a0>
 8016eb6:	f1bb 0f00 	cmp.w	fp, #0
 8016eba:	d001      	beq.n	8016ec0 <__kernel_rem_pio2f+0x48c>
 8016ebc:	eef1 7a67 	vneg.f32	s15, s15
 8016ec0:	edc5 7a01 	vstr	s15, [r5, #4]
 8016ec4:	e79e      	b.n	8016e04 <__kernel_rem_pio2f+0x3d0>
 8016ec6:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8016d44 <__kernel_rem_pio2f+0x310>
 8016eca:	4619      	mov	r1, r3
 8016ecc:	e7e2      	b.n	8016e94 <__kernel_rem_pio2f+0x460>
 8016ece:	eef0 7a47 	vmov.f32	s15, s14
 8016ed2:	e7e6      	b.n	8016ea2 <__kernel_rem_pio2f+0x46e>
 8016ed4:	ecb0 7a01 	vldmia	r0!, {s14}
 8016ed8:	3101      	adds	r1, #1
 8016eda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016ede:	e7e8      	b.n	8016eb2 <__kernel_rem_pio2f+0x47e>
 8016ee0:	edd0 7a00 	vldr	s15, [r0]
 8016ee4:	edd0 6a01 	vldr	s13, [r0, #4]
 8016ee8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016eec:	3c01      	subs	r4, #1
 8016eee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016ef2:	ed80 7a00 	vstr	s14, [r0]
 8016ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016efa:	edc0 7a01 	vstr	s15, [r0, #4]
 8016efe:	e791      	b.n	8016e24 <__kernel_rem_pio2f+0x3f0>
 8016f00:	edd1 7a00 	vldr	s15, [r1]
 8016f04:	edd1 6a01 	vldr	s13, [r1, #4]
 8016f08:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016f0c:	3801      	subs	r0, #1
 8016f0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016f12:	ed81 7a00 	vstr	s14, [r1]
 8016f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016f1a:	edc1 7a01 	vstr	s15, [r1, #4]
 8016f1e:	e786      	b.n	8016e2e <__kernel_rem_pio2f+0x3fa>
 8016f20:	aa2e      	add	r2, sp, #184	; 0xb8
 8016f22:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8016f26:	ed91 7a00 	vldr	s14, [r1]
 8016f2a:	3b01      	subs	r3, #1
 8016f2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016f30:	e783      	b.n	8016e3a <__kernel_rem_pio2f+0x406>
 8016f32:	eef1 6a66 	vneg.f32	s13, s13
 8016f36:	eeb1 7a47 	vneg.f32	s14, s14
 8016f3a:	edc5 6a00 	vstr	s13, [r5]
 8016f3e:	ed85 7a01 	vstr	s14, [r5, #4]
 8016f42:	eef1 7a67 	vneg.f32	s15, s15
 8016f46:	e785      	b.n	8016e54 <__kernel_rem_pio2f+0x420>

08016f48 <__kernel_sinf>:
 8016f48:	ee10 3a10 	vmov	r3, s0
 8016f4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016f50:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8016f54:	da04      	bge.n	8016f60 <__kernel_sinf+0x18>
 8016f56:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8016f5a:	ee17 3a90 	vmov	r3, s15
 8016f5e:	b35b      	cbz	r3, 8016fb8 <__kernel_sinf+0x70>
 8016f60:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016f64:	eddf 7a15 	vldr	s15, [pc, #84]	; 8016fbc <__kernel_sinf+0x74>
 8016f68:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8016fc0 <__kernel_sinf+0x78>
 8016f6c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016f70:	eddf 7a14 	vldr	s15, [pc, #80]	; 8016fc4 <__kernel_sinf+0x7c>
 8016f74:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016f78:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8016fc8 <__kernel_sinf+0x80>
 8016f7c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8016f80:	eddf 7a12 	vldr	s15, [pc, #72]	; 8016fcc <__kernel_sinf+0x84>
 8016f84:	ee60 6a07 	vmul.f32	s13, s0, s14
 8016f88:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016f8c:	b930      	cbnz	r0, 8016f9c <__kernel_sinf+0x54>
 8016f8e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8016fd0 <__kernel_sinf+0x88>
 8016f92:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016f96:	eea6 0a26 	vfma.f32	s0, s12, s13
 8016f9a:	4770      	bx	lr
 8016f9c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8016fa0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8016fa4:	eee0 7a86 	vfma.f32	s15, s1, s12
 8016fa8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8016fac:	eddf 7a09 	vldr	s15, [pc, #36]	; 8016fd4 <__kernel_sinf+0x8c>
 8016fb0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8016fb4:	ee30 0a60 	vsub.f32	s0, s0, s1
 8016fb8:	4770      	bx	lr
 8016fba:	bf00      	nop
 8016fbc:	2f2ec9d3 	.word	0x2f2ec9d3
 8016fc0:	b2d72f34 	.word	0xb2d72f34
 8016fc4:	3638ef1b 	.word	0x3638ef1b
 8016fc8:	b9500d01 	.word	0xb9500d01
 8016fcc:	3c088889 	.word	0x3c088889
 8016fd0:	be2aaaab 	.word	0xbe2aaaab
 8016fd4:	3e2aaaab 	.word	0x3e2aaaab

08016fd8 <__kernel_tanf>:
 8016fd8:	b508      	push	{r3, lr}
 8016fda:	ee10 3a10 	vmov	r3, s0
 8016fde:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016fe2:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8016fe6:	eef0 7a40 	vmov.f32	s15, s0
 8016fea:	da17      	bge.n	801701c <__kernel_tanf+0x44>
 8016fec:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8016ff0:	ee17 1a10 	vmov	r1, s14
 8016ff4:	bb41      	cbnz	r1, 8017048 <__kernel_tanf+0x70>
 8016ff6:	1c43      	adds	r3, r0, #1
 8016ff8:	4313      	orrs	r3, r2
 8016ffa:	d108      	bne.n	801700e <__kernel_tanf+0x36>
 8016ffc:	f000 fb4e 	bl	801769c <fabsf>
 8017000:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017004:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017008:	eeb0 0a67 	vmov.f32	s0, s15
 801700c:	bd08      	pop	{r3, pc}
 801700e:	2801      	cmp	r0, #1
 8017010:	d0fa      	beq.n	8017008 <__kernel_tanf+0x30>
 8017012:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8017016:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801701a:	e7f5      	b.n	8017008 <__kernel_tanf+0x30>
 801701c:	494d      	ldr	r1, [pc, #308]	; (8017154 <__kernel_tanf+0x17c>)
 801701e:	428a      	cmp	r2, r1
 8017020:	db12      	blt.n	8017048 <__kernel_tanf+0x70>
 8017022:	2b00      	cmp	r3, #0
 8017024:	bfb8      	it	lt
 8017026:	eef1 7a40 	vneglt.f32	s15, s0
 801702a:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8017158 <__kernel_tanf+0x180>
 801702e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8017032:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 801715c <__kernel_tanf+0x184>
 8017036:	bfb8      	it	lt
 8017038:	eef1 0a60 	vneglt.f32	s1, s1
 801703c:	ee70 0a60 	vsub.f32	s1, s0, s1
 8017040:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8017044:	eddf 0a46 	vldr	s1, [pc, #280]	; 8017160 <__kernel_tanf+0x188>
 8017048:	eddf 5a46 	vldr	s11, [pc, #280]	; 8017164 <__kernel_tanf+0x18c>
 801704c:	ed9f 6a46 	vldr	s12, [pc, #280]	; 8017168 <__kernel_tanf+0x190>
 8017050:	ed9f 5a46 	vldr	s10, [pc, #280]	; 801716c <__kernel_tanf+0x194>
 8017054:	493f      	ldr	r1, [pc, #252]	; (8017154 <__kernel_tanf+0x17c>)
 8017056:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801705a:	428a      	cmp	r2, r1
 801705c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8017060:	eea7 6a25 	vfma.f32	s12, s14, s11
 8017064:	eddf 5a42 	vldr	s11, [pc, #264]	; 8017170 <__kernel_tanf+0x198>
 8017068:	eee6 5a07 	vfma.f32	s11, s12, s14
 801706c:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8017174 <__kernel_tanf+0x19c>
 8017070:	eea5 6a87 	vfma.f32	s12, s11, s14
 8017074:	eddf 5a40 	vldr	s11, [pc, #256]	; 8017178 <__kernel_tanf+0x1a0>
 8017078:	eee6 5a07 	vfma.f32	s11, s12, s14
 801707c:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 801717c <__kernel_tanf+0x1a4>
 8017080:	eea5 6a87 	vfma.f32	s12, s11, s14
 8017084:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8017180 <__kernel_tanf+0x1a8>
 8017088:	eee7 5a05 	vfma.f32	s11, s14, s10
 801708c:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8017184 <__kernel_tanf+0x1ac>
 8017090:	eea5 5a87 	vfma.f32	s10, s11, s14
 8017094:	eddf 5a3c 	vldr	s11, [pc, #240]	; 8017188 <__kernel_tanf+0x1b0>
 8017098:	eee5 5a07 	vfma.f32	s11, s10, s14
 801709c:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 801718c <__kernel_tanf+0x1b4>
 80170a0:	eea5 5a87 	vfma.f32	s10, s11, s14
 80170a4:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8017190 <__kernel_tanf+0x1b8>
 80170a8:	eee5 5a07 	vfma.f32	s11, s10, s14
 80170ac:	eeb0 7a65 	vmov.f32	s14, s11
 80170b0:	eea7 6a26 	vfma.f32	s12, s14, s13
 80170b4:	ee67 5aa6 	vmul.f32	s11, s15, s13
 80170b8:	eeb0 7a46 	vmov.f32	s14, s12
 80170bc:	eeb0 6a60 	vmov.f32	s12, s1
 80170c0:	eea7 6a25 	vfma.f32	s12, s14, s11
 80170c4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8017194 <__kernel_tanf+0x1bc>
 80170c8:	eee6 0a26 	vfma.f32	s1, s12, s13
 80170cc:	eee5 0a87 	vfma.f32	s1, s11, s14
 80170d0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80170d4:	db1d      	blt.n	8017112 <__kernel_tanf+0x13a>
 80170d6:	ee06 0a90 	vmov	s13, r0
 80170da:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 80170de:	ee27 6a07 	vmul.f32	s12, s14, s14
 80170e2:	ee37 7a00 	vadd.f32	s14, s14, s0
 80170e6:	179b      	asrs	r3, r3, #30
 80170e8:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80170ec:	f003 0302 	and.w	r3, r3, #2
 80170f0:	f1c3 0301 	rsb	r3, r3, #1
 80170f4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80170f8:	ee76 0ae0 	vsub.f32	s1, s13, s1
 80170fc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8017100:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8017104:	ee07 3a90 	vmov	s15, r3
 8017108:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801710c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8017110:	e77a      	b.n	8017008 <__kernel_tanf+0x30>
 8017112:	2801      	cmp	r0, #1
 8017114:	d01b      	beq.n	801714e <__kernel_tanf+0x176>
 8017116:	4b20      	ldr	r3, [pc, #128]	; (8017198 <__kernel_tanf+0x1c0>)
 8017118:	ee17 2a10 	vmov	r2, s14
 801711c:	401a      	ands	r2, r3
 801711e:	ee06 2a10 	vmov	s12, r2
 8017122:	ee76 7a67 	vsub.f32	s15, s12, s15
 8017126:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801712a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801712e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8017132:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017136:	ee16 2a90 	vmov	r2, s13
 801713a:	4013      	ands	r3, r2
 801713c:	ee07 3a90 	vmov	s15, r3
 8017140:	eea6 7a27 	vfma.f32	s14, s12, s15
 8017144:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8017148:	eee7 7a26 	vfma.f32	s15, s14, s13
 801714c:	e75c      	b.n	8017008 <__kernel_tanf+0x30>
 801714e:	eef0 7a47 	vmov.f32	s15, s14
 8017152:	e759      	b.n	8017008 <__kernel_tanf+0x30>
 8017154:	3f2ca140 	.word	0x3f2ca140
 8017158:	3f490fda 	.word	0x3f490fda
 801715c:	33222168 	.word	0x33222168
 8017160:	00000000 	.word	0x00000000
 8017164:	b79bae5f 	.word	0xb79bae5f
 8017168:	38a3f445 	.word	0x38a3f445
 801716c:	37d95384 	.word	0x37d95384
 8017170:	3a1a26c8 	.word	0x3a1a26c8
 8017174:	3b6b6916 	.word	0x3b6b6916
 8017178:	3cb327a4 	.word	0x3cb327a4
 801717c:	3e088889 	.word	0x3e088889
 8017180:	3895c07a 	.word	0x3895c07a
 8017184:	398137b9 	.word	0x398137b9
 8017188:	3abede48 	.word	0x3abede48
 801718c:	3c11371f 	.word	0x3c11371f
 8017190:	3d5d0dd1 	.word	0x3d5d0dd1
 8017194:	3eaaaaab 	.word	0x3eaaaaab
 8017198:	fffff000 	.word	0xfffff000
 801719c:	00000000 	.word	0x00000000

080171a0 <atan>:
 80171a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171a4:	ec55 4b10 	vmov	r4, r5, d0
 80171a8:	4bc3      	ldr	r3, [pc, #780]	; (80174b8 <atan+0x318>)
 80171aa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80171ae:	429e      	cmp	r6, r3
 80171b0:	46ab      	mov	fp, r5
 80171b2:	dd18      	ble.n	80171e6 <atan+0x46>
 80171b4:	4bc1      	ldr	r3, [pc, #772]	; (80174bc <atan+0x31c>)
 80171b6:	429e      	cmp	r6, r3
 80171b8:	dc01      	bgt.n	80171be <atan+0x1e>
 80171ba:	d109      	bne.n	80171d0 <atan+0x30>
 80171bc:	b144      	cbz	r4, 80171d0 <atan+0x30>
 80171be:	4622      	mov	r2, r4
 80171c0:	462b      	mov	r3, r5
 80171c2:	4620      	mov	r0, r4
 80171c4:	4629      	mov	r1, r5
 80171c6:	f7e9 f861 	bl	800028c <__adddf3>
 80171ca:	4604      	mov	r4, r0
 80171cc:	460d      	mov	r5, r1
 80171ce:	e006      	b.n	80171de <atan+0x3e>
 80171d0:	f1bb 0f00 	cmp.w	fp, #0
 80171d4:	f300 8131 	bgt.w	801743a <atan+0x29a>
 80171d8:	a59b      	add	r5, pc, #620	; (adr r5, 8017448 <atan+0x2a8>)
 80171da:	e9d5 4500 	ldrd	r4, r5, [r5]
 80171de:	ec45 4b10 	vmov	d0, r4, r5
 80171e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171e6:	4bb6      	ldr	r3, [pc, #728]	; (80174c0 <atan+0x320>)
 80171e8:	429e      	cmp	r6, r3
 80171ea:	dc14      	bgt.n	8017216 <atan+0x76>
 80171ec:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80171f0:	429e      	cmp	r6, r3
 80171f2:	dc0d      	bgt.n	8017210 <atan+0x70>
 80171f4:	a396      	add	r3, pc, #600	; (adr r3, 8017450 <atan+0x2b0>)
 80171f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171fa:	ee10 0a10 	vmov	r0, s0
 80171fe:	4629      	mov	r1, r5
 8017200:	f7e9 f844 	bl	800028c <__adddf3>
 8017204:	4baf      	ldr	r3, [pc, #700]	; (80174c4 <atan+0x324>)
 8017206:	2200      	movs	r2, #0
 8017208:	f7e9 fc86 	bl	8000b18 <__aeabi_dcmpgt>
 801720c:	2800      	cmp	r0, #0
 801720e:	d1e6      	bne.n	80171de <atan+0x3e>
 8017210:	f04f 3aff 	mov.w	sl, #4294967295
 8017214:	e02b      	b.n	801726e <atan+0xce>
 8017216:	f000 f963 	bl	80174e0 <fabs>
 801721a:	4bab      	ldr	r3, [pc, #684]	; (80174c8 <atan+0x328>)
 801721c:	429e      	cmp	r6, r3
 801721e:	ec55 4b10 	vmov	r4, r5, d0
 8017222:	f300 80bf 	bgt.w	80173a4 <atan+0x204>
 8017226:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801722a:	429e      	cmp	r6, r3
 801722c:	f300 80a0 	bgt.w	8017370 <atan+0x1d0>
 8017230:	ee10 2a10 	vmov	r2, s0
 8017234:	ee10 0a10 	vmov	r0, s0
 8017238:	462b      	mov	r3, r5
 801723a:	4629      	mov	r1, r5
 801723c:	f7e9 f826 	bl	800028c <__adddf3>
 8017240:	4ba0      	ldr	r3, [pc, #640]	; (80174c4 <atan+0x324>)
 8017242:	2200      	movs	r2, #0
 8017244:	f7e9 f820 	bl	8000288 <__aeabi_dsub>
 8017248:	2200      	movs	r2, #0
 801724a:	4606      	mov	r6, r0
 801724c:	460f      	mov	r7, r1
 801724e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017252:	4620      	mov	r0, r4
 8017254:	4629      	mov	r1, r5
 8017256:	f7e9 f819 	bl	800028c <__adddf3>
 801725a:	4602      	mov	r2, r0
 801725c:	460b      	mov	r3, r1
 801725e:	4630      	mov	r0, r6
 8017260:	4639      	mov	r1, r7
 8017262:	f7e9 faf3 	bl	800084c <__aeabi_ddiv>
 8017266:	f04f 0a00 	mov.w	sl, #0
 801726a:	4604      	mov	r4, r0
 801726c:	460d      	mov	r5, r1
 801726e:	4622      	mov	r2, r4
 8017270:	462b      	mov	r3, r5
 8017272:	4620      	mov	r0, r4
 8017274:	4629      	mov	r1, r5
 8017276:	f7e9 f9bf 	bl	80005f8 <__aeabi_dmul>
 801727a:	4602      	mov	r2, r0
 801727c:	460b      	mov	r3, r1
 801727e:	4680      	mov	r8, r0
 8017280:	4689      	mov	r9, r1
 8017282:	f7e9 f9b9 	bl	80005f8 <__aeabi_dmul>
 8017286:	a374      	add	r3, pc, #464	; (adr r3, 8017458 <atan+0x2b8>)
 8017288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801728c:	4606      	mov	r6, r0
 801728e:	460f      	mov	r7, r1
 8017290:	f7e9 f9b2 	bl	80005f8 <__aeabi_dmul>
 8017294:	a372      	add	r3, pc, #456	; (adr r3, 8017460 <atan+0x2c0>)
 8017296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801729a:	f7e8 fff7 	bl	800028c <__adddf3>
 801729e:	4632      	mov	r2, r6
 80172a0:	463b      	mov	r3, r7
 80172a2:	f7e9 f9a9 	bl	80005f8 <__aeabi_dmul>
 80172a6:	a370      	add	r3, pc, #448	; (adr r3, 8017468 <atan+0x2c8>)
 80172a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172ac:	f7e8 ffee 	bl	800028c <__adddf3>
 80172b0:	4632      	mov	r2, r6
 80172b2:	463b      	mov	r3, r7
 80172b4:	f7e9 f9a0 	bl	80005f8 <__aeabi_dmul>
 80172b8:	a36d      	add	r3, pc, #436	; (adr r3, 8017470 <atan+0x2d0>)
 80172ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172be:	f7e8 ffe5 	bl	800028c <__adddf3>
 80172c2:	4632      	mov	r2, r6
 80172c4:	463b      	mov	r3, r7
 80172c6:	f7e9 f997 	bl	80005f8 <__aeabi_dmul>
 80172ca:	a36b      	add	r3, pc, #428	; (adr r3, 8017478 <atan+0x2d8>)
 80172cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172d0:	f7e8 ffdc 	bl	800028c <__adddf3>
 80172d4:	4632      	mov	r2, r6
 80172d6:	463b      	mov	r3, r7
 80172d8:	f7e9 f98e 	bl	80005f8 <__aeabi_dmul>
 80172dc:	a368      	add	r3, pc, #416	; (adr r3, 8017480 <atan+0x2e0>)
 80172de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172e2:	f7e8 ffd3 	bl	800028c <__adddf3>
 80172e6:	4642      	mov	r2, r8
 80172e8:	464b      	mov	r3, r9
 80172ea:	f7e9 f985 	bl	80005f8 <__aeabi_dmul>
 80172ee:	a366      	add	r3, pc, #408	; (adr r3, 8017488 <atan+0x2e8>)
 80172f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172f4:	4680      	mov	r8, r0
 80172f6:	4689      	mov	r9, r1
 80172f8:	4630      	mov	r0, r6
 80172fa:	4639      	mov	r1, r7
 80172fc:	f7e9 f97c 	bl	80005f8 <__aeabi_dmul>
 8017300:	a363      	add	r3, pc, #396	; (adr r3, 8017490 <atan+0x2f0>)
 8017302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017306:	f7e8 ffbf 	bl	8000288 <__aeabi_dsub>
 801730a:	4632      	mov	r2, r6
 801730c:	463b      	mov	r3, r7
 801730e:	f7e9 f973 	bl	80005f8 <__aeabi_dmul>
 8017312:	a361      	add	r3, pc, #388	; (adr r3, 8017498 <atan+0x2f8>)
 8017314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017318:	f7e8 ffb6 	bl	8000288 <__aeabi_dsub>
 801731c:	4632      	mov	r2, r6
 801731e:	463b      	mov	r3, r7
 8017320:	f7e9 f96a 	bl	80005f8 <__aeabi_dmul>
 8017324:	a35e      	add	r3, pc, #376	; (adr r3, 80174a0 <atan+0x300>)
 8017326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801732a:	f7e8 ffad 	bl	8000288 <__aeabi_dsub>
 801732e:	4632      	mov	r2, r6
 8017330:	463b      	mov	r3, r7
 8017332:	f7e9 f961 	bl	80005f8 <__aeabi_dmul>
 8017336:	a35c      	add	r3, pc, #368	; (adr r3, 80174a8 <atan+0x308>)
 8017338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801733c:	f7e8 ffa4 	bl	8000288 <__aeabi_dsub>
 8017340:	4632      	mov	r2, r6
 8017342:	463b      	mov	r3, r7
 8017344:	f7e9 f958 	bl	80005f8 <__aeabi_dmul>
 8017348:	4602      	mov	r2, r0
 801734a:	460b      	mov	r3, r1
 801734c:	4640      	mov	r0, r8
 801734e:	4649      	mov	r1, r9
 8017350:	f7e8 ff9c 	bl	800028c <__adddf3>
 8017354:	4622      	mov	r2, r4
 8017356:	462b      	mov	r3, r5
 8017358:	f7e9 f94e 	bl	80005f8 <__aeabi_dmul>
 801735c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8017360:	4602      	mov	r2, r0
 8017362:	460b      	mov	r3, r1
 8017364:	d14b      	bne.n	80173fe <atan+0x25e>
 8017366:	4620      	mov	r0, r4
 8017368:	4629      	mov	r1, r5
 801736a:	f7e8 ff8d 	bl	8000288 <__aeabi_dsub>
 801736e:	e72c      	b.n	80171ca <atan+0x2a>
 8017370:	ee10 0a10 	vmov	r0, s0
 8017374:	4b53      	ldr	r3, [pc, #332]	; (80174c4 <atan+0x324>)
 8017376:	2200      	movs	r2, #0
 8017378:	4629      	mov	r1, r5
 801737a:	f7e8 ff85 	bl	8000288 <__aeabi_dsub>
 801737e:	4b51      	ldr	r3, [pc, #324]	; (80174c4 <atan+0x324>)
 8017380:	4606      	mov	r6, r0
 8017382:	460f      	mov	r7, r1
 8017384:	2200      	movs	r2, #0
 8017386:	4620      	mov	r0, r4
 8017388:	4629      	mov	r1, r5
 801738a:	f7e8 ff7f 	bl	800028c <__adddf3>
 801738e:	4602      	mov	r2, r0
 8017390:	460b      	mov	r3, r1
 8017392:	4630      	mov	r0, r6
 8017394:	4639      	mov	r1, r7
 8017396:	f7e9 fa59 	bl	800084c <__aeabi_ddiv>
 801739a:	f04f 0a01 	mov.w	sl, #1
 801739e:	4604      	mov	r4, r0
 80173a0:	460d      	mov	r5, r1
 80173a2:	e764      	b.n	801726e <atan+0xce>
 80173a4:	4b49      	ldr	r3, [pc, #292]	; (80174cc <atan+0x32c>)
 80173a6:	429e      	cmp	r6, r3
 80173a8:	da1d      	bge.n	80173e6 <atan+0x246>
 80173aa:	ee10 0a10 	vmov	r0, s0
 80173ae:	4b48      	ldr	r3, [pc, #288]	; (80174d0 <atan+0x330>)
 80173b0:	2200      	movs	r2, #0
 80173b2:	4629      	mov	r1, r5
 80173b4:	f7e8 ff68 	bl	8000288 <__aeabi_dsub>
 80173b8:	4b45      	ldr	r3, [pc, #276]	; (80174d0 <atan+0x330>)
 80173ba:	4606      	mov	r6, r0
 80173bc:	460f      	mov	r7, r1
 80173be:	2200      	movs	r2, #0
 80173c0:	4620      	mov	r0, r4
 80173c2:	4629      	mov	r1, r5
 80173c4:	f7e9 f918 	bl	80005f8 <__aeabi_dmul>
 80173c8:	4b3e      	ldr	r3, [pc, #248]	; (80174c4 <atan+0x324>)
 80173ca:	2200      	movs	r2, #0
 80173cc:	f7e8 ff5e 	bl	800028c <__adddf3>
 80173d0:	4602      	mov	r2, r0
 80173d2:	460b      	mov	r3, r1
 80173d4:	4630      	mov	r0, r6
 80173d6:	4639      	mov	r1, r7
 80173d8:	f7e9 fa38 	bl	800084c <__aeabi_ddiv>
 80173dc:	f04f 0a02 	mov.w	sl, #2
 80173e0:	4604      	mov	r4, r0
 80173e2:	460d      	mov	r5, r1
 80173e4:	e743      	b.n	801726e <atan+0xce>
 80173e6:	462b      	mov	r3, r5
 80173e8:	ee10 2a10 	vmov	r2, s0
 80173ec:	4939      	ldr	r1, [pc, #228]	; (80174d4 <atan+0x334>)
 80173ee:	2000      	movs	r0, #0
 80173f0:	f7e9 fa2c 	bl	800084c <__aeabi_ddiv>
 80173f4:	f04f 0a03 	mov.w	sl, #3
 80173f8:	4604      	mov	r4, r0
 80173fa:	460d      	mov	r5, r1
 80173fc:	e737      	b.n	801726e <atan+0xce>
 80173fe:	4b36      	ldr	r3, [pc, #216]	; (80174d8 <atan+0x338>)
 8017400:	4e36      	ldr	r6, [pc, #216]	; (80174dc <atan+0x33c>)
 8017402:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8017406:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801740a:	e9da 2300 	ldrd	r2, r3, [sl]
 801740e:	f7e8 ff3b 	bl	8000288 <__aeabi_dsub>
 8017412:	4622      	mov	r2, r4
 8017414:	462b      	mov	r3, r5
 8017416:	f7e8 ff37 	bl	8000288 <__aeabi_dsub>
 801741a:	4602      	mov	r2, r0
 801741c:	460b      	mov	r3, r1
 801741e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8017422:	f7e8 ff31 	bl	8000288 <__aeabi_dsub>
 8017426:	f1bb 0f00 	cmp.w	fp, #0
 801742a:	4604      	mov	r4, r0
 801742c:	460d      	mov	r5, r1
 801742e:	f6bf aed6 	bge.w	80171de <atan+0x3e>
 8017432:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017436:	461d      	mov	r5, r3
 8017438:	e6d1      	b.n	80171de <atan+0x3e>
 801743a:	a51d      	add	r5, pc, #116	; (adr r5, 80174b0 <atan+0x310>)
 801743c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8017440:	e6cd      	b.n	80171de <atan+0x3e>
 8017442:	bf00      	nop
 8017444:	f3af 8000 	nop.w
 8017448:	54442d18 	.word	0x54442d18
 801744c:	bff921fb 	.word	0xbff921fb
 8017450:	8800759c 	.word	0x8800759c
 8017454:	7e37e43c 	.word	0x7e37e43c
 8017458:	e322da11 	.word	0xe322da11
 801745c:	3f90ad3a 	.word	0x3f90ad3a
 8017460:	24760deb 	.word	0x24760deb
 8017464:	3fa97b4b 	.word	0x3fa97b4b
 8017468:	a0d03d51 	.word	0xa0d03d51
 801746c:	3fb10d66 	.word	0x3fb10d66
 8017470:	c54c206e 	.word	0xc54c206e
 8017474:	3fb745cd 	.word	0x3fb745cd
 8017478:	920083ff 	.word	0x920083ff
 801747c:	3fc24924 	.word	0x3fc24924
 8017480:	5555550d 	.word	0x5555550d
 8017484:	3fd55555 	.word	0x3fd55555
 8017488:	2c6a6c2f 	.word	0x2c6a6c2f
 801748c:	bfa2b444 	.word	0xbfa2b444
 8017490:	52defd9a 	.word	0x52defd9a
 8017494:	3fadde2d 	.word	0x3fadde2d
 8017498:	af749a6d 	.word	0xaf749a6d
 801749c:	3fb3b0f2 	.word	0x3fb3b0f2
 80174a0:	fe231671 	.word	0xfe231671
 80174a4:	3fbc71c6 	.word	0x3fbc71c6
 80174a8:	9998ebc4 	.word	0x9998ebc4
 80174ac:	3fc99999 	.word	0x3fc99999
 80174b0:	54442d18 	.word	0x54442d18
 80174b4:	3ff921fb 	.word	0x3ff921fb
 80174b8:	440fffff 	.word	0x440fffff
 80174bc:	7ff00000 	.word	0x7ff00000
 80174c0:	3fdbffff 	.word	0x3fdbffff
 80174c4:	3ff00000 	.word	0x3ff00000
 80174c8:	3ff2ffff 	.word	0x3ff2ffff
 80174cc:	40038000 	.word	0x40038000
 80174d0:	3ff80000 	.word	0x3ff80000
 80174d4:	bff00000 	.word	0xbff00000
 80174d8:	0801adf8 	.word	0x0801adf8
 80174dc:	0801add8 	.word	0x0801add8

080174e0 <fabs>:
 80174e0:	ec51 0b10 	vmov	r0, r1, d0
 80174e4:	ee10 2a10 	vmov	r2, s0
 80174e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80174ec:	ec43 2b10 	vmov	d0, r2, r3
 80174f0:	4770      	bx	lr
	...

080174f4 <atanf>:
 80174f4:	b538      	push	{r3, r4, r5, lr}
 80174f6:	ee10 5a10 	vmov	r5, s0
 80174fa:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80174fe:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8017502:	eef0 7a40 	vmov.f32	s15, s0
 8017506:	db10      	blt.n	801752a <atanf+0x36>
 8017508:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801750c:	dd04      	ble.n	8017518 <atanf+0x24>
 801750e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8017512:	eeb0 0a67 	vmov.f32	s0, s15
 8017516:	bd38      	pop	{r3, r4, r5, pc}
 8017518:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8017650 <atanf+0x15c>
 801751c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8017654 <atanf+0x160>
 8017520:	2d00      	cmp	r5, #0
 8017522:	bfd8      	it	le
 8017524:	eef0 7a40 	vmovle.f32	s15, s0
 8017528:	e7f3      	b.n	8017512 <atanf+0x1e>
 801752a:	4b4b      	ldr	r3, [pc, #300]	; (8017658 <atanf+0x164>)
 801752c:	429c      	cmp	r4, r3
 801752e:	dc10      	bgt.n	8017552 <atanf+0x5e>
 8017530:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8017534:	da0a      	bge.n	801754c <atanf+0x58>
 8017536:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801765c <atanf+0x168>
 801753a:	ee30 7a07 	vadd.f32	s14, s0, s14
 801753e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017542:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8017546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801754a:	dce2      	bgt.n	8017512 <atanf+0x1e>
 801754c:	f04f 33ff 	mov.w	r3, #4294967295
 8017550:	e013      	b.n	801757a <atanf+0x86>
 8017552:	f000 f8a3 	bl	801769c <fabsf>
 8017556:	4b42      	ldr	r3, [pc, #264]	; (8017660 <atanf+0x16c>)
 8017558:	429c      	cmp	r4, r3
 801755a:	dc4f      	bgt.n	80175fc <atanf+0x108>
 801755c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8017560:	429c      	cmp	r4, r3
 8017562:	dc41      	bgt.n	80175e8 <atanf+0xf4>
 8017564:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8017568:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801756c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8017570:	2300      	movs	r3, #0
 8017572:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017576:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801757a:	1c5a      	adds	r2, r3, #1
 801757c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8017580:	eddf 5a38 	vldr	s11, [pc, #224]	; 8017664 <atanf+0x170>
 8017584:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8017668 <atanf+0x174>
 8017588:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801766c <atanf+0x178>
 801758c:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8017670 <atanf+0x17c>
 8017590:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8017594:	eea7 6a25 	vfma.f32	s12, s14, s11
 8017598:	eddf 5a36 	vldr	s11, [pc, #216]	; 8017674 <atanf+0x180>
 801759c:	eee6 5a07 	vfma.f32	s11, s12, s14
 80175a0:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8017678 <atanf+0x184>
 80175a4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80175a8:	eddf 5a34 	vldr	s11, [pc, #208]	; 801767c <atanf+0x188>
 80175ac:	eee6 5a07 	vfma.f32	s11, s12, s14
 80175b0:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8017680 <atanf+0x18c>
 80175b4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80175b8:	eddf 5a32 	vldr	s11, [pc, #200]	; 8017684 <atanf+0x190>
 80175bc:	eee7 5a05 	vfma.f32	s11, s14, s10
 80175c0:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8017688 <atanf+0x194>
 80175c4:	eea5 5a87 	vfma.f32	s10, s11, s14
 80175c8:	eddf 5a30 	vldr	s11, [pc, #192]	; 801768c <atanf+0x198>
 80175cc:	eee5 5a07 	vfma.f32	s11, s10, s14
 80175d0:	eea5 0a87 	vfma.f32	s0, s11, s14
 80175d4:	ee20 0a07 	vmul.f32	s0, s0, s14
 80175d8:	eea6 0a26 	vfma.f32	s0, s12, s13
 80175dc:	ee27 0a80 	vmul.f32	s0, s15, s0
 80175e0:	d121      	bne.n	8017626 <atanf+0x132>
 80175e2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80175e6:	e794      	b.n	8017512 <atanf+0x1e>
 80175e8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80175ec:	ee30 7a67 	vsub.f32	s14, s0, s15
 80175f0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80175f4:	2301      	movs	r3, #1
 80175f6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80175fa:	e7be      	b.n	801757a <atanf+0x86>
 80175fc:	4b24      	ldr	r3, [pc, #144]	; (8017690 <atanf+0x19c>)
 80175fe:	429c      	cmp	r4, r3
 8017600:	dc0b      	bgt.n	801761a <atanf+0x126>
 8017602:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8017606:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801760a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801760e:	2302      	movs	r3, #2
 8017610:	ee70 6a67 	vsub.f32	s13, s0, s15
 8017614:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017618:	e7af      	b.n	801757a <atanf+0x86>
 801761a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801761e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017622:	2303      	movs	r3, #3
 8017624:	e7a9      	b.n	801757a <atanf+0x86>
 8017626:	4a1b      	ldr	r2, [pc, #108]	; (8017694 <atanf+0x1a0>)
 8017628:	491b      	ldr	r1, [pc, #108]	; (8017698 <atanf+0x1a4>)
 801762a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801762e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8017632:	ed93 7a00 	vldr	s14, [r3]
 8017636:	ee30 0a47 	vsub.f32	s0, s0, s14
 801763a:	2d00      	cmp	r5, #0
 801763c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8017640:	ed92 0a00 	vldr	s0, [r2]
 8017644:	ee70 7a67 	vsub.f32	s15, s0, s15
 8017648:	bfb8      	it	lt
 801764a:	eef1 7a67 	vneglt.f32	s15, s15
 801764e:	e760      	b.n	8017512 <atanf+0x1e>
 8017650:	3fc90fdb 	.word	0x3fc90fdb
 8017654:	bfc90fdb 	.word	0xbfc90fdb
 8017658:	3edfffff 	.word	0x3edfffff
 801765c:	7149f2ca 	.word	0x7149f2ca
 8017660:	3f97ffff 	.word	0x3f97ffff
 8017664:	3c8569d7 	.word	0x3c8569d7
 8017668:	3d4bda59 	.word	0x3d4bda59
 801766c:	bd15a221 	.word	0xbd15a221
 8017670:	be4ccccd 	.word	0xbe4ccccd
 8017674:	3d886b35 	.word	0x3d886b35
 8017678:	3dba2e6e 	.word	0x3dba2e6e
 801767c:	3e124925 	.word	0x3e124925
 8017680:	3eaaaaab 	.word	0x3eaaaaab
 8017684:	bd6ef16b 	.word	0xbd6ef16b
 8017688:	bd9d8795 	.word	0xbd9d8795
 801768c:	bde38e38 	.word	0xbde38e38
 8017690:	401bffff 	.word	0x401bffff
 8017694:	0801ae18 	.word	0x0801ae18
 8017698:	0801ae28 	.word	0x0801ae28

0801769c <fabsf>:
 801769c:	ee10 3a10 	vmov	r3, s0
 80176a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80176a4:	ee00 3a10 	vmov	s0, r3
 80176a8:	4770      	bx	lr
	...

080176ac <floorf>:
 80176ac:	ee10 3a10 	vmov	r3, s0
 80176b0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80176b4:	3a7f      	subs	r2, #127	; 0x7f
 80176b6:	2a16      	cmp	r2, #22
 80176b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80176bc:	dc2a      	bgt.n	8017714 <floorf+0x68>
 80176be:	2a00      	cmp	r2, #0
 80176c0:	da11      	bge.n	80176e6 <floorf+0x3a>
 80176c2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8017724 <floorf+0x78>
 80176c6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80176ca:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80176ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176d2:	dd05      	ble.n	80176e0 <floorf+0x34>
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	da23      	bge.n	8017720 <floorf+0x74>
 80176d8:	4a13      	ldr	r2, [pc, #76]	; (8017728 <floorf+0x7c>)
 80176da:	2900      	cmp	r1, #0
 80176dc:	bf18      	it	ne
 80176de:	4613      	movne	r3, r2
 80176e0:	ee00 3a10 	vmov	s0, r3
 80176e4:	4770      	bx	lr
 80176e6:	4911      	ldr	r1, [pc, #68]	; (801772c <floorf+0x80>)
 80176e8:	4111      	asrs	r1, r2
 80176ea:	420b      	tst	r3, r1
 80176ec:	d0fa      	beq.n	80176e4 <floorf+0x38>
 80176ee:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8017724 <floorf+0x78>
 80176f2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80176f6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80176fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176fe:	ddef      	ble.n	80176e0 <floorf+0x34>
 8017700:	2b00      	cmp	r3, #0
 8017702:	bfbe      	ittt	lt
 8017704:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8017708:	fa40 f202 	asrlt.w	r2, r0, r2
 801770c:	189b      	addlt	r3, r3, r2
 801770e:	ea23 0301 	bic.w	r3, r3, r1
 8017712:	e7e5      	b.n	80176e0 <floorf+0x34>
 8017714:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8017718:	d3e4      	bcc.n	80176e4 <floorf+0x38>
 801771a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801771e:	4770      	bx	lr
 8017720:	2300      	movs	r3, #0
 8017722:	e7dd      	b.n	80176e0 <floorf+0x34>
 8017724:	7149f2ca 	.word	0x7149f2ca
 8017728:	bf800000 	.word	0xbf800000
 801772c:	007fffff 	.word	0x007fffff

08017730 <nanf>:
 8017730:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017738 <nanf+0x8>
 8017734:	4770      	bx	lr
 8017736:	bf00      	nop
 8017738:	7fc00000 	.word	0x7fc00000

0801773c <scalbnf>:
 801773c:	ee10 3a10 	vmov	r3, s0
 8017740:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8017744:	d025      	beq.n	8017792 <scalbnf+0x56>
 8017746:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801774a:	d302      	bcc.n	8017752 <scalbnf+0x16>
 801774c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017750:	4770      	bx	lr
 8017752:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8017756:	d122      	bne.n	801779e <scalbnf+0x62>
 8017758:	4b2a      	ldr	r3, [pc, #168]	; (8017804 <scalbnf+0xc8>)
 801775a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8017808 <scalbnf+0xcc>
 801775e:	4298      	cmp	r0, r3
 8017760:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017764:	db16      	blt.n	8017794 <scalbnf+0x58>
 8017766:	ee10 3a10 	vmov	r3, s0
 801776a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801776e:	3a19      	subs	r2, #25
 8017770:	4402      	add	r2, r0
 8017772:	2afe      	cmp	r2, #254	; 0xfe
 8017774:	dd15      	ble.n	80177a2 <scalbnf+0x66>
 8017776:	ee10 3a10 	vmov	r3, s0
 801777a:	eddf 7a24 	vldr	s15, [pc, #144]	; 801780c <scalbnf+0xd0>
 801777e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8017810 <scalbnf+0xd4>
 8017782:	2b00      	cmp	r3, #0
 8017784:	eeb0 7a67 	vmov.f32	s14, s15
 8017788:	bfb8      	it	lt
 801778a:	eef0 7a66 	vmovlt.f32	s15, s13
 801778e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8017792:	4770      	bx	lr
 8017794:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8017814 <scalbnf+0xd8>
 8017798:	ee20 0a27 	vmul.f32	s0, s0, s15
 801779c:	4770      	bx	lr
 801779e:	0dd2      	lsrs	r2, r2, #23
 80177a0:	e7e6      	b.n	8017770 <scalbnf+0x34>
 80177a2:	2a00      	cmp	r2, #0
 80177a4:	dd06      	ble.n	80177b4 <scalbnf+0x78>
 80177a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80177aa:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80177ae:	ee00 3a10 	vmov	s0, r3
 80177b2:	4770      	bx	lr
 80177b4:	f112 0f16 	cmn.w	r2, #22
 80177b8:	da1a      	bge.n	80177f0 <scalbnf+0xb4>
 80177ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 80177be:	4298      	cmp	r0, r3
 80177c0:	ee10 3a10 	vmov	r3, s0
 80177c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80177c8:	dd0a      	ble.n	80177e0 <scalbnf+0xa4>
 80177ca:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801780c <scalbnf+0xd0>
 80177ce:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8017810 <scalbnf+0xd4>
 80177d2:	eef0 7a40 	vmov.f32	s15, s0
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	bf18      	it	ne
 80177da:	eeb0 0a47 	vmovne.f32	s0, s14
 80177de:	e7db      	b.n	8017798 <scalbnf+0x5c>
 80177e0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8017814 <scalbnf+0xd8>
 80177e4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8017818 <scalbnf+0xdc>
 80177e8:	eef0 7a40 	vmov.f32	s15, s0
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	e7f3      	b.n	80177d8 <scalbnf+0x9c>
 80177f0:	3219      	adds	r2, #25
 80177f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80177f6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80177fa:	eddf 7a08 	vldr	s15, [pc, #32]	; 801781c <scalbnf+0xe0>
 80177fe:	ee07 3a10 	vmov	s14, r3
 8017802:	e7c4      	b.n	801778e <scalbnf+0x52>
 8017804:	ffff3cb0 	.word	0xffff3cb0
 8017808:	4c000000 	.word	0x4c000000
 801780c:	7149f2ca 	.word	0x7149f2ca
 8017810:	f149f2ca 	.word	0xf149f2ca
 8017814:	0da24260 	.word	0x0da24260
 8017818:	8da24260 	.word	0x8da24260
 801781c:	33000000 	.word	0x33000000

08017820 <abort>:
 8017820:	b508      	push	{r3, lr}
 8017822:	2006      	movs	r0, #6
 8017824:	f000 fdd2 	bl	80183cc <raise>
 8017828:	2001      	movs	r0, #1
 801782a:	f7eb f8c3 	bl	80029b4 <_exit>
	...

08017830 <__errno>:
 8017830:	4b01      	ldr	r3, [pc, #4]	; (8017838 <__errno+0x8>)
 8017832:	6818      	ldr	r0, [r3, #0]
 8017834:	4770      	bx	lr
 8017836:	bf00      	nop
 8017838:	200000f0 	.word	0x200000f0

0801783c <__libc_init_array>:
 801783c:	b570      	push	{r4, r5, r6, lr}
 801783e:	4d0d      	ldr	r5, [pc, #52]	; (8017874 <__libc_init_array+0x38>)
 8017840:	4c0d      	ldr	r4, [pc, #52]	; (8017878 <__libc_init_array+0x3c>)
 8017842:	1b64      	subs	r4, r4, r5
 8017844:	10a4      	asrs	r4, r4, #2
 8017846:	2600      	movs	r6, #0
 8017848:	42a6      	cmp	r6, r4
 801784a:	d109      	bne.n	8017860 <__libc_init_array+0x24>
 801784c:	4d0b      	ldr	r5, [pc, #44]	; (801787c <__libc_init_array+0x40>)
 801784e:	4c0c      	ldr	r4, [pc, #48]	; (8017880 <__libc_init_array+0x44>)
 8017850:	f002 ff02 	bl	801a658 <_init>
 8017854:	1b64      	subs	r4, r4, r5
 8017856:	10a4      	asrs	r4, r4, #2
 8017858:	2600      	movs	r6, #0
 801785a:	42a6      	cmp	r6, r4
 801785c:	d105      	bne.n	801786a <__libc_init_array+0x2e>
 801785e:	bd70      	pop	{r4, r5, r6, pc}
 8017860:	f855 3b04 	ldr.w	r3, [r5], #4
 8017864:	4798      	blx	r3
 8017866:	3601      	adds	r6, #1
 8017868:	e7ee      	b.n	8017848 <__libc_init_array+0xc>
 801786a:	f855 3b04 	ldr.w	r3, [r5], #4
 801786e:	4798      	blx	r3
 8017870:	3601      	adds	r6, #1
 8017872:	e7f2      	b.n	801785a <__libc_init_array+0x1e>
 8017874:	0801b224 	.word	0x0801b224
 8017878:	0801b224 	.word	0x0801b224
 801787c:	0801b224 	.word	0x0801b224
 8017880:	0801b228 	.word	0x0801b228

08017884 <malloc>:
 8017884:	4b02      	ldr	r3, [pc, #8]	; (8017890 <malloc+0xc>)
 8017886:	4601      	mov	r1, r0
 8017888:	6818      	ldr	r0, [r3, #0]
 801788a:	f000 b88b 	b.w	80179a4 <_malloc_r>
 801788e:	bf00      	nop
 8017890:	200000f0 	.word	0x200000f0

08017894 <free>:
 8017894:	4b02      	ldr	r3, [pc, #8]	; (80178a0 <free+0xc>)
 8017896:	4601      	mov	r1, r0
 8017898:	6818      	ldr	r0, [r3, #0]
 801789a:	f000 b833 	b.w	8017904 <_free_r>
 801789e:	bf00      	nop
 80178a0:	200000f0 	.word	0x200000f0

080178a4 <memcpy>:
 80178a4:	440a      	add	r2, r1
 80178a6:	4291      	cmp	r1, r2
 80178a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80178ac:	d100      	bne.n	80178b0 <memcpy+0xc>
 80178ae:	4770      	bx	lr
 80178b0:	b510      	push	{r4, lr}
 80178b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80178b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80178ba:	4291      	cmp	r1, r2
 80178bc:	d1f9      	bne.n	80178b2 <memcpy+0xe>
 80178be:	bd10      	pop	{r4, pc}

080178c0 <memmove>:
 80178c0:	4288      	cmp	r0, r1
 80178c2:	b510      	push	{r4, lr}
 80178c4:	eb01 0402 	add.w	r4, r1, r2
 80178c8:	d902      	bls.n	80178d0 <memmove+0x10>
 80178ca:	4284      	cmp	r4, r0
 80178cc:	4623      	mov	r3, r4
 80178ce:	d807      	bhi.n	80178e0 <memmove+0x20>
 80178d0:	1e43      	subs	r3, r0, #1
 80178d2:	42a1      	cmp	r1, r4
 80178d4:	d008      	beq.n	80178e8 <memmove+0x28>
 80178d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80178da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80178de:	e7f8      	b.n	80178d2 <memmove+0x12>
 80178e0:	4402      	add	r2, r0
 80178e2:	4601      	mov	r1, r0
 80178e4:	428a      	cmp	r2, r1
 80178e6:	d100      	bne.n	80178ea <memmove+0x2a>
 80178e8:	bd10      	pop	{r4, pc}
 80178ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80178ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80178f2:	e7f7      	b.n	80178e4 <memmove+0x24>

080178f4 <memset>:
 80178f4:	4402      	add	r2, r0
 80178f6:	4603      	mov	r3, r0
 80178f8:	4293      	cmp	r3, r2
 80178fa:	d100      	bne.n	80178fe <memset+0xa>
 80178fc:	4770      	bx	lr
 80178fe:	f803 1b01 	strb.w	r1, [r3], #1
 8017902:	e7f9      	b.n	80178f8 <memset+0x4>

08017904 <_free_r>:
 8017904:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017906:	2900      	cmp	r1, #0
 8017908:	d048      	beq.n	801799c <_free_r+0x98>
 801790a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801790e:	9001      	str	r0, [sp, #4]
 8017910:	2b00      	cmp	r3, #0
 8017912:	f1a1 0404 	sub.w	r4, r1, #4
 8017916:	bfb8      	it	lt
 8017918:	18e4      	addlt	r4, r4, r3
 801791a:	f001 fd3f 	bl	801939c <__malloc_lock>
 801791e:	4a20      	ldr	r2, [pc, #128]	; (80179a0 <_free_r+0x9c>)
 8017920:	9801      	ldr	r0, [sp, #4]
 8017922:	6813      	ldr	r3, [r2, #0]
 8017924:	4615      	mov	r5, r2
 8017926:	b933      	cbnz	r3, 8017936 <_free_r+0x32>
 8017928:	6063      	str	r3, [r4, #4]
 801792a:	6014      	str	r4, [r2, #0]
 801792c:	b003      	add	sp, #12
 801792e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017932:	f001 bd39 	b.w	80193a8 <__malloc_unlock>
 8017936:	42a3      	cmp	r3, r4
 8017938:	d90b      	bls.n	8017952 <_free_r+0x4e>
 801793a:	6821      	ldr	r1, [r4, #0]
 801793c:	1862      	adds	r2, r4, r1
 801793e:	4293      	cmp	r3, r2
 8017940:	bf04      	itt	eq
 8017942:	681a      	ldreq	r2, [r3, #0]
 8017944:	685b      	ldreq	r3, [r3, #4]
 8017946:	6063      	str	r3, [r4, #4]
 8017948:	bf04      	itt	eq
 801794a:	1852      	addeq	r2, r2, r1
 801794c:	6022      	streq	r2, [r4, #0]
 801794e:	602c      	str	r4, [r5, #0]
 8017950:	e7ec      	b.n	801792c <_free_r+0x28>
 8017952:	461a      	mov	r2, r3
 8017954:	685b      	ldr	r3, [r3, #4]
 8017956:	b10b      	cbz	r3, 801795c <_free_r+0x58>
 8017958:	42a3      	cmp	r3, r4
 801795a:	d9fa      	bls.n	8017952 <_free_r+0x4e>
 801795c:	6811      	ldr	r1, [r2, #0]
 801795e:	1855      	adds	r5, r2, r1
 8017960:	42a5      	cmp	r5, r4
 8017962:	d10b      	bne.n	801797c <_free_r+0x78>
 8017964:	6824      	ldr	r4, [r4, #0]
 8017966:	4421      	add	r1, r4
 8017968:	1854      	adds	r4, r2, r1
 801796a:	42a3      	cmp	r3, r4
 801796c:	6011      	str	r1, [r2, #0]
 801796e:	d1dd      	bne.n	801792c <_free_r+0x28>
 8017970:	681c      	ldr	r4, [r3, #0]
 8017972:	685b      	ldr	r3, [r3, #4]
 8017974:	6053      	str	r3, [r2, #4]
 8017976:	4421      	add	r1, r4
 8017978:	6011      	str	r1, [r2, #0]
 801797a:	e7d7      	b.n	801792c <_free_r+0x28>
 801797c:	d902      	bls.n	8017984 <_free_r+0x80>
 801797e:	230c      	movs	r3, #12
 8017980:	6003      	str	r3, [r0, #0]
 8017982:	e7d3      	b.n	801792c <_free_r+0x28>
 8017984:	6825      	ldr	r5, [r4, #0]
 8017986:	1961      	adds	r1, r4, r5
 8017988:	428b      	cmp	r3, r1
 801798a:	bf04      	itt	eq
 801798c:	6819      	ldreq	r1, [r3, #0]
 801798e:	685b      	ldreq	r3, [r3, #4]
 8017990:	6063      	str	r3, [r4, #4]
 8017992:	bf04      	itt	eq
 8017994:	1949      	addeq	r1, r1, r5
 8017996:	6021      	streq	r1, [r4, #0]
 8017998:	6054      	str	r4, [r2, #4]
 801799a:	e7c7      	b.n	801792c <_free_r+0x28>
 801799c:	b003      	add	sp, #12
 801799e:	bd30      	pop	{r4, r5, pc}
 80179a0:	200011b8 	.word	0x200011b8

080179a4 <_malloc_r>:
 80179a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179a6:	1ccd      	adds	r5, r1, #3
 80179a8:	f025 0503 	bic.w	r5, r5, #3
 80179ac:	3508      	adds	r5, #8
 80179ae:	2d0c      	cmp	r5, #12
 80179b0:	bf38      	it	cc
 80179b2:	250c      	movcc	r5, #12
 80179b4:	2d00      	cmp	r5, #0
 80179b6:	4606      	mov	r6, r0
 80179b8:	db01      	blt.n	80179be <_malloc_r+0x1a>
 80179ba:	42a9      	cmp	r1, r5
 80179bc:	d903      	bls.n	80179c6 <_malloc_r+0x22>
 80179be:	230c      	movs	r3, #12
 80179c0:	6033      	str	r3, [r6, #0]
 80179c2:	2000      	movs	r0, #0
 80179c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80179c6:	f001 fce9 	bl	801939c <__malloc_lock>
 80179ca:	4921      	ldr	r1, [pc, #132]	; (8017a50 <_malloc_r+0xac>)
 80179cc:	680a      	ldr	r2, [r1, #0]
 80179ce:	4614      	mov	r4, r2
 80179d0:	b99c      	cbnz	r4, 80179fa <_malloc_r+0x56>
 80179d2:	4f20      	ldr	r7, [pc, #128]	; (8017a54 <_malloc_r+0xb0>)
 80179d4:	683b      	ldr	r3, [r7, #0]
 80179d6:	b923      	cbnz	r3, 80179e2 <_malloc_r+0x3e>
 80179d8:	4621      	mov	r1, r4
 80179da:	4630      	mov	r0, r6
 80179dc:	f000 fcbe 	bl	801835c <_sbrk_r>
 80179e0:	6038      	str	r0, [r7, #0]
 80179e2:	4629      	mov	r1, r5
 80179e4:	4630      	mov	r0, r6
 80179e6:	f000 fcb9 	bl	801835c <_sbrk_r>
 80179ea:	1c43      	adds	r3, r0, #1
 80179ec:	d123      	bne.n	8017a36 <_malloc_r+0x92>
 80179ee:	230c      	movs	r3, #12
 80179f0:	6033      	str	r3, [r6, #0]
 80179f2:	4630      	mov	r0, r6
 80179f4:	f001 fcd8 	bl	80193a8 <__malloc_unlock>
 80179f8:	e7e3      	b.n	80179c2 <_malloc_r+0x1e>
 80179fa:	6823      	ldr	r3, [r4, #0]
 80179fc:	1b5b      	subs	r3, r3, r5
 80179fe:	d417      	bmi.n	8017a30 <_malloc_r+0x8c>
 8017a00:	2b0b      	cmp	r3, #11
 8017a02:	d903      	bls.n	8017a0c <_malloc_r+0x68>
 8017a04:	6023      	str	r3, [r4, #0]
 8017a06:	441c      	add	r4, r3
 8017a08:	6025      	str	r5, [r4, #0]
 8017a0a:	e004      	b.n	8017a16 <_malloc_r+0x72>
 8017a0c:	6863      	ldr	r3, [r4, #4]
 8017a0e:	42a2      	cmp	r2, r4
 8017a10:	bf0c      	ite	eq
 8017a12:	600b      	streq	r3, [r1, #0]
 8017a14:	6053      	strne	r3, [r2, #4]
 8017a16:	4630      	mov	r0, r6
 8017a18:	f001 fcc6 	bl	80193a8 <__malloc_unlock>
 8017a1c:	f104 000b 	add.w	r0, r4, #11
 8017a20:	1d23      	adds	r3, r4, #4
 8017a22:	f020 0007 	bic.w	r0, r0, #7
 8017a26:	1ac2      	subs	r2, r0, r3
 8017a28:	d0cc      	beq.n	80179c4 <_malloc_r+0x20>
 8017a2a:	1a1b      	subs	r3, r3, r0
 8017a2c:	50a3      	str	r3, [r4, r2]
 8017a2e:	e7c9      	b.n	80179c4 <_malloc_r+0x20>
 8017a30:	4622      	mov	r2, r4
 8017a32:	6864      	ldr	r4, [r4, #4]
 8017a34:	e7cc      	b.n	80179d0 <_malloc_r+0x2c>
 8017a36:	1cc4      	adds	r4, r0, #3
 8017a38:	f024 0403 	bic.w	r4, r4, #3
 8017a3c:	42a0      	cmp	r0, r4
 8017a3e:	d0e3      	beq.n	8017a08 <_malloc_r+0x64>
 8017a40:	1a21      	subs	r1, r4, r0
 8017a42:	4630      	mov	r0, r6
 8017a44:	f000 fc8a 	bl	801835c <_sbrk_r>
 8017a48:	3001      	adds	r0, #1
 8017a4a:	d1dd      	bne.n	8017a08 <_malloc_r+0x64>
 8017a4c:	e7cf      	b.n	80179ee <_malloc_r+0x4a>
 8017a4e:	bf00      	nop
 8017a50:	200011b8 	.word	0x200011b8
 8017a54:	200011bc 	.word	0x200011bc

08017a58 <__cvt>:
 8017a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017a5c:	ec55 4b10 	vmov	r4, r5, d0
 8017a60:	2d00      	cmp	r5, #0
 8017a62:	460e      	mov	r6, r1
 8017a64:	4619      	mov	r1, r3
 8017a66:	462b      	mov	r3, r5
 8017a68:	bfbb      	ittet	lt
 8017a6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8017a6e:	461d      	movlt	r5, r3
 8017a70:	2300      	movge	r3, #0
 8017a72:	232d      	movlt	r3, #45	; 0x2d
 8017a74:	700b      	strb	r3, [r1, #0]
 8017a76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017a78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8017a7c:	4691      	mov	r9, r2
 8017a7e:	f023 0820 	bic.w	r8, r3, #32
 8017a82:	bfbc      	itt	lt
 8017a84:	4622      	movlt	r2, r4
 8017a86:	4614      	movlt	r4, r2
 8017a88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017a8c:	d005      	beq.n	8017a9a <__cvt+0x42>
 8017a8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8017a92:	d100      	bne.n	8017a96 <__cvt+0x3e>
 8017a94:	3601      	adds	r6, #1
 8017a96:	2102      	movs	r1, #2
 8017a98:	e000      	b.n	8017a9c <__cvt+0x44>
 8017a9a:	2103      	movs	r1, #3
 8017a9c:	ab03      	add	r3, sp, #12
 8017a9e:	9301      	str	r3, [sp, #4]
 8017aa0:	ab02      	add	r3, sp, #8
 8017aa2:	9300      	str	r3, [sp, #0]
 8017aa4:	ec45 4b10 	vmov	d0, r4, r5
 8017aa8:	4653      	mov	r3, sl
 8017aaa:	4632      	mov	r2, r6
 8017aac:	f000 fd8c 	bl	80185c8 <_dtoa_r>
 8017ab0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8017ab4:	4607      	mov	r7, r0
 8017ab6:	d102      	bne.n	8017abe <__cvt+0x66>
 8017ab8:	f019 0f01 	tst.w	r9, #1
 8017abc:	d022      	beq.n	8017b04 <__cvt+0xac>
 8017abe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017ac2:	eb07 0906 	add.w	r9, r7, r6
 8017ac6:	d110      	bne.n	8017aea <__cvt+0x92>
 8017ac8:	783b      	ldrb	r3, [r7, #0]
 8017aca:	2b30      	cmp	r3, #48	; 0x30
 8017acc:	d10a      	bne.n	8017ae4 <__cvt+0x8c>
 8017ace:	2200      	movs	r2, #0
 8017ad0:	2300      	movs	r3, #0
 8017ad2:	4620      	mov	r0, r4
 8017ad4:	4629      	mov	r1, r5
 8017ad6:	f7e8 fff7 	bl	8000ac8 <__aeabi_dcmpeq>
 8017ada:	b918      	cbnz	r0, 8017ae4 <__cvt+0x8c>
 8017adc:	f1c6 0601 	rsb	r6, r6, #1
 8017ae0:	f8ca 6000 	str.w	r6, [sl]
 8017ae4:	f8da 3000 	ldr.w	r3, [sl]
 8017ae8:	4499      	add	r9, r3
 8017aea:	2200      	movs	r2, #0
 8017aec:	2300      	movs	r3, #0
 8017aee:	4620      	mov	r0, r4
 8017af0:	4629      	mov	r1, r5
 8017af2:	f7e8 ffe9 	bl	8000ac8 <__aeabi_dcmpeq>
 8017af6:	b108      	cbz	r0, 8017afc <__cvt+0xa4>
 8017af8:	f8cd 900c 	str.w	r9, [sp, #12]
 8017afc:	2230      	movs	r2, #48	; 0x30
 8017afe:	9b03      	ldr	r3, [sp, #12]
 8017b00:	454b      	cmp	r3, r9
 8017b02:	d307      	bcc.n	8017b14 <__cvt+0xbc>
 8017b04:	9b03      	ldr	r3, [sp, #12]
 8017b06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017b08:	1bdb      	subs	r3, r3, r7
 8017b0a:	4638      	mov	r0, r7
 8017b0c:	6013      	str	r3, [r2, #0]
 8017b0e:	b004      	add	sp, #16
 8017b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b14:	1c59      	adds	r1, r3, #1
 8017b16:	9103      	str	r1, [sp, #12]
 8017b18:	701a      	strb	r2, [r3, #0]
 8017b1a:	e7f0      	b.n	8017afe <__cvt+0xa6>

08017b1c <__exponent>:
 8017b1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017b1e:	4603      	mov	r3, r0
 8017b20:	2900      	cmp	r1, #0
 8017b22:	bfb8      	it	lt
 8017b24:	4249      	neglt	r1, r1
 8017b26:	f803 2b02 	strb.w	r2, [r3], #2
 8017b2a:	bfb4      	ite	lt
 8017b2c:	222d      	movlt	r2, #45	; 0x2d
 8017b2e:	222b      	movge	r2, #43	; 0x2b
 8017b30:	2909      	cmp	r1, #9
 8017b32:	7042      	strb	r2, [r0, #1]
 8017b34:	dd2a      	ble.n	8017b8c <__exponent+0x70>
 8017b36:	f10d 0407 	add.w	r4, sp, #7
 8017b3a:	46a4      	mov	ip, r4
 8017b3c:	270a      	movs	r7, #10
 8017b3e:	46a6      	mov	lr, r4
 8017b40:	460a      	mov	r2, r1
 8017b42:	fb91 f6f7 	sdiv	r6, r1, r7
 8017b46:	fb07 1516 	mls	r5, r7, r6, r1
 8017b4a:	3530      	adds	r5, #48	; 0x30
 8017b4c:	2a63      	cmp	r2, #99	; 0x63
 8017b4e:	f104 34ff 	add.w	r4, r4, #4294967295
 8017b52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8017b56:	4631      	mov	r1, r6
 8017b58:	dcf1      	bgt.n	8017b3e <__exponent+0x22>
 8017b5a:	3130      	adds	r1, #48	; 0x30
 8017b5c:	f1ae 0502 	sub.w	r5, lr, #2
 8017b60:	f804 1c01 	strb.w	r1, [r4, #-1]
 8017b64:	1c44      	adds	r4, r0, #1
 8017b66:	4629      	mov	r1, r5
 8017b68:	4561      	cmp	r1, ip
 8017b6a:	d30a      	bcc.n	8017b82 <__exponent+0x66>
 8017b6c:	f10d 0209 	add.w	r2, sp, #9
 8017b70:	eba2 020e 	sub.w	r2, r2, lr
 8017b74:	4565      	cmp	r5, ip
 8017b76:	bf88      	it	hi
 8017b78:	2200      	movhi	r2, #0
 8017b7a:	4413      	add	r3, r2
 8017b7c:	1a18      	subs	r0, r3, r0
 8017b7e:	b003      	add	sp, #12
 8017b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017b86:	f804 2f01 	strb.w	r2, [r4, #1]!
 8017b8a:	e7ed      	b.n	8017b68 <__exponent+0x4c>
 8017b8c:	2330      	movs	r3, #48	; 0x30
 8017b8e:	3130      	adds	r1, #48	; 0x30
 8017b90:	7083      	strb	r3, [r0, #2]
 8017b92:	70c1      	strb	r1, [r0, #3]
 8017b94:	1d03      	adds	r3, r0, #4
 8017b96:	e7f1      	b.n	8017b7c <__exponent+0x60>

08017b98 <_printf_float>:
 8017b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b9c:	ed2d 8b02 	vpush	{d8}
 8017ba0:	b08d      	sub	sp, #52	; 0x34
 8017ba2:	460c      	mov	r4, r1
 8017ba4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8017ba8:	4616      	mov	r6, r2
 8017baa:	461f      	mov	r7, r3
 8017bac:	4605      	mov	r5, r0
 8017bae:	f001 fbed 	bl	801938c <_localeconv_r>
 8017bb2:	f8d0 a000 	ldr.w	sl, [r0]
 8017bb6:	4650      	mov	r0, sl
 8017bb8:	f7e8 fb5a 	bl	8000270 <strlen>
 8017bbc:	2300      	movs	r3, #0
 8017bbe:	930a      	str	r3, [sp, #40]	; 0x28
 8017bc0:	6823      	ldr	r3, [r4, #0]
 8017bc2:	9305      	str	r3, [sp, #20]
 8017bc4:	f8d8 3000 	ldr.w	r3, [r8]
 8017bc8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8017bcc:	3307      	adds	r3, #7
 8017bce:	f023 0307 	bic.w	r3, r3, #7
 8017bd2:	f103 0208 	add.w	r2, r3, #8
 8017bd6:	f8c8 2000 	str.w	r2, [r8]
 8017bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bde:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8017be2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8017be6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017bea:	9307      	str	r3, [sp, #28]
 8017bec:	f8cd 8018 	str.w	r8, [sp, #24]
 8017bf0:	ee08 0a10 	vmov	s16, r0
 8017bf4:	4b9f      	ldr	r3, [pc, #636]	; (8017e74 <_printf_float+0x2dc>)
 8017bf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8017bfe:	f7e8 ff95 	bl	8000b2c <__aeabi_dcmpun>
 8017c02:	bb88      	cbnz	r0, 8017c68 <_printf_float+0xd0>
 8017c04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017c08:	4b9a      	ldr	r3, [pc, #616]	; (8017e74 <_printf_float+0x2dc>)
 8017c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8017c0e:	f7e8 ff6f 	bl	8000af0 <__aeabi_dcmple>
 8017c12:	bb48      	cbnz	r0, 8017c68 <_printf_float+0xd0>
 8017c14:	2200      	movs	r2, #0
 8017c16:	2300      	movs	r3, #0
 8017c18:	4640      	mov	r0, r8
 8017c1a:	4649      	mov	r1, r9
 8017c1c:	f7e8 ff5e 	bl	8000adc <__aeabi_dcmplt>
 8017c20:	b110      	cbz	r0, 8017c28 <_printf_float+0x90>
 8017c22:	232d      	movs	r3, #45	; 0x2d
 8017c24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017c28:	4b93      	ldr	r3, [pc, #588]	; (8017e78 <_printf_float+0x2e0>)
 8017c2a:	4894      	ldr	r0, [pc, #592]	; (8017e7c <_printf_float+0x2e4>)
 8017c2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8017c30:	bf94      	ite	ls
 8017c32:	4698      	movls	r8, r3
 8017c34:	4680      	movhi	r8, r0
 8017c36:	2303      	movs	r3, #3
 8017c38:	6123      	str	r3, [r4, #16]
 8017c3a:	9b05      	ldr	r3, [sp, #20]
 8017c3c:	f023 0204 	bic.w	r2, r3, #4
 8017c40:	6022      	str	r2, [r4, #0]
 8017c42:	f04f 0900 	mov.w	r9, #0
 8017c46:	9700      	str	r7, [sp, #0]
 8017c48:	4633      	mov	r3, r6
 8017c4a:	aa0b      	add	r2, sp, #44	; 0x2c
 8017c4c:	4621      	mov	r1, r4
 8017c4e:	4628      	mov	r0, r5
 8017c50:	f000 f9d8 	bl	8018004 <_printf_common>
 8017c54:	3001      	adds	r0, #1
 8017c56:	f040 8090 	bne.w	8017d7a <_printf_float+0x1e2>
 8017c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8017c5e:	b00d      	add	sp, #52	; 0x34
 8017c60:	ecbd 8b02 	vpop	{d8}
 8017c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c68:	4642      	mov	r2, r8
 8017c6a:	464b      	mov	r3, r9
 8017c6c:	4640      	mov	r0, r8
 8017c6e:	4649      	mov	r1, r9
 8017c70:	f7e8 ff5c 	bl	8000b2c <__aeabi_dcmpun>
 8017c74:	b140      	cbz	r0, 8017c88 <_printf_float+0xf0>
 8017c76:	464b      	mov	r3, r9
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	bfbc      	itt	lt
 8017c7c:	232d      	movlt	r3, #45	; 0x2d
 8017c7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8017c82:	487f      	ldr	r0, [pc, #508]	; (8017e80 <_printf_float+0x2e8>)
 8017c84:	4b7f      	ldr	r3, [pc, #508]	; (8017e84 <_printf_float+0x2ec>)
 8017c86:	e7d1      	b.n	8017c2c <_printf_float+0x94>
 8017c88:	6863      	ldr	r3, [r4, #4]
 8017c8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8017c8e:	9206      	str	r2, [sp, #24]
 8017c90:	1c5a      	adds	r2, r3, #1
 8017c92:	d13f      	bne.n	8017d14 <_printf_float+0x17c>
 8017c94:	2306      	movs	r3, #6
 8017c96:	6063      	str	r3, [r4, #4]
 8017c98:	9b05      	ldr	r3, [sp, #20]
 8017c9a:	6861      	ldr	r1, [r4, #4]
 8017c9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8017ca0:	2300      	movs	r3, #0
 8017ca2:	9303      	str	r3, [sp, #12]
 8017ca4:	ab0a      	add	r3, sp, #40	; 0x28
 8017ca6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8017caa:	ab09      	add	r3, sp, #36	; 0x24
 8017cac:	ec49 8b10 	vmov	d0, r8, r9
 8017cb0:	9300      	str	r3, [sp, #0]
 8017cb2:	6022      	str	r2, [r4, #0]
 8017cb4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8017cb8:	4628      	mov	r0, r5
 8017cba:	f7ff fecd 	bl	8017a58 <__cvt>
 8017cbe:	9b06      	ldr	r3, [sp, #24]
 8017cc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017cc2:	2b47      	cmp	r3, #71	; 0x47
 8017cc4:	4680      	mov	r8, r0
 8017cc6:	d108      	bne.n	8017cda <_printf_float+0x142>
 8017cc8:	1cc8      	adds	r0, r1, #3
 8017cca:	db02      	blt.n	8017cd2 <_printf_float+0x13a>
 8017ccc:	6863      	ldr	r3, [r4, #4]
 8017cce:	4299      	cmp	r1, r3
 8017cd0:	dd41      	ble.n	8017d56 <_printf_float+0x1be>
 8017cd2:	f1ab 0b02 	sub.w	fp, fp, #2
 8017cd6:	fa5f fb8b 	uxtb.w	fp, fp
 8017cda:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017cde:	d820      	bhi.n	8017d22 <_printf_float+0x18a>
 8017ce0:	3901      	subs	r1, #1
 8017ce2:	465a      	mov	r2, fp
 8017ce4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017ce8:	9109      	str	r1, [sp, #36]	; 0x24
 8017cea:	f7ff ff17 	bl	8017b1c <__exponent>
 8017cee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017cf0:	1813      	adds	r3, r2, r0
 8017cf2:	2a01      	cmp	r2, #1
 8017cf4:	4681      	mov	r9, r0
 8017cf6:	6123      	str	r3, [r4, #16]
 8017cf8:	dc02      	bgt.n	8017d00 <_printf_float+0x168>
 8017cfa:	6822      	ldr	r2, [r4, #0]
 8017cfc:	07d2      	lsls	r2, r2, #31
 8017cfe:	d501      	bpl.n	8017d04 <_printf_float+0x16c>
 8017d00:	3301      	adds	r3, #1
 8017d02:	6123      	str	r3, [r4, #16]
 8017d04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d09c      	beq.n	8017c46 <_printf_float+0xae>
 8017d0c:	232d      	movs	r3, #45	; 0x2d
 8017d0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017d12:	e798      	b.n	8017c46 <_printf_float+0xae>
 8017d14:	9a06      	ldr	r2, [sp, #24]
 8017d16:	2a47      	cmp	r2, #71	; 0x47
 8017d18:	d1be      	bne.n	8017c98 <_printf_float+0x100>
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d1bc      	bne.n	8017c98 <_printf_float+0x100>
 8017d1e:	2301      	movs	r3, #1
 8017d20:	e7b9      	b.n	8017c96 <_printf_float+0xfe>
 8017d22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8017d26:	d118      	bne.n	8017d5a <_printf_float+0x1c2>
 8017d28:	2900      	cmp	r1, #0
 8017d2a:	6863      	ldr	r3, [r4, #4]
 8017d2c:	dd0b      	ble.n	8017d46 <_printf_float+0x1ae>
 8017d2e:	6121      	str	r1, [r4, #16]
 8017d30:	b913      	cbnz	r3, 8017d38 <_printf_float+0x1a0>
 8017d32:	6822      	ldr	r2, [r4, #0]
 8017d34:	07d0      	lsls	r0, r2, #31
 8017d36:	d502      	bpl.n	8017d3e <_printf_float+0x1a6>
 8017d38:	3301      	adds	r3, #1
 8017d3a:	440b      	add	r3, r1
 8017d3c:	6123      	str	r3, [r4, #16]
 8017d3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8017d40:	f04f 0900 	mov.w	r9, #0
 8017d44:	e7de      	b.n	8017d04 <_printf_float+0x16c>
 8017d46:	b913      	cbnz	r3, 8017d4e <_printf_float+0x1b6>
 8017d48:	6822      	ldr	r2, [r4, #0]
 8017d4a:	07d2      	lsls	r2, r2, #31
 8017d4c:	d501      	bpl.n	8017d52 <_printf_float+0x1ba>
 8017d4e:	3302      	adds	r3, #2
 8017d50:	e7f4      	b.n	8017d3c <_printf_float+0x1a4>
 8017d52:	2301      	movs	r3, #1
 8017d54:	e7f2      	b.n	8017d3c <_printf_float+0x1a4>
 8017d56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8017d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d5c:	4299      	cmp	r1, r3
 8017d5e:	db05      	blt.n	8017d6c <_printf_float+0x1d4>
 8017d60:	6823      	ldr	r3, [r4, #0]
 8017d62:	6121      	str	r1, [r4, #16]
 8017d64:	07d8      	lsls	r0, r3, #31
 8017d66:	d5ea      	bpl.n	8017d3e <_printf_float+0x1a6>
 8017d68:	1c4b      	adds	r3, r1, #1
 8017d6a:	e7e7      	b.n	8017d3c <_printf_float+0x1a4>
 8017d6c:	2900      	cmp	r1, #0
 8017d6e:	bfd4      	ite	le
 8017d70:	f1c1 0202 	rsble	r2, r1, #2
 8017d74:	2201      	movgt	r2, #1
 8017d76:	4413      	add	r3, r2
 8017d78:	e7e0      	b.n	8017d3c <_printf_float+0x1a4>
 8017d7a:	6823      	ldr	r3, [r4, #0]
 8017d7c:	055a      	lsls	r2, r3, #21
 8017d7e:	d407      	bmi.n	8017d90 <_printf_float+0x1f8>
 8017d80:	6923      	ldr	r3, [r4, #16]
 8017d82:	4642      	mov	r2, r8
 8017d84:	4631      	mov	r1, r6
 8017d86:	4628      	mov	r0, r5
 8017d88:	47b8      	blx	r7
 8017d8a:	3001      	adds	r0, #1
 8017d8c:	d12c      	bne.n	8017de8 <_printf_float+0x250>
 8017d8e:	e764      	b.n	8017c5a <_printf_float+0xc2>
 8017d90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017d94:	f240 80e0 	bls.w	8017f58 <_printf_float+0x3c0>
 8017d98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017d9c:	2200      	movs	r2, #0
 8017d9e:	2300      	movs	r3, #0
 8017da0:	f7e8 fe92 	bl	8000ac8 <__aeabi_dcmpeq>
 8017da4:	2800      	cmp	r0, #0
 8017da6:	d034      	beq.n	8017e12 <_printf_float+0x27a>
 8017da8:	4a37      	ldr	r2, [pc, #220]	; (8017e88 <_printf_float+0x2f0>)
 8017daa:	2301      	movs	r3, #1
 8017dac:	4631      	mov	r1, r6
 8017dae:	4628      	mov	r0, r5
 8017db0:	47b8      	blx	r7
 8017db2:	3001      	adds	r0, #1
 8017db4:	f43f af51 	beq.w	8017c5a <_printf_float+0xc2>
 8017db8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017dbc:	429a      	cmp	r2, r3
 8017dbe:	db02      	blt.n	8017dc6 <_printf_float+0x22e>
 8017dc0:	6823      	ldr	r3, [r4, #0]
 8017dc2:	07d8      	lsls	r0, r3, #31
 8017dc4:	d510      	bpl.n	8017de8 <_printf_float+0x250>
 8017dc6:	ee18 3a10 	vmov	r3, s16
 8017dca:	4652      	mov	r2, sl
 8017dcc:	4631      	mov	r1, r6
 8017dce:	4628      	mov	r0, r5
 8017dd0:	47b8      	blx	r7
 8017dd2:	3001      	adds	r0, #1
 8017dd4:	f43f af41 	beq.w	8017c5a <_printf_float+0xc2>
 8017dd8:	f04f 0800 	mov.w	r8, #0
 8017ddc:	f104 091a 	add.w	r9, r4, #26
 8017de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017de2:	3b01      	subs	r3, #1
 8017de4:	4543      	cmp	r3, r8
 8017de6:	dc09      	bgt.n	8017dfc <_printf_float+0x264>
 8017de8:	6823      	ldr	r3, [r4, #0]
 8017dea:	079b      	lsls	r3, r3, #30
 8017dec:	f100 8105 	bmi.w	8017ffa <_printf_float+0x462>
 8017df0:	68e0      	ldr	r0, [r4, #12]
 8017df2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017df4:	4298      	cmp	r0, r3
 8017df6:	bfb8      	it	lt
 8017df8:	4618      	movlt	r0, r3
 8017dfa:	e730      	b.n	8017c5e <_printf_float+0xc6>
 8017dfc:	2301      	movs	r3, #1
 8017dfe:	464a      	mov	r2, r9
 8017e00:	4631      	mov	r1, r6
 8017e02:	4628      	mov	r0, r5
 8017e04:	47b8      	blx	r7
 8017e06:	3001      	adds	r0, #1
 8017e08:	f43f af27 	beq.w	8017c5a <_printf_float+0xc2>
 8017e0c:	f108 0801 	add.w	r8, r8, #1
 8017e10:	e7e6      	b.n	8017de0 <_printf_float+0x248>
 8017e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	dc39      	bgt.n	8017e8c <_printf_float+0x2f4>
 8017e18:	4a1b      	ldr	r2, [pc, #108]	; (8017e88 <_printf_float+0x2f0>)
 8017e1a:	2301      	movs	r3, #1
 8017e1c:	4631      	mov	r1, r6
 8017e1e:	4628      	mov	r0, r5
 8017e20:	47b8      	blx	r7
 8017e22:	3001      	adds	r0, #1
 8017e24:	f43f af19 	beq.w	8017c5a <_printf_float+0xc2>
 8017e28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017e2c:	4313      	orrs	r3, r2
 8017e2e:	d102      	bne.n	8017e36 <_printf_float+0x29e>
 8017e30:	6823      	ldr	r3, [r4, #0]
 8017e32:	07d9      	lsls	r1, r3, #31
 8017e34:	d5d8      	bpl.n	8017de8 <_printf_float+0x250>
 8017e36:	ee18 3a10 	vmov	r3, s16
 8017e3a:	4652      	mov	r2, sl
 8017e3c:	4631      	mov	r1, r6
 8017e3e:	4628      	mov	r0, r5
 8017e40:	47b8      	blx	r7
 8017e42:	3001      	adds	r0, #1
 8017e44:	f43f af09 	beq.w	8017c5a <_printf_float+0xc2>
 8017e48:	f04f 0900 	mov.w	r9, #0
 8017e4c:	f104 0a1a 	add.w	sl, r4, #26
 8017e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e52:	425b      	negs	r3, r3
 8017e54:	454b      	cmp	r3, r9
 8017e56:	dc01      	bgt.n	8017e5c <_printf_float+0x2c4>
 8017e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e5a:	e792      	b.n	8017d82 <_printf_float+0x1ea>
 8017e5c:	2301      	movs	r3, #1
 8017e5e:	4652      	mov	r2, sl
 8017e60:	4631      	mov	r1, r6
 8017e62:	4628      	mov	r0, r5
 8017e64:	47b8      	blx	r7
 8017e66:	3001      	adds	r0, #1
 8017e68:	f43f aef7 	beq.w	8017c5a <_printf_float+0xc2>
 8017e6c:	f109 0901 	add.w	r9, r9, #1
 8017e70:	e7ee      	b.n	8017e50 <_printf_float+0x2b8>
 8017e72:	bf00      	nop
 8017e74:	7fefffff 	.word	0x7fefffff
 8017e78:	0801ae3c 	.word	0x0801ae3c
 8017e7c:	0801ae40 	.word	0x0801ae40
 8017e80:	0801ae48 	.word	0x0801ae48
 8017e84:	0801ae44 	.word	0x0801ae44
 8017e88:	0801ae4c 	.word	0x0801ae4c
 8017e8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017e8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017e90:	429a      	cmp	r2, r3
 8017e92:	bfa8      	it	ge
 8017e94:	461a      	movge	r2, r3
 8017e96:	2a00      	cmp	r2, #0
 8017e98:	4691      	mov	r9, r2
 8017e9a:	dc37      	bgt.n	8017f0c <_printf_float+0x374>
 8017e9c:	f04f 0b00 	mov.w	fp, #0
 8017ea0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017ea4:	f104 021a 	add.w	r2, r4, #26
 8017ea8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017eaa:	9305      	str	r3, [sp, #20]
 8017eac:	eba3 0309 	sub.w	r3, r3, r9
 8017eb0:	455b      	cmp	r3, fp
 8017eb2:	dc33      	bgt.n	8017f1c <_printf_float+0x384>
 8017eb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017eb8:	429a      	cmp	r2, r3
 8017eba:	db3b      	blt.n	8017f34 <_printf_float+0x39c>
 8017ebc:	6823      	ldr	r3, [r4, #0]
 8017ebe:	07da      	lsls	r2, r3, #31
 8017ec0:	d438      	bmi.n	8017f34 <_printf_float+0x39c>
 8017ec2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017ec4:	9b05      	ldr	r3, [sp, #20]
 8017ec6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017ec8:	1ad3      	subs	r3, r2, r3
 8017eca:	eba2 0901 	sub.w	r9, r2, r1
 8017ece:	4599      	cmp	r9, r3
 8017ed0:	bfa8      	it	ge
 8017ed2:	4699      	movge	r9, r3
 8017ed4:	f1b9 0f00 	cmp.w	r9, #0
 8017ed8:	dc35      	bgt.n	8017f46 <_printf_float+0x3ae>
 8017eda:	f04f 0800 	mov.w	r8, #0
 8017ede:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017ee2:	f104 0a1a 	add.w	sl, r4, #26
 8017ee6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017eea:	1a9b      	subs	r3, r3, r2
 8017eec:	eba3 0309 	sub.w	r3, r3, r9
 8017ef0:	4543      	cmp	r3, r8
 8017ef2:	f77f af79 	ble.w	8017de8 <_printf_float+0x250>
 8017ef6:	2301      	movs	r3, #1
 8017ef8:	4652      	mov	r2, sl
 8017efa:	4631      	mov	r1, r6
 8017efc:	4628      	mov	r0, r5
 8017efe:	47b8      	blx	r7
 8017f00:	3001      	adds	r0, #1
 8017f02:	f43f aeaa 	beq.w	8017c5a <_printf_float+0xc2>
 8017f06:	f108 0801 	add.w	r8, r8, #1
 8017f0a:	e7ec      	b.n	8017ee6 <_printf_float+0x34e>
 8017f0c:	4613      	mov	r3, r2
 8017f0e:	4631      	mov	r1, r6
 8017f10:	4642      	mov	r2, r8
 8017f12:	4628      	mov	r0, r5
 8017f14:	47b8      	blx	r7
 8017f16:	3001      	adds	r0, #1
 8017f18:	d1c0      	bne.n	8017e9c <_printf_float+0x304>
 8017f1a:	e69e      	b.n	8017c5a <_printf_float+0xc2>
 8017f1c:	2301      	movs	r3, #1
 8017f1e:	4631      	mov	r1, r6
 8017f20:	4628      	mov	r0, r5
 8017f22:	9205      	str	r2, [sp, #20]
 8017f24:	47b8      	blx	r7
 8017f26:	3001      	adds	r0, #1
 8017f28:	f43f ae97 	beq.w	8017c5a <_printf_float+0xc2>
 8017f2c:	9a05      	ldr	r2, [sp, #20]
 8017f2e:	f10b 0b01 	add.w	fp, fp, #1
 8017f32:	e7b9      	b.n	8017ea8 <_printf_float+0x310>
 8017f34:	ee18 3a10 	vmov	r3, s16
 8017f38:	4652      	mov	r2, sl
 8017f3a:	4631      	mov	r1, r6
 8017f3c:	4628      	mov	r0, r5
 8017f3e:	47b8      	blx	r7
 8017f40:	3001      	adds	r0, #1
 8017f42:	d1be      	bne.n	8017ec2 <_printf_float+0x32a>
 8017f44:	e689      	b.n	8017c5a <_printf_float+0xc2>
 8017f46:	9a05      	ldr	r2, [sp, #20]
 8017f48:	464b      	mov	r3, r9
 8017f4a:	4442      	add	r2, r8
 8017f4c:	4631      	mov	r1, r6
 8017f4e:	4628      	mov	r0, r5
 8017f50:	47b8      	blx	r7
 8017f52:	3001      	adds	r0, #1
 8017f54:	d1c1      	bne.n	8017eda <_printf_float+0x342>
 8017f56:	e680      	b.n	8017c5a <_printf_float+0xc2>
 8017f58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017f5a:	2a01      	cmp	r2, #1
 8017f5c:	dc01      	bgt.n	8017f62 <_printf_float+0x3ca>
 8017f5e:	07db      	lsls	r3, r3, #31
 8017f60:	d538      	bpl.n	8017fd4 <_printf_float+0x43c>
 8017f62:	2301      	movs	r3, #1
 8017f64:	4642      	mov	r2, r8
 8017f66:	4631      	mov	r1, r6
 8017f68:	4628      	mov	r0, r5
 8017f6a:	47b8      	blx	r7
 8017f6c:	3001      	adds	r0, #1
 8017f6e:	f43f ae74 	beq.w	8017c5a <_printf_float+0xc2>
 8017f72:	ee18 3a10 	vmov	r3, s16
 8017f76:	4652      	mov	r2, sl
 8017f78:	4631      	mov	r1, r6
 8017f7a:	4628      	mov	r0, r5
 8017f7c:	47b8      	blx	r7
 8017f7e:	3001      	adds	r0, #1
 8017f80:	f43f ae6b 	beq.w	8017c5a <_printf_float+0xc2>
 8017f84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017f88:	2200      	movs	r2, #0
 8017f8a:	2300      	movs	r3, #0
 8017f8c:	f7e8 fd9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8017f90:	b9d8      	cbnz	r0, 8017fca <_printf_float+0x432>
 8017f92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f94:	f108 0201 	add.w	r2, r8, #1
 8017f98:	3b01      	subs	r3, #1
 8017f9a:	4631      	mov	r1, r6
 8017f9c:	4628      	mov	r0, r5
 8017f9e:	47b8      	blx	r7
 8017fa0:	3001      	adds	r0, #1
 8017fa2:	d10e      	bne.n	8017fc2 <_printf_float+0x42a>
 8017fa4:	e659      	b.n	8017c5a <_printf_float+0xc2>
 8017fa6:	2301      	movs	r3, #1
 8017fa8:	4652      	mov	r2, sl
 8017faa:	4631      	mov	r1, r6
 8017fac:	4628      	mov	r0, r5
 8017fae:	47b8      	blx	r7
 8017fb0:	3001      	adds	r0, #1
 8017fb2:	f43f ae52 	beq.w	8017c5a <_printf_float+0xc2>
 8017fb6:	f108 0801 	add.w	r8, r8, #1
 8017fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017fbc:	3b01      	subs	r3, #1
 8017fbe:	4543      	cmp	r3, r8
 8017fc0:	dcf1      	bgt.n	8017fa6 <_printf_float+0x40e>
 8017fc2:	464b      	mov	r3, r9
 8017fc4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017fc8:	e6dc      	b.n	8017d84 <_printf_float+0x1ec>
 8017fca:	f04f 0800 	mov.w	r8, #0
 8017fce:	f104 0a1a 	add.w	sl, r4, #26
 8017fd2:	e7f2      	b.n	8017fba <_printf_float+0x422>
 8017fd4:	2301      	movs	r3, #1
 8017fd6:	4642      	mov	r2, r8
 8017fd8:	e7df      	b.n	8017f9a <_printf_float+0x402>
 8017fda:	2301      	movs	r3, #1
 8017fdc:	464a      	mov	r2, r9
 8017fde:	4631      	mov	r1, r6
 8017fe0:	4628      	mov	r0, r5
 8017fe2:	47b8      	blx	r7
 8017fe4:	3001      	adds	r0, #1
 8017fe6:	f43f ae38 	beq.w	8017c5a <_printf_float+0xc2>
 8017fea:	f108 0801 	add.w	r8, r8, #1
 8017fee:	68e3      	ldr	r3, [r4, #12]
 8017ff0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017ff2:	1a5b      	subs	r3, r3, r1
 8017ff4:	4543      	cmp	r3, r8
 8017ff6:	dcf0      	bgt.n	8017fda <_printf_float+0x442>
 8017ff8:	e6fa      	b.n	8017df0 <_printf_float+0x258>
 8017ffa:	f04f 0800 	mov.w	r8, #0
 8017ffe:	f104 0919 	add.w	r9, r4, #25
 8018002:	e7f4      	b.n	8017fee <_printf_float+0x456>

08018004 <_printf_common>:
 8018004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018008:	4616      	mov	r6, r2
 801800a:	4699      	mov	r9, r3
 801800c:	688a      	ldr	r2, [r1, #8]
 801800e:	690b      	ldr	r3, [r1, #16]
 8018010:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018014:	4293      	cmp	r3, r2
 8018016:	bfb8      	it	lt
 8018018:	4613      	movlt	r3, r2
 801801a:	6033      	str	r3, [r6, #0]
 801801c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018020:	4607      	mov	r7, r0
 8018022:	460c      	mov	r4, r1
 8018024:	b10a      	cbz	r2, 801802a <_printf_common+0x26>
 8018026:	3301      	adds	r3, #1
 8018028:	6033      	str	r3, [r6, #0]
 801802a:	6823      	ldr	r3, [r4, #0]
 801802c:	0699      	lsls	r1, r3, #26
 801802e:	bf42      	ittt	mi
 8018030:	6833      	ldrmi	r3, [r6, #0]
 8018032:	3302      	addmi	r3, #2
 8018034:	6033      	strmi	r3, [r6, #0]
 8018036:	6825      	ldr	r5, [r4, #0]
 8018038:	f015 0506 	ands.w	r5, r5, #6
 801803c:	d106      	bne.n	801804c <_printf_common+0x48>
 801803e:	f104 0a19 	add.w	sl, r4, #25
 8018042:	68e3      	ldr	r3, [r4, #12]
 8018044:	6832      	ldr	r2, [r6, #0]
 8018046:	1a9b      	subs	r3, r3, r2
 8018048:	42ab      	cmp	r3, r5
 801804a:	dc26      	bgt.n	801809a <_printf_common+0x96>
 801804c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018050:	1e13      	subs	r3, r2, #0
 8018052:	6822      	ldr	r2, [r4, #0]
 8018054:	bf18      	it	ne
 8018056:	2301      	movne	r3, #1
 8018058:	0692      	lsls	r2, r2, #26
 801805a:	d42b      	bmi.n	80180b4 <_printf_common+0xb0>
 801805c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018060:	4649      	mov	r1, r9
 8018062:	4638      	mov	r0, r7
 8018064:	47c0      	blx	r8
 8018066:	3001      	adds	r0, #1
 8018068:	d01e      	beq.n	80180a8 <_printf_common+0xa4>
 801806a:	6823      	ldr	r3, [r4, #0]
 801806c:	68e5      	ldr	r5, [r4, #12]
 801806e:	6832      	ldr	r2, [r6, #0]
 8018070:	f003 0306 	and.w	r3, r3, #6
 8018074:	2b04      	cmp	r3, #4
 8018076:	bf08      	it	eq
 8018078:	1aad      	subeq	r5, r5, r2
 801807a:	68a3      	ldr	r3, [r4, #8]
 801807c:	6922      	ldr	r2, [r4, #16]
 801807e:	bf0c      	ite	eq
 8018080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018084:	2500      	movne	r5, #0
 8018086:	4293      	cmp	r3, r2
 8018088:	bfc4      	itt	gt
 801808a:	1a9b      	subgt	r3, r3, r2
 801808c:	18ed      	addgt	r5, r5, r3
 801808e:	2600      	movs	r6, #0
 8018090:	341a      	adds	r4, #26
 8018092:	42b5      	cmp	r5, r6
 8018094:	d11a      	bne.n	80180cc <_printf_common+0xc8>
 8018096:	2000      	movs	r0, #0
 8018098:	e008      	b.n	80180ac <_printf_common+0xa8>
 801809a:	2301      	movs	r3, #1
 801809c:	4652      	mov	r2, sl
 801809e:	4649      	mov	r1, r9
 80180a0:	4638      	mov	r0, r7
 80180a2:	47c0      	blx	r8
 80180a4:	3001      	adds	r0, #1
 80180a6:	d103      	bne.n	80180b0 <_printf_common+0xac>
 80180a8:	f04f 30ff 	mov.w	r0, #4294967295
 80180ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180b0:	3501      	adds	r5, #1
 80180b2:	e7c6      	b.n	8018042 <_printf_common+0x3e>
 80180b4:	18e1      	adds	r1, r4, r3
 80180b6:	1c5a      	adds	r2, r3, #1
 80180b8:	2030      	movs	r0, #48	; 0x30
 80180ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80180be:	4422      	add	r2, r4
 80180c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80180c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80180c8:	3302      	adds	r3, #2
 80180ca:	e7c7      	b.n	801805c <_printf_common+0x58>
 80180cc:	2301      	movs	r3, #1
 80180ce:	4622      	mov	r2, r4
 80180d0:	4649      	mov	r1, r9
 80180d2:	4638      	mov	r0, r7
 80180d4:	47c0      	blx	r8
 80180d6:	3001      	adds	r0, #1
 80180d8:	d0e6      	beq.n	80180a8 <_printf_common+0xa4>
 80180da:	3601      	adds	r6, #1
 80180dc:	e7d9      	b.n	8018092 <_printf_common+0x8e>
	...

080180e0 <_printf_i>:
 80180e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80180e4:	460c      	mov	r4, r1
 80180e6:	4691      	mov	r9, r2
 80180e8:	7e27      	ldrb	r7, [r4, #24]
 80180ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80180ec:	2f78      	cmp	r7, #120	; 0x78
 80180ee:	4680      	mov	r8, r0
 80180f0:	469a      	mov	sl, r3
 80180f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80180f6:	d807      	bhi.n	8018108 <_printf_i+0x28>
 80180f8:	2f62      	cmp	r7, #98	; 0x62
 80180fa:	d80a      	bhi.n	8018112 <_printf_i+0x32>
 80180fc:	2f00      	cmp	r7, #0
 80180fe:	f000 80d8 	beq.w	80182b2 <_printf_i+0x1d2>
 8018102:	2f58      	cmp	r7, #88	; 0x58
 8018104:	f000 80a3 	beq.w	801824e <_printf_i+0x16e>
 8018108:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801810c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018110:	e03a      	b.n	8018188 <_printf_i+0xa8>
 8018112:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018116:	2b15      	cmp	r3, #21
 8018118:	d8f6      	bhi.n	8018108 <_printf_i+0x28>
 801811a:	a001      	add	r0, pc, #4	; (adr r0, 8018120 <_printf_i+0x40>)
 801811c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8018120:	08018179 	.word	0x08018179
 8018124:	0801818d 	.word	0x0801818d
 8018128:	08018109 	.word	0x08018109
 801812c:	08018109 	.word	0x08018109
 8018130:	08018109 	.word	0x08018109
 8018134:	08018109 	.word	0x08018109
 8018138:	0801818d 	.word	0x0801818d
 801813c:	08018109 	.word	0x08018109
 8018140:	08018109 	.word	0x08018109
 8018144:	08018109 	.word	0x08018109
 8018148:	08018109 	.word	0x08018109
 801814c:	08018299 	.word	0x08018299
 8018150:	080181bd 	.word	0x080181bd
 8018154:	0801827b 	.word	0x0801827b
 8018158:	08018109 	.word	0x08018109
 801815c:	08018109 	.word	0x08018109
 8018160:	080182bb 	.word	0x080182bb
 8018164:	08018109 	.word	0x08018109
 8018168:	080181bd 	.word	0x080181bd
 801816c:	08018109 	.word	0x08018109
 8018170:	08018109 	.word	0x08018109
 8018174:	08018283 	.word	0x08018283
 8018178:	680b      	ldr	r3, [r1, #0]
 801817a:	1d1a      	adds	r2, r3, #4
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	600a      	str	r2, [r1, #0]
 8018180:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8018184:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018188:	2301      	movs	r3, #1
 801818a:	e0a3      	b.n	80182d4 <_printf_i+0x1f4>
 801818c:	6825      	ldr	r5, [r4, #0]
 801818e:	6808      	ldr	r0, [r1, #0]
 8018190:	062e      	lsls	r6, r5, #24
 8018192:	f100 0304 	add.w	r3, r0, #4
 8018196:	d50a      	bpl.n	80181ae <_printf_i+0xce>
 8018198:	6805      	ldr	r5, [r0, #0]
 801819a:	600b      	str	r3, [r1, #0]
 801819c:	2d00      	cmp	r5, #0
 801819e:	da03      	bge.n	80181a8 <_printf_i+0xc8>
 80181a0:	232d      	movs	r3, #45	; 0x2d
 80181a2:	426d      	negs	r5, r5
 80181a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80181a8:	485e      	ldr	r0, [pc, #376]	; (8018324 <_printf_i+0x244>)
 80181aa:	230a      	movs	r3, #10
 80181ac:	e019      	b.n	80181e2 <_printf_i+0x102>
 80181ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80181b2:	6805      	ldr	r5, [r0, #0]
 80181b4:	600b      	str	r3, [r1, #0]
 80181b6:	bf18      	it	ne
 80181b8:	b22d      	sxthne	r5, r5
 80181ba:	e7ef      	b.n	801819c <_printf_i+0xbc>
 80181bc:	680b      	ldr	r3, [r1, #0]
 80181be:	6825      	ldr	r5, [r4, #0]
 80181c0:	1d18      	adds	r0, r3, #4
 80181c2:	6008      	str	r0, [r1, #0]
 80181c4:	0628      	lsls	r0, r5, #24
 80181c6:	d501      	bpl.n	80181cc <_printf_i+0xec>
 80181c8:	681d      	ldr	r5, [r3, #0]
 80181ca:	e002      	b.n	80181d2 <_printf_i+0xf2>
 80181cc:	0669      	lsls	r1, r5, #25
 80181ce:	d5fb      	bpl.n	80181c8 <_printf_i+0xe8>
 80181d0:	881d      	ldrh	r5, [r3, #0]
 80181d2:	4854      	ldr	r0, [pc, #336]	; (8018324 <_printf_i+0x244>)
 80181d4:	2f6f      	cmp	r7, #111	; 0x6f
 80181d6:	bf0c      	ite	eq
 80181d8:	2308      	moveq	r3, #8
 80181da:	230a      	movne	r3, #10
 80181dc:	2100      	movs	r1, #0
 80181de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80181e2:	6866      	ldr	r6, [r4, #4]
 80181e4:	60a6      	str	r6, [r4, #8]
 80181e6:	2e00      	cmp	r6, #0
 80181e8:	bfa2      	ittt	ge
 80181ea:	6821      	ldrge	r1, [r4, #0]
 80181ec:	f021 0104 	bicge.w	r1, r1, #4
 80181f0:	6021      	strge	r1, [r4, #0]
 80181f2:	b90d      	cbnz	r5, 80181f8 <_printf_i+0x118>
 80181f4:	2e00      	cmp	r6, #0
 80181f6:	d04d      	beq.n	8018294 <_printf_i+0x1b4>
 80181f8:	4616      	mov	r6, r2
 80181fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80181fe:	fb03 5711 	mls	r7, r3, r1, r5
 8018202:	5dc7      	ldrb	r7, [r0, r7]
 8018204:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018208:	462f      	mov	r7, r5
 801820a:	42bb      	cmp	r3, r7
 801820c:	460d      	mov	r5, r1
 801820e:	d9f4      	bls.n	80181fa <_printf_i+0x11a>
 8018210:	2b08      	cmp	r3, #8
 8018212:	d10b      	bne.n	801822c <_printf_i+0x14c>
 8018214:	6823      	ldr	r3, [r4, #0]
 8018216:	07df      	lsls	r7, r3, #31
 8018218:	d508      	bpl.n	801822c <_printf_i+0x14c>
 801821a:	6923      	ldr	r3, [r4, #16]
 801821c:	6861      	ldr	r1, [r4, #4]
 801821e:	4299      	cmp	r1, r3
 8018220:	bfde      	ittt	le
 8018222:	2330      	movle	r3, #48	; 0x30
 8018224:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018228:	f106 36ff 	addle.w	r6, r6, #4294967295
 801822c:	1b92      	subs	r2, r2, r6
 801822e:	6122      	str	r2, [r4, #16]
 8018230:	f8cd a000 	str.w	sl, [sp]
 8018234:	464b      	mov	r3, r9
 8018236:	aa03      	add	r2, sp, #12
 8018238:	4621      	mov	r1, r4
 801823a:	4640      	mov	r0, r8
 801823c:	f7ff fee2 	bl	8018004 <_printf_common>
 8018240:	3001      	adds	r0, #1
 8018242:	d14c      	bne.n	80182de <_printf_i+0x1fe>
 8018244:	f04f 30ff 	mov.w	r0, #4294967295
 8018248:	b004      	add	sp, #16
 801824a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801824e:	4835      	ldr	r0, [pc, #212]	; (8018324 <_printf_i+0x244>)
 8018250:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018254:	6823      	ldr	r3, [r4, #0]
 8018256:	680e      	ldr	r6, [r1, #0]
 8018258:	061f      	lsls	r7, r3, #24
 801825a:	f856 5b04 	ldr.w	r5, [r6], #4
 801825e:	600e      	str	r6, [r1, #0]
 8018260:	d514      	bpl.n	801828c <_printf_i+0x1ac>
 8018262:	07d9      	lsls	r1, r3, #31
 8018264:	bf44      	itt	mi
 8018266:	f043 0320 	orrmi.w	r3, r3, #32
 801826a:	6023      	strmi	r3, [r4, #0]
 801826c:	b91d      	cbnz	r5, 8018276 <_printf_i+0x196>
 801826e:	6823      	ldr	r3, [r4, #0]
 8018270:	f023 0320 	bic.w	r3, r3, #32
 8018274:	6023      	str	r3, [r4, #0]
 8018276:	2310      	movs	r3, #16
 8018278:	e7b0      	b.n	80181dc <_printf_i+0xfc>
 801827a:	6823      	ldr	r3, [r4, #0]
 801827c:	f043 0320 	orr.w	r3, r3, #32
 8018280:	6023      	str	r3, [r4, #0]
 8018282:	2378      	movs	r3, #120	; 0x78
 8018284:	4828      	ldr	r0, [pc, #160]	; (8018328 <_printf_i+0x248>)
 8018286:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801828a:	e7e3      	b.n	8018254 <_printf_i+0x174>
 801828c:	065e      	lsls	r6, r3, #25
 801828e:	bf48      	it	mi
 8018290:	b2ad      	uxthmi	r5, r5
 8018292:	e7e6      	b.n	8018262 <_printf_i+0x182>
 8018294:	4616      	mov	r6, r2
 8018296:	e7bb      	b.n	8018210 <_printf_i+0x130>
 8018298:	680b      	ldr	r3, [r1, #0]
 801829a:	6826      	ldr	r6, [r4, #0]
 801829c:	6960      	ldr	r0, [r4, #20]
 801829e:	1d1d      	adds	r5, r3, #4
 80182a0:	600d      	str	r5, [r1, #0]
 80182a2:	0635      	lsls	r5, r6, #24
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	d501      	bpl.n	80182ac <_printf_i+0x1cc>
 80182a8:	6018      	str	r0, [r3, #0]
 80182aa:	e002      	b.n	80182b2 <_printf_i+0x1d2>
 80182ac:	0671      	lsls	r1, r6, #25
 80182ae:	d5fb      	bpl.n	80182a8 <_printf_i+0x1c8>
 80182b0:	8018      	strh	r0, [r3, #0]
 80182b2:	2300      	movs	r3, #0
 80182b4:	6123      	str	r3, [r4, #16]
 80182b6:	4616      	mov	r6, r2
 80182b8:	e7ba      	b.n	8018230 <_printf_i+0x150>
 80182ba:	680b      	ldr	r3, [r1, #0]
 80182bc:	1d1a      	adds	r2, r3, #4
 80182be:	600a      	str	r2, [r1, #0]
 80182c0:	681e      	ldr	r6, [r3, #0]
 80182c2:	6862      	ldr	r2, [r4, #4]
 80182c4:	2100      	movs	r1, #0
 80182c6:	4630      	mov	r0, r6
 80182c8:	f7e7 ff82 	bl	80001d0 <memchr>
 80182cc:	b108      	cbz	r0, 80182d2 <_printf_i+0x1f2>
 80182ce:	1b80      	subs	r0, r0, r6
 80182d0:	6060      	str	r0, [r4, #4]
 80182d2:	6863      	ldr	r3, [r4, #4]
 80182d4:	6123      	str	r3, [r4, #16]
 80182d6:	2300      	movs	r3, #0
 80182d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80182dc:	e7a8      	b.n	8018230 <_printf_i+0x150>
 80182de:	6923      	ldr	r3, [r4, #16]
 80182e0:	4632      	mov	r2, r6
 80182e2:	4649      	mov	r1, r9
 80182e4:	4640      	mov	r0, r8
 80182e6:	47d0      	blx	sl
 80182e8:	3001      	adds	r0, #1
 80182ea:	d0ab      	beq.n	8018244 <_printf_i+0x164>
 80182ec:	6823      	ldr	r3, [r4, #0]
 80182ee:	079b      	lsls	r3, r3, #30
 80182f0:	d413      	bmi.n	801831a <_printf_i+0x23a>
 80182f2:	68e0      	ldr	r0, [r4, #12]
 80182f4:	9b03      	ldr	r3, [sp, #12]
 80182f6:	4298      	cmp	r0, r3
 80182f8:	bfb8      	it	lt
 80182fa:	4618      	movlt	r0, r3
 80182fc:	e7a4      	b.n	8018248 <_printf_i+0x168>
 80182fe:	2301      	movs	r3, #1
 8018300:	4632      	mov	r2, r6
 8018302:	4649      	mov	r1, r9
 8018304:	4640      	mov	r0, r8
 8018306:	47d0      	blx	sl
 8018308:	3001      	adds	r0, #1
 801830a:	d09b      	beq.n	8018244 <_printf_i+0x164>
 801830c:	3501      	adds	r5, #1
 801830e:	68e3      	ldr	r3, [r4, #12]
 8018310:	9903      	ldr	r1, [sp, #12]
 8018312:	1a5b      	subs	r3, r3, r1
 8018314:	42ab      	cmp	r3, r5
 8018316:	dcf2      	bgt.n	80182fe <_printf_i+0x21e>
 8018318:	e7eb      	b.n	80182f2 <_printf_i+0x212>
 801831a:	2500      	movs	r5, #0
 801831c:	f104 0619 	add.w	r6, r4, #25
 8018320:	e7f5      	b.n	801830e <_printf_i+0x22e>
 8018322:	bf00      	nop
 8018324:	0801ae4e 	.word	0x0801ae4e
 8018328:	0801ae5f 	.word	0x0801ae5f

0801832c <iprintf>:
 801832c:	b40f      	push	{r0, r1, r2, r3}
 801832e:	4b0a      	ldr	r3, [pc, #40]	; (8018358 <iprintf+0x2c>)
 8018330:	b513      	push	{r0, r1, r4, lr}
 8018332:	681c      	ldr	r4, [r3, #0]
 8018334:	b124      	cbz	r4, 8018340 <iprintf+0x14>
 8018336:	69a3      	ldr	r3, [r4, #24]
 8018338:	b913      	cbnz	r3, 8018340 <iprintf+0x14>
 801833a:	4620      	mov	r0, r4
 801833c:	f000 ff88 	bl	8019250 <__sinit>
 8018340:	ab05      	add	r3, sp, #20
 8018342:	9a04      	ldr	r2, [sp, #16]
 8018344:	68a1      	ldr	r1, [r4, #8]
 8018346:	9301      	str	r3, [sp, #4]
 8018348:	4620      	mov	r0, r4
 801834a:	f001 fd45 	bl	8019dd8 <_vfiprintf_r>
 801834e:	b002      	add	sp, #8
 8018350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018354:	b004      	add	sp, #16
 8018356:	4770      	bx	lr
 8018358:	200000f0 	.word	0x200000f0

0801835c <_sbrk_r>:
 801835c:	b538      	push	{r3, r4, r5, lr}
 801835e:	4d06      	ldr	r5, [pc, #24]	; (8018378 <_sbrk_r+0x1c>)
 8018360:	2300      	movs	r3, #0
 8018362:	4604      	mov	r4, r0
 8018364:	4608      	mov	r0, r1
 8018366:	602b      	str	r3, [r5, #0]
 8018368:	f7ea fb9c 	bl	8002aa4 <_sbrk>
 801836c:	1c43      	adds	r3, r0, #1
 801836e:	d102      	bne.n	8018376 <_sbrk_r+0x1a>
 8018370:	682b      	ldr	r3, [r5, #0]
 8018372:	b103      	cbz	r3, 8018376 <_sbrk_r+0x1a>
 8018374:	6023      	str	r3, [r4, #0]
 8018376:	bd38      	pop	{r3, r4, r5, pc}
 8018378:	20001a04 	.word	0x20001a04

0801837c <_raise_r>:
 801837c:	291f      	cmp	r1, #31
 801837e:	b538      	push	{r3, r4, r5, lr}
 8018380:	4604      	mov	r4, r0
 8018382:	460d      	mov	r5, r1
 8018384:	d904      	bls.n	8018390 <_raise_r+0x14>
 8018386:	2316      	movs	r3, #22
 8018388:	6003      	str	r3, [r0, #0]
 801838a:	f04f 30ff 	mov.w	r0, #4294967295
 801838e:	bd38      	pop	{r3, r4, r5, pc}
 8018390:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018392:	b112      	cbz	r2, 801839a <_raise_r+0x1e>
 8018394:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018398:	b94b      	cbnz	r3, 80183ae <_raise_r+0x32>
 801839a:	4620      	mov	r0, r4
 801839c:	f000 f830 	bl	8018400 <_getpid_r>
 80183a0:	462a      	mov	r2, r5
 80183a2:	4601      	mov	r1, r0
 80183a4:	4620      	mov	r0, r4
 80183a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80183aa:	f000 b817 	b.w	80183dc <_kill_r>
 80183ae:	2b01      	cmp	r3, #1
 80183b0:	d00a      	beq.n	80183c8 <_raise_r+0x4c>
 80183b2:	1c59      	adds	r1, r3, #1
 80183b4:	d103      	bne.n	80183be <_raise_r+0x42>
 80183b6:	2316      	movs	r3, #22
 80183b8:	6003      	str	r3, [r0, #0]
 80183ba:	2001      	movs	r0, #1
 80183bc:	e7e7      	b.n	801838e <_raise_r+0x12>
 80183be:	2400      	movs	r4, #0
 80183c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80183c4:	4628      	mov	r0, r5
 80183c6:	4798      	blx	r3
 80183c8:	2000      	movs	r0, #0
 80183ca:	e7e0      	b.n	801838e <_raise_r+0x12>

080183cc <raise>:
 80183cc:	4b02      	ldr	r3, [pc, #8]	; (80183d8 <raise+0xc>)
 80183ce:	4601      	mov	r1, r0
 80183d0:	6818      	ldr	r0, [r3, #0]
 80183d2:	f7ff bfd3 	b.w	801837c <_raise_r>
 80183d6:	bf00      	nop
 80183d8:	200000f0 	.word	0x200000f0

080183dc <_kill_r>:
 80183dc:	b538      	push	{r3, r4, r5, lr}
 80183de:	4d07      	ldr	r5, [pc, #28]	; (80183fc <_kill_r+0x20>)
 80183e0:	2300      	movs	r3, #0
 80183e2:	4604      	mov	r4, r0
 80183e4:	4608      	mov	r0, r1
 80183e6:	4611      	mov	r1, r2
 80183e8:	602b      	str	r3, [r5, #0]
 80183ea:	f7ea fad3 	bl	8002994 <_kill>
 80183ee:	1c43      	adds	r3, r0, #1
 80183f0:	d102      	bne.n	80183f8 <_kill_r+0x1c>
 80183f2:	682b      	ldr	r3, [r5, #0]
 80183f4:	b103      	cbz	r3, 80183f8 <_kill_r+0x1c>
 80183f6:	6023      	str	r3, [r4, #0]
 80183f8:	bd38      	pop	{r3, r4, r5, pc}
 80183fa:	bf00      	nop
 80183fc:	20001a04 	.word	0x20001a04

08018400 <_getpid_r>:
 8018400:	f7ea bac0 	b.w	8002984 <_getpid>

08018404 <sniprintf>:
 8018404:	b40c      	push	{r2, r3}
 8018406:	b530      	push	{r4, r5, lr}
 8018408:	4b17      	ldr	r3, [pc, #92]	; (8018468 <sniprintf+0x64>)
 801840a:	1e0c      	subs	r4, r1, #0
 801840c:	681d      	ldr	r5, [r3, #0]
 801840e:	b09d      	sub	sp, #116	; 0x74
 8018410:	da08      	bge.n	8018424 <sniprintf+0x20>
 8018412:	238b      	movs	r3, #139	; 0x8b
 8018414:	602b      	str	r3, [r5, #0]
 8018416:	f04f 30ff 	mov.w	r0, #4294967295
 801841a:	b01d      	add	sp, #116	; 0x74
 801841c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018420:	b002      	add	sp, #8
 8018422:	4770      	bx	lr
 8018424:	f44f 7302 	mov.w	r3, #520	; 0x208
 8018428:	f8ad 3014 	strh.w	r3, [sp, #20]
 801842c:	bf14      	ite	ne
 801842e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8018432:	4623      	moveq	r3, r4
 8018434:	9304      	str	r3, [sp, #16]
 8018436:	9307      	str	r3, [sp, #28]
 8018438:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801843c:	9002      	str	r0, [sp, #8]
 801843e:	9006      	str	r0, [sp, #24]
 8018440:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018444:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018446:	ab21      	add	r3, sp, #132	; 0x84
 8018448:	a902      	add	r1, sp, #8
 801844a:	4628      	mov	r0, r5
 801844c:	9301      	str	r3, [sp, #4]
 801844e:	f001 fb99 	bl	8019b84 <_svfiprintf_r>
 8018452:	1c43      	adds	r3, r0, #1
 8018454:	bfbc      	itt	lt
 8018456:	238b      	movlt	r3, #139	; 0x8b
 8018458:	602b      	strlt	r3, [r5, #0]
 801845a:	2c00      	cmp	r4, #0
 801845c:	d0dd      	beq.n	801841a <sniprintf+0x16>
 801845e:	9b02      	ldr	r3, [sp, #8]
 8018460:	2200      	movs	r2, #0
 8018462:	701a      	strb	r2, [r3, #0]
 8018464:	e7d9      	b.n	801841a <sniprintf+0x16>
 8018466:	bf00      	nop
 8018468:	200000f0 	.word	0x200000f0

0801846c <siprintf>:
 801846c:	b40e      	push	{r1, r2, r3}
 801846e:	b500      	push	{lr}
 8018470:	b09c      	sub	sp, #112	; 0x70
 8018472:	ab1d      	add	r3, sp, #116	; 0x74
 8018474:	9002      	str	r0, [sp, #8]
 8018476:	9006      	str	r0, [sp, #24]
 8018478:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801847c:	4809      	ldr	r0, [pc, #36]	; (80184a4 <siprintf+0x38>)
 801847e:	9107      	str	r1, [sp, #28]
 8018480:	9104      	str	r1, [sp, #16]
 8018482:	4909      	ldr	r1, [pc, #36]	; (80184a8 <siprintf+0x3c>)
 8018484:	f853 2b04 	ldr.w	r2, [r3], #4
 8018488:	9105      	str	r1, [sp, #20]
 801848a:	6800      	ldr	r0, [r0, #0]
 801848c:	9301      	str	r3, [sp, #4]
 801848e:	a902      	add	r1, sp, #8
 8018490:	f001 fb78 	bl	8019b84 <_svfiprintf_r>
 8018494:	9b02      	ldr	r3, [sp, #8]
 8018496:	2200      	movs	r2, #0
 8018498:	701a      	strb	r2, [r3, #0]
 801849a:	b01c      	add	sp, #112	; 0x70
 801849c:	f85d eb04 	ldr.w	lr, [sp], #4
 80184a0:	b003      	add	sp, #12
 80184a2:	4770      	bx	lr
 80184a4:	200000f0 	.word	0x200000f0
 80184a8:	ffff0208 	.word	0xffff0208

080184ac <quorem>:
 80184ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184b0:	6903      	ldr	r3, [r0, #16]
 80184b2:	690c      	ldr	r4, [r1, #16]
 80184b4:	42a3      	cmp	r3, r4
 80184b6:	4607      	mov	r7, r0
 80184b8:	f2c0 8081 	blt.w	80185be <quorem+0x112>
 80184bc:	3c01      	subs	r4, #1
 80184be:	f101 0814 	add.w	r8, r1, #20
 80184c2:	f100 0514 	add.w	r5, r0, #20
 80184c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80184ca:	9301      	str	r3, [sp, #4]
 80184cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80184d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80184d4:	3301      	adds	r3, #1
 80184d6:	429a      	cmp	r2, r3
 80184d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80184dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80184e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80184e4:	d331      	bcc.n	801854a <quorem+0x9e>
 80184e6:	f04f 0e00 	mov.w	lr, #0
 80184ea:	4640      	mov	r0, r8
 80184ec:	46ac      	mov	ip, r5
 80184ee:	46f2      	mov	sl, lr
 80184f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80184f4:	b293      	uxth	r3, r2
 80184f6:	fb06 e303 	mla	r3, r6, r3, lr
 80184fa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80184fe:	b29b      	uxth	r3, r3
 8018500:	ebaa 0303 	sub.w	r3, sl, r3
 8018504:	0c12      	lsrs	r2, r2, #16
 8018506:	f8dc a000 	ldr.w	sl, [ip]
 801850a:	fb06 e202 	mla	r2, r6, r2, lr
 801850e:	fa13 f38a 	uxtah	r3, r3, sl
 8018512:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018516:	fa1f fa82 	uxth.w	sl, r2
 801851a:	f8dc 2000 	ldr.w	r2, [ip]
 801851e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8018522:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018526:	b29b      	uxth	r3, r3
 8018528:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801852c:	4581      	cmp	r9, r0
 801852e:	f84c 3b04 	str.w	r3, [ip], #4
 8018532:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8018536:	d2db      	bcs.n	80184f0 <quorem+0x44>
 8018538:	f855 300b 	ldr.w	r3, [r5, fp]
 801853c:	b92b      	cbnz	r3, 801854a <quorem+0x9e>
 801853e:	9b01      	ldr	r3, [sp, #4]
 8018540:	3b04      	subs	r3, #4
 8018542:	429d      	cmp	r5, r3
 8018544:	461a      	mov	r2, r3
 8018546:	d32e      	bcc.n	80185a6 <quorem+0xfa>
 8018548:	613c      	str	r4, [r7, #16]
 801854a:	4638      	mov	r0, r7
 801854c:	f001 f9b0 	bl	80198b0 <__mcmp>
 8018550:	2800      	cmp	r0, #0
 8018552:	db24      	blt.n	801859e <quorem+0xf2>
 8018554:	3601      	adds	r6, #1
 8018556:	4628      	mov	r0, r5
 8018558:	f04f 0c00 	mov.w	ip, #0
 801855c:	f858 2b04 	ldr.w	r2, [r8], #4
 8018560:	f8d0 e000 	ldr.w	lr, [r0]
 8018564:	b293      	uxth	r3, r2
 8018566:	ebac 0303 	sub.w	r3, ip, r3
 801856a:	0c12      	lsrs	r2, r2, #16
 801856c:	fa13 f38e 	uxtah	r3, r3, lr
 8018570:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8018574:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018578:	b29b      	uxth	r3, r3
 801857a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801857e:	45c1      	cmp	r9, r8
 8018580:	f840 3b04 	str.w	r3, [r0], #4
 8018584:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8018588:	d2e8      	bcs.n	801855c <quorem+0xb0>
 801858a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801858e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018592:	b922      	cbnz	r2, 801859e <quorem+0xf2>
 8018594:	3b04      	subs	r3, #4
 8018596:	429d      	cmp	r5, r3
 8018598:	461a      	mov	r2, r3
 801859a:	d30a      	bcc.n	80185b2 <quorem+0x106>
 801859c:	613c      	str	r4, [r7, #16]
 801859e:	4630      	mov	r0, r6
 80185a0:	b003      	add	sp, #12
 80185a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185a6:	6812      	ldr	r2, [r2, #0]
 80185a8:	3b04      	subs	r3, #4
 80185aa:	2a00      	cmp	r2, #0
 80185ac:	d1cc      	bne.n	8018548 <quorem+0x9c>
 80185ae:	3c01      	subs	r4, #1
 80185b0:	e7c7      	b.n	8018542 <quorem+0x96>
 80185b2:	6812      	ldr	r2, [r2, #0]
 80185b4:	3b04      	subs	r3, #4
 80185b6:	2a00      	cmp	r2, #0
 80185b8:	d1f0      	bne.n	801859c <quorem+0xf0>
 80185ba:	3c01      	subs	r4, #1
 80185bc:	e7eb      	b.n	8018596 <quorem+0xea>
 80185be:	2000      	movs	r0, #0
 80185c0:	e7ee      	b.n	80185a0 <quorem+0xf4>
 80185c2:	0000      	movs	r0, r0
 80185c4:	0000      	movs	r0, r0
	...

080185c8 <_dtoa_r>:
 80185c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185cc:	ed2d 8b02 	vpush	{d8}
 80185d0:	ec57 6b10 	vmov	r6, r7, d0
 80185d4:	b095      	sub	sp, #84	; 0x54
 80185d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80185d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80185dc:	9105      	str	r1, [sp, #20]
 80185de:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80185e2:	4604      	mov	r4, r0
 80185e4:	9209      	str	r2, [sp, #36]	; 0x24
 80185e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80185e8:	b975      	cbnz	r5, 8018608 <_dtoa_r+0x40>
 80185ea:	2010      	movs	r0, #16
 80185ec:	f7ff f94a 	bl	8017884 <malloc>
 80185f0:	4602      	mov	r2, r0
 80185f2:	6260      	str	r0, [r4, #36]	; 0x24
 80185f4:	b920      	cbnz	r0, 8018600 <_dtoa_r+0x38>
 80185f6:	4bb2      	ldr	r3, [pc, #712]	; (80188c0 <_dtoa_r+0x2f8>)
 80185f8:	21ea      	movs	r1, #234	; 0xea
 80185fa:	48b2      	ldr	r0, [pc, #712]	; (80188c4 <_dtoa_r+0x2fc>)
 80185fc:	f001 fe32 	bl	801a264 <__assert_func>
 8018600:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018604:	6005      	str	r5, [r0, #0]
 8018606:	60c5      	str	r5, [r0, #12]
 8018608:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801860a:	6819      	ldr	r1, [r3, #0]
 801860c:	b151      	cbz	r1, 8018624 <_dtoa_r+0x5c>
 801860e:	685a      	ldr	r2, [r3, #4]
 8018610:	604a      	str	r2, [r1, #4]
 8018612:	2301      	movs	r3, #1
 8018614:	4093      	lsls	r3, r2
 8018616:	608b      	str	r3, [r1, #8]
 8018618:	4620      	mov	r0, r4
 801861a:	f000 ff0b 	bl	8019434 <_Bfree>
 801861e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018620:	2200      	movs	r2, #0
 8018622:	601a      	str	r2, [r3, #0]
 8018624:	1e3b      	subs	r3, r7, #0
 8018626:	bfb9      	ittee	lt
 8018628:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801862c:	9303      	strlt	r3, [sp, #12]
 801862e:	2300      	movge	r3, #0
 8018630:	f8c8 3000 	strge.w	r3, [r8]
 8018634:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8018638:	4ba3      	ldr	r3, [pc, #652]	; (80188c8 <_dtoa_r+0x300>)
 801863a:	bfbc      	itt	lt
 801863c:	2201      	movlt	r2, #1
 801863e:	f8c8 2000 	strlt.w	r2, [r8]
 8018642:	ea33 0309 	bics.w	r3, r3, r9
 8018646:	d11b      	bne.n	8018680 <_dtoa_r+0xb8>
 8018648:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801864a:	f242 730f 	movw	r3, #9999	; 0x270f
 801864e:	6013      	str	r3, [r2, #0]
 8018650:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018654:	4333      	orrs	r3, r6
 8018656:	f000 857a 	beq.w	801914e <_dtoa_r+0xb86>
 801865a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801865c:	b963      	cbnz	r3, 8018678 <_dtoa_r+0xb0>
 801865e:	4b9b      	ldr	r3, [pc, #620]	; (80188cc <_dtoa_r+0x304>)
 8018660:	e024      	b.n	80186ac <_dtoa_r+0xe4>
 8018662:	4b9b      	ldr	r3, [pc, #620]	; (80188d0 <_dtoa_r+0x308>)
 8018664:	9300      	str	r3, [sp, #0]
 8018666:	3308      	adds	r3, #8
 8018668:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801866a:	6013      	str	r3, [r2, #0]
 801866c:	9800      	ldr	r0, [sp, #0]
 801866e:	b015      	add	sp, #84	; 0x54
 8018670:	ecbd 8b02 	vpop	{d8}
 8018674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018678:	4b94      	ldr	r3, [pc, #592]	; (80188cc <_dtoa_r+0x304>)
 801867a:	9300      	str	r3, [sp, #0]
 801867c:	3303      	adds	r3, #3
 801867e:	e7f3      	b.n	8018668 <_dtoa_r+0xa0>
 8018680:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018684:	2200      	movs	r2, #0
 8018686:	ec51 0b17 	vmov	r0, r1, d7
 801868a:	2300      	movs	r3, #0
 801868c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8018690:	f7e8 fa1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8018694:	4680      	mov	r8, r0
 8018696:	b158      	cbz	r0, 80186b0 <_dtoa_r+0xe8>
 8018698:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801869a:	2301      	movs	r3, #1
 801869c:	6013      	str	r3, [r2, #0]
 801869e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	f000 8551 	beq.w	8019148 <_dtoa_r+0xb80>
 80186a6:	488b      	ldr	r0, [pc, #556]	; (80188d4 <_dtoa_r+0x30c>)
 80186a8:	6018      	str	r0, [r3, #0]
 80186aa:	1e43      	subs	r3, r0, #1
 80186ac:	9300      	str	r3, [sp, #0]
 80186ae:	e7dd      	b.n	801866c <_dtoa_r+0xa4>
 80186b0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80186b4:	aa12      	add	r2, sp, #72	; 0x48
 80186b6:	a913      	add	r1, sp, #76	; 0x4c
 80186b8:	4620      	mov	r0, r4
 80186ba:	f001 f99d 	bl	80199f8 <__d2b>
 80186be:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80186c2:	4683      	mov	fp, r0
 80186c4:	2d00      	cmp	r5, #0
 80186c6:	d07c      	beq.n	80187c2 <_dtoa_r+0x1fa>
 80186c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80186ca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80186ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80186d2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80186d6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80186da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80186de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80186e2:	4b7d      	ldr	r3, [pc, #500]	; (80188d8 <_dtoa_r+0x310>)
 80186e4:	2200      	movs	r2, #0
 80186e6:	4630      	mov	r0, r6
 80186e8:	4639      	mov	r1, r7
 80186ea:	f7e7 fdcd 	bl	8000288 <__aeabi_dsub>
 80186ee:	a36e      	add	r3, pc, #440	; (adr r3, 80188a8 <_dtoa_r+0x2e0>)
 80186f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186f4:	f7e7 ff80 	bl	80005f8 <__aeabi_dmul>
 80186f8:	a36d      	add	r3, pc, #436	; (adr r3, 80188b0 <_dtoa_r+0x2e8>)
 80186fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186fe:	f7e7 fdc5 	bl	800028c <__adddf3>
 8018702:	4606      	mov	r6, r0
 8018704:	4628      	mov	r0, r5
 8018706:	460f      	mov	r7, r1
 8018708:	f7e7 ff0c 	bl	8000524 <__aeabi_i2d>
 801870c:	a36a      	add	r3, pc, #424	; (adr r3, 80188b8 <_dtoa_r+0x2f0>)
 801870e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018712:	f7e7 ff71 	bl	80005f8 <__aeabi_dmul>
 8018716:	4602      	mov	r2, r0
 8018718:	460b      	mov	r3, r1
 801871a:	4630      	mov	r0, r6
 801871c:	4639      	mov	r1, r7
 801871e:	f7e7 fdb5 	bl	800028c <__adddf3>
 8018722:	4606      	mov	r6, r0
 8018724:	460f      	mov	r7, r1
 8018726:	f7e8 fa17 	bl	8000b58 <__aeabi_d2iz>
 801872a:	2200      	movs	r2, #0
 801872c:	4682      	mov	sl, r0
 801872e:	2300      	movs	r3, #0
 8018730:	4630      	mov	r0, r6
 8018732:	4639      	mov	r1, r7
 8018734:	f7e8 f9d2 	bl	8000adc <__aeabi_dcmplt>
 8018738:	b148      	cbz	r0, 801874e <_dtoa_r+0x186>
 801873a:	4650      	mov	r0, sl
 801873c:	f7e7 fef2 	bl	8000524 <__aeabi_i2d>
 8018740:	4632      	mov	r2, r6
 8018742:	463b      	mov	r3, r7
 8018744:	f7e8 f9c0 	bl	8000ac8 <__aeabi_dcmpeq>
 8018748:	b908      	cbnz	r0, 801874e <_dtoa_r+0x186>
 801874a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801874e:	f1ba 0f16 	cmp.w	sl, #22
 8018752:	d854      	bhi.n	80187fe <_dtoa_r+0x236>
 8018754:	4b61      	ldr	r3, [pc, #388]	; (80188dc <_dtoa_r+0x314>)
 8018756:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801875a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801875e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018762:	f7e8 f9bb 	bl	8000adc <__aeabi_dcmplt>
 8018766:	2800      	cmp	r0, #0
 8018768:	d04b      	beq.n	8018802 <_dtoa_r+0x23a>
 801876a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801876e:	2300      	movs	r3, #0
 8018770:	930e      	str	r3, [sp, #56]	; 0x38
 8018772:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018774:	1b5d      	subs	r5, r3, r5
 8018776:	1e6b      	subs	r3, r5, #1
 8018778:	9304      	str	r3, [sp, #16]
 801877a:	bf43      	ittte	mi
 801877c:	2300      	movmi	r3, #0
 801877e:	f1c5 0801 	rsbmi	r8, r5, #1
 8018782:	9304      	strmi	r3, [sp, #16]
 8018784:	f04f 0800 	movpl.w	r8, #0
 8018788:	f1ba 0f00 	cmp.w	sl, #0
 801878c:	db3b      	blt.n	8018806 <_dtoa_r+0x23e>
 801878e:	9b04      	ldr	r3, [sp, #16]
 8018790:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8018794:	4453      	add	r3, sl
 8018796:	9304      	str	r3, [sp, #16]
 8018798:	2300      	movs	r3, #0
 801879a:	9306      	str	r3, [sp, #24]
 801879c:	9b05      	ldr	r3, [sp, #20]
 801879e:	2b09      	cmp	r3, #9
 80187a0:	d869      	bhi.n	8018876 <_dtoa_r+0x2ae>
 80187a2:	2b05      	cmp	r3, #5
 80187a4:	bfc4      	itt	gt
 80187a6:	3b04      	subgt	r3, #4
 80187a8:	9305      	strgt	r3, [sp, #20]
 80187aa:	9b05      	ldr	r3, [sp, #20]
 80187ac:	f1a3 0302 	sub.w	r3, r3, #2
 80187b0:	bfcc      	ite	gt
 80187b2:	2500      	movgt	r5, #0
 80187b4:	2501      	movle	r5, #1
 80187b6:	2b03      	cmp	r3, #3
 80187b8:	d869      	bhi.n	801888e <_dtoa_r+0x2c6>
 80187ba:	e8df f003 	tbb	[pc, r3]
 80187be:	4e2c      	.short	0x4e2c
 80187c0:	5a4c      	.short	0x5a4c
 80187c2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80187c6:	441d      	add	r5, r3
 80187c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80187cc:	2b20      	cmp	r3, #32
 80187ce:	bfc1      	itttt	gt
 80187d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80187d4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80187d8:	fa09 f303 	lslgt.w	r3, r9, r3
 80187dc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80187e0:	bfda      	itte	le
 80187e2:	f1c3 0320 	rsble	r3, r3, #32
 80187e6:	fa06 f003 	lslle.w	r0, r6, r3
 80187ea:	4318      	orrgt	r0, r3
 80187ec:	f7e7 fe8a 	bl	8000504 <__aeabi_ui2d>
 80187f0:	2301      	movs	r3, #1
 80187f2:	4606      	mov	r6, r0
 80187f4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80187f8:	3d01      	subs	r5, #1
 80187fa:	9310      	str	r3, [sp, #64]	; 0x40
 80187fc:	e771      	b.n	80186e2 <_dtoa_r+0x11a>
 80187fe:	2301      	movs	r3, #1
 8018800:	e7b6      	b.n	8018770 <_dtoa_r+0x1a8>
 8018802:	900e      	str	r0, [sp, #56]	; 0x38
 8018804:	e7b5      	b.n	8018772 <_dtoa_r+0x1aa>
 8018806:	f1ca 0300 	rsb	r3, sl, #0
 801880a:	9306      	str	r3, [sp, #24]
 801880c:	2300      	movs	r3, #0
 801880e:	eba8 080a 	sub.w	r8, r8, sl
 8018812:	930d      	str	r3, [sp, #52]	; 0x34
 8018814:	e7c2      	b.n	801879c <_dtoa_r+0x1d4>
 8018816:	2300      	movs	r3, #0
 8018818:	9308      	str	r3, [sp, #32]
 801881a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801881c:	2b00      	cmp	r3, #0
 801881e:	dc39      	bgt.n	8018894 <_dtoa_r+0x2cc>
 8018820:	f04f 0901 	mov.w	r9, #1
 8018824:	f8cd 9004 	str.w	r9, [sp, #4]
 8018828:	464b      	mov	r3, r9
 801882a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801882e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018830:	2200      	movs	r2, #0
 8018832:	6042      	str	r2, [r0, #4]
 8018834:	2204      	movs	r2, #4
 8018836:	f102 0614 	add.w	r6, r2, #20
 801883a:	429e      	cmp	r6, r3
 801883c:	6841      	ldr	r1, [r0, #4]
 801883e:	d92f      	bls.n	80188a0 <_dtoa_r+0x2d8>
 8018840:	4620      	mov	r0, r4
 8018842:	f000 fdb7 	bl	80193b4 <_Balloc>
 8018846:	9000      	str	r0, [sp, #0]
 8018848:	2800      	cmp	r0, #0
 801884a:	d14b      	bne.n	80188e4 <_dtoa_r+0x31c>
 801884c:	4b24      	ldr	r3, [pc, #144]	; (80188e0 <_dtoa_r+0x318>)
 801884e:	4602      	mov	r2, r0
 8018850:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8018854:	e6d1      	b.n	80185fa <_dtoa_r+0x32>
 8018856:	2301      	movs	r3, #1
 8018858:	e7de      	b.n	8018818 <_dtoa_r+0x250>
 801885a:	2300      	movs	r3, #0
 801885c:	9308      	str	r3, [sp, #32]
 801885e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018860:	eb0a 0903 	add.w	r9, sl, r3
 8018864:	f109 0301 	add.w	r3, r9, #1
 8018868:	2b01      	cmp	r3, #1
 801886a:	9301      	str	r3, [sp, #4]
 801886c:	bfb8      	it	lt
 801886e:	2301      	movlt	r3, #1
 8018870:	e7dd      	b.n	801882e <_dtoa_r+0x266>
 8018872:	2301      	movs	r3, #1
 8018874:	e7f2      	b.n	801885c <_dtoa_r+0x294>
 8018876:	2501      	movs	r5, #1
 8018878:	2300      	movs	r3, #0
 801887a:	9305      	str	r3, [sp, #20]
 801887c:	9508      	str	r5, [sp, #32]
 801887e:	f04f 39ff 	mov.w	r9, #4294967295
 8018882:	2200      	movs	r2, #0
 8018884:	f8cd 9004 	str.w	r9, [sp, #4]
 8018888:	2312      	movs	r3, #18
 801888a:	9209      	str	r2, [sp, #36]	; 0x24
 801888c:	e7cf      	b.n	801882e <_dtoa_r+0x266>
 801888e:	2301      	movs	r3, #1
 8018890:	9308      	str	r3, [sp, #32]
 8018892:	e7f4      	b.n	801887e <_dtoa_r+0x2b6>
 8018894:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8018898:	f8cd 9004 	str.w	r9, [sp, #4]
 801889c:	464b      	mov	r3, r9
 801889e:	e7c6      	b.n	801882e <_dtoa_r+0x266>
 80188a0:	3101      	adds	r1, #1
 80188a2:	6041      	str	r1, [r0, #4]
 80188a4:	0052      	lsls	r2, r2, #1
 80188a6:	e7c6      	b.n	8018836 <_dtoa_r+0x26e>
 80188a8:	636f4361 	.word	0x636f4361
 80188ac:	3fd287a7 	.word	0x3fd287a7
 80188b0:	8b60c8b3 	.word	0x8b60c8b3
 80188b4:	3fc68a28 	.word	0x3fc68a28
 80188b8:	509f79fb 	.word	0x509f79fb
 80188bc:	3fd34413 	.word	0x3fd34413
 80188c0:	0801ae7d 	.word	0x0801ae7d
 80188c4:	0801ae94 	.word	0x0801ae94
 80188c8:	7ff00000 	.word	0x7ff00000
 80188cc:	0801ae79 	.word	0x0801ae79
 80188d0:	0801ae70 	.word	0x0801ae70
 80188d4:	0801ae4d 	.word	0x0801ae4d
 80188d8:	3ff80000 	.word	0x3ff80000
 80188dc:	0801aff0 	.word	0x0801aff0
 80188e0:	0801aef3 	.word	0x0801aef3
 80188e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80188e6:	9a00      	ldr	r2, [sp, #0]
 80188e8:	601a      	str	r2, [r3, #0]
 80188ea:	9b01      	ldr	r3, [sp, #4]
 80188ec:	2b0e      	cmp	r3, #14
 80188ee:	f200 80ad 	bhi.w	8018a4c <_dtoa_r+0x484>
 80188f2:	2d00      	cmp	r5, #0
 80188f4:	f000 80aa 	beq.w	8018a4c <_dtoa_r+0x484>
 80188f8:	f1ba 0f00 	cmp.w	sl, #0
 80188fc:	dd36      	ble.n	801896c <_dtoa_r+0x3a4>
 80188fe:	4ac3      	ldr	r2, [pc, #780]	; (8018c0c <_dtoa_r+0x644>)
 8018900:	f00a 030f 	and.w	r3, sl, #15
 8018904:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018908:	ed93 7b00 	vldr	d7, [r3]
 801890c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8018910:	ea4f 172a 	mov.w	r7, sl, asr #4
 8018914:	eeb0 8a47 	vmov.f32	s16, s14
 8018918:	eef0 8a67 	vmov.f32	s17, s15
 801891c:	d016      	beq.n	801894c <_dtoa_r+0x384>
 801891e:	4bbc      	ldr	r3, [pc, #752]	; (8018c10 <_dtoa_r+0x648>)
 8018920:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018924:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018928:	f7e7 ff90 	bl	800084c <__aeabi_ddiv>
 801892c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018930:	f007 070f 	and.w	r7, r7, #15
 8018934:	2503      	movs	r5, #3
 8018936:	4eb6      	ldr	r6, [pc, #728]	; (8018c10 <_dtoa_r+0x648>)
 8018938:	b957      	cbnz	r7, 8018950 <_dtoa_r+0x388>
 801893a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801893e:	ec53 2b18 	vmov	r2, r3, d8
 8018942:	f7e7 ff83 	bl	800084c <__aeabi_ddiv>
 8018946:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801894a:	e029      	b.n	80189a0 <_dtoa_r+0x3d8>
 801894c:	2502      	movs	r5, #2
 801894e:	e7f2      	b.n	8018936 <_dtoa_r+0x36e>
 8018950:	07f9      	lsls	r1, r7, #31
 8018952:	d508      	bpl.n	8018966 <_dtoa_r+0x39e>
 8018954:	ec51 0b18 	vmov	r0, r1, d8
 8018958:	e9d6 2300 	ldrd	r2, r3, [r6]
 801895c:	f7e7 fe4c 	bl	80005f8 <__aeabi_dmul>
 8018960:	ec41 0b18 	vmov	d8, r0, r1
 8018964:	3501      	adds	r5, #1
 8018966:	107f      	asrs	r7, r7, #1
 8018968:	3608      	adds	r6, #8
 801896a:	e7e5      	b.n	8018938 <_dtoa_r+0x370>
 801896c:	f000 80a6 	beq.w	8018abc <_dtoa_r+0x4f4>
 8018970:	f1ca 0600 	rsb	r6, sl, #0
 8018974:	4ba5      	ldr	r3, [pc, #660]	; (8018c0c <_dtoa_r+0x644>)
 8018976:	4fa6      	ldr	r7, [pc, #664]	; (8018c10 <_dtoa_r+0x648>)
 8018978:	f006 020f 	and.w	r2, r6, #15
 801897c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018984:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018988:	f7e7 fe36 	bl	80005f8 <__aeabi_dmul>
 801898c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018990:	1136      	asrs	r6, r6, #4
 8018992:	2300      	movs	r3, #0
 8018994:	2502      	movs	r5, #2
 8018996:	2e00      	cmp	r6, #0
 8018998:	f040 8085 	bne.w	8018aa6 <_dtoa_r+0x4de>
 801899c:	2b00      	cmp	r3, #0
 801899e:	d1d2      	bne.n	8018946 <_dtoa_r+0x37e>
 80189a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	f000 808c 	beq.w	8018ac0 <_dtoa_r+0x4f8>
 80189a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80189ac:	4b99      	ldr	r3, [pc, #612]	; (8018c14 <_dtoa_r+0x64c>)
 80189ae:	2200      	movs	r2, #0
 80189b0:	4630      	mov	r0, r6
 80189b2:	4639      	mov	r1, r7
 80189b4:	f7e8 f892 	bl	8000adc <__aeabi_dcmplt>
 80189b8:	2800      	cmp	r0, #0
 80189ba:	f000 8081 	beq.w	8018ac0 <_dtoa_r+0x4f8>
 80189be:	9b01      	ldr	r3, [sp, #4]
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d07d      	beq.n	8018ac0 <_dtoa_r+0x4f8>
 80189c4:	f1b9 0f00 	cmp.w	r9, #0
 80189c8:	dd3c      	ble.n	8018a44 <_dtoa_r+0x47c>
 80189ca:	f10a 33ff 	add.w	r3, sl, #4294967295
 80189ce:	9307      	str	r3, [sp, #28]
 80189d0:	2200      	movs	r2, #0
 80189d2:	4b91      	ldr	r3, [pc, #580]	; (8018c18 <_dtoa_r+0x650>)
 80189d4:	4630      	mov	r0, r6
 80189d6:	4639      	mov	r1, r7
 80189d8:	f7e7 fe0e 	bl	80005f8 <__aeabi_dmul>
 80189dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80189e0:	3501      	adds	r5, #1
 80189e2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80189e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80189ea:	4628      	mov	r0, r5
 80189ec:	f7e7 fd9a 	bl	8000524 <__aeabi_i2d>
 80189f0:	4632      	mov	r2, r6
 80189f2:	463b      	mov	r3, r7
 80189f4:	f7e7 fe00 	bl	80005f8 <__aeabi_dmul>
 80189f8:	4b88      	ldr	r3, [pc, #544]	; (8018c1c <_dtoa_r+0x654>)
 80189fa:	2200      	movs	r2, #0
 80189fc:	f7e7 fc46 	bl	800028c <__adddf3>
 8018a00:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8018a04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018a08:	9303      	str	r3, [sp, #12]
 8018a0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d15c      	bne.n	8018aca <_dtoa_r+0x502>
 8018a10:	4b83      	ldr	r3, [pc, #524]	; (8018c20 <_dtoa_r+0x658>)
 8018a12:	2200      	movs	r2, #0
 8018a14:	4630      	mov	r0, r6
 8018a16:	4639      	mov	r1, r7
 8018a18:	f7e7 fc36 	bl	8000288 <__aeabi_dsub>
 8018a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018a20:	4606      	mov	r6, r0
 8018a22:	460f      	mov	r7, r1
 8018a24:	f7e8 f878 	bl	8000b18 <__aeabi_dcmpgt>
 8018a28:	2800      	cmp	r0, #0
 8018a2a:	f040 8296 	bne.w	8018f5a <_dtoa_r+0x992>
 8018a2e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8018a32:	4630      	mov	r0, r6
 8018a34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018a38:	4639      	mov	r1, r7
 8018a3a:	f7e8 f84f 	bl	8000adc <__aeabi_dcmplt>
 8018a3e:	2800      	cmp	r0, #0
 8018a40:	f040 8288 	bne.w	8018f54 <_dtoa_r+0x98c>
 8018a44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018a48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018a4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	f2c0 8158 	blt.w	8018d04 <_dtoa_r+0x73c>
 8018a54:	f1ba 0f0e 	cmp.w	sl, #14
 8018a58:	f300 8154 	bgt.w	8018d04 <_dtoa_r+0x73c>
 8018a5c:	4b6b      	ldr	r3, [pc, #428]	; (8018c0c <_dtoa_r+0x644>)
 8018a5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018a62:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	f280 80e3 	bge.w	8018c34 <_dtoa_r+0x66c>
 8018a6e:	9b01      	ldr	r3, [sp, #4]
 8018a70:	2b00      	cmp	r3, #0
 8018a72:	f300 80df 	bgt.w	8018c34 <_dtoa_r+0x66c>
 8018a76:	f040 826d 	bne.w	8018f54 <_dtoa_r+0x98c>
 8018a7a:	4b69      	ldr	r3, [pc, #420]	; (8018c20 <_dtoa_r+0x658>)
 8018a7c:	2200      	movs	r2, #0
 8018a7e:	4640      	mov	r0, r8
 8018a80:	4649      	mov	r1, r9
 8018a82:	f7e7 fdb9 	bl	80005f8 <__aeabi_dmul>
 8018a86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018a8a:	f7e8 f83b 	bl	8000b04 <__aeabi_dcmpge>
 8018a8e:	9e01      	ldr	r6, [sp, #4]
 8018a90:	4637      	mov	r7, r6
 8018a92:	2800      	cmp	r0, #0
 8018a94:	f040 8243 	bne.w	8018f1e <_dtoa_r+0x956>
 8018a98:	9d00      	ldr	r5, [sp, #0]
 8018a9a:	2331      	movs	r3, #49	; 0x31
 8018a9c:	f805 3b01 	strb.w	r3, [r5], #1
 8018aa0:	f10a 0a01 	add.w	sl, sl, #1
 8018aa4:	e23f      	b.n	8018f26 <_dtoa_r+0x95e>
 8018aa6:	07f2      	lsls	r2, r6, #31
 8018aa8:	d505      	bpl.n	8018ab6 <_dtoa_r+0x4ee>
 8018aaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018aae:	f7e7 fda3 	bl	80005f8 <__aeabi_dmul>
 8018ab2:	3501      	adds	r5, #1
 8018ab4:	2301      	movs	r3, #1
 8018ab6:	1076      	asrs	r6, r6, #1
 8018ab8:	3708      	adds	r7, #8
 8018aba:	e76c      	b.n	8018996 <_dtoa_r+0x3ce>
 8018abc:	2502      	movs	r5, #2
 8018abe:	e76f      	b.n	80189a0 <_dtoa_r+0x3d8>
 8018ac0:	9b01      	ldr	r3, [sp, #4]
 8018ac2:	f8cd a01c 	str.w	sl, [sp, #28]
 8018ac6:	930c      	str	r3, [sp, #48]	; 0x30
 8018ac8:	e78d      	b.n	80189e6 <_dtoa_r+0x41e>
 8018aca:	9900      	ldr	r1, [sp, #0]
 8018acc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018ace:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018ad0:	4b4e      	ldr	r3, [pc, #312]	; (8018c0c <_dtoa_r+0x644>)
 8018ad2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018ad6:	4401      	add	r1, r0
 8018ad8:	9102      	str	r1, [sp, #8]
 8018ada:	9908      	ldr	r1, [sp, #32]
 8018adc:	eeb0 8a47 	vmov.f32	s16, s14
 8018ae0:	eef0 8a67 	vmov.f32	s17, s15
 8018ae4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018ae8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018aec:	2900      	cmp	r1, #0
 8018aee:	d045      	beq.n	8018b7c <_dtoa_r+0x5b4>
 8018af0:	494c      	ldr	r1, [pc, #304]	; (8018c24 <_dtoa_r+0x65c>)
 8018af2:	2000      	movs	r0, #0
 8018af4:	f7e7 feaa 	bl	800084c <__aeabi_ddiv>
 8018af8:	ec53 2b18 	vmov	r2, r3, d8
 8018afc:	f7e7 fbc4 	bl	8000288 <__aeabi_dsub>
 8018b00:	9d00      	ldr	r5, [sp, #0]
 8018b02:	ec41 0b18 	vmov	d8, r0, r1
 8018b06:	4639      	mov	r1, r7
 8018b08:	4630      	mov	r0, r6
 8018b0a:	f7e8 f825 	bl	8000b58 <__aeabi_d2iz>
 8018b0e:	900c      	str	r0, [sp, #48]	; 0x30
 8018b10:	f7e7 fd08 	bl	8000524 <__aeabi_i2d>
 8018b14:	4602      	mov	r2, r0
 8018b16:	460b      	mov	r3, r1
 8018b18:	4630      	mov	r0, r6
 8018b1a:	4639      	mov	r1, r7
 8018b1c:	f7e7 fbb4 	bl	8000288 <__aeabi_dsub>
 8018b20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018b22:	3330      	adds	r3, #48	; 0x30
 8018b24:	f805 3b01 	strb.w	r3, [r5], #1
 8018b28:	ec53 2b18 	vmov	r2, r3, d8
 8018b2c:	4606      	mov	r6, r0
 8018b2e:	460f      	mov	r7, r1
 8018b30:	f7e7 ffd4 	bl	8000adc <__aeabi_dcmplt>
 8018b34:	2800      	cmp	r0, #0
 8018b36:	d165      	bne.n	8018c04 <_dtoa_r+0x63c>
 8018b38:	4632      	mov	r2, r6
 8018b3a:	463b      	mov	r3, r7
 8018b3c:	4935      	ldr	r1, [pc, #212]	; (8018c14 <_dtoa_r+0x64c>)
 8018b3e:	2000      	movs	r0, #0
 8018b40:	f7e7 fba2 	bl	8000288 <__aeabi_dsub>
 8018b44:	ec53 2b18 	vmov	r2, r3, d8
 8018b48:	f7e7 ffc8 	bl	8000adc <__aeabi_dcmplt>
 8018b4c:	2800      	cmp	r0, #0
 8018b4e:	f040 80b9 	bne.w	8018cc4 <_dtoa_r+0x6fc>
 8018b52:	9b02      	ldr	r3, [sp, #8]
 8018b54:	429d      	cmp	r5, r3
 8018b56:	f43f af75 	beq.w	8018a44 <_dtoa_r+0x47c>
 8018b5a:	4b2f      	ldr	r3, [pc, #188]	; (8018c18 <_dtoa_r+0x650>)
 8018b5c:	ec51 0b18 	vmov	r0, r1, d8
 8018b60:	2200      	movs	r2, #0
 8018b62:	f7e7 fd49 	bl	80005f8 <__aeabi_dmul>
 8018b66:	4b2c      	ldr	r3, [pc, #176]	; (8018c18 <_dtoa_r+0x650>)
 8018b68:	ec41 0b18 	vmov	d8, r0, r1
 8018b6c:	2200      	movs	r2, #0
 8018b6e:	4630      	mov	r0, r6
 8018b70:	4639      	mov	r1, r7
 8018b72:	f7e7 fd41 	bl	80005f8 <__aeabi_dmul>
 8018b76:	4606      	mov	r6, r0
 8018b78:	460f      	mov	r7, r1
 8018b7a:	e7c4      	b.n	8018b06 <_dtoa_r+0x53e>
 8018b7c:	ec51 0b17 	vmov	r0, r1, d7
 8018b80:	f7e7 fd3a 	bl	80005f8 <__aeabi_dmul>
 8018b84:	9b02      	ldr	r3, [sp, #8]
 8018b86:	9d00      	ldr	r5, [sp, #0]
 8018b88:	930c      	str	r3, [sp, #48]	; 0x30
 8018b8a:	ec41 0b18 	vmov	d8, r0, r1
 8018b8e:	4639      	mov	r1, r7
 8018b90:	4630      	mov	r0, r6
 8018b92:	f7e7 ffe1 	bl	8000b58 <__aeabi_d2iz>
 8018b96:	9011      	str	r0, [sp, #68]	; 0x44
 8018b98:	f7e7 fcc4 	bl	8000524 <__aeabi_i2d>
 8018b9c:	4602      	mov	r2, r0
 8018b9e:	460b      	mov	r3, r1
 8018ba0:	4630      	mov	r0, r6
 8018ba2:	4639      	mov	r1, r7
 8018ba4:	f7e7 fb70 	bl	8000288 <__aeabi_dsub>
 8018ba8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018baa:	3330      	adds	r3, #48	; 0x30
 8018bac:	f805 3b01 	strb.w	r3, [r5], #1
 8018bb0:	9b02      	ldr	r3, [sp, #8]
 8018bb2:	429d      	cmp	r5, r3
 8018bb4:	4606      	mov	r6, r0
 8018bb6:	460f      	mov	r7, r1
 8018bb8:	f04f 0200 	mov.w	r2, #0
 8018bbc:	d134      	bne.n	8018c28 <_dtoa_r+0x660>
 8018bbe:	4b19      	ldr	r3, [pc, #100]	; (8018c24 <_dtoa_r+0x65c>)
 8018bc0:	ec51 0b18 	vmov	r0, r1, d8
 8018bc4:	f7e7 fb62 	bl	800028c <__adddf3>
 8018bc8:	4602      	mov	r2, r0
 8018bca:	460b      	mov	r3, r1
 8018bcc:	4630      	mov	r0, r6
 8018bce:	4639      	mov	r1, r7
 8018bd0:	f7e7 ffa2 	bl	8000b18 <__aeabi_dcmpgt>
 8018bd4:	2800      	cmp	r0, #0
 8018bd6:	d175      	bne.n	8018cc4 <_dtoa_r+0x6fc>
 8018bd8:	ec53 2b18 	vmov	r2, r3, d8
 8018bdc:	4911      	ldr	r1, [pc, #68]	; (8018c24 <_dtoa_r+0x65c>)
 8018bde:	2000      	movs	r0, #0
 8018be0:	f7e7 fb52 	bl	8000288 <__aeabi_dsub>
 8018be4:	4602      	mov	r2, r0
 8018be6:	460b      	mov	r3, r1
 8018be8:	4630      	mov	r0, r6
 8018bea:	4639      	mov	r1, r7
 8018bec:	f7e7 ff76 	bl	8000adc <__aeabi_dcmplt>
 8018bf0:	2800      	cmp	r0, #0
 8018bf2:	f43f af27 	beq.w	8018a44 <_dtoa_r+0x47c>
 8018bf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018bf8:	1e6b      	subs	r3, r5, #1
 8018bfa:	930c      	str	r3, [sp, #48]	; 0x30
 8018bfc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018c00:	2b30      	cmp	r3, #48	; 0x30
 8018c02:	d0f8      	beq.n	8018bf6 <_dtoa_r+0x62e>
 8018c04:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018c08:	e04a      	b.n	8018ca0 <_dtoa_r+0x6d8>
 8018c0a:	bf00      	nop
 8018c0c:	0801aff0 	.word	0x0801aff0
 8018c10:	0801afc8 	.word	0x0801afc8
 8018c14:	3ff00000 	.word	0x3ff00000
 8018c18:	40240000 	.word	0x40240000
 8018c1c:	401c0000 	.word	0x401c0000
 8018c20:	40140000 	.word	0x40140000
 8018c24:	3fe00000 	.word	0x3fe00000
 8018c28:	4baf      	ldr	r3, [pc, #700]	; (8018ee8 <_dtoa_r+0x920>)
 8018c2a:	f7e7 fce5 	bl	80005f8 <__aeabi_dmul>
 8018c2e:	4606      	mov	r6, r0
 8018c30:	460f      	mov	r7, r1
 8018c32:	e7ac      	b.n	8018b8e <_dtoa_r+0x5c6>
 8018c34:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018c38:	9d00      	ldr	r5, [sp, #0]
 8018c3a:	4642      	mov	r2, r8
 8018c3c:	464b      	mov	r3, r9
 8018c3e:	4630      	mov	r0, r6
 8018c40:	4639      	mov	r1, r7
 8018c42:	f7e7 fe03 	bl	800084c <__aeabi_ddiv>
 8018c46:	f7e7 ff87 	bl	8000b58 <__aeabi_d2iz>
 8018c4a:	9002      	str	r0, [sp, #8]
 8018c4c:	f7e7 fc6a 	bl	8000524 <__aeabi_i2d>
 8018c50:	4642      	mov	r2, r8
 8018c52:	464b      	mov	r3, r9
 8018c54:	f7e7 fcd0 	bl	80005f8 <__aeabi_dmul>
 8018c58:	4602      	mov	r2, r0
 8018c5a:	460b      	mov	r3, r1
 8018c5c:	4630      	mov	r0, r6
 8018c5e:	4639      	mov	r1, r7
 8018c60:	f7e7 fb12 	bl	8000288 <__aeabi_dsub>
 8018c64:	9e02      	ldr	r6, [sp, #8]
 8018c66:	9f01      	ldr	r7, [sp, #4]
 8018c68:	3630      	adds	r6, #48	; 0x30
 8018c6a:	f805 6b01 	strb.w	r6, [r5], #1
 8018c6e:	9e00      	ldr	r6, [sp, #0]
 8018c70:	1bae      	subs	r6, r5, r6
 8018c72:	42b7      	cmp	r7, r6
 8018c74:	4602      	mov	r2, r0
 8018c76:	460b      	mov	r3, r1
 8018c78:	d137      	bne.n	8018cea <_dtoa_r+0x722>
 8018c7a:	f7e7 fb07 	bl	800028c <__adddf3>
 8018c7e:	4642      	mov	r2, r8
 8018c80:	464b      	mov	r3, r9
 8018c82:	4606      	mov	r6, r0
 8018c84:	460f      	mov	r7, r1
 8018c86:	f7e7 ff47 	bl	8000b18 <__aeabi_dcmpgt>
 8018c8a:	b9c8      	cbnz	r0, 8018cc0 <_dtoa_r+0x6f8>
 8018c8c:	4642      	mov	r2, r8
 8018c8e:	464b      	mov	r3, r9
 8018c90:	4630      	mov	r0, r6
 8018c92:	4639      	mov	r1, r7
 8018c94:	f7e7 ff18 	bl	8000ac8 <__aeabi_dcmpeq>
 8018c98:	b110      	cbz	r0, 8018ca0 <_dtoa_r+0x6d8>
 8018c9a:	9b02      	ldr	r3, [sp, #8]
 8018c9c:	07d9      	lsls	r1, r3, #31
 8018c9e:	d40f      	bmi.n	8018cc0 <_dtoa_r+0x6f8>
 8018ca0:	4620      	mov	r0, r4
 8018ca2:	4659      	mov	r1, fp
 8018ca4:	f000 fbc6 	bl	8019434 <_Bfree>
 8018ca8:	2300      	movs	r3, #0
 8018caa:	702b      	strb	r3, [r5, #0]
 8018cac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018cae:	f10a 0001 	add.w	r0, sl, #1
 8018cb2:	6018      	str	r0, [r3, #0]
 8018cb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	f43f acd8 	beq.w	801866c <_dtoa_r+0xa4>
 8018cbc:	601d      	str	r5, [r3, #0]
 8018cbe:	e4d5      	b.n	801866c <_dtoa_r+0xa4>
 8018cc0:	f8cd a01c 	str.w	sl, [sp, #28]
 8018cc4:	462b      	mov	r3, r5
 8018cc6:	461d      	mov	r5, r3
 8018cc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018ccc:	2a39      	cmp	r2, #57	; 0x39
 8018cce:	d108      	bne.n	8018ce2 <_dtoa_r+0x71a>
 8018cd0:	9a00      	ldr	r2, [sp, #0]
 8018cd2:	429a      	cmp	r2, r3
 8018cd4:	d1f7      	bne.n	8018cc6 <_dtoa_r+0x6fe>
 8018cd6:	9a07      	ldr	r2, [sp, #28]
 8018cd8:	9900      	ldr	r1, [sp, #0]
 8018cda:	3201      	adds	r2, #1
 8018cdc:	9207      	str	r2, [sp, #28]
 8018cde:	2230      	movs	r2, #48	; 0x30
 8018ce0:	700a      	strb	r2, [r1, #0]
 8018ce2:	781a      	ldrb	r2, [r3, #0]
 8018ce4:	3201      	adds	r2, #1
 8018ce6:	701a      	strb	r2, [r3, #0]
 8018ce8:	e78c      	b.n	8018c04 <_dtoa_r+0x63c>
 8018cea:	4b7f      	ldr	r3, [pc, #508]	; (8018ee8 <_dtoa_r+0x920>)
 8018cec:	2200      	movs	r2, #0
 8018cee:	f7e7 fc83 	bl	80005f8 <__aeabi_dmul>
 8018cf2:	2200      	movs	r2, #0
 8018cf4:	2300      	movs	r3, #0
 8018cf6:	4606      	mov	r6, r0
 8018cf8:	460f      	mov	r7, r1
 8018cfa:	f7e7 fee5 	bl	8000ac8 <__aeabi_dcmpeq>
 8018cfe:	2800      	cmp	r0, #0
 8018d00:	d09b      	beq.n	8018c3a <_dtoa_r+0x672>
 8018d02:	e7cd      	b.n	8018ca0 <_dtoa_r+0x6d8>
 8018d04:	9a08      	ldr	r2, [sp, #32]
 8018d06:	2a00      	cmp	r2, #0
 8018d08:	f000 80c4 	beq.w	8018e94 <_dtoa_r+0x8cc>
 8018d0c:	9a05      	ldr	r2, [sp, #20]
 8018d0e:	2a01      	cmp	r2, #1
 8018d10:	f300 80a8 	bgt.w	8018e64 <_dtoa_r+0x89c>
 8018d14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018d16:	2a00      	cmp	r2, #0
 8018d18:	f000 80a0 	beq.w	8018e5c <_dtoa_r+0x894>
 8018d1c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018d20:	9e06      	ldr	r6, [sp, #24]
 8018d22:	4645      	mov	r5, r8
 8018d24:	9a04      	ldr	r2, [sp, #16]
 8018d26:	2101      	movs	r1, #1
 8018d28:	441a      	add	r2, r3
 8018d2a:	4620      	mov	r0, r4
 8018d2c:	4498      	add	r8, r3
 8018d2e:	9204      	str	r2, [sp, #16]
 8018d30:	f000 fc3c 	bl	80195ac <__i2b>
 8018d34:	4607      	mov	r7, r0
 8018d36:	2d00      	cmp	r5, #0
 8018d38:	dd0b      	ble.n	8018d52 <_dtoa_r+0x78a>
 8018d3a:	9b04      	ldr	r3, [sp, #16]
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	dd08      	ble.n	8018d52 <_dtoa_r+0x78a>
 8018d40:	42ab      	cmp	r3, r5
 8018d42:	9a04      	ldr	r2, [sp, #16]
 8018d44:	bfa8      	it	ge
 8018d46:	462b      	movge	r3, r5
 8018d48:	eba8 0803 	sub.w	r8, r8, r3
 8018d4c:	1aed      	subs	r5, r5, r3
 8018d4e:	1ad3      	subs	r3, r2, r3
 8018d50:	9304      	str	r3, [sp, #16]
 8018d52:	9b06      	ldr	r3, [sp, #24]
 8018d54:	b1fb      	cbz	r3, 8018d96 <_dtoa_r+0x7ce>
 8018d56:	9b08      	ldr	r3, [sp, #32]
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	f000 809f 	beq.w	8018e9c <_dtoa_r+0x8d4>
 8018d5e:	2e00      	cmp	r6, #0
 8018d60:	dd11      	ble.n	8018d86 <_dtoa_r+0x7be>
 8018d62:	4639      	mov	r1, r7
 8018d64:	4632      	mov	r2, r6
 8018d66:	4620      	mov	r0, r4
 8018d68:	f000 fcdc 	bl	8019724 <__pow5mult>
 8018d6c:	465a      	mov	r2, fp
 8018d6e:	4601      	mov	r1, r0
 8018d70:	4607      	mov	r7, r0
 8018d72:	4620      	mov	r0, r4
 8018d74:	f000 fc30 	bl	80195d8 <__multiply>
 8018d78:	4659      	mov	r1, fp
 8018d7a:	9007      	str	r0, [sp, #28]
 8018d7c:	4620      	mov	r0, r4
 8018d7e:	f000 fb59 	bl	8019434 <_Bfree>
 8018d82:	9b07      	ldr	r3, [sp, #28]
 8018d84:	469b      	mov	fp, r3
 8018d86:	9b06      	ldr	r3, [sp, #24]
 8018d88:	1b9a      	subs	r2, r3, r6
 8018d8a:	d004      	beq.n	8018d96 <_dtoa_r+0x7ce>
 8018d8c:	4659      	mov	r1, fp
 8018d8e:	4620      	mov	r0, r4
 8018d90:	f000 fcc8 	bl	8019724 <__pow5mult>
 8018d94:	4683      	mov	fp, r0
 8018d96:	2101      	movs	r1, #1
 8018d98:	4620      	mov	r0, r4
 8018d9a:	f000 fc07 	bl	80195ac <__i2b>
 8018d9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018da0:	2b00      	cmp	r3, #0
 8018da2:	4606      	mov	r6, r0
 8018da4:	dd7c      	ble.n	8018ea0 <_dtoa_r+0x8d8>
 8018da6:	461a      	mov	r2, r3
 8018da8:	4601      	mov	r1, r0
 8018daa:	4620      	mov	r0, r4
 8018dac:	f000 fcba 	bl	8019724 <__pow5mult>
 8018db0:	9b05      	ldr	r3, [sp, #20]
 8018db2:	2b01      	cmp	r3, #1
 8018db4:	4606      	mov	r6, r0
 8018db6:	dd76      	ble.n	8018ea6 <_dtoa_r+0x8de>
 8018db8:	2300      	movs	r3, #0
 8018dba:	9306      	str	r3, [sp, #24]
 8018dbc:	6933      	ldr	r3, [r6, #16]
 8018dbe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018dc2:	6918      	ldr	r0, [r3, #16]
 8018dc4:	f000 fba2 	bl	801950c <__hi0bits>
 8018dc8:	f1c0 0020 	rsb	r0, r0, #32
 8018dcc:	9b04      	ldr	r3, [sp, #16]
 8018dce:	4418      	add	r0, r3
 8018dd0:	f010 001f 	ands.w	r0, r0, #31
 8018dd4:	f000 8086 	beq.w	8018ee4 <_dtoa_r+0x91c>
 8018dd8:	f1c0 0320 	rsb	r3, r0, #32
 8018ddc:	2b04      	cmp	r3, #4
 8018dde:	dd7f      	ble.n	8018ee0 <_dtoa_r+0x918>
 8018de0:	f1c0 001c 	rsb	r0, r0, #28
 8018de4:	9b04      	ldr	r3, [sp, #16]
 8018de6:	4403      	add	r3, r0
 8018de8:	4480      	add	r8, r0
 8018dea:	4405      	add	r5, r0
 8018dec:	9304      	str	r3, [sp, #16]
 8018dee:	f1b8 0f00 	cmp.w	r8, #0
 8018df2:	dd05      	ble.n	8018e00 <_dtoa_r+0x838>
 8018df4:	4659      	mov	r1, fp
 8018df6:	4642      	mov	r2, r8
 8018df8:	4620      	mov	r0, r4
 8018dfa:	f000 fced 	bl	80197d8 <__lshift>
 8018dfe:	4683      	mov	fp, r0
 8018e00:	9b04      	ldr	r3, [sp, #16]
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	dd05      	ble.n	8018e12 <_dtoa_r+0x84a>
 8018e06:	4631      	mov	r1, r6
 8018e08:	461a      	mov	r2, r3
 8018e0a:	4620      	mov	r0, r4
 8018e0c:	f000 fce4 	bl	80197d8 <__lshift>
 8018e10:	4606      	mov	r6, r0
 8018e12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	d069      	beq.n	8018eec <_dtoa_r+0x924>
 8018e18:	4631      	mov	r1, r6
 8018e1a:	4658      	mov	r0, fp
 8018e1c:	f000 fd48 	bl	80198b0 <__mcmp>
 8018e20:	2800      	cmp	r0, #0
 8018e22:	da63      	bge.n	8018eec <_dtoa_r+0x924>
 8018e24:	2300      	movs	r3, #0
 8018e26:	4659      	mov	r1, fp
 8018e28:	220a      	movs	r2, #10
 8018e2a:	4620      	mov	r0, r4
 8018e2c:	f000 fb24 	bl	8019478 <__multadd>
 8018e30:	9b08      	ldr	r3, [sp, #32]
 8018e32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018e36:	4683      	mov	fp, r0
 8018e38:	2b00      	cmp	r3, #0
 8018e3a:	f000 818f 	beq.w	801915c <_dtoa_r+0xb94>
 8018e3e:	4639      	mov	r1, r7
 8018e40:	2300      	movs	r3, #0
 8018e42:	220a      	movs	r2, #10
 8018e44:	4620      	mov	r0, r4
 8018e46:	f000 fb17 	bl	8019478 <__multadd>
 8018e4a:	f1b9 0f00 	cmp.w	r9, #0
 8018e4e:	4607      	mov	r7, r0
 8018e50:	f300 808e 	bgt.w	8018f70 <_dtoa_r+0x9a8>
 8018e54:	9b05      	ldr	r3, [sp, #20]
 8018e56:	2b02      	cmp	r3, #2
 8018e58:	dc50      	bgt.n	8018efc <_dtoa_r+0x934>
 8018e5a:	e089      	b.n	8018f70 <_dtoa_r+0x9a8>
 8018e5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018e5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018e62:	e75d      	b.n	8018d20 <_dtoa_r+0x758>
 8018e64:	9b01      	ldr	r3, [sp, #4]
 8018e66:	1e5e      	subs	r6, r3, #1
 8018e68:	9b06      	ldr	r3, [sp, #24]
 8018e6a:	42b3      	cmp	r3, r6
 8018e6c:	bfbf      	itttt	lt
 8018e6e:	9b06      	ldrlt	r3, [sp, #24]
 8018e70:	9606      	strlt	r6, [sp, #24]
 8018e72:	1af2      	sublt	r2, r6, r3
 8018e74:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8018e76:	bfb6      	itet	lt
 8018e78:	189b      	addlt	r3, r3, r2
 8018e7a:	1b9e      	subge	r6, r3, r6
 8018e7c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8018e7e:	9b01      	ldr	r3, [sp, #4]
 8018e80:	bfb8      	it	lt
 8018e82:	2600      	movlt	r6, #0
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	bfb5      	itete	lt
 8018e88:	eba8 0503 	sublt.w	r5, r8, r3
 8018e8c:	9b01      	ldrge	r3, [sp, #4]
 8018e8e:	2300      	movlt	r3, #0
 8018e90:	4645      	movge	r5, r8
 8018e92:	e747      	b.n	8018d24 <_dtoa_r+0x75c>
 8018e94:	9e06      	ldr	r6, [sp, #24]
 8018e96:	9f08      	ldr	r7, [sp, #32]
 8018e98:	4645      	mov	r5, r8
 8018e9a:	e74c      	b.n	8018d36 <_dtoa_r+0x76e>
 8018e9c:	9a06      	ldr	r2, [sp, #24]
 8018e9e:	e775      	b.n	8018d8c <_dtoa_r+0x7c4>
 8018ea0:	9b05      	ldr	r3, [sp, #20]
 8018ea2:	2b01      	cmp	r3, #1
 8018ea4:	dc18      	bgt.n	8018ed8 <_dtoa_r+0x910>
 8018ea6:	9b02      	ldr	r3, [sp, #8]
 8018ea8:	b9b3      	cbnz	r3, 8018ed8 <_dtoa_r+0x910>
 8018eaa:	9b03      	ldr	r3, [sp, #12]
 8018eac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018eb0:	b9a3      	cbnz	r3, 8018edc <_dtoa_r+0x914>
 8018eb2:	9b03      	ldr	r3, [sp, #12]
 8018eb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018eb8:	0d1b      	lsrs	r3, r3, #20
 8018eba:	051b      	lsls	r3, r3, #20
 8018ebc:	b12b      	cbz	r3, 8018eca <_dtoa_r+0x902>
 8018ebe:	9b04      	ldr	r3, [sp, #16]
 8018ec0:	3301      	adds	r3, #1
 8018ec2:	9304      	str	r3, [sp, #16]
 8018ec4:	f108 0801 	add.w	r8, r8, #1
 8018ec8:	2301      	movs	r3, #1
 8018eca:	9306      	str	r3, [sp, #24]
 8018ecc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	f47f af74 	bne.w	8018dbc <_dtoa_r+0x7f4>
 8018ed4:	2001      	movs	r0, #1
 8018ed6:	e779      	b.n	8018dcc <_dtoa_r+0x804>
 8018ed8:	2300      	movs	r3, #0
 8018eda:	e7f6      	b.n	8018eca <_dtoa_r+0x902>
 8018edc:	9b02      	ldr	r3, [sp, #8]
 8018ede:	e7f4      	b.n	8018eca <_dtoa_r+0x902>
 8018ee0:	d085      	beq.n	8018dee <_dtoa_r+0x826>
 8018ee2:	4618      	mov	r0, r3
 8018ee4:	301c      	adds	r0, #28
 8018ee6:	e77d      	b.n	8018de4 <_dtoa_r+0x81c>
 8018ee8:	40240000 	.word	0x40240000
 8018eec:	9b01      	ldr	r3, [sp, #4]
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	dc38      	bgt.n	8018f64 <_dtoa_r+0x99c>
 8018ef2:	9b05      	ldr	r3, [sp, #20]
 8018ef4:	2b02      	cmp	r3, #2
 8018ef6:	dd35      	ble.n	8018f64 <_dtoa_r+0x99c>
 8018ef8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018efc:	f1b9 0f00 	cmp.w	r9, #0
 8018f00:	d10d      	bne.n	8018f1e <_dtoa_r+0x956>
 8018f02:	4631      	mov	r1, r6
 8018f04:	464b      	mov	r3, r9
 8018f06:	2205      	movs	r2, #5
 8018f08:	4620      	mov	r0, r4
 8018f0a:	f000 fab5 	bl	8019478 <__multadd>
 8018f0e:	4601      	mov	r1, r0
 8018f10:	4606      	mov	r6, r0
 8018f12:	4658      	mov	r0, fp
 8018f14:	f000 fccc 	bl	80198b0 <__mcmp>
 8018f18:	2800      	cmp	r0, #0
 8018f1a:	f73f adbd 	bgt.w	8018a98 <_dtoa_r+0x4d0>
 8018f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f20:	9d00      	ldr	r5, [sp, #0]
 8018f22:	ea6f 0a03 	mvn.w	sl, r3
 8018f26:	f04f 0800 	mov.w	r8, #0
 8018f2a:	4631      	mov	r1, r6
 8018f2c:	4620      	mov	r0, r4
 8018f2e:	f000 fa81 	bl	8019434 <_Bfree>
 8018f32:	2f00      	cmp	r7, #0
 8018f34:	f43f aeb4 	beq.w	8018ca0 <_dtoa_r+0x6d8>
 8018f38:	f1b8 0f00 	cmp.w	r8, #0
 8018f3c:	d005      	beq.n	8018f4a <_dtoa_r+0x982>
 8018f3e:	45b8      	cmp	r8, r7
 8018f40:	d003      	beq.n	8018f4a <_dtoa_r+0x982>
 8018f42:	4641      	mov	r1, r8
 8018f44:	4620      	mov	r0, r4
 8018f46:	f000 fa75 	bl	8019434 <_Bfree>
 8018f4a:	4639      	mov	r1, r7
 8018f4c:	4620      	mov	r0, r4
 8018f4e:	f000 fa71 	bl	8019434 <_Bfree>
 8018f52:	e6a5      	b.n	8018ca0 <_dtoa_r+0x6d8>
 8018f54:	2600      	movs	r6, #0
 8018f56:	4637      	mov	r7, r6
 8018f58:	e7e1      	b.n	8018f1e <_dtoa_r+0x956>
 8018f5a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018f5c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018f60:	4637      	mov	r7, r6
 8018f62:	e599      	b.n	8018a98 <_dtoa_r+0x4d0>
 8018f64:	9b08      	ldr	r3, [sp, #32]
 8018f66:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	f000 80fd 	beq.w	801916a <_dtoa_r+0xba2>
 8018f70:	2d00      	cmp	r5, #0
 8018f72:	dd05      	ble.n	8018f80 <_dtoa_r+0x9b8>
 8018f74:	4639      	mov	r1, r7
 8018f76:	462a      	mov	r2, r5
 8018f78:	4620      	mov	r0, r4
 8018f7a:	f000 fc2d 	bl	80197d8 <__lshift>
 8018f7e:	4607      	mov	r7, r0
 8018f80:	9b06      	ldr	r3, [sp, #24]
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d05c      	beq.n	8019040 <_dtoa_r+0xa78>
 8018f86:	6879      	ldr	r1, [r7, #4]
 8018f88:	4620      	mov	r0, r4
 8018f8a:	f000 fa13 	bl	80193b4 <_Balloc>
 8018f8e:	4605      	mov	r5, r0
 8018f90:	b928      	cbnz	r0, 8018f9e <_dtoa_r+0x9d6>
 8018f92:	4b80      	ldr	r3, [pc, #512]	; (8019194 <_dtoa_r+0xbcc>)
 8018f94:	4602      	mov	r2, r0
 8018f96:	f240 21ea 	movw	r1, #746	; 0x2ea
 8018f9a:	f7ff bb2e 	b.w	80185fa <_dtoa_r+0x32>
 8018f9e:	693a      	ldr	r2, [r7, #16]
 8018fa0:	3202      	adds	r2, #2
 8018fa2:	0092      	lsls	r2, r2, #2
 8018fa4:	f107 010c 	add.w	r1, r7, #12
 8018fa8:	300c      	adds	r0, #12
 8018faa:	f7fe fc7b 	bl	80178a4 <memcpy>
 8018fae:	2201      	movs	r2, #1
 8018fb0:	4629      	mov	r1, r5
 8018fb2:	4620      	mov	r0, r4
 8018fb4:	f000 fc10 	bl	80197d8 <__lshift>
 8018fb8:	9b00      	ldr	r3, [sp, #0]
 8018fba:	3301      	adds	r3, #1
 8018fbc:	9301      	str	r3, [sp, #4]
 8018fbe:	9b00      	ldr	r3, [sp, #0]
 8018fc0:	444b      	add	r3, r9
 8018fc2:	9307      	str	r3, [sp, #28]
 8018fc4:	9b02      	ldr	r3, [sp, #8]
 8018fc6:	f003 0301 	and.w	r3, r3, #1
 8018fca:	46b8      	mov	r8, r7
 8018fcc:	9306      	str	r3, [sp, #24]
 8018fce:	4607      	mov	r7, r0
 8018fd0:	9b01      	ldr	r3, [sp, #4]
 8018fd2:	4631      	mov	r1, r6
 8018fd4:	3b01      	subs	r3, #1
 8018fd6:	4658      	mov	r0, fp
 8018fd8:	9302      	str	r3, [sp, #8]
 8018fda:	f7ff fa67 	bl	80184ac <quorem>
 8018fde:	4603      	mov	r3, r0
 8018fe0:	3330      	adds	r3, #48	; 0x30
 8018fe2:	9004      	str	r0, [sp, #16]
 8018fe4:	4641      	mov	r1, r8
 8018fe6:	4658      	mov	r0, fp
 8018fe8:	9308      	str	r3, [sp, #32]
 8018fea:	f000 fc61 	bl	80198b0 <__mcmp>
 8018fee:	463a      	mov	r2, r7
 8018ff0:	4681      	mov	r9, r0
 8018ff2:	4631      	mov	r1, r6
 8018ff4:	4620      	mov	r0, r4
 8018ff6:	f000 fc77 	bl	80198e8 <__mdiff>
 8018ffa:	68c2      	ldr	r2, [r0, #12]
 8018ffc:	9b08      	ldr	r3, [sp, #32]
 8018ffe:	4605      	mov	r5, r0
 8019000:	bb02      	cbnz	r2, 8019044 <_dtoa_r+0xa7c>
 8019002:	4601      	mov	r1, r0
 8019004:	4658      	mov	r0, fp
 8019006:	f000 fc53 	bl	80198b0 <__mcmp>
 801900a:	9b08      	ldr	r3, [sp, #32]
 801900c:	4602      	mov	r2, r0
 801900e:	4629      	mov	r1, r5
 8019010:	4620      	mov	r0, r4
 8019012:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8019016:	f000 fa0d 	bl	8019434 <_Bfree>
 801901a:	9b05      	ldr	r3, [sp, #20]
 801901c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801901e:	9d01      	ldr	r5, [sp, #4]
 8019020:	ea43 0102 	orr.w	r1, r3, r2
 8019024:	9b06      	ldr	r3, [sp, #24]
 8019026:	430b      	orrs	r3, r1
 8019028:	9b08      	ldr	r3, [sp, #32]
 801902a:	d10d      	bne.n	8019048 <_dtoa_r+0xa80>
 801902c:	2b39      	cmp	r3, #57	; 0x39
 801902e:	d029      	beq.n	8019084 <_dtoa_r+0xabc>
 8019030:	f1b9 0f00 	cmp.w	r9, #0
 8019034:	dd01      	ble.n	801903a <_dtoa_r+0xa72>
 8019036:	9b04      	ldr	r3, [sp, #16]
 8019038:	3331      	adds	r3, #49	; 0x31
 801903a:	9a02      	ldr	r2, [sp, #8]
 801903c:	7013      	strb	r3, [r2, #0]
 801903e:	e774      	b.n	8018f2a <_dtoa_r+0x962>
 8019040:	4638      	mov	r0, r7
 8019042:	e7b9      	b.n	8018fb8 <_dtoa_r+0x9f0>
 8019044:	2201      	movs	r2, #1
 8019046:	e7e2      	b.n	801900e <_dtoa_r+0xa46>
 8019048:	f1b9 0f00 	cmp.w	r9, #0
 801904c:	db06      	blt.n	801905c <_dtoa_r+0xa94>
 801904e:	9905      	ldr	r1, [sp, #20]
 8019050:	ea41 0909 	orr.w	r9, r1, r9
 8019054:	9906      	ldr	r1, [sp, #24]
 8019056:	ea59 0101 	orrs.w	r1, r9, r1
 801905a:	d120      	bne.n	801909e <_dtoa_r+0xad6>
 801905c:	2a00      	cmp	r2, #0
 801905e:	ddec      	ble.n	801903a <_dtoa_r+0xa72>
 8019060:	4659      	mov	r1, fp
 8019062:	2201      	movs	r2, #1
 8019064:	4620      	mov	r0, r4
 8019066:	9301      	str	r3, [sp, #4]
 8019068:	f000 fbb6 	bl	80197d8 <__lshift>
 801906c:	4631      	mov	r1, r6
 801906e:	4683      	mov	fp, r0
 8019070:	f000 fc1e 	bl	80198b0 <__mcmp>
 8019074:	2800      	cmp	r0, #0
 8019076:	9b01      	ldr	r3, [sp, #4]
 8019078:	dc02      	bgt.n	8019080 <_dtoa_r+0xab8>
 801907a:	d1de      	bne.n	801903a <_dtoa_r+0xa72>
 801907c:	07da      	lsls	r2, r3, #31
 801907e:	d5dc      	bpl.n	801903a <_dtoa_r+0xa72>
 8019080:	2b39      	cmp	r3, #57	; 0x39
 8019082:	d1d8      	bne.n	8019036 <_dtoa_r+0xa6e>
 8019084:	9a02      	ldr	r2, [sp, #8]
 8019086:	2339      	movs	r3, #57	; 0x39
 8019088:	7013      	strb	r3, [r2, #0]
 801908a:	462b      	mov	r3, r5
 801908c:	461d      	mov	r5, r3
 801908e:	3b01      	subs	r3, #1
 8019090:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8019094:	2a39      	cmp	r2, #57	; 0x39
 8019096:	d050      	beq.n	801913a <_dtoa_r+0xb72>
 8019098:	3201      	adds	r2, #1
 801909a:	701a      	strb	r2, [r3, #0]
 801909c:	e745      	b.n	8018f2a <_dtoa_r+0x962>
 801909e:	2a00      	cmp	r2, #0
 80190a0:	dd03      	ble.n	80190aa <_dtoa_r+0xae2>
 80190a2:	2b39      	cmp	r3, #57	; 0x39
 80190a4:	d0ee      	beq.n	8019084 <_dtoa_r+0xabc>
 80190a6:	3301      	adds	r3, #1
 80190a8:	e7c7      	b.n	801903a <_dtoa_r+0xa72>
 80190aa:	9a01      	ldr	r2, [sp, #4]
 80190ac:	9907      	ldr	r1, [sp, #28]
 80190ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80190b2:	428a      	cmp	r2, r1
 80190b4:	d02a      	beq.n	801910c <_dtoa_r+0xb44>
 80190b6:	4659      	mov	r1, fp
 80190b8:	2300      	movs	r3, #0
 80190ba:	220a      	movs	r2, #10
 80190bc:	4620      	mov	r0, r4
 80190be:	f000 f9db 	bl	8019478 <__multadd>
 80190c2:	45b8      	cmp	r8, r7
 80190c4:	4683      	mov	fp, r0
 80190c6:	f04f 0300 	mov.w	r3, #0
 80190ca:	f04f 020a 	mov.w	r2, #10
 80190ce:	4641      	mov	r1, r8
 80190d0:	4620      	mov	r0, r4
 80190d2:	d107      	bne.n	80190e4 <_dtoa_r+0xb1c>
 80190d4:	f000 f9d0 	bl	8019478 <__multadd>
 80190d8:	4680      	mov	r8, r0
 80190da:	4607      	mov	r7, r0
 80190dc:	9b01      	ldr	r3, [sp, #4]
 80190de:	3301      	adds	r3, #1
 80190e0:	9301      	str	r3, [sp, #4]
 80190e2:	e775      	b.n	8018fd0 <_dtoa_r+0xa08>
 80190e4:	f000 f9c8 	bl	8019478 <__multadd>
 80190e8:	4639      	mov	r1, r7
 80190ea:	4680      	mov	r8, r0
 80190ec:	2300      	movs	r3, #0
 80190ee:	220a      	movs	r2, #10
 80190f0:	4620      	mov	r0, r4
 80190f2:	f000 f9c1 	bl	8019478 <__multadd>
 80190f6:	4607      	mov	r7, r0
 80190f8:	e7f0      	b.n	80190dc <_dtoa_r+0xb14>
 80190fa:	f1b9 0f00 	cmp.w	r9, #0
 80190fe:	9a00      	ldr	r2, [sp, #0]
 8019100:	bfcc      	ite	gt
 8019102:	464d      	movgt	r5, r9
 8019104:	2501      	movle	r5, #1
 8019106:	4415      	add	r5, r2
 8019108:	f04f 0800 	mov.w	r8, #0
 801910c:	4659      	mov	r1, fp
 801910e:	2201      	movs	r2, #1
 8019110:	4620      	mov	r0, r4
 8019112:	9301      	str	r3, [sp, #4]
 8019114:	f000 fb60 	bl	80197d8 <__lshift>
 8019118:	4631      	mov	r1, r6
 801911a:	4683      	mov	fp, r0
 801911c:	f000 fbc8 	bl	80198b0 <__mcmp>
 8019120:	2800      	cmp	r0, #0
 8019122:	dcb2      	bgt.n	801908a <_dtoa_r+0xac2>
 8019124:	d102      	bne.n	801912c <_dtoa_r+0xb64>
 8019126:	9b01      	ldr	r3, [sp, #4]
 8019128:	07db      	lsls	r3, r3, #31
 801912a:	d4ae      	bmi.n	801908a <_dtoa_r+0xac2>
 801912c:	462b      	mov	r3, r5
 801912e:	461d      	mov	r5, r3
 8019130:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019134:	2a30      	cmp	r2, #48	; 0x30
 8019136:	d0fa      	beq.n	801912e <_dtoa_r+0xb66>
 8019138:	e6f7      	b.n	8018f2a <_dtoa_r+0x962>
 801913a:	9a00      	ldr	r2, [sp, #0]
 801913c:	429a      	cmp	r2, r3
 801913e:	d1a5      	bne.n	801908c <_dtoa_r+0xac4>
 8019140:	f10a 0a01 	add.w	sl, sl, #1
 8019144:	2331      	movs	r3, #49	; 0x31
 8019146:	e779      	b.n	801903c <_dtoa_r+0xa74>
 8019148:	4b13      	ldr	r3, [pc, #76]	; (8019198 <_dtoa_r+0xbd0>)
 801914a:	f7ff baaf 	b.w	80186ac <_dtoa_r+0xe4>
 801914e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019150:	2b00      	cmp	r3, #0
 8019152:	f47f aa86 	bne.w	8018662 <_dtoa_r+0x9a>
 8019156:	4b11      	ldr	r3, [pc, #68]	; (801919c <_dtoa_r+0xbd4>)
 8019158:	f7ff baa8 	b.w	80186ac <_dtoa_r+0xe4>
 801915c:	f1b9 0f00 	cmp.w	r9, #0
 8019160:	dc03      	bgt.n	801916a <_dtoa_r+0xba2>
 8019162:	9b05      	ldr	r3, [sp, #20]
 8019164:	2b02      	cmp	r3, #2
 8019166:	f73f aec9 	bgt.w	8018efc <_dtoa_r+0x934>
 801916a:	9d00      	ldr	r5, [sp, #0]
 801916c:	4631      	mov	r1, r6
 801916e:	4658      	mov	r0, fp
 8019170:	f7ff f99c 	bl	80184ac <quorem>
 8019174:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8019178:	f805 3b01 	strb.w	r3, [r5], #1
 801917c:	9a00      	ldr	r2, [sp, #0]
 801917e:	1aaa      	subs	r2, r5, r2
 8019180:	4591      	cmp	r9, r2
 8019182:	ddba      	ble.n	80190fa <_dtoa_r+0xb32>
 8019184:	4659      	mov	r1, fp
 8019186:	2300      	movs	r3, #0
 8019188:	220a      	movs	r2, #10
 801918a:	4620      	mov	r0, r4
 801918c:	f000 f974 	bl	8019478 <__multadd>
 8019190:	4683      	mov	fp, r0
 8019192:	e7eb      	b.n	801916c <_dtoa_r+0xba4>
 8019194:	0801aef3 	.word	0x0801aef3
 8019198:	0801ae4c 	.word	0x0801ae4c
 801919c:	0801ae70 	.word	0x0801ae70

080191a0 <std>:
 80191a0:	2300      	movs	r3, #0
 80191a2:	b510      	push	{r4, lr}
 80191a4:	4604      	mov	r4, r0
 80191a6:	e9c0 3300 	strd	r3, r3, [r0]
 80191aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80191ae:	6083      	str	r3, [r0, #8]
 80191b0:	8181      	strh	r1, [r0, #12]
 80191b2:	6643      	str	r3, [r0, #100]	; 0x64
 80191b4:	81c2      	strh	r2, [r0, #14]
 80191b6:	6183      	str	r3, [r0, #24]
 80191b8:	4619      	mov	r1, r3
 80191ba:	2208      	movs	r2, #8
 80191bc:	305c      	adds	r0, #92	; 0x5c
 80191be:	f7fe fb99 	bl	80178f4 <memset>
 80191c2:	4b05      	ldr	r3, [pc, #20]	; (80191d8 <std+0x38>)
 80191c4:	6263      	str	r3, [r4, #36]	; 0x24
 80191c6:	4b05      	ldr	r3, [pc, #20]	; (80191dc <std+0x3c>)
 80191c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80191ca:	4b05      	ldr	r3, [pc, #20]	; (80191e0 <std+0x40>)
 80191cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80191ce:	4b05      	ldr	r3, [pc, #20]	; (80191e4 <std+0x44>)
 80191d0:	6224      	str	r4, [r4, #32]
 80191d2:	6323      	str	r3, [r4, #48]	; 0x30
 80191d4:	bd10      	pop	{r4, pc}
 80191d6:	bf00      	nop
 80191d8:	0801a039 	.word	0x0801a039
 80191dc:	0801a05b 	.word	0x0801a05b
 80191e0:	0801a093 	.word	0x0801a093
 80191e4:	0801a0b7 	.word	0x0801a0b7

080191e8 <_cleanup_r>:
 80191e8:	4901      	ldr	r1, [pc, #4]	; (80191f0 <_cleanup_r+0x8>)
 80191ea:	f000 b8af 	b.w	801934c <_fwalk_reent>
 80191ee:	bf00      	nop
 80191f0:	0801a3cd 	.word	0x0801a3cd

080191f4 <__sfmoreglue>:
 80191f4:	b570      	push	{r4, r5, r6, lr}
 80191f6:	1e4a      	subs	r2, r1, #1
 80191f8:	2568      	movs	r5, #104	; 0x68
 80191fa:	4355      	muls	r5, r2
 80191fc:	460e      	mov	r6, r1
 80191fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019202:	f7fe fbcf 	bl	80179a4 <_malloc_r>
 8019206:	4604      	mov	r4, r0
 8019208:	b140      	cbz	r0, 801921c <__sfmoreglue+0x28>
 801920a:	2100      	movs	r1, #0
 801920c:	e9c0 1600 	strd	r1, r6, [r0]
 8019210:	300c      	adds	r0, #12
 8019212:	60a0      	str	r0, [r4, #8]
 8019214:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019218:	f7fe fb6c 	bl	80178f4 <memset>
 801921c:	4620      	mov	r0, r4
 801921e:	bd70      	pop	{r4, r5, r6, pc}

08019220 <__sfp_lock_acquire>:
 8019220:	4801      	ldr	r0, [pc, #4]	; (8019228 <__sfp_lock_acquire+0x8>)
 8019222:	f000 b8b8 	b.w	8019396 <__retarget_lock_acquire_recursive>
 8019226:	bf00      	nop
 8019228:	20001a00 	.word	0x20001a00

0801922c <__sfp_lock_release>:
 801922c:	4801      	ldr	r0, [pc, #4]	; (8019234 <__sfp_lock_release+0x8>)
 801922e:	f000 b8b3 	b.w	8019398 <__retarget_lock_release_recursive>
 8019232:	bf00      	nop
 8019234:	20001a00 	.word	0x20001a00

08019238 <__sinit_lock_acquire>:
 8019238:	4801      	ldr	r0, [pc, #4]	; (8019240 <__sinit_lock_acquire+0x8>)
 801923a:	f000 b8ac 	b.w	8019396 <__retarget_lock_acquire_recursive>
 801923e:	bf00      	nop
 8019240:	200019fb 	.word	0x200019fb

08019244 <__sinit_lock_release>:
 8019244:	4801      	ldr	r0, [pc, #4]	; (801924c <__sinit_lock_release+0x8>)
 8019246:	f000 b8a7 	b.w	8019398 <__retarget_lock_release_recursive>
 801924a:	bf00      	nop
 801924c:	200019fb 	.word	0x200019fb

08019250 <__sinit>:
 8019250:	b510      	push	{r4, lr}
 8019252:	4604      	mov	r4, r0
 8019254:	f7ff fff0 	bl	8019238 <__sinit_lock_acquire>
 8019258:	69a3      	ldr	r3, [r4, #24]
 801925a:	b11b      	cbz	r3, 8019264 <__sinit+0x14>
 801925c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019260:	f7ff bff0 	b.w	8019244 <__sinit_lock_release>
 8019264:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019268:	6523      	str	r3, [r4, #80]	; 0x50
 801926a:	4b13      	ldr	r3, [pc, #76]	; (80192b8 <__sinit+0x68>)
 801926c:	4a13      	ldr	r2, [pc, #76]	; (80192bc <__sinit+0x6c>)
 801926e:	681b      	ldr	r3, [r3, #0]
 8019270:	62a2      	str	r2, [r4, #40]	; 0x28
 8019272:	42a3      	cmp	r3, r4
 8019274:	bf04      	itt	eq
 8019276:	2301      	moveq	r3, #1
 8019278:	61a3      	streq	r3, [r4, #24]
 801927a:	4620      	mov	r0, r4
 801927c:	f000 f820 	bl	80192c0 <__sfp>
 8019280:	6060      	str	r0, [r4, #4]
 8019282:	4620      	mov	r0, r4
 8019284:	f000 f81c 	bl	80192c0 <__sfp>
 8019288:	60a0      	str	r0, [r4, #8]
 801928a:	4620      	mov	r0, r4
 801928c:	f000 f818 	bl	80192c0 <__sfp>
 8019290:	2200      	movs	r2, #0
 8019292:	60e0      	str	r0, [r4, #12]
 8019294:	2104      	movs	r1, #4
 8019296:	6860      	ldr	r0, [r4, #4]
 8019298:	f7ff ff82 	bl	80191a0 <std>
 801929c:	68a0      	ldr	r0, [r4, #8]
 801929e:	2201      	movs	r2, #1
 80192a0:	2109      	movs	r1, #9
 80192a2:	f7ff ff7d 	bl	80191a0 <std>
 80192a6:	68e0      	ldr	r0, [r4, #12]
 80192a8:	2202      	movs	r2, #2
 80192aa:	2112      	movs	r1, #18
 80192ac:	f7ff ff78 	bl	80191a0 <std>
 80192b0:	2301      	movs	r3, #1
 80192b2:	61a3      	str	r3, [r4, #24]
 80192b4:	e7d2      	b.n	801925c <__sinit+0xc>
 80192b6:	bf00      	nop
 80192b8:	0801ae38 	.word	0x0801ae38
 80192bc:	080191e9 	.word	0x080191e9

080192c0 <__sfp>:
 80192c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192c2:	4607      	mov	r7, r0
 80192c4:	f7ff ffac 	bl	8019220 <__sfp_lock_acquire>
 80192c8:	4b1e      	ldr	r3, [pc, #120]	; (8019344 <__sfp+0x84>)
 80192ca:	681e      	ldr	r6, [r3, #0]
 80192cc:	69b3      	ldr	r3, [r6, #24]
 80192ce:	b913      	cbnz	r3, 80192d6 <__sfp+0x16>
 80192d0:	4630      	mov	r0, r6
 80192d2:	f7ff ffbd 	bl	8019250 <__sinit>
 80192d6:	3648      	adds	r6, #72	; 0x48
 80192d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80192dc:	3b01      	subs	r3, #1
 80192de:	d503      	bpl.n	80192e8 <__sfp+0x28>
 80192e0:	6833      	ldr	r3, [r6, #0]
 80192e2:	b30b      	cbz	r3, 8019328 <__sfp+0x68>
 80192e4:	6836      	ldr	r6, [r6, #0]
 80192e6:	e7f7      	b.n	80192d8 <__sfp+0x18>
 80192e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80192ec:	b9d5      	cbnz	r5, 8019324 <__sfp+0x64>
 80192ee:	4b16      	ldr	r3, [pc, #88]	; (8019348 <__sfp+0x88>)
 80192f0:	60e3      	str	r3, [r4, #12]
 80192f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80192f6:	6665      	str	r5, [r4, #100]	; 0x64
 80192f8:	f000 f84c 	bl	8019394 <__retarget_lock_init_recursive>
 80192fc:	f7ff ff96 	bl	801922c <__sfp_lock_release>
 8019300:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019304:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019308:	6025      	str	r5, [r4, #0]
 801930a:	61a5      	str	r5, [r4, #24]
 801930c:	2208      	movs	r2, #8
 801930e:	4629      	mov	r1, r5
 8019310:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019314:	f7fe faee 	bl	80178f4 <memset>
 8019318:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801931c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019320:	4620      	mov	r0, r4
 8019322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019324:	3468      	adds	r4, #104	; 0x68
 8019326:	e7d9      	b.n	80192dc <__sfp+0x1c>
 8019328:	2104      	movs	r1, #4
 801932a:	4638      	mov	r0, r7
 801932c:	f7ff ff62 	bl	80191f4 <__sfmoreglue>
 8019330:	4604      	mov	r4, r0
 8019332:	6030      	str	r0, [r6, #0]
 8019334:	2800      	cmp	r0, #0
 8019336:	d1d5      	bne.n	80192e4 <__sfp+0x24>
 8019338:	f7ff ff78 	bl	801922c <__sfp_lock_release>
 801933c:	230c      	movs	r3, #12
 801933e:	603b      	str	r3, [r7, #0]
 8019340:	e7ee      	b.n	8019320 <__sfp+0x60>
 8019342:	bf00      	nop
 8019344:	0801ae38 	.word	0x0801ae38
 8019348:	ffff0001 	.word	0xffff0001

0801934c <_fwalk_reent>:
 801934c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019350:	4606      	mov	r6, r0
 8019352:	4688      	mov	r8, r1
 8019354:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019358:	2700      	movs	r7, #0
 801935a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801935e:	f1b9 0901 	subs.w	r9, r9, #1
 8019362:	d505      	bpl.n	8019370 <_fwalk_reent+0x24>
 8019364:	6824      	ldr	r4, [r4, #0]
 8019366:	2c00      	cmp	r4, #0
 8019368:	d1f7      	bne.n	801935a <_fwalk_reent+0xe>
 801936a:	4638      	mov	r0, r7
 801936c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019370:	89ab      	ldrh	r3, [r5, #12]
 8019372:	2b01      	cmp	r3, #1
 8019374:	d907      	bls.n	8019386 <_fwalk_reent+0x3a>
 8019376:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801937a:	3301      	adds	r3, #1
 801937c:	d003      	beq.n	8019386 <_fwalk_reent+0x3a>
 801937e:	4629      	mov	r1, r5
 8019380:	4630      	mov	r0, r6
 8019382:	47c0      	blx	r8
 8019384:	4307      	orrs	r7, r0
 8019386:	3568      	adds	r5, #104	; 0x68
 8019388:	e7e9      	b.n	801935e <_fwalk_reent+0x12>
	...

0801938c <_localeconv_r>:
 801938c:	4800      	ldr	r0, [pc, #0]	; (8019390 <_localeconv_r+0x4>)
 801938e:	4770      	bx	lr
 8019390:	20000244 	.word	0x20000244

08019394 <__retarget_lock_init_recursive>:
 8019394:	4770      	bx	lr

08019396 <__retarget_lock_acquire_recursive>:
 8019396:	4770      	bx	lr

08019398 <__retarget_lock_release_recursive>:
 8019398:	4770      	bx	lr
	...

0801939c <__malloc_lock>:
 801939c:	4801      	ldr	r0, [pc, #4]	; (80193a4 <__malloc_lock+0x8>)
 801939e:	f7ff bffa 	b.w	8019396 <__retarget_lock_acquire_recursive>
 80193a2:	bf00      	nop
 80193a4:	200019fc 	.word	0x200019fc

080193a8 <__malloc_unlock>:
 80193a8:	4801      	ldr	r0, [pc, #4]	; (80193b0 <__malloc_unlock+0x8>)
 80193aa:	f7ff bff5 	b.w	8019398 <__retarget_lock_release_recursive>
 80193ae:	bf00      	nop
 80193b0:	200019fc 	.word	0x200019fc

080193b4 <_Balloc>:
 80193b4:	b570      	push	{r4, r5, r6, lr}
 80193b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80193b8:	4604      	mov	r4, r0
 80193ba:	460d      	mov	r5, r1
 80193bc:	b976      	cbnz	r6, 80193dc <_Balloc+0x28>
 80193be:	2010      	movs	r0, #16
 80193c0:	f7fe fa60 	bl	8017884 <malloc>
 80193c4:	4602      	mov	r2, r0
 80193c6:	6260      	str	r0, [r4, #36]	; 0x24
 80193c8:	b920      	cbnz	r0, 80193d4 <_Balloc+0x20>
 80193ca:	4b18      	ldr	r3, [pc, #96]	; (801942c <_Balloc+0x78>)
 80193cc:	4818      	ldr	r0, [pc, #96]	; (8019430 <_Balloc+0x7c>)
 80193ce:	2166      	movs	r1, #102	; 0x66
 80193d0:	f000 ff48 	bl	801a264 <__assert_func>
 80193d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80193d8:	6006      	str	r6, [r0, #0]
 80193da:	60c6      	str	r6, [r0, #12]
 80193dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80193de:	68f3      	ldr	r3, [r6, #12]
 80193e0:	b183      	cbz	r3, 8019404 <_Balloc+0x50>
 80193e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80193e4:	68db      	ldr	r3, [r3, #12]
 80193e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80193ea:	b9b8      	cbnz	r0, 801941c <_Balloc+0x68>
 80193ec:	2101      	movs	r1, #1
 80193ee:	fa01 f605 	lsl.w	r6, r1, r5
 80193f2:	1d72      	adds	r2, r6, #5
 80193f4:	0092      	lsls	r2, r2, #2
 80193f6:	4620      	mov	r0, r4
 80193f8:	f000 fb5a 	bl	8019ab0 <_calloc_r>
 80193fc:	b160      	cbz	r0, 8019418 <_Balloc+0x64>
 80193fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8019402:	e00e      	b.n	8019422 <_Balloc+0x6e>
 8019404:	2221      	movs	r2, #33	; 0x21
 8019406:	2104      	movs	r1, #4
 8019408:	4620      	mov	r0, r4
 801940a:	f000 fb51 	bl	8019ab0 <_calloc_r>
 801940e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019410:	60f0      	str	r0, [r6, #12]
 8019412:	68db      	ldr	r3, [r3, #12]
 8019414:	2b00      	cmp	r3, #0
 8019416:	d1e4      	bne.n	80193e2 <_Balloc+0x2e>
 8019418:	2000      	movs	r0, #0
 801941a:	bd70      	pop	{r4, r5, r6, pc}
 801941c:	6802      	ldr	r2, [r0, #0]
 801941e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019422:	2300      	movs	r3, #0
 8019424:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019428:	e7f7      	b.n	801941a <_Balloc+0x66>
 801942a:	bf00      	nop
 801942c:	0801ae7d 	.word	0x0801ae7d
 8019430:	0801af64 	.word	0x0801af64

08019434 <_Bfree>:
 8019434:	b570      	push	{r4, r5, r6, lr}
 8019436:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019438:	4605      	mov	r5, r0
 801943a:	460c      	mov	r4, r1
 801943c:	b976      	cbnz	r6, 801945c <_Bfree+0x28>
 801943e:	2010      	movs	r0, #16
 8019440:	f7fe fa20 	bl	8017884 <malloc>
 8019444:	4602      	mov	r2, r0
 8019446:	6268      	str	r0, [r5, #36]	; 0x24
 8019448:	b920      	cbnz	r0, 8019454 <_Bfree+0x20>
 801944a:	4b09      	ldr	r3, [pc, #36]	; (8019470 <_Bfree+0x3c>)
 801944c:	4809      	ldr	r0, [pc, #36]	; (8019474 <_Bfree+0x40>)
 801944e:	218a      	movs	r1, #138	; 0x8a
 8019450:	f000 ff08 	bl	801a264 <__assert_func>
 8019454:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019458:	6006      	str	r6, [r0, #0]
 801945a:	60c6      	str	r6, [r0, #12]
 801945c:	b13c      	cbz	r4, 801946e <_Bfree+0x3a>
 801945e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019460:	6862      	ldr	r2, [r4, #4]
 8019462:	68db      	ldr	r3, [r3, #12]
 8019464:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019468:	6021      	str	r1, [r4, #0]
 801946a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801946e:	bd70      	pop	{r4, r5, r6, pc}
 8019470:	0801ae7d 	.word	0x0801ae7d
 8019474:	0801af64 	.word	0x0801af64

08019478 <__multadd>:
 8019478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801947c:	690e      	ldr	r6, [r1, #16]
 801947e:	4607      	mov	r7, r0
 8019480:	4698      	mov	r8, r3
 8019482:	460c      	mov	r4, r1
 8019484:	f101 0014 	add.w	r0, r1, #20
 8019488:	2300      	movs	r3, #0
 801948a:	6805      	ldr	r5, [r0, #0]
 801948c:	b2a9      	uxth	r1, r5
 801948e:	fb02 8101 	mla	r1, r2, r1, r8
 8019492:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8019496:	0c2d      	lsrs	r5, r5, #16
 8019498:	fb02 c505 	mla	r5, r2, r5, ip
 801949c:	b289      	uxth	r1, r1
 801949e:	3301      	adds	r3, #1
 80194a0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80194a4:	429e      	cmp	r6, r3
 80194a6:	f840 1b04 	str.w	r1, [r0], #4
 80194aa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80194ae:	dcec      	bgt.n	801948a <__multadd+0x12>
 80194b0:	f1b8 0f00 	cmp.w	r8, #0
 80194b4:	d022      	beq.n	80194fc <__multadd+0x84>
 80194b6:	68a3      	ldr	r3, [r4, #8]
 80194b8:	42b3      	cmp	r3, r6
 80194ba:	dc19      	bgt.n	80194f0 <__multadd+0x78>
 80194bc:	6861      	ldr	r1, [r4, #4]
 80194be:	4638      	mov	r0, r7
 80194c0:	3101      	adds	r1, #1
 80194c2:	f7ff ff77 	bl	80193b4 <_Balloc>
 80194c6:	4605      	mov	r5, r0
 80194c8:	b928      	cbnz	r0, 80194d6 <__multadd+0x5e>
 80194ca:	4602      	mov	r2, r0
 80194cc:	4b0d      	ldr	r3, [pc, #52]	; (8019504 <__multadd+0x8c>)
 80194ce:	480e      	ldr	r0, [pc, #56]	; (8019508 <__multadd+0x90>)
 80194d0:	21b5      	movs	r1, #181	; 0xb5
 80194d2:	f000 fec7 	bl	801a264 <__assert_func>
 80194d6:	6922      	ldr	r2, [r4, #16]
 80194d8:	3202      	adds	r2, #2
 80194da:	f104 010c 	add.w	r1, r4, #12
 80194de:	0092      	lsls	r2, r2, #2
 80194e0:	300c      	adds	r0, #12
 80194e2:	f7fe f9df 	bl	80178a4 <memcpy>
 80194e6:	4621      	mov	r1, r4
 80194e8:	4638      	mov	r0, r7
 80194ea:	f7ff ffa3 	bl	8019434 <_Bfree>
 80194ee:	462c      	mov	r4, r5
 80194f0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80194f4:	3601      	adds	r6, #1
 80194f6:	f8c3 8014 	str.w	r8, [r3, #20]
 80194fa:	6126      	str	r6, [r4, #16]
 80194fc:	4620      	mov	r0, r4
 80194fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019502:	bf00      	nop
 8019504:	0801aef3 	.word	0x0801aef3
 8019508:	0801af64 	.word	0x0801af64

0801950c <__hi0bits>:
 801950c:	0c03      	lsrs	r3, r0, #16
 801950e:	041b      	lsls	r3, r3, #16
 8019510:	b9d3      	cbnz	r3, 8019548 <__hi0bits+0x3c>
 8019512:	0400      	lsls	r0, r0, #16
 8019514:	2310      	movs	r3, #16
 8019516:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801951a:	bf04      	itt	eq
 801951c:	0200      	lsleq	r0, r0, #8
 801951e:	3308      	addeq	r3, #8
 8019520:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019524:	bf04      	itt	eq
 8019526:	0100      	lsleq	r0, r0, #4
 8019528:	3304      	addeq	r3, #4
 801952a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801952e:	bf04      	itt	eq
 8019530:	0080      	lsleq	r0, r0, #2
 8019532:	3302      	addeq	r3, #2
 8019534:	2800      	cmp	r0, #0
 8019536:	db05      	blt.n	8019544 <__hi0bits+0x38>
 8019538:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801953c:	f103 0301 	add.w	r3, r3, #1
 8019540:	bf08      	it	eq
 8019542:	2320      	moveq	r3, #32
 8019544:	4618      	mov	r0, r3
 8019546:	4770      	bx	lr
 8019548:	2300      	movs	r3, #0
 801954a:	e7e4      	b.n	8019516 <__hi0bits+0xa>

0801954c <__lo0bits>:
 801954c:	6803      	ldr	r3, [r0, #0]
 801954e:	f013 0207 	ands.w	r2, r3, #7
 8019552:	4601      	mov	r1, r0
 8019554:	d00b      	beq.n	801956e <__lo0bits+0x22>
 8019556:	07da      	lsls	r2, r3, #31
 8019558:	d424      	bmi.n	80195a4 <__lo0bits+0x58>
 801955a:	0798      	lsls	r0, r3, #30
 801955c:	bf49      	itett	mi
 801955e:	085b      	lsrmi	r3, r3, #1
 8019560:	089b      	lsrpl	r3, r3, #2
 8019562:	2001      	movmi	r0, #1
 8019564:	600b      	strmi	r3, [r1, #0]
 8019566:	bf5c      	itt	pl
 8019568:	600b      	strpl	r3, [r1, #0]
 801956a:	2002      	movpl	r0, #2
 801956c:	4770      	bx	lr
 801956e:	b298      	uxth	r0, r3
 8019570:	b9b0      	cbnz	r0, 80195a0 <__lo0bits+0x54>
 8019572:	0c1b      	lsrs	r3, r3, #16
 8019574:	2010      	movs	r0, #16
 8019576:	f013 0fff 	tst.w	r3, #255	; 0xff
 801957a:	bf04      	itt	eq
 801957c:	0a1b      	lsreq	r3, r3, #8
 801957e:	3008      	addeq	r0, #8
 8019580:	071a      	lsls	r2, r3, #28
 8019582:	bf04      	itt	eq
 8019584:	091b      	lsreq	r3, r3, #4
 8019586:	3004      	addeq	r0, #4
 8019588:	079a      	lsls	r2, r3, #30
 801958a:	bf04      	itt	eq
 801958c:	089b      	lsreq	r3, r3, #2
 801958e:	3002      	addeq	r0, #2
 8019590:	07da      	lsls	r2, r3, #31
 8019592:	d403      	bmi.n	801959c <__lo0bits+0x50>
 8019594:	085b      	lsrs	r3, r3, #1
 8019596:	f100 0001 	add.w	r0, r0, #1
 801959a:	d005      	beq.n	80195a8 <__lo0bits+0x5c>
 801959c:	600b      	str	r3, [r1, #0]
 801959e:	4770      	bx	lr
 80195a0:	4610      	mov	r0, r2
 80195a2:	e7e8      	b.n	8019576 <__lo0bits+0x2a>
 80195a4:	2000      	movs	r0, #0
 80195a6:	4770      	bx	lr
 80195a8:	2020      	movs	r0, #32
 80195aa:	4770      	bx	lr

080195ac <__i2b>:
 80195ac:	b510      	push	{r4, lr}
 80195ae:	460c      	mov	r4, r1
 80195b0:	2101      	movs	r1, #1
 80195b2:	f7ff feff 	bl	80193b4 <_Balloc>
 80195b6:	4602      	mov	r2, r0
 80195b8:	b928      	cbnz	r0, 80195c6 <__i2b+0x1a>
 80195ba:	4b05      	ldr	r3, [pc, #20]	; (80195d0 <__i2b+0x24>)
 80195bc:	4805      	ldr	r0, [pc, #20]	; (80195d4 <__i2b+0x28>)
 80195be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80195c2:	f000 fe4f 	bl	801a264 <__assert_func>
 80195c6:	2301      	movs	r3, #1
 80195c8:	6144      	str	r4, [r0, #20]
 80195ca:	6103      	str	r3, [r0, #16]
 80195cc:	bd10      	pop	{r4, pc}
 80195ce:	bf00      	nop
 80195d0:	0801aef3 	.word	0x0801aef3
 80195d4:	0801af64 	.word	0x0801af64

080195d8 <__multiply>:
 80195d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195dc:	4614      	mov	r4, r2
 80195de:	690a      	ldr	r2, [r1, #16]
 80195e0:	6923      	ldr	r3, [r4, #16]
 80195e2:	429a      	cmp	r2, r3
 80195e4:	bfb8      	it	lt
 80195e6:	460b      	movlt	r3, r1
 80195e8:	460d      	mov	r5, r1
 80195ea:	bfbc      	itt	lt
 80195ec:	4625      	movlt	r5, r4
 80195ee:	461c      	movlt	r4, r3
 80195f0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80195f4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80195f8:	68ab      	ldr	r3, [r5, #8]
 80195fa:	6869      	ldr	r1, [r5, #4]
 80195fc:	eb0a 0709 	add.w	r7, sl, r9
 8019600:	42bb      	cmp	r3, r7
 8019602:	b085      	sub	sp, #20
 8019604:	bfb8      	it	lt
 8019606:	3101      	addlt	r1, #1
 8019608:	f7ff fed4 	bl	80193b4 <_Balloc>
 801960c:	b930      	cbnz	r0, 801961c <__multiply+0x44>
 801960e:	4602      	mov	r2, r0
 8019610:	4b42      	ldr	r3, [pc, #264]	; (801971c <__multiply+0x144>)
 8019612:	4843      	ldr	r0, [pc, #268]	; (8019720 <__multiply+0x148>)
 8019614:	f240 115d 	movw	r1, #349	; 0x15d
 8019618:	f000 fe24 	bl	801a264 <__assert_func>
 801961c:	f100 0614 	add.w	r6, r0, #20
 8019620:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8019624:	4633      	mov	r3, r6
 8019626:	2200      	movs	r2, #0
 8019628:	4543      	cmp	r3, r8
 801962a:	d31e      	bcc.n	801966a <__multiply+0x92>
 801962c:	f105 0c14 	add.w	ip, r5, #20
 8019630:	f104 0314 	add.w	r3, r4, #20
 8019634:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8019638:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801963c:	9202      	str	r2, [sp, #8]
 801963e:	ebac 0205 	sub.w	r2, ip, r5
 8019642:	3a15      	subs	r2, #21
 8019644:	f022 0203 	bic.w	r2, r2, #3
 8019648:	3204      	adds	r2, #4
 801964a:	f105 0115 	add.w	r1, r5, #21
 801964e:	458c      	cmp	ip, r1
 8019650:	bf38      	it	cc
 8019652:	2204      	movcc	r2, #4
 8019654:	9201      	str	r2, [sp, #4]
 8019656:	9a02      	ldr	r2, [sp, #8]
 8019658:	9303      	str	r3, [sp, #12]
 801965a:	429a      	cmp	r2, r3
 801965c:	d808      	bhi.n	8019670 <__multiply+0x98>
 801965e:	2f00      	cmp	r7, #0
 8019660:	dc55      	bgt.n	801970e <__multiply+0x136>
 8019662:	6107      	str	r7, [r0, #16]
 8019664:	b005      	add	sp, #20
 8019666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801966a:	f843 2b04 	str.w	r2, [r3], #4
 801966e:	e7db      	b.n	8019628 <__multiply+0x50>
 8019670:	f8b3 a000 	ldrh.w	sl, [r3]
 8019674:	f1ba 0f00 	cmp.w	sl, #0
 8019678:	d020      	beq.n	80196bc <__multiply+0xe4>
 801967a:	f105 0e14 	add.w	lr, r5, #20
 801967e:	46b1      	mov	r9, r6
 8019680:	2200      	movs	r2, #0
 8019682:	f85e 4b04 	ldr.w	r4, [lr], #4
 8019686:	f8d9 b000 	ldr.w	fp, [r9]
 801968a:	b2a1      	uxth	r1, r4
 801968c:	fa1f fb8b 	uxth.w	fp, fp
 8019690:	fb0a b101 	mla	r1, sl, r1, fp
 8019694:	4411      	add	r1, r2
 8019696:	f8d9 2000 	ldr.w	r2, [r9]
 801969a:	0c24      	lsrs	r4, r4, #16
 801969c:	0c12      	lsrs	r2, r2, #16
 801969e:	fb0a 2404 	mla	r4, sl, r4, r2
 80196a2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80196a6:	b289      	uxth	r1, r1
 80196a8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80196ac:	45f4      	cmp	ip, lr
 80196ae:	f849 1b04 	str.w	r1, [r9], #4
 80196b2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80196b6:	d8e4      	bhi.n	8019682 <__multiply+0xaa>
 80196b8:	9901      	ldr	r1, [sp, #4]
 80196ba:	5072      	str	r2, [r6, r1]
 80196bc:	9a03      	ldr	r2, [sp, #12]
 80196be:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80196c2:	3304      	adds	r3, #4
 80196c4:	f1b9 0f00 	cmp.w	r9, #0
 80196c8:	d01f      	beq.n	801970a <__multiply+0x132>
 80196ca:	6834      	ldr	r4, [r6, #0]
 80196cc:	f105 0114 	add.w	r1, r5, #20
 80196d0:	46b6      	mov	lr, r6
 80196d2:	f04f 0a00 	mov.w	sl, #0
 80196d6:	880a      	ldrh	r2, [r1, #0]
 80196d8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80196dc:	fb09 b202 	mla	r2, r9, r2, fp
 80196e0:	4492      	add	sl, r2
 80196e2:	b2a4      	uxth	r4, r4
 80196e4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80196e8:	f84e 4b04 	str.w	r4, [lr], #4
 80196ec:	f851 4b04 	ldr.w	r4, [r1], #4
 80196f0:	f8be 2000 	ldrh.w	r2, [lr]
 80196f4:	0c24      	lsrs	r4, r4, #16
 80196f6:	fb09 2404 	mla	r4, r9, r4, r2
 80196fa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80196fe:	458c      	cmp	ip, r1
 8019700:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8019704:	d8e7      	bhi.n	80196d6 <__multiply+0xfe>
 8019706:	9a01      	ldr	r2, [sp, #4]
 8019708:	50b4      	str	r4, [r6, r2]
 801970a:	3604      	adds	r6, #4
 801970c:	e7a3      	b.n	8019656 <__multiply+0x7e>
 801970e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8019712:	2b00      	cmp	r3, #0
 8019714:	d1a5      	bne.n	8019662 <__multiply+0x8a>
 8019716:	3f01      	subs	r7, #1
 8019718:	e7a1      	b.n	801965e <__multiply+0x86>
 801971a:	bf00      	nop
 801971c:	0801aef3 	.word	0x0801aef3
 8019720:	0801af64 	.word	0x0801af64

08019724 <__pow5mult>:
 8019724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019728:	4615      	mov	r5, r2
 801972a:	f012 0203 	ands.w	r2, r2, #3
 801972e:	4606      	mov	r6, r0
 8019730:	460f      	mov	r7, r1
 8019732:	d007      	beq.n	8019744 <__pow5mult+0x20>
 8019734:	4c25      	ldr	r4, [pc, #148]	; (80197cc <__pow5mult+0xa8>)
 8019736:	3a01      	subs	r2, #1
 8019738:	2300      	movs	r3, #0
 801973a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801973e:	f7ff fe9b 	bl	8019478 <__multadd>
 8019742:	4607      	mov	r7, r0
 8019744:	10ad      	asrs	r5, r5, #2
 8019746:	d03d      	beq.n	80197c4 <__pow5mult+0xa0>
 8019748:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801974a:	b97c      	cbnz	r4, 801976c <__pow5mult+0x48>
 801974c:	2010      	movs	r0, #16
 801974e:	f7fe f899 	bl	8017884 <malloc>
 8019752:	4602      	mov	r2, r0
 8019754:	6270      	str	r0, [r6, #36]	; 0x24
 8019756:	b928      	cbnz	r0, 8019764 <__pow5mult+0x40>
 8019758:	4b1d      	ldr	r3, [pc, #116]	; (80197d0 <__pow5mult+0xac>)
 801975a:	481e      	ldr	r0, [pc, #120]	; (80197d4 <__pow5mult+0xb0>)
 801975c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8019760:	f000 fd80 	bl	801a264 <__assert_func>
 8019764:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019768:	6004      	str	r4, [r0, #0]
 801976a:	60c4      	str	r4, [r0, #12]
 801976c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019770:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019774:	b94c      	cbnz	r4, 801978a <__pow5mult+0x66>
 8019776:	f240 2171 	movw	r1, #625	; 0x271
 801977a:	4630      	mov	r0, r6
 801977c:	f7ff ff16 	bl	80195ac <__i2b>
 8019780:	2300      	movs	r3, #0
 8019782:	f8c8 0008 	str.w	r0, [r8, #8]
 8019786:	4604      	mov	r4, r0
 8019788:	6003      	str	r3, [r0, #0]
 801978a:	f04f 0900 	mov.w	r9, #0
 801978e:	07eb      	lsls	r3, r5, #31
 8019790:	d50a      	bpl.n	80197a8 <__pow5mult+0x84>
 8019792:	4639      	mov	r1, r7
 8019794:	4622      	mov	r2, r4
 8019796:	4630      	mov	r0, r6
 8019798:	f7ff ff1e 	bl	80195d8 <__multiply>
 801979c:	4639      	mov	r1, r7
 801979e:	4680      	mov	r8, r0
 80197a0:	4630      	mov	r0, r6
 80197a2:	f7ff fe47 	bl	8019434 <_Bfree>
 80197a6:	4647      	mov	r7, r8
 80197a8:	106d      	asrs	r5, r5, #1
 80197aa:	d00b      	beq.n	80197c4 <__pow5mult+0xa0>
 80197ac:	6820      	ldr	r0, [r4, #0]
 80197ae:	b938      	cbnz	r0, 80197c0 <__pow5mult+0x9c>
 80197b0:	4622      	mov	r2, r4
 80197b2:	4621      	mov	r1, r4
 80197b4:	4630      	mov	r0, r6
 80197b6:	f7ff ff0f 	bl	80195d8 <__multiply>
 80197ba:	6020      	str	r0, [r4, #0]
 80197bc:	f8c0 9000 	str.w	r9, [r0]
 80197c0:	4604      	mov	r4, r0
 80197c2:	e7e4      	b.n	801978e <__pow5mult+0x6a>
 80197c4:	4638      	mov	r0, r7
 80197c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80197ca:	bf00      	nop
 80197cc:	0801b0b8 	.word	0x0801b0b8
 80197d0:	0801ae7d 	.word	0x0801ae7d
 80197d4:	0801af64 	.word	0x0801af64

080197d8 <__lshift>:
 80197d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80197dc:	460c      	mov	r4, r1
 80197de:	6849      	ldr	r1, [r1, #4]
 80197e0:	6923      	ldr	r3, [r4, #16]
 80197e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80197e6:	68a3      	ldr	r3, [r4, #8]
 80197e8:	4607      	mov	r7, r0
 80197ea:	4691      	mov	r9, r2
 80197ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80197f0:	f108 0601 	add.w	r6, r8, #1
 80197f4:	42b3      	cmp	r3, r6
 80197f6:	db0b      	blt.n	8019810 <__lshift+0x38>
 80197f8:	4638      	mov	r0, r7
 80197fa:	f7ff fddb 	bl	80193b4 <_Balloc>
 80197fe:	4605      	mov	r5, r0
 8019800:	b948      	cbnz	r0, 8019816 <__lshift+0x3e>
 8019802:	4602      	mov	r2, r0
 8019804:	4b28      	ldr	r3, [pc, #160]	; (80198a8 <__lshift+0xd0>)
 8019806:	4829      	ldr	r0, [pc, #164]	; (80198ac <__lshift+0xd4>)
 8019808:	f240 11d9 	movw	r1, #473	; 0x1d9
 801980c:	f000 fd2a 	bl	801a264 <__assert_func>
 8019810:	3101      	adds	r1, #1
 8019812:	005b      	lsls	r3, r3, #1
 8019814:	e7ee      	b.n	80197f4 <__lshift+0x1c>
 8019816:	2300      	movs	r3, #0
 8019818:	f100 0114 	add.w	r1, r0, #20
 801981c:	f100 0210 	add.w	r2, r0, #16
 8019820:	4618      	mov	r0, r3
 8019822:	4553      	cmp	r3, sl
 8019824:	db33      	blt.n	801988e <__lshift+0xb6>
 8019826:	6920      	ldr	r0, [r4, #16]
 8019828:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801982c:	f104 0314 	add.w	r3, r4, #20
 8019830:	f019 091f 	ands.w	r9, r9, #31
 8019834:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019838:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801983c:	d02b      	beq.n	8019896 <__lshift+0xbe>
 801983e:	f1c9 0e20 	rsb	lr, r9, #32
 8019842:	468a      	mov	sl, r1
 8019844:	2200      	movs	r2, #0
 8019846:	6818      	ldr	r0, [r3, #0]
 8019848:	fa00 f009 	lsl.w	r0, r0, r9
 801984c:	4302      	orrs	r2, r0
 801984e:	f84a 2b04 	str.w	r2, [sl], #4
 8019852:	f853 2b04 	ldr.w	r2, [r3], #4
 8019856:	459c      	cmp	ip, r3
 8019858:	fa22 f20e 	lsr.w	r2, r2, lr
 801985c:	d8f3      	bhi.n	8019846 <__lshift+0x6e>
 801985e:	ebac 0304 	sub.w	r3, ip, r4
 8019862:	3b15      	subs	r3, #21
 8019864:	f023 0303 	bic.w	r3, r3, #3
 8019868:	3304      	adds	r3, #4
 801986a:	f104 0015 	add.w	r0, r4, #21
 801986e:	4584      	cmp	ip, r0
 8019870:	bf38      	it	cc
 8019872:	2304      	movcc	r3, #4
 8019874:	50ca      	str	r2, [r1, r3]
 8019876:	b10a      	cbz	r2, 801987c <__lshift+0xa4>
 8019878:	f108 0602 	add.w	r6, r8, #2
 801987c:	3e01      	subs	r6, #1
 801987e:	4638      	mov	r0, r7
 8019880:	612e      	str	r6, [r5, #16]
 8019882:	4621      	mov	r1, r4
 8019884:	f7ff fdd6 	bl	8019434 <_Bfree>
 8019888:	4628      	mov	r0, r5
 801988a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801988e:	f842 0f04 	str.w	r0, [r2, #4]!
 8019892:	3301      	adds	r3, #1
 8019894:	e7c5      	b.n	8019822 <__lshift+0x4a>
 8019896:	3904      	subs	r1, #4
 8019898:	f853 2b04 	ldr.w	r2, [r3], #4
 801989c:	f841 2f04 	str.w	r2, [r1, #4]!
 80198a0:	459c      	cmp	ip, r3
 80198a2:	d8f9      	bhi.n	8019898 <__lshift+0xc0>
 80198a4:	e7ea      	b.n	801987c <__lshift+0xa4>
 80198a6:	bf00      	nop
 80198a8:	0801aef3 	.word	0x0801aef3
 80198ac:	0801af64 	.word	0x0801af64

080198b0 <__mcmp>:
 80198b0:	b530      	push	{r4, r5, lr}
 80198b2:	6902      	ldr	r2, [r0, #16]
 80198b4:	690c      	ldr	r4, [r1, #16]
 80198b6:	1b12      	subs	r2, r2, r4
 80198b8:	d10e      	bne.n	80198d8 <__mcmp+0x28>
 80198ba:	f100 0314 	add.w	r3, r0, #20
 80198be:	3114      	adds	r1, #20
 80198c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80198c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80198c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80198cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80198d0:	42a5      	cmp	r5, r4
 80198d2:	d003      	beq.n	80198dc <__mcmp+0x2c>
 80198d4:	d305      	bcc.n	80198e2 <__mcmp+0x32>
 80198d6:	2201      	movs	r2, #1
 80198d8:	4610      	mov	r0, r2
 80198da:	bd30      	pop	{r4, r5, pc}
 80198dc:	4283      	cmp	r3, r0
 80198de:	d3f3      	bcc.n	80198c8 <__mcmp+0x18>
 80198e0:	e7fa      	b.n	80198d8 <__mcmp+0x28>
 80198e2:	f04f 32ff 	mov.w	r2, #4294967295
 80198e6:	e7f7      	b.n	80198d8 <__mcmp+0x28>

080198e8 <__mdiff>:
 80198e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198ec:	460c      	mov	r4, r1
 80198ee:	4606      	mov	r6, r0
 80198f0:	4611      	mov	r1, r2
 80198f2:	4620      	mov	r0, r4
 80198f4:	4617      	mov	r7, r2
 80198f6:	f7ff ffdb 	bl	80198b0 <__mcmp>
 80198fa:	1e05      	subs	r5, r0, #0
 80198fc:	d110      	bne.n	8019920 <__mdiff+0x38>
 80198fe:	4629      	mov	r1, r5
 8019900:	4630      	mov	r0, r6
 8019902:	f7ff fd57 	bl	80193b4 <_Balloc>
 8019906:	b930      	cbnz	r0, 8019916 <__mdiff+0x2e>
 8019908:	4b39      	ldr	r3, [pc, #228]	; (80199f0 <__mdiff+0x108>)
 801990a:	4602      	mov	r2, r0
 801990c:	f240 2132 	movw	r1, #562	; 0x232
 8019910:	4838      	ldr	r0, [pc, #224]	; (80199f4 <__mdiff+0x10c>)
 8019912:	f000 fca7 	bl	801a264 <__assert_func>
 8019916:	2301      	movs	r3, #1
 8019918:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801991c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019920:	bfa4      	itt	ge
 8019922:	463b      	movge	r3, r7
 8019924:	4627      	movge	r7, r4
 8019926:	4630      	mov	r0, r6
 8019928:	6879      	ldr	r1, [r7, #4]
 801992a:	bfa6      	itte	ge
 801992c:	461c      	movge	r4, r3
 801992e:	2500      	movge	r5, #0
 8019930:	2501      	movlt	r5, #1
 8019932:	f7ff fd3f 	bl	80193b4 <_Balloc>
 8019936:	b920      	cbnz	r0, 8019942 <__mdiff+0x5a>
 8019938:	4b2d      	ldr	r3, [pc, #180]	; (80199f0 <__mdiff+0x108>)
 801993a:	4602      	mov	r2, r0
 801993c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8019940:	e7e6      	b.n	8019910 <__mdiff+0x28>
 8019942:	693e      	ldr	r6, [r7, #16]
 8019944:	60c5      	str	r5, [r0, #12]
 8019946:	6925      	ldr	r5, [r4, #16]
 8019948:	f107 0114 	add.w	r1, r7, #20
 801994c:	f104 0914 	add.w	r9, r4, #20
 8019950:	f100 0e14 	add.w	lr, r0, #20
 8019954:	f107 0210 	add.w	r2, r7, #16
 8019958:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801995c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8019960:	46f2      	mov	sl, lr
 8019962:	2700      	movs	r7, #0
 8019964:	f859 3b04 	ldr.w	r3, [r9], #4
 8019968:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801996c:	fa1f f883 	uxth.w	r8, r3
 8019970:	fa17 f78b 	uxtah	r7, r7, fp
 8019974:	0c1b      	lsrs	r3, r3, #16
 8019976:	eba7 0808 	sub.w	r8, r7, r8
 801997a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801997e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019982:	fa1f f888 	uxth.w	r8, r8
 8019986:	141f      	asrs	r7, r3, #16
 8019988:	454d      	cmp	r5, r9
 801998a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801998e:	f84a 3b04 	str.w	r3, [sl], #4
 8019992:	d8e7      	bhi.n	8019964 <__mdiff+0x7c>
 8019994:	1b2b      	subs	r3, r5, r4
 8019996:	3b15      	subs	r3, #21
 8019998:	f023 0303 	bic.w	r3, r3, #3
 801999c:	3304      	adds	r3, #4
 801999e:	3415      	adds	r4, #21
 80199a0:	42a5      	cmp	r5, r4
 80199a2:	bf38      	it	cc
 80199a4:	2304      	movcc	r3, #4
 80199a6:	4419      	add	r1, r3
 80199a8:	4473      	add	r3, lr
 80199aa:	469e      	mov	lr, r3
 80199ac:	460d      	mov	r5, r1
 80199ae:	4565      	cmp	r5, ip
 80199b0:	d30e      	bcc.n	80199d0 <__mdiff+0xe8>
 80199b2:	f10c 0203 	add.w	r2, ip, #3
 80199b6:	1a52      	subs	r2, r2, r1
 80199b8:	f022 0203 	bic.w	r2, r2, #3
 80199bc:	3903      	subs	r1, #3
 80199be:	458c      	cmp	ip, r1
 80199c0:	bf38      	it	cc
 80199c2:	2200      	movcc	r2, #0
 80199c4:	441a      	add	r2, r3
 80199c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80199ca:	b17b      	cbz	r3, 80199ec <__mdiff+0x104>
 80199cc:	6106      	str	r6, [r0, #16]
 80199ce:	e7a5      	b.n	801991c <__mdiff+0x34>
 80199d0:	f855 8b04 	ldr.w	r8, [r5], #4
 80199d4:	fa17 f488 	uxtah	r4, r7, r8
 80199d8:	1422      	asrs	r2, r4, #16
 80199da:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80199de:	b2a4      	uxth	r4, r4
 80199e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80199e4:	f84e 4b04 	str.w	r4, [lr], #4
 80199e8:	1417      	asrs	r7, r2, #16
 80199ea:	e7e0      	b.n	80199ae <__mdiff+0xc6>
 80199ec:	3e01      	subs	r6, #1
 80199ee:	e7ea      	b.n	80199c6 <__mdiff+0xde>
 80199f0:	0801aef3 	.word	0x0801aef3
 80199f4:	0801af64 	.word	0x0801af64

080199f8 <__d2b>:
 80199f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80199fc:	4689      	mov	r9, r1
 80199fe:	2101      	movs	r1, #1
 8019a00:	ec57 6b10 	vmov	r6, r7, d0
 8019a04:	4690      	mov	r8, r2
 8019a06:	f7ff fcd5 	bl	80193b4 <_Balloc>
 8019a0a:	4604      	mov	r4, r0
 8019a0c:	b930      	cbnz	r0, 8019a1c <__d2b+0x24>
 8019a0e:	4602      	mov	r2, r0
 8019a10:	4b25      	ldr	r3, [pc, #148]	; (8019aa8 <__d2b+0xb0>)
 8019a12:	4826      	ldr	r0, [pc, #152]	; (8019aac <__d2b+0xb4>)
 8019a14:	f240 310a 	movw	r1, #778	; 0x30a
 8019a18:	f000 fc24 	bl	801a264 <__assert_func>
 8019a1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019a20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019a24:	bb35      	cbnz	r5, 8019a74 <__d2b+0x7c>
 8019a26:	2e00      	cmp	r6, #0
 8019a28:	9301      	str	r3, [sp, #4]
 8019a2a:	d028      	beq.n	8019a7e <__d2b+0x86>
 8019a2c:	4668      	mov	r0, sp
 8019a2e:	9600      	str	r6, [sp, #0]
 8019a30:	f7ff fd8c 	bl	801954c <__lo0bits>
 8019a34:	9900      	ldr	r1, [sp, #0]
 8019a36:	b300      	cbz	r0, 8019a7a <__d2b+0x82>
 8019a38:	9a01      	ldr	r2, [sp, #4]
 8019a3a:	f1c0 0320 	rsb	r3, r0, #32
 8019a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8019a42:	430b      	orrs	r3, r1
 8019a44:	40c2      	lsrs	r2, r0
 8019a46:	6163      	str	r3, [r4, #20]
 8019a48:	9201      	str	r2, [sp, #4]
 8019a4a:	9b01      	ldr	r3, [sp, #4]
 8019a4c:	61a3      	str	r3, [r4, #24]
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	bf14      	ite	ne
 8019a52:	2202      	movne	r2, #2
 8019a54:	2201      	moveq	r2, #1
 8019a56:	6122      	str	r2, [r4, #16]
 8019a58:	b1d5      	cbz	r5, 8019a90 <__d2b+0x98>
 8019a5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019a5e:	4405      	add	r5, r0
 8019a60:	f8c9 5000 	str.w	r5, [r9]
 8019a64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019a68:	f8c8 0000 	str.w	r0, [r8]
 8019a6c:	4620      	mov	r0, r4
 8019a6e:	b003      	add	sp, #12
 8019a70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019a74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019a78:	e7d5      	b.n	8019a26 <__d2b+0x2e>
 8019a7a:	6161      	str	r1, [r4, #20]
 8019a7c:	e7e5      	b.n	8019a4a <__d2b+0x52>
 8019a7e:	a801      	add	r0, sp, #4
 8019a80:	f7ff fd64 	bl	801954c <__lo0bits>
 8019a84:	9b01      	ldr	r3, [sp, #4]
 8019a86:	6163      	str	r3, [r4, #20]
 8019a88:	2201      	movs	r2, #1
 8019a8a:	6122      	str	r2, [r4, #16]
 8019a8c:	3020      	adds	r0, #32
 8019a8e:	e7e3      	b.n	8019a58 <__d2b+0x60>
 8019a90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019a94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019a98:	f8c9 0000 	str.w	r0, [r9]
 8019a9c:	6918      	ldr	r0, [r3, #16]
 8019a9e:	f7ff fd35 	bl	801950c <__hi0bits>
 8019aa2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019aa6:	e7df      	b.n	8019a68 <__d2b+0x70>
 8019aa8:	0801aef3 	.word	0x0801aef3
 8019aac:	0801af64 	.word	0x0801af64

08019ab0 <_calloc_r>:
 8019ab0:	b513      	push	{r0, r1, r4, lr}
 8019ab2:	434a      	muls	r2, r1
 8019ab4:	4611      	mov	r1, r2
 8019ab6:	9201      	str	r2, [sp, #4]
 8019ab8:	f7fd ff74 	bl	80179a4 <_malloc_r>
 8019abc:	4604      	mov	r4, r0
 8019abe:	b118      	cbz	r0, 8019ac8 <_calloc_r+0x18>
 8019ac0:	9a01      	ldr	r2, [sp, #4]
 8019ac2:	2100      	movs	r1, #0
 8019ac4:	f7fd ff16 	bl	80178f4 <memset>
 8019ac8:	4620      	mov	r0, r4
 8019aca:	b002      	add	sp, #8
 8019acc:	bd10      	pop	{r4, pc}

08019ace <__ssputs_r>:
 8019ace:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ad2:	688e      	ldr	r6, [r1, #8]
 8019ad4:	429e      	cmp	r6, r3
 8019ad6:	4682      	mov	sl, r0
 8019ad8:	460c      	mov	r4, r1
 8019ada:	4690      	mov	r8, r2
 8019adc:	461f      	mov	r7, r3
 8019ade:	d838      	bhi.n	8019b52 <__ssputs_r+0x84>
 8019ae0:	898a      	ldrh	r2, [r1, #12]
 8019ae2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019ae6:	d032      	beq.n	8019b4e <__ssputs_r+0x80>
 8019ae8:	6825      	ldr	r5, [r4, #0]
 8019aea:	6909      	ldr	r1, [r1, #16]
 8019aec:	eba5 0901 	sub.w	r9, r5, r1
 8019af0:	6965      	ldr	r5, [r4, #20]
 8019af2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019af6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019afa:	3301      	adds	r3, #1
 8019afc:	444b      	add	r3, r9
 8019afe:	106d      	asrs	r5, r5, #1
 8019b00:	429d      	cmp	r5, r3
 8019b02:	bf38      	it	cc
 8019b04:	461d      	movcc	r5, r3
 8019b06:	0553      	lsls	r3, r2, #21
 8019b08:	d531      	bpl.n	8019b6e <__ssputs_r+0xa0>
 8019b0a:	4629      	mov	r1, r5
 8019b0c:	f7fd ff4a 	bl	80179a4 <_malloc_r>
 8019b10:	4606      	mov	r6, r0
 8019b12:	b950      	cbnz	r0, 8019b2a <__ssputs_r+0x5c>
 8019b14:	230c      	movs	r3, #12
 8019b16:	f8ca 3000 	str.w	r3, [sl]
 8019b1a:	89a3      	ldrh	r3, [r4, #12]
 8019b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019b20:	81a3      	strh	r3, [r4, #12]
 8019b22:	f04f 30ff 	mov.w	r0, #4294967295
 8019b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b2a:	6921      	ldr	r1, [r4, #16]
 8019b2c:	464a      	mov	r2, r9
 8019b2e:	f7fd feb9 	bl	80178a4 <memcpy>
 8019b32:	89a3      	ldrh	r3, [r4, #12]
 8019b34:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019b3c:	81a3      	strh	r3, [r4, #12]
 8019b3e:	6126      	str	r6, [r4, #16]
 8019b40:	6165      	str	r5, [r4, #20]
 8019b42:	444e      	add	r6, r9
 8019b44:	eba5 0509 	sub.w	r5, r5, r9
 8019b48:	6026      	str	r6, [r4, #0]
 8019b4a:	60a5      	str	r5, [r4, #8]
 8019b4c:	463e      	mov	r6, r7
 8019b4e:	42be      	cmp	r6, r7
 8019b50:	d900      	bls.n	8019b54 <__ssputs_r+0x86>
 8019b52:	463e      	mov	r6, r7
 8019b54:	4632      	mov	r2, r6
 8019b56:	6820      	ldr	r0, [r4, #0]
 8019b58:	4641      	mov	r1, r8
 8019b5a:	f7fd feb1 	bl	80178c0 <memmove>
 8019b5e:	68a3      	ldr	r3, [r4, #8]
 8019b60:	6822      	ldr	r2, [r4, #0]
 8019b62:	1b9b      	subs	r3, r3, r6
 8019b64:	4432      	add	r2, r6
 8019b66:	60a3      	str	r3, [r4, #8]
 8019b68:	6022      	str	r2, [r4, #0]
 8019b6a:	2000      	movs	r0, #0
 8019b6c:	e7db      	b.n	8019b26 <__ssputs_r+0x58>
 8019b6e:	462a      	mov	r2, r5
 8019b70:	f000 fd02 	bl	801a578 <_realloc_r>
 8019b74:	4606      	mov	r6, r0
 8019b76:	2800      	cmp	r0, #0
 8019b78:	d1e1      	bne.n	8019b3e <__ssputs_r+0x70>
 8019b7a:	6921      	ldr	r1, [r4, #16]
 8019b7c:	4650      	mov	r0, sl
 8019b7e:	f7fd fec1 	bl	8017904 <_free_r>
 8019b82:	e7c7      	b.n	8019b14 <__ssputs_r+0x46>

08019b84 <_svfiprintf_r>:
 8019b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b88:	4698      	mov	r8, r3
 8019b8a:	898b      	ldrh	r3, [r1, #12]
 8019b8c:	061b      	lsls	r3, r3, #24
 8019b8e:	b09d      	sub	sp, #116	; 0x74
 8019b90:	4607      	mov	r7, r0
 8019b92:	460d      	mov	r5, r1
 8019b94:	4614      	mov	r4, r2
 8019b96:	d50e      	bpl.n	8019bb6 <_svfiprintf_r+0x32>
 8019b98:	690b      	ldr	r3, [r1, #16]
 8019b9a:	b963      	cbnz	r3, 8019bb6 <_svfiprintf_r+0x32>
 8019b9c:	2140      	movs	r1, #64	; 0x40
 8019b9e:	f7fd ff01 	bl	80179a4 <_malloc_r>
 8019ba2:	6028      	str	r0, [r5, #0]
 8019ba4:	6128      	str	r0, [r5, #16]
 8019ba6:	b920      	cbnz	r0, 8019bb2 <_svfiprintf_r+0x2e>
 8019ba8:	230c      	movs	r3, #12
 8019baa:	603b      	str	r3, [r7, #0]
 8019bac:	f04f 30ff 	mov.w	r0, #4294967295
 8019bb0:	e0d1      	b.n	8019d56 <_svfiprintf_r+0x1d2>
 8019bb2:	2340      	movs	r3, #64	; 0x40
 8019bb4:	616b      	str	r3, [r5, #20]
 8019bb6:	2300      	movs	r3, #0
 8019bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8019bba:	2320      	movs	r3, #32
 8019bbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019bc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8019bc4:	2330      	movs	r3, #48	; 0x30
 8019bc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019d70 <_svfiprintf_r+0x1ec>
 8019bca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019bce:	f04f 0901 	mov.w	r9, #1
 8019bd2:	4623      	mov	r3, r4
 8019bd4:	469a      	mov	sl, r3
 8019bd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019bda:	b10a      	cbz	r2, 8019be0 <_svfiprintf_r+0x5c>
 8019bdc:	2a25      	cmp	r2, #37	; 0x25
 8019bde:	d1f9      	bne.n	8019bd4 <_svfiprintf_r+0x50>
 8019be0:	ebba 0b04 	subs.w	fp, sl, r4
 8019be4:	d00b      	beq.n	8019bfe <_svfiprintf_r+0x7a>
 8019be6:	465b      	mov	r3, fp
 8019be8:	4622      	mov	r2, r4
 8019bea:	4629      	mov	r1, r5
 8019bec:	4638      	mov	r0, r7
 8019bee:	f7ff ff6e 	bl	8019ace <__ssputs_r>
 8019bf2:	3001      	adds	r0, #1
 8019bf4:	f000 80aa 	beq.w	8019d4c <_svfiprintf_r+0x1c8>
 8019bf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019bfa:	445a      	add	r2, fp
 8019bfc:	9209      	str	r2, [sp, #36]	; 0x24
 8019bfe:	f89a 3000 	ldrb.w	r3, [sl]
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	f000 80a2 	beq.w	8019d4c <_svfiprintf_r+0x1c8>
 8019c08:	2300      	movs	r3, #0
 8019c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8019c0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019c12:	f10a 0a01 	add.w	sl, sl, #1
 8019c16:	9304      	str	r3, [sp, #16]
 8019c18:	9307      	str	r3, [sp, #28]
 8019c1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019c1e:	931a      	str	r3, [sp, #104]	; 0x68
 8019c20:	4654      	mov	r4, sl
 8019c22:	2205      	movs	r2, #5
 8019c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c28:	4851      	ldr	r0, [pc, #324]	; (8019d70 <_svfiprintf_r+0x1ec>)
 8019c2a:	f7e6 fad1 	bl	80001d0 <memchr>
 8019c2e:	9a04      	ldr	r2, [sp, #16]
 8019c30:	b9d8      	cbnz	r0, 8019c6a <_svfiprintf_r+0xe6>
 8019c32:	06d0      	lsls	r0, r2, #27
 8019c34:	bf44      	itt	mi
 8019c36:	2320      	movmi	r3, #32
 8019c38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019c3c:	0711      	lsls	r1, r2, #28
 8019c3e:	bf44      	itt	mi
 8019c40:	232b      	movmi	r3, #43	; 0x2b
 8019c42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019c46:	f89a 3000 	ldrb.w	r3, [sl]
 8019c4a:	2b2a      	cmp	r3, #42	; 0x2a
 8019c4c:	d015      	beq.n	8019c7a <_svfiprintf_r+0xf6>
 8019c4e:	9a07      	ldr	r2, [sp, #28]
 8019c50:	4654      	mov	r4, sl
 8019c52:	2000      	movs	r0, #0
 8019c54:	f04f 0c0a 	mov.w	ip, #10
 8019c58:	4621      	mov	r1, r4
 8019c5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019c5e:	3b30      	subs	r3, #48	; 0x30
 8019c60:	2b09      	cmp	r3, #9
 8019c62:	d94e      	bls.n	8019d02 <_svfiprintf_r+0x17e>
 8019c64:	b1b0      	cbz	r0, 8019c94 <_svfiprintf_r+0x110>
 8019c66:	9207      	str	r2, [sp, #28]
 8019c68:	e014      	b.n	8019c94 <_svfiprintf_r+0x110>
 8019c6a:	eba0 0308 	sub.w	r3, r0, r8
 8019c6e:	fa09 f303 	lsl.w	r3, r9, r3
 8019c72:	4313      	orrs	r3, r2
 8019c74:	9304      	str	r3, [sp, #16]
 8019c76:	46a2      	mov	sl, r4
 8019c78:	e7d2      	b.n	8019c20 <_svfiprintf_r+0x9c>
 8019c7a:	9b03      	ldr	r3, [sp, #12]
 8019c7c:	1d19      	adds	r1, r3, #4
 8019c7e:	681b      	ldr	r3, [r3, #0]
 8019c80:	9103      	str	r1, [sp, #12]
 8019c82:	2b00      	cmp	r3, #0
 8019c84:	bfbb      	ittet	lt
 8019c86:	425b      	neglt	r3, r3
 8019c88:	f042 0202 	orrlt.w	r2, r2, #2
 8019c8c:	9307      	strge	r3, [sp, #28]
 8019c8e:	9307      	strlt	r3, [sp, #28]
 8019c90:	bfb8      	it	lt
 8019c92:	9204      	strlt	r2, [sp, #16]
 8019c94:	7823      	ldrb	r3, [r4, #0]
 8019c96:	2b2e      	cmp	r3, #46	; 0x2e
 8019c98:	d10c      	bne.n	8019cb4 <_svfiprintf_r+0x130>
 8019c9a:	7863      	ldrb	r3, [r4, #1]
 8019c9c:	2b2a      	cmp	r3, #42	; 0x2a
 8019c9e:	d135      	bne.n	8019d0c <_svfiprintf_r+0x188>
 8019ca0:	9b03      	ldr	r3, [sp, #12]
 8019ca2:	1d1a      	adds	r2, r3, #4
 8019ca4:	681b      	ldr	r3, [r3, #0]
 8019ca6:	9203      	str	r2, [sp, #12]
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	bfb8      	it	lt
 8019cac:	f04f 33ff 	movlt.w	r3, #4294967295
 8019cb0:	3402      	adds	r4, #2
 8019cb2:	9305      	str	r3, [sp, #20]
 8019cb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019d80 <_svfiprintf_r+0x1fc>
 8019cb8:	7821      	ldrb	r1, [r4, #0]
 8019cba:	2203      	movs	r2, #3
 8019cbc:	4650      	mov	r0, sl
 8019cbe:	f7e6 fa87 	bl	80001d0 <memchr>
 8019cc2:	b140      	cbz	r0, 8019cd6 <_svfiprintf_r+0x152>
 8019cc4:	2340      	movs	r3, #64	; 0x40
 8019cc6:	eba0 000a 	sub.w	r0, r0, sl
 8019cca:	fa03 f000 	lsl.w	r0, r3, r0
 8019cce:	9b04      	ldr	r3, [sp, #16]
 8019cd0:	4303      	orrs	r3, r0
 8019cd2:	3401      	adds	r4, #1
 8019cd4:	9304      	str	r3, [sp, #16]
 8019cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019cda:	4826      	ldr	r0, [pc, #152]	; (8019d74 <_svfiprintf_r+0x1f0>)
 8019cdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019ce0:	2206      	movs	r2, #6
 8019ce2:	f7e6 fa75 	bl	80001d0 <memchr>
 8019ce6:	2800      	cmp	r0, #0
 8019ce8:	d038      	beq.n	8019d5c <_svfiprintf_r+0x1d8>
 8019cea:	4b23      	ldr	r3, [pc, #140]	; (8019d78 <_svfiprintf_r+0x1f4>)
 8019cec:	bb1b      	cbnz	r3, 8019d36 <_svfiprintf_r+0x1b2>
 8019cee:	9b03      	ldr	r3, [sp, #12]
 8019cf0:	3307      	adds	r3, #7
 8019cf2:	f023 0307 	bic.w	r3, r3, #7
 8019cf6:	3308      	adds	r3, #8
 8019cf8:	9303      	str	r3, [sp, #12]
 8019cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019cfc:	4433      	add	r3, r6
 8019cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8019d00:	e767      	b.n	8019bd2 <_svfiprintf_r+0x4e>
 8019d02:	fb0c 3202 	mla	r2, ip, r2, r3
 8019d06:	460c      	mov	r4, r1
 8019d08:	2001      	movs	r0, #1
 8019d0a:	e7a5      	b.n	8019c58 <_svfiprintf_r+0xd4>
 8019d0c:	2300      	movs	r3, #0
 8019d0e:	3401      	adds	r4, #1
 8019d10:	9305      	str	r3, [sp, #20]
 8019d12:	4619      	mov	r1, r3
 8019d14:	f04f 0c0a 	mov.w	ip, #10
 8019d18:	4620      	mov	r0, r4
 8019d1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019d1e:	3a30      	subs	r2, #48	; 0x30
 8019d20:	2a09      	cmp	r2, #9
 8019d22:	d903      	bls.n	8019d2c <_svfiprintf_r+0x1a8>
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	d0c5      	beq.n	8019cb4 <_svfiprintf_r+0x130>
 8019d28:	9105      	str	r1, [sp, #20]
 8019d2a:	e7c3      	b.n	8019cb4 <_svfiprintf_r+0x130>
 8019d2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8019d30:	4604      	mov	r4, r0
 8019d32:	2301      	movs	r3, #1
 8019d34:	e7f0      	b.n	8019d18 <_svfiprintf_r+0x194>
 8019d36:	ab03      	add	r3, sp, #12
 8019d38:	9300      	str	r3, [sp, #0]
 8019d3a:	462a      	mov	r2, r5
 8019d3c:	4b0f      	ldr	r3, [pc, #60]	; (8019d7c <_svfiprintf_r+0x1f8>)
 8019d3e:	a904      	add	r1, sp, #16
 8019d40:	4638      	mov	r0, r7
 8019d42:	f7fd ff29 	bl	8017b98 <_printf_float>
 8019d46:	1c42      	adds	r2, r0, #1
 8019d48:	4606      	mov	r6, r0
 8019d4a:	d1d6      	bne.n	8019cfa <_svfiprintf_r+0x176>
 8019d4c:	89ab      	ldrh	r3, [r5, #12]
 8019d4e:	065b      	lsls	r3, r3, #25
 8019d50:	f53f af2c 	bmi.w	8019bac <_svfiprintf_r+0x28>
 8019d54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019d56:	b01d      	add	sp, #116	; 0x74
 8019d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d5c:	ab03      	add	r3, sp, #12
 8019d5e:	9300      	str	r3, [sp, #0]
 8019d60:	462a      	mov	r2, r5
 8019d62:	4b06      	ldr	r3, [pc, #24]	; (8019d7c <_svfiprintf_r+0x1f8>)
 8019d64:	a904      	add	r1, sp, #16
 8019d66:	4638      	mov	r0, r7
 8019d68:	f7fe f9ba 	bl	80180e0 <_printf_i>
 8019d6c:	e7eb      	b.n	8019d46 <_svfiprintf_r+0x1c2>
 8019d6e:	bf00      	nop
 8019d70:	0801b0c4 	.word	0x0801b0c4
 8019d74:	0801b0ce 	.word	0x0801b0ce
 8019d78:	08017b99 	.word	0x08017b99
 8019d7c:	08019acf 	.word	0x08019acf
 8019d80:	0801b0ca 	.word	0x0801b0ca

08019d84 <__sfputc_r>:
 8019d84:	6893      	ldr	r3, [r2, #8]
 8019d86:	3b01      	subs	r3, #1
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	b410      	push	{r4}
 8019d8c:	6093      	str	r3, [r2, #8]
 8019d8e:	da08      	bge.n	8019da2 <__sfputc_r+0x1e>
 8019d90:	6994      	ldr	r4, [r2, #24]
 8019d92:	42a3      	cmp	r3, r4
 8019d94:	db01      	blt.n	8019d9a <__sfputc_r+0x16>
 8019d96:	290a      	cmp	r1, #10
 8019d98:	d103      	bne.n	8019da2 <__sfputc_r+0x1e>
 8019d9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019d9e:	f000 b98f 	b.w	801a0c0 <__swbuf_r>
 8019da2:	6813      	ldr	r3, [r2, #0]
 8019da4:	1c58      	adds	r0, r3, #1
 8019da6:	6010      	str	r0, [r2, #0]
 8019da8:	7019      	strb	r1, [r3, #0]
 8019daa:	4608      	mov	r0, r1
 8019dac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019db0:	4770      	bx	lr

08019db2 <__sfputs_r>:
 8019db2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019db4:	4606      	mov	r6, r0
 8019db6:	460f      	mov	r7, r1
 8019db8:	4614      	mov	r4, r2
 8019dba:	18d5      	adds	r5, r2, r3
 8019dbc:	42ac      	cmp	r4, r5
 8019dbe:	d101      	bne.n	8019dc4 <__sfputs_r+0x12>
 8019dc0:	2000      	movs	r0, #0
 8019dc2:	e007      	b.n	8019dd4 <__sfputs_r+0x22>
 8019dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019dc8:	463a      	mov	r2, r7
 8019dca:	4630      	mov	r0, r6
 8019dcc:	f7ff ffda 	bl	8019d84 <__sfputc_r>
 8019dd0:	1c43      	adds	r3, r0, #1
 8019dd2:	d1f3      	bne.n	8019dbc <__sfputs_r+0xa>
 8019dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019dd8 <_vfiprintf_r>:
 8019dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ddc:	460d      	mov	r5, r1
 8019dde:	b09d      	sub	sp, #116	; 0x74
 8019de0:	4614      	mov	r4, r2
 8019de2:	4698      	mov	r8, r3
 8019de4:	4606      	mov	r6, r0
 8019de6:	b118      	cbz	r0, 8019df0 <_vfiprintf_r+0x18>
 8019de8:	6983      	ldr	r3, [r0, #24]
 8019dea:	b90b      	cbnz	r3, 8019df0 <_vfiprintf_r+0x18>
 8019dec:	f7ff fa30 	bl	8019250 <__sinit>
 8019df0:	4b89      	ldr	r3, [pc, #548]	; (801a018 <_vfiprintf_r+0x240>)
 8019df2:	429d      	cmp	r5, r3
 8019df4:	d11b      	bne.n	8019e2e <_vfiprintf_r+0x56>
 8019df6:	6875      	ldr	r5, [r6, #4]
 8019df8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019dfa:	07d9      	lsls	r1, r3, #31
 8019dfc:	d405      	bmi.n	8019e0a <_vfiprintf_r+0x32>
 8019dfe:	89ab      	ldrh	r3, [r5, #12]
 8019e00:	059a      	lsls	r2, r3, #22
 8019e02:	d402      	bmi.n	8019e0a <_vfiprintf_r+0x32>
 8019e04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019e06:	f7ff fac6 	bl	8019396 <__retarget_lock_acquire_recursive>
 8019e0a:	89ab      	ldrh	r3, [r5, #12]
 8019e0c:	071b      	lsls	r3, r3, #28
 8019e0e:	d501      	bpl.n	8019e14 <_vfiprintf_r+0x3c>
 8019e10:	692b      	ldr	r3, [r5, #16]
 8019e12:	b9eb      	cbnz	r3, 8019e50 <_vfiprintf_r+0x78>
 8019e14:	4629      	mov	r1, r5
 8019e16:	4630      	mov	r0, r6
 8019e18:	f000 f9b6 	bl	801a188 <__swsetup_r>
 8019e1c:	b1c0      	cbz	r0, 8019e50 <_vfiprintf_r+0x78>
 8019e1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019e20:	07dc      	lsls	r4, r3, #31
 8019e22:	d50e      	bpl.n	8019e42 <_vfiprintf_r+0x6a>
 8019e24:	f04f 30ff 	mov.w	r0, #4294967295
 8019e28:	b01d      	add	sp, #116	; 0x74
 8019e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e2e:	4b7b      	ldr	r3, [pc, #492]	; (801a01c <_vfiprintf_r+0x244>)
 8019e30:	429d      	cmp	r5, r3
 8019e32:	d101      	bne.n	8019e38 <_vfiprintf_r+0x60>
 8019e34:	68b5      	ldr	r5, [r6, #8]
 8019e36:	e7df      	b.n	8019df8 <_vfiprintf_r+0x20>
 8019e38:	4b79      	ldr	r3, [pc, #484]	; (801a020 <_vfiprintf_r+0x248>)
 8019e3a:	429d      	cmp	r5, r3
 8019e3c:	bf08      	it	eq
 8019e3e:	68f5      	ldreq	r5, [r6, #12]
 8019e40:	e7da      	b.n	8019df8 <_vfiprintf_r+0x20>
 8019e42:	89ab      	ldrh	r3, [r5, #12]
 8019e44:	0598      	lsls	r0, r3, #22
 8019e46:	d4ed      	bmi.n	8019e24 <_vfiprintf_r+0x4c>
 8019e48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019e4a:	f7ff faa5 	bl	8019398 <__retarget_lock_release_recursive>
 8019e4e:	e7e9      	b.n	8019e24 <_vfiprintf_r+0x4c>
 8019e50:	2300      	movs	r3, #0
 8019e52:	9309      	str	r3, [sp, #36]	; 0x24
 8019e54:	2320      	movs	r3, #32
 8019e56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019e5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8019e5e:	2330      	movs	r3, #48	; 0x30
 8019e60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a024 <_vfiprintf_r+0x24c>
 8019e64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019e68:	f04f 0901 	mov.w	r9, #1
 8019e6c:	4623      	mov	r3, r4
 8019e6e:	469a      	mov	sl, r3
 8019e70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019e74:	b10a      	cbz	r2, 8019e7a <_vfiprintf_r+0xa2>
 8019e76:	2a25      	cmp	r2, #37	; 0x25
 8019e78:	d1f9      	bne.n	8019e6e <_vfiprintf_r+0x96>
 8019e7a:	ebba 0b04 	subs.w	fp, sl, r4
 8019e7e:	d00b      	beq.n	8019e98 <_vfiprintf_r+0xc0>
 8019e80:	465b      	mov	r3, fp
 8019e82:	4622      	mov	r2, r4
 8019e84:	4629      	mov	r1, r5
 8019e86:	4630      	mov	r0, r6
 8019e88:	f7ff ff93 	bl	8019db2 <__sfputs_r>
 8019e8c:	3001      	adds	r0, #1
 8019e8e:	f000 80aa 	beq.w	8019fe6 <_vfiprintf_r+0x20e>
 8019e92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019e94:	445a      	add	r2, fp
 8019e96:	9209      	str	r2, [sp, #36]	; 0x24
 8019e98:	f89a 3000 	ldrb.w	r3, [sl]
 8019e9c:	2b00      	cmp	r3, #0
 8019e9e:	f000 80a2 	beq.w	8019fe6 <_vfiprintf_r+0x20e>
 8019ea2:	2300      	movs	r3, #0
 8019ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8019ea8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019eac:	f10a 0a01 	add.w	sl, sl, #1
 8019eb0:	9304      	str	r3, [sp, #16]
 8019eb2:	9307      	str	r3, [sp, #28]
 8019eb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019eb8:	931a      	str	r3, [sp, #104]	; 0x68
 8019eba:	4654      	mov	r4, sl
 8019ebc:	2205      	movs	r2, #5
 8019ebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ec2:	4858      	ldr	r0, [pc, #352]	; (801a024 <_vfiprintf_r+0x24c>)
 8019ec4:	f7e6 f984 	bl	80001d0 <memchr>
 8019ec8:	9a04      	ldr	r2, [sp, #16]
 8019eca:	b9d8      	cbnz	r0, 8019f04 <_vfiprintf_r+0x12c>
 8019ecc:	06d1      	lsls	r1, r2, #27
 8019ece:	bf44      	itt	mi
 8019ed0:	2320      	movmi	r3, #32
 8019ed2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019ed6:	0713      	lsls	r3, r2, #28
 8019ed8:	bf44      	itt	mi
 8019eda:	232b      	movmi	r3, #43	; 0x2b
 8019edc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019ee0:	f89a 3000 	ldrb.w	r3, [sl]
 8019ee4:	2b2a      	cmp	r3, #42	; 0x2a
 8019ee6:	d015      	beq.n	8019f14 <_vfiprintf_r+0x13c>
 8019ee8:	9a07      	ldr	r2, [sp, #28]
 8019eea:	4654      	mov	r4, sl
 8019eec:	2000      	movs	r0, #0
 8019eee:	f04f 0c0a 	mov.w	ip, #10
 8019ef2:	4621      	mov	r1, r4
 8019ef4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019ef8:	3b30      	subs	r3, #48	; 0x30
 8019efa:	2b09      	cmp	r3, #9
 8019efc:	d94e      	bls.n	8019f9c <_vfiprintf_r+0x1c4>
 8019efe:	b1b0      	cbz	r0, 8019f2e <_vfiprintf_r+0x156>
 8019f00:	9207      	str	r2, [sp, #28]
 8019f02:	e014      	b.n	8019f2e <_vfiprintf_r+0x156>
 8019f04:	eba0 0308 	sub.w	r3, r0, r8
 8019f08:	fa09 f303 	lsl.w	r3, r9, r3
 8019f0c:	4313      	orrs	r3, r2
 8019f0e:	9304      	str	r3, [sp, #16]
 8019f10:	46a2      	mov	sl, r4
 8019f12:	e7d2      	b.n	8019eba <_vfiprintf_r+0xe2>
 8019f14:	9b03      	ldr	r3, [sp, #12]
 8019f16:	1d19      	adds	r1, r3, #4
 8019f18:	681b      	ldr	r3, [r3, #0]
 8019f1a:	9103      	str	r1, [sp, #12]
 8019f1c:	2b00      	cmp	r3, #0
 8019f1e:	bfbb      	ittet	lt
 8019f20:	425b      	neglt	r3, r3
 8019f22:	f042 0202 	orrlt.w	r2, r2, #2
 8019f26:	9307      	strge	r3, [sp, #28]
 8019f28:	9307      	strlt	r3, [sp, #28]
 8019f2a:	bfb8      	it	lt
 8019f2c:	9204      	strlt	r2, [sp, #16]
 8019f2e:	7823      	ldrb	r3, [r4, #0]
 8019f30:	2b2e      	cmp	r3, #46	; 0x2e
 8019f32:	d10c      	bne.n	8019f4e <_vfiprintf_r+0x176>
 8019f34:	7863      	ldrb	r3, [r4, #1]
 8019f36:	2b2a      	cmp	r3, #42	; 0x2a
 8019f38:	d135      	bne.n	8019fa6 <_vfiprintf_r+0x1ce>
 8019f3a:	9b03      	ldr	r3, [sp, #12]
 8019f3c:	1d1a      	adds	r2, r3, #4
 8019f3e:	681b      	ldr	r3, [r3, #0]
 8019f40:	9203      	str	r2, [sp, #12]
 8019f42:	2b00      	cmp	r3, #0
 8019f44:	bfb8      	it	lt
 8019f46:	f04f 33ff 	movlt.w	r3, #4294967295
 8019f4a:	3402      	adds	r4, #2
 8019f4c:	9305      	str	r3, [sp, #20]
 8019f4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a034 <_vfiprintf_r+0x25c>
 8019f52:	7821      	ldrb	r1, [r4, #0]
 8019f54:	2203      	movs	r2, #3
 8019f56:	4650      	mov	r0, sl
 8019f58:	f7e6 f93a 	bl	80001d0 <memchr>
 8019f5c:	b140      	cbz	r0, 8019f70 <_vfiprintf_r+0x198>
 8019f5e:	2340      	movs	r3, #64	; 0x40
 8019f60:	eba0 000a 	sub.w	r0, r0, sl
 8019f64:	fa03 f000 	lsl.w	r0, r3, r0
 8019f68:	9b04      	ldr	r3, [sp, #16]
 8019f6a:	4303      	orrs	r3, r0
 8019f6c:	3401      	adds	r4, #1
 8019f6e:	9304      	str	r3, [sp, #16]
 8019f70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f74:	482c      	ldr	r0, [pc, #176]	; (801a028 <_vfiprintf_r+0x250>)
 8019f76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019f7a:	2206      	movs	r2, #6
 8019f7c:	f7e6 f928 	bl	80001d0 <memchr>
 8019f80:	2800      	cmp	r0, #0
 8019f82:	d03f      	beq.n	801a004 <_vfiprintf_r+0x22c>
 8019f84:	4b29      	ldr	r3, [pc, #164]	; (801a02c <_vfiprintf_r+0x254>)
 8019f86:	bb1b      	cbnz	r3, 8019fd0 <_vfiprintf_r+0x1f8>
 8019f88:	9b03      	ldr	r3, [sp, #12]
 8019f8a:	3307      	adds	r3, #7
 8019f8c:	f023 0307 	bic.w	r3, r3, #7
 8019f90:	3308      	adds	r3, #8
 8019f92:	9303      	str	r3, [sp, #12]
 8019f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f96:	443b      	add	r3, r7
 8019f98:	9309      	str	r3, [sp, #36]	; 0x24
 8019f9a:	e767      	b.n	8019e6c <_vfiprintf_r+0x94>
 8019f9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8019fa0:	460c      	mov	r4, r1
 8019fa2:	2001      	movs	r0, #1
 8019fa4:	e7a5      	b.n	8019ef2 <_vfiprintf_r+0x11a>
 8019fa6:	2300      	movs	r3, #0
 8019fa8:	3401      	adds	r4, #1
 8019faa:	9305      	str	r3, [sp, #20]
 8019fac:	4619      	mov	r1, r3
 8019fae:	f04f 0c0a 	mov.w	ip, #10
 8019fb2:	4620      	mov	r0, r4
 8019fb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019fb8:	3a30      	subs	r2, #48	; 0x30
 8019fba:	2a09      	cmp	r2, #9
 8019fbc:	d903      	bls.n	8019fc6 <_vfiprintf_r+0x1ee>
 8019fbe:	2b00      	cmp	r3, #0
 8019fc0:	d0c5      	beq.n	8019f4e <_vfiprintf_r+0x176>
 8019fc2:	9105      	str	r1, [sp, #20]
 8019fc4:	e7c3      	b.n	8019f4e <_vfiprintf_r+0x176>
 8019fc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8019fca:	4604      	mov	r4, r0
 8019fcc:	2301      	movs	r3, #1
 8019fce:	e7f0      	b.n	8019fb2 <_vfiprintf_r+0x1da>
 8019fd0:	ab03      	add	r3, sp, #12
 8019fd2:	9300      	str	r3, [sp, #0]
 8019fd4:	462a      	mov	r2, r5
 8019fd6:	4b16      	ldr	r3, [pc, #88]	; (801a030 <_vfiprintf_r+0x258>)
 8019fd8:	a904      	add	r1, sp, #16
 8019fda:	4630      	mov	r0, r6
 8019fdc:	f7fd fddc 	bl	8017b98 <_printf_float>
 8019fe0:	4607      	mov	r7, r0
 8019fe2:	1c78      	adds	r0, r7, #1
 8019fe4:	d1d6      	bne.n	8019f94 <_vfiprintf_r+0x1bc>
 8019fe6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019fe8:	07d9      	lsls	r1, r3, #31
 8019fea:	d405      	bmi.n	8019ff8 <_vfiprintf_r+0x220>
 8019fec:	89ab      	ldrh	r3, [r5, #12]
 8019fee:	059a      	lsls	r2, r3, #22
 8019ff0:	d402      	bmi.n	8019ff8 <_vfiprintf_r+0x220>
 8019ff2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019ff4:	f7ff f9d0 	bl	8019398 <__retarget_lock_release_recursive>
 8019ff8:	89ab      	ldrh	r3, [r5, #12]
 8019ffa:	065b      	lsls	r3, r3, #25
 8019ffc:	f53f af12 	bmi.w	8019e24 <_vfiprintf_r+0x4c>
 801a000:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a002:	e711      	b.n	8019e28 <_vfiprintf_r+0x50>
 801a004:	ab03      	add	r3, sp, #12
 801a006:	9300      	str	r3, [sp, #0]
 801a008:	462a      	mov	r2, r5
 801a00a:	4b09      	ldr	r3, [pc, #36]	; (801a030 <_vfiprintf_r+0x258>)
 801a00c:	a904      	add	r1, sp, #16
 801a00e:	4630      	mov	r0, r6
 801a010:	f7fe f866 	bl	80180e0 <_printf_i>
 801a014:	e7e4      	b.n	8019fe0 <_vfiprintf_r+0x208>
 801a016:	bf00      	nop
 801a018:	0801af24 	.word	0x0801af24
 801a01c:	0801af44 	.word	0x0801af44
 801a020:	0801af04 	.word	0x0801af04
 801a024:	0801b0c4 	.word	0x0801b0c4
 801a028:	0801b0ce 	.word	0x0801b0ce
 801a02c:	08017b99 	.word	0x08017b99
 801a030:	08019db3 	.word	0x08019db3
 801a034:	0801b0ca 	.word	0x0801b0ca

0801a038 <__sread>:
 801a038:	b510      	push	{r4, lr}
 801a03a:	460c      	mov	r4, r1
 801a03c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a040:	f000 fac0 	bl	801a5c4 <_read_r>
 801a044:	2800      	cmp	r0, #0
 801a046:	bfab      	itete	ge
 801a048:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a04a:	89a3      	ldrhlt	r3, [r4, #12]
 801a04c:	181b      	addge	r3, r3, r0
 801a04e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a052:	bfac      	ite	ge
 801a054:	6563      	strge	r3, [r4, #84]	; 0x54
 801a056:	81a3      	strhlt	r3, [r4, #12]
 801a058:	bd10      	pop	{r4, pc}

0801a05a <__swrite>:
 801a05a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a05e:	461f      	mov	r7, r3
 801a060:	898b      	ldrh	r3, [r1, #12]
 801a062:	05db      	lsls	r3, r3, #23
 801a064:	4605      	mov	r5, r0
 801a066:	460c      	mov	r4, r1
 801a068:	4616      	mov	r6, r2
 801a06a:	d505      	bpl.n	801a078 <__swrite+0x1e>
 801a06c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a070:	2302      	movs	r3, #2
 801a072:	2200      	movs	r2, #0
 801a074:	f000 f9f8 	bl	801a468 <_lseek_r>
 801a078:	89a3      	ldrh	r3, [r4, #12]
 801a07a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a07e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a082:	81a3      	strh	r3, [r4, #12]
 801a084:	4632      	mov	r2, r6
 801a086:	463b      	mov	r3, r7
 801a088:	4628      	mov	r0, r5
 801a08a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a08e:	f000 b869 	b.w	801a164 <_write_r>

0801a092 <__sseek>:
 801a092:	b510      	push	{r4, lr}
 801a094:	460c      	mov	r4, r1
 801a096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a09a:	f000 f9e5 	bl	801a468 <_lseek_r>
 801a09e:	1c43      	adds	r3, r0, #1
 801a0a0:	89a3      	ldrh	r3, [r4, #12]
 801a0a2:	bf15      	itete	ne
 801a0a4:	6560      	strne	r0, [r4, #84]	; 0x54
 801a0a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a0aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a0ae:	81a3      	strheq	r3, [r4, #12]
 801a0b0:	bf18      	it	ne
 801a0b2:	81a3      	strhne	r3, [r4, #12]
 801a0b4:	bd10      	pop	{r4, pc}

0801a0b6 <__sclose>:
 801a0b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a0ba:	f000 b8f1 	b.w	801a2a0 <_close_r>
	...

0801a0c0 <__swbuf_r>:
 801a0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0c2:	460e      	mov	r6, r1
 801a0c4:	4614      	mov	r4, r2
 801a0c6:	4605      	mov	r5, r0
 801a0c8:	b118      	cbz	r0, 801a0d2 <__swbuf_r+0x12>
 801a0ca:	6983      	ldr	r3, [r0, #24]
 801a0cc:	b90b      	cbnz	r3, 801a0d2 <__swbuf_r+0x12>
 801a0ce:	f7ff f8bf 	bl	8019250 <__sinit>
 801a0d2:	4b21      	ldr	r3, [pc, #132]	; (801a158 <__swbuf_r+0x98>)
 801a0d4:	429c      	cmp	r4, r3
 801a0d6:	d12b      	bne.n	801a130 <__swbuf_r+0x70>
 801a0d8:	686c      	ldr	r4, [r5, #4]
 801a0da:	69a3      	ldr	r3, [r4, #24]
 801a0dc:	60a3      	str	r3, [r4, #8]
 801a0de:	89a3      	ldrh	r3, [r4, #12]
 801a0e0:	071a      	lsls	r2, r3, #28
 801a0e2:	d52f      	bpl.n	801a144 <__swbuf_r+0x84>
 801a0e4:	6923      	ldr	r3, [r4, #16]
 801a0e6:	b36b      	cbz	r3, 801a144 <__swbuf_r+0x84>
 801a0e8:	6923      	ldr	r3, [r4, #16]
 801a0ea:	6820      	ldr	r0, [r4, #0]
 801a0ec:	1ac0      	subs	r0, r0, r3
 801a0ee:	6963      	ldr	r3, [r4, #20]
 801a0f0:	b2f6      	uxtb	r6, r6
 801a0f2:	4283      	cmp	r3, r0
 801a0f4:	4637      	mov	r7, r6
 801a0f6:	dc04      	bgt.n	801a102 <__swbuf_r+0x42>
 801a0f8:	4621      	mov	r1, r4
 801a0fa:	4628      	mov	r0, r5
 801a0fc:	f000 f966 	bl	801a3cc <_fflush_r>
 801a100:	bb30      	cbnz	r0, 801a150 <__swbuf_r+0x90>
 801a102:	68a3      	ldr	r3, [r4, #8]
 801a104:	3b01      	subs	r3, #1
 801a106:	60a3      	str	r3, [r4, #8]
 801a108:	6823      	ldr	r3, [r4, #0]
 801a10a:	1c5a      	adds	r2, r3, #1
 801a10c:	6022      	str	r2, [r4, #0]
 801a10e:	701e      	strb	r6, [r3, #0]
 801a110:	6963      	ldr	r3, [r4, #20]
 801a112:	3001      	adds	r0, #1
 801a114:	4283      	cmp	r3, r0
 801a116:	d004      	beq.n	801a122 <__swbuf_r+0x62>
 801a118:	89a3      	ldrh	r3, [r4, #12]
 801a11a:	07db      	lsls	r3, r3, #31
 801a11c:	d506      	bpl.n	801a12c <__swbuf_r+0x6c>
 801a11e:	2e0a      	cmp	r6, #10
 801a120:	d104      	bne.n	801a12c <__swbuf_r+0x6c>
 801a122:	4621      	mov	r1, r4
 801a124:	4628      	mov	r0, r5
 801a126:	f000 f951 	bl	801a3cc <_fflush_r>
 801a12a:	b988      	cbnz	r0, 801a150 <__swbuf_r+0x90>
 801a12c:	4638      	mov	r0, r7
 801a12e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a130:	4b0a      	ldr	r3, [pc, #40]	; (801a15c <__swbuf_r+0x9c>)
 801a132:	429c      	cmp	r4, r3
 801a134:	d101      	bne.n	801a13a <__swbuf_r+0x7a>
 801a136:	68ac      	ldr	r4, [r5, #8]
 801a138:	e7cf      	b.n	801a0da <__swbuf_r+0x1a>
 801a13a:	4b09      	ldr	r3, [pc, #36]	; (801a160 <__swbuf_r+0xa0>)
 801a13c:	429c      	cmp	r4, r3
 801a13e:	bf08      	it	eq
 801a140:	68ec      	ldreq	r4, [r5, #12]
 801a142:	e7ca      	b.n	801a0da <__swbuf_r+0x1a>
 801a144:	4621      	mov	r1, r4
 801a146:	4628      	mov	r0, r5
 801a148:	f000 f81e 	bl	801a188 <__swsetup_r>
 801a14c:	2800      	cmp	r0, #0
 801a14e:	d0cb      	beq.n	801a0e8 <__swbuf_r+0x28>
 801a150:	f04f 37ff 	mov.w	r7, #4294967295
 801a154:	e7ea      	b.n	801a12c <__swbuf_r+0x6c>
 801a156:	bf00      	nop
 801a158:	0801af24 	.word	0x0801af24
 801a15c:	0801af44 	.word	0x0801af44
 801a160:	0801af04 	.word	0x0801af04

0801a164 <_write_r>:
 801a164:	b538      	push	{r3, r4, r5, lr}
 801a166:	4d07      	ldr	r5, [pc, #28]	; (801a184 <_write_r+0x20>)
 801a168:	4604      	mov	r4, r0
 801a16a:	4608      	mov	r0, r1
 801a16c:	4611      	mov	r1, r2
 801a16e:	2200      	movs	r2, #0
 801a170:	602a      	str	r2, [r5, #0]
 801a172:	461a      	mov	r2, r3
 801a174:	f7e8 fc45 	bl	8002a02 <_write>
 801a178:	1c43      	adds	r3, r0, #1
 801a17a:	d102      	bne.n	801a182 <_write_r+0x1e>
 801a17c:	682b      	ldr	r3, [r5, #0]
 801a17e:	b103      	cbz	r3, 801a182 <_write_r+0x1e>
 801a180:	6023      	str	r3, [r4, #0]
 801a182:	bd38      	pop	{r3, r4, r5, pc}
 801a184:	20001a04 	.word	0x20001a04

0801a188 <__swsetup_r>:
 801a188:	4b32      	ldr	r3, [pc, #200]	; (801a254 <__swsetup_r+0xcc>)
 801a18a:	b570      	push	{r4, r5, r6, lr}
 801a18c:	681d      	ldr	r5, [r3, #0]
 801a18e:	4606      	mov	r6, r0
 801a190:	460c      	mov	r4, r1
 801a192:	b125      	cbz	r5, 801a19e <__swsetup_r+0x16>
 801a194:	69ab      	ldr	r3, [r5, #24]
 801a196:	b913      	cbnz	r3, 801a19e <__swsetup_r+0x16>
 801a198:	4628      	mov	r0, r5
 801a19a:	f7ff f859 	bl	8019250 <__sinit>
 801a19e:	4b2e      	ldr	r3, [pc, #184]	; (801a258 <__swsetup_r+0xd0>)
 801a1a0:	429c      	cmp	r4, r3
 801a1a2:	d10f      	bne.n	801a1c4 <__swsetup_r+0x3c>
 801a1a4:	686c      	ldr	r4, [r5, #4]
 801a1a6:	89a3      	ldrh	r3, [r4, #12]
 801a1a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a1ac:	0719      	lsls	r1, r3, #28
 801a1ae:	d42c      	bmi.n	801a20a <__swsetup_r+0x82>
 801a1b0:	06dd      	lsls	r5, r3, #27
 801a1b2:	d411      	bmi.n	801a1d8 <__swsetup_r+0x50>
 801a1b4:	2309      	movs	r3, #9
 801a1b6:	6033      	str	r3, [r6, #0]
 801a1b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a1bc:	81a3      	strh	r3, [r4, #12]
 801a1be:	f04f 30ff 	mov.w	r0, #4294967295
 801a1c2:	e03e      	b.n	801a242 <__swsetup_r+0xba>
 801a1c4:	4b25      	ldr	r3, [pc, #148]	; (801a25c <__swsetup_r+0xd4>)
 801a1c6:	429c      	cmp	r4, r3
 801a1c8:	d101      	bne.n	801a1ce <__swsetup_r+0x46>
 801a1ca:	68ac      	ldr	r4, [r5, #8]
 801a1cc:	e7eb      	b.n	801a1a6 <__swsetup_r+0x1e>
 801a1ce:	4b24      	ldr	r3, [pc, #144]	; (801a260 <__swsetup_r+0xd8>)
 801a1d0:	429c      	cmp	r4, r3
 801a1d2:	bf08      	it	eq
 801a1d4:	68ec      	ldreq	r4, [r5, #12]
 801a1d6:	e7e6      	b.n	801a1a6 <__swsetup_r+0x1e>
 801a1d8:	0758      	lsls	r0, r3, #29
 801a1da:	d512      	bpl.n	801a202 <__swsetup_r+0x7a>
 801a1dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a1de:	b141      	cbz	r1, 801a1f2 <__swsetup_r+0x6a>
 801a1e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a1e4:	4299      	cmp	r1, r3
 801a1e6:	d002      	beq.n	801a1ee <__swsetup_r+0x66>
 801a1e8:	4630      	mov	r0, r6
 801a1ea:	f7fd fb8b 	bl	8017904 <_free_r>
 801a1ee:	2300      	movs	r3, #0
 801a1f0:	6363      	str	r3, [r4, #52]	; 0x34
 801a1f2:	89a3      	ldrh	r3, [r4, #12]
 801a1f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a1f8:	81a3      	strh	r3, [r4, #12]
 801a1fa:	2300      	movs	r3, #0
 801a1fc:	6063      	str	r3, [r4, #4]
 801a1fe:	6923      	ldr	r3, [r4, #16]
 801a200:	6023      	str	r3, [r4, #0]
 801a202:	89a3      	ldrh	r3, [r4, #12]
 801a204:	f043 0308 	orr.w	r3, r3, #8
 801a208:	81a3      	strh	r3, [r4, #12]
 801a20a:	6923      	ldr	r3, [r4, #16]
 801a20c:	b94b      	cbnz	r3, 801a222 <__swsetup_r+0x9a>
 801a20e:	89a3      	ldrh	r3, [r4, #12]
 801a210:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a218:	d003      	beq.n	801a222 <__swsetup_r+0x9a>
 801a21a:	4621      	mov	r1, r4
 801a21c:	4630      	mov	r0, r6
 801a21e:	f000 f959 	bl	801a4d4 <__smakebuf_r>
 801a222:	89a0      	ldrh	r0, [r4, #12]
 801a224:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a228:	f010 0301 	ands.w	r3, r0, #1
 801a22c:	d00a      	beq.n	801a244 <__swsetup_r+0xbc>
 801a22e:	2300      	movs	r3, #0
 801a230:	60a3      	str	r3, [r4, #8]
 801a232:	6963      	ldr	r3, [r4, #20]
 801a234:	425b      	negs	r3, r3
 801a236:	61a3      	str	r3, [r4, #24]
 801a238:	6923      	ldr	r3, [r4, #16]
 801a23a:	b943      	cbnz	r3, 801a24e <__swsetup_r+0xc6>
 801a23c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a240:	d1ba      	bne.n	801a1b8 <__swsetup_r+0x30>
 801a242:	bd70      	pop	{r4, r5, r6, pc}
 801a244:	0781      	lsls	r1, r0, #30
 801a246:	bf58      	it	pl
 801a248:	6963      	ldrpl	r3, [r4, #20]
 801a24a:	60a3      	str	r3, [r4, #8]
 801a24c:	e7f4      	b.n	801a238 <__swsetup_r+0xb0>
 801a24e:	2000      	movs	r0, #0
 801a250:	e7f7      	b.n	801a242 <__swsetup_r+0xba>
 801a252:	bf00      	nop
 801a254:	200000f0 	.word	0x200000f0
 801a258:	0801af24 	.word	0x0801af24
 801a25c:	0801af44 	.word	0x0801af44
 801a260:	0801af04 	.word	0x0801af04

0801a264 <__assert_func>:
 801a264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a266:	4614      	mov	r4, r2
 801a268:	461a      	mov	r2, r3
 801a26a:	4b09      	ldr	r3, [pc, #36]	; (801a290 <__assert_func+0x2c>)
 801a26c:	681b      	ldr	r3, [r3, #0]
 801a26e:	4605      	mov	r5, r0
 801a270:	68d8      	ldr	r0, [r3, #12]
 801a272:	b14c      	cbz	r4, 801a288 <__assert_func+0x24>
 801a274:	4b07      	ldr	r3, [pc, #28]	; (801a294 <__assert_func+0x30>)
 801a276:	9100      	str	r1, [sp, #0]
 801a278:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a27c:	4906      	ldr	r1, [pc, #24]	; (801a298 <__assert_func+0x34>)
 801a27e:	462b      	mov	r3, r5
 801a280:	f000 f8e0 	bl	801a444 <fiprintf>
 801a284:	f7fd facc 	bl	8017820 <abort>
 801a288:	4b04      	ldr	r3, [pc, #16]	; (801a29c <__assert_func+0x38>)
 801a28a:	461c      	mov	r4, r3
 801a28c:	e7f3      	b.n	801a276 <__assert_func+0x12>
 801a28e:	bf00      	nop
 801a290:	200000f0 	.word	0x200000f0
 801a294:	0801b0d5 	.word	0x0801b0d5
 801a298:	0801b0e2 	.word	0x0801b0e2
 801a29c:	0801b110 	.word	0x0801b110

0801a2a0 <_close_r>:
 801a2a0:	b538      	push	{r3, r4, r5, lr}
 801a2a2:	4d06      	ldr	r5, [pc, #24]	; (801a2bc <_close_r+0x1c>)
 801a2a4:	2300      	movs	r3, #0
 801a2a6:	4604      	mov	r4, r0
 801a2a8:	4608      	mov	r0, r1
 801a2aa:	602b      	str	r3, [r5, #0]
 801a2ac:	f7e8 fbc5 	bl	8002a3a <_close>
 801a2b0:	1c43      	adds	r3, r0, #1
 801a2b2:	d102      	bne.n	801a2ba <_close_r+0x1a>
 801a2b4:	682b      	ldr	r3, [r5, #0]
 801a2b6:	b103      	cbz	r3, 801a2ba <_close_r+0x1a>
 801a2b8:	6023      	str	r3, [r4, #0]
 801a2ba:	bd38      	pop	{r3, r4, r5, pc}
 801a2bc:	20001a04 	.word	0x20001a04

0801a2c0 <__sflush_r>:
 801a2c0:	898a      	ldrh	r2, [r1, #12]
 801a2c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2c6:	4605      	mov	r5, r0
 801a2c8:	0710      	lsls	r0, r2, #28
 801a2ca:	460c      	mov	r4, r1
 801a2cc:	d458      	bmi.n	801a380 <__sflush_r+0xc0>
 801a2ce:	684b      	ldr	r3, [r1, #4]
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	dc05      	bgt.n	801a2e0 <__sflush_r+0x20>
 801a2d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	dc02      	bgt.n	801a2e0 <__sflush_r+0x20>
 801a2da:	2000      	movs	r0, #0
 801a2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a2e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a2e2:	2e00      	cmp	r6, #0
 801a2e4:	d0f9      	beq.n	801a2da <__sflush_r+0x1a>
 801a2e6:	2300      	movs	r3, #0
 801a2e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a2ec:	682f      	ldr	r7, [r5, #0]
 801a2ee:	602b      	str	r3, [r5, #0]
 801a2f0:	d032      	beq.n	801a358 <__sflush_r+0x98>
 801a2f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a2f4:	89a3      	ldrh	r3, [r4, #12]
 801a2f6:	075a      	lsls	r2, r3, #29
 801a2f8:	d505      	bpl.n	801a306 <__sflush_r+0x46>
 801a2fa:	6863      	ldr	r3, [r4, #4]
 801a2fc:	1ac0      	subs	r0, r0, r3
 801a2fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a300:	b10b      	cbz	r3, 801a306 <__sflush_r+0x46>
 801a302:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a304:	1ac0      	subs	r0, r0, r3
 801a306:	2300      	movs	r3, #0
 801a308:	4602      	mov	r2, r0
 801a30a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a30c:	6a21      	ldr	r1, [r4, #32]
 801a30e:	4628      	mov	r0, r5
 801a310:	47b0      	blx	r6
 801a312:	1c43      	adds	r3, r0, #1
 801a314:	89a3      	ldrh	r3, [r4, #12]
 801a316:	d106      	bne.n	801a326 <__sflush_r+0x66>
 801a318:	6829      	ldr	r1, [r5, #0]
 801a31a:	291d      	cmp	r1, #29
 801a31c:	d82c      	bhi.n	801a378 <__sflush_r+0xb8>
 801a31e:	4a2a      	ldr	r2, [pc, #168]	; (801a3c8 <__sflush_r+0x108>)
 801a320:	40ca      	lsrs	r2, r1
 801a322:	07d6      	lsls	r6, r2, #31
 801a324:	d528      	bpl.n	801a378 <__sflush_r+0xb8>
 801a326:	2200      	movs	r2, #0
 801a328:	6062      	str	r2, [r4, #4]
 801a32a:	04d9      	lsls	r1, r3, #19
 801a32c:	6922      	ldr	r2, [r4, #16]
 801a32e:	6022      	str	r2, [r4, #0]
 801a330:	d504      	bpl.n	801a33c <__sflush_r+0x7c>
 801a332:	1c42      	adds	r2, r0, #1
 801a334:	d101      	bne.n	801a33a <__sflush_r+0x7a>
 801a336:	682b      	ldr	r3, [r5, #0]
 801a338:	b903      	cbnz	r3, 801a33c <__sflush_r+0x7c>
 801a33a:	6560      	str	r0, [r4, #84]	; 0x54
 801a33c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a33e:	602f      	str	r7, [r5, #0]
 801a340:	2900      	cmp	r1, #0
 801a342:	d0ca      	beq.n	801a2da <__sflush_r+0x1a>
 801a344:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a348:	4299      	cmp	r1, r3
 801a34a:	d002      	beq.n	801a352 <__sflush_r+0x92>
 801a34c:	4628      	mov	r0, r5
 801a34e:	f7fd fad9 	bl	8017904 <_free_r>
 801a352:	2000      	movs	r0, #0
 801a354:	6360      	str	r0, [r4, #52]	; 0x34
 801a356:	e7c1      	b.n	801a2dc <__sflush_r+0x1c>
 801a358:	6a21      	ldr	r1, [r4, #32]
 801a35a:	2301      	movs	r3, #1
 801a35c:	4628      	mov	r0, r5
 801a35e:	47b0      	blx	r6
 801a360:	1c41      	adds	r1, r0, #1
 801a362:	d1c7      	bne.n	801a2f4 <__sflush_r+0x34>
 801a364:	682b      	ldr	r3, [r5, #0]
 801a366:	2b00      	cmp	r3, #0
 801a368:	d0c4      	beq.n	801a2f4 <__sflush_r+0x34>
 801a36a:	2b1d      	cmp	r3, #29
 801a36c:	d001      	beq.n	801a372 <__sflush_r+0xb2>
 801a36e:	2b16      	cmp	r3, #22
 801a370:	d101      	bne.n	801a376 <__sflush_r+0xb6>
 801a372:	602f      	str	r7, [r5, #0]
 801a374:	e7b1      	b.n	801a2da <__sflush_r+0x1a>
 801a376:	89a3      	ldrh	r3, [r4, #12]
 801a378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a37c:	81a3      	strh	r3, [r4, #12]
 801a37e:	e7ad      	b.n	801a2dc <__sflush_r+0x1c>
 801a380:	690f      	ldr	r7, [r1, #16]
 801a382:	2f00      	cmp	r7, #0
 801a384:	d0a9      	beq.n	801a2da <__sflush_r+0x1a>
 801a386:	0793      	lsls	r3, r2, #30
 801a388:	680e      	ldr	r6, [r1, #0]
 801a38a:	bf08      	it	eq
 801a38c:	694b      	ldreq	r3, [r1, #20]
 801a38e:	600f      	str	r7, [r1, #0]
 801a390:	bf18      	it	ne
 801a392:	2300      	movne	r3, #0
 801a394:	eba6 0807 	sub.w	r8, r6, r7
 801a398:	608b      	str	r3, [r1, #8]
 801a39a:	f1b8 0f00 	cmp.w	r8, #0
 801a39e:	dd9c      	ble.n	801a2da <__sflush_r+0x1a>
 801a3a0:	6a21      	ldr	r1, [r4, #32]
 801a3a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a3a4:	4643      	mov	r3, r8
 801a3a6:	463a      	mov	r2, r7
 801a3a8:	4628      	mov	r0, r5
 801a3aa:	47b0      	blx	r6
 801a3ac:	2800      	cmp	r0, #0
 801a3ae:	dc06      	bgt.n	801a3be <__sflush_r+0xfe>
 801a3b0:	89a3      	ldrh	r3, [r4, #12]
 801a3b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a3b6:	81a3      	strh	r3, [r4, #12]
 801a3b8:	f04f 30ff 	mov.w	r0, #4294967295
 801a3bc:	e78e      	b.n	801a2dc <__sflush_r+0x1c>
 801a3be:	4407      	add	r7, r0
 801a3c0:	eba8 0800 	sub.w	r8, r8, r0
 801a3c4:	e7e9      	b.n	801a39a <__sflush_r+0xda>
 801a3c6:	bf00      	nop
 801a3c8:	20400001 	.word	0x20400001

0801a3cc <_fflush_r>:
 801a3cc:	b538      	push	{r3, r4, r5, lr}
 801a3ce:	690b      	ldr	r3, [r1, #16]
 801a3d0:	4605      	mov	r5, r0
 801a3d2:	460c      	mov	r4, r1
 801a3d4:	b913      	cbnz	r3, 801a3dc <_fflush_r+0x10>
 801a3d6:	2500      	movs	r5, #0
 801a3d8:	4628      	mov	r0, r5
 801a3da:	bd38      	pop	{r3, r4, r5, pc}
 801a3dc:	b118      	cbz	r0, 801a3e6 <_fflush_r+0x1a>
 801a3de:	6983      	ldr	r3, [r0, #24]
 801a3e0:	b90b      	cbnz	r3, 801a3e6 <_fflush_r+0x1a>
 801a3e2:	f7fe ff35 	bl	8019250 <__sinit>
 801a3e6:	4b14      	ldr	r3, [pc, #80]	; (801a438 <_fflush_r+0x6c>)
 801a3e8:	429c      	cmp	r4, r3
 801a3ea:	d11b      	bne.n	801a424 <_fflush_r+0x58>
 801a3ec:	686c      	ldr	r4, [r5, #4]
 801a3ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a3f2:	2b00      	cmp	r3, #0
 801a3f4:	d0ef      	beq.n	801a3d6 <_fflush_r+0xa>
 801a3f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a3f8:	07d0      	lsls	r0, r2, #31
 801a3fa:	d404      	bmi.n	801a406 <_fflush_r+0x3a>
 801a3fc:	0599      	lsls	r1, r3, #22
 801a3fe:	d402      	bmi.n	801a406 <_fflush_r+0x3a>
 801a400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a402:	f7fe ffc8 	bl	8019396 <__retarget_lock_acquire_recursive>
 801a406:	4628      	mov	r0, r5
 801a408:	4621      	mov	r1, r4
 801a40a:	f7ff ff59 	bl	801a2c0 <__sflush_r>
 801a40e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a410:	07da      	lsls	r2, r3, #31
 801a412:	4605      	mov	r5, r0
 801a414:	d4e0      	bmi.n	801a3d8 <_fflush_r+0xc>
 801a416:	89a3      	ldrh	r3, [r4, #12]
 801a418:	059b      	lsls	r3, r3, #22
 801a41a:	d4dd      	bmi.n	801a3d8 <_fflush_r+0xc>
 801a41c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a41e:	f7fe ffbb 	bl	8019398 <__retarget_lock_release_recursive>
 801a422:	e7d9      	b.n	801a3d8 <_fflush_r+0xc>
 801a424:	4b05      	ldr	r3, [pc, #20]	; (801a43c <_fflush_r+0x70>)
 801a426:	429c      	cmp	r4, r3
 801a428:	d101      	bne.n	801a42e <_fflush_r+0x62>
 801a42a:	68ac      	ldr	r4, [r5, #8]
 801a42c:	e7df      	b.n	801a3ee <_fflush_r+0x22>
 801a42e:	4b04      	ldr	r3, [pc, #16]	; (801a440 <_fflush_r+0x74>)
 801a430:	429c      	cmp	r4, r3
 801a432:	bf08      	it	eq
 801a434:	68ec      	ldreq	r4, [r5, #12]
 801a436:	e7da      	b.n	801a3ee <_fflush_r+0x22>
 801a438:	0801af24 	.word	0x0801af24
 801a43c:	0801af44 	.word	0x0801af44
 801a440:	0801af04 	.word	0x0801af04

0801a444 <fiprintf>:
 801a444:	b40e      	push	{r1, r2, r3}
 801a446:	b503      	push	{r0, r1, lr}
 801a448:	4601      	mov	r1, r0
 801a44a:	ab03      	add	r3, sp, #12
 801a44c:	4805      	ldr	r0, [pc, #20]	; (801a464 <fiprintf+0x20>)
 801a44e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a452:	6800      	ldr	r0, [r0, #0]
 801a454:	9301      	str	r3, [sp, #4]
 801a456:	f7ff fcbf 	bl	8019dd8 <_vfiprintf_r>
 801a45a:	b002      	add	sp, #8
 801a45c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a460:	b003      	add	sp, #12
 801a462:	4770      	bx	lr
 801a464:	200000f0 	.word	0x200000f0

0801a468 <_lseek_r>:
 801a468:	b538      	push	{r3, r4, r5, lr}
 801a46a:	4d07      	ldr	r5, [pc, #28]	; (801a488 <_lseek_r+0x20>)
 801a46c:	4604      	mov	r4, r0
 801a46e:	4608      	mov	r0, r1
 801a470:	4611      	mov	r1, r2
 801a472:	2200      	movs	r2, #0
 801a474:	602a      	str	r2, [r5, #0]
 801a476:	461a      	mov	r2, r3
 801a478:	f7e8 fb06 	bl	8002a88 <_lseek>
 801a47c:	1c43      	adds	r3, r0, #1
 801a47e:	d102      	bne.n	801a486 <_lseek_r+0x1e>
 801a480:	682b      	ldr	r3, [r5, #0]
 801a482:	b103      	cbz	r3, 801a486 <_lseek_r+0x1e>
 801a484:	6023      	str	r3, [r4, #0]
 801a486:	bd38      	pop	{r3, r4, r5, pc}
 801a488:	20001a04 	.word	0x20001a04

0801a48c <__swhatbuf_r>:
 801a48c:	b570      	push	{r4, r5, r6, lr}
 801a48e:	460e      	mov	r6, r1
 801a490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a494:	2900      	cmp	r1, #0
 801a496:	b096      	sub	sp, #88	; 0x58
 801a498:	4614      	mov	r4, r2
 801a49a:	461d      	mov	r5, r3
 801a49c:	da07      	bge.n	801a4ae <__swhatbuf_r+0x22>
 801a49e:	2300      	movs	r3, #0
 801a4a0:	602b      	str	r3, [r5, #0]
 801a4a2:	89b3      	ldrh	r3, [r6, #12]
 801a4a4:	061a      	lsls	r2, r3, #24
 801a4a6:	d410      	bmi.n	801a4ca <__swhatbuf_r+0x3e>
 801a4a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a4ac:	e00e      	b.n	801a4cc <__swhatbuf_r+0x40>
 801a4ae:	466a      	mov	r2, sp
 801a4b0:	f000 f8a8 	bl	801a604 <_fstat_r>
 801a4b4:	2800      	cmp	r0, #0
 801a4b6:	dbf2      	blt.n	801a49e <__swhatbuf_r+0x12>
 801a4b8:	9a01      	ldr	r2, [sp, #4]
 801a4ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a4be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a4c2:	425a      	negs	r2, r3
 801a4c4:	415a      	adcs	r2, r3
 801a4c6:	602a      	str	r2, [r5, #0]
 801a4c8:	e7ee      	b.n	801a4a8 <__swhatbuf_r+0x1c>
 801a4ca:	2340      	movs	r3, #64	; 0x40
 801a4cc:	2000      	movs	r0, #0
 801a4ce:	6023      	str	r3, [r4, #0]
 801a4d0:	b016      	add	sp, #88	; 0x58
 801a4d2:	bd70      	pop	{r4, r5, r6, pc}

0801a4d4 <__smakebuf_r>:
 801a4d4:	898b      	ldrh	r3, [r1, #12]
 801a4d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a4d8:	079d      	lsls	r5, r3, #30
 801a4da:	4606      	mov	r6, r0
 801a4dc:	460c      	mov	r4, r1
 801a4de:	d507      	bpl.n	801a4f0 <__smakebuf_r+0x1c>
 801a4e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a4e4:	6023      	str	r3, [r4, #0]
 801a4e6:	6123      	str	r3, [r4, #16]
 801a4e8:	2301      	movs	r3, #1
 801a4ea:	6163      	str	r3, [r4, #20]
 801a4ec:	b002      	add	sp, #8
 801a4ee:	bd70      	pop	{r4, r5, r6, pc}
 801a4f0:	ab01      	add	r3, sp, #4
 801a4f2:	466a      	mov	r2, sp
 801a4f4:	f7ff ffca 	bl	801a48c <__swhatbuf_r>
 801a4f8:	9900      	ldr	r1, [sp, #0]
 801a4fa:	4605      	mov	r5, r0
 801a4fc:	4630      	mov	r0, r6
 801a4fe:	f7fd fa51 	bl	80179a4 <_malloc_r>
 801a502:	b948      	cbnz	r0, 801a518 <__smakebuf_r+0x44>
 801a504:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a508:	059a      	lsls	r2, r3, #22
 801a50a:	d4ef      	bmi.n	801a4ec <__smakebuf_r+0x18>
 801a50c:	f023 0303 	bic.w	r3, r3, #3
 801a510:	f043 0302 	orr.w	r3, r3, #2
 801a514:	81a3      	strh	r3, [r4, #12]
 801a516:	e7e3      	b.n	801a4e0 <__smakebuf_r+0xc>
 801a518:	4b0d      	ldr	r3, [pc, #52]	; (801a550 <__smakebuf_r+0x7c>)
 801a51a:	62b3      	str	r3, [r6, #40]	; 0x28
 801a51c:	89a3      	ldrh	r3, [r4, #12]
 801a51e:	6020      	str	r0, [r4, #0]
 801a520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a524:	81a3      	strh	r3, [r4, #12]
 801a526:	9b00      	ldr	r3, [sp, #0]
 801a528:	6163      	str	r3, [r4, #20]
 801a52a:	9b01      	ldr	r3, [sp, #4]
 801a52c:	6120      	str	r0, [r4, #16]
 801a52e:	b15b      	cbz	r3, 801a548 <__smakebuf_r+0x74>
 801a530:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a534:	4630      	mov	r0, r6
 801a536:	f000 f877 	bl	801a628 <_isatty_r>
 801a53a:	b128      	cbz	r0, 801a548 <__smakebuf_r+0x74>
 801a53c:	89a3      	ldrh	r3, [r4, #12]
 801a53e:	f023 0303 	bic.w	r3, r3, #3
 801a542:	f043 0301 	orr.w	r3, r3, #1
 801a546:	81a3      	strh	r3, [r4, #12]
 801a548:	89a0      	ldrh	r0, [r4, #12]
 801a54a:	4305      	orrs	r5, r0
 801a54c:	81a5      	strh	r5, [r4, #12]
 801a54e:	e7cd      	b.n	801a4ec <__smakebuf_r+0x18>
 801a550:	080191e9 	.word	0x080191e9

0801a554 <__ascii_mbtowc>:
 801a554:	b082      	sub	sp, #8
 801a556:	b901      	cbnz	r1, 801a55a <__ascii_mbtowc+0x6>
 801a558:	a901      	add	r1, sp, #4
 801a55a:	b142      	cbz	r2, 801a56e <__ascii_mbtowc+0x1a>
 801a55c:	b14b      	cbz	r3, 801a572 <__ascii_mbtowc+0x1e>
 801a55e:	7813      	ldrb	r3, [r2, #0]
 801a560:	600b      	str	r3, [r1, #0]
 801a562:	7812      	ldrb	r2, [r2, #0]
 801a564:	1e10      	subs	r0, r2, #0
 801a566:	bf18      	it	ne
 801a568:	2001      	movne	r0, #1
 801a56a:	b002      	add	sp, #8
 801a56c:	4770      	bx	lr
 801a56e:	4610      	mov	r0, r2
 801a570:	e7fb      	b.n	801a56a <__ascii_mbtowc+0x16>
 801a572:	f06f 0001 	mvn.w	r0, #1
 801a576:	e7f8      	b.n	801a56a <__ascii_mbtowc+0x16>

0801a578 <_realloc_r>:
 801a578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a57a:	4607      	mov	r7, r0
 801a57c:	4614      	mov	r4, r2
 801a57e:	460e      	mov	r6, r1
 801a580:	b921      	cbnz	r1, 801a58c <_realloc_r+0x14>
 801a582:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a586:	4611      	mov	r1, r2
 801a588:	f7fd ba0c 	b.w	80179a4 <_malloc_r>
 801a58c:	b922      	cbnz	r2, 801a598 <_realloc_r+0x20>
 801a58e:	f7fd f9b9 	bl	8017904 <_free_r>
 801a592:	4625      	mov	r5, r4
 801a594:	4628      	mov	r0, r5
 801a596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a598:	f000 f856 	bl	801a648 <_malloc_usable_size_r>
 801a59c:	42a0      	cmp	r0, r4
 801a59e:	d20f      	bcs.n	801a5c0 <_realloc_r+0x48>
 801a5a0:	4621      	mov	r1, r4
 801a5a2:	4638      	mov	r0, r7
 801a5a4:	f7fd f9fe 	bl	80179a4 <_malloc_r>
 801a5a8:	4605      	mov	r5, r0
 801a5aa:	2800      	cmp	r0, #0
 801a5ac:	d0f2      	beq.n	801a594 <_realloc_r+0x1c>
 801a5ae:	4631      	mov	r1, r6
 801a5b0:	4622      	mov	r2, r4
 801a5b2:	f7fd f977 	bl	80178a4 <memcpy>
 801a5b6:	4631      	mov	r1, r6
 801a5b8:	4638      	mov	r0, r7
 801a5ba:	f7fd f9a3 	bl	8017904 <_free_r>
 801a5be:	e7e9      	b.n	801a594 <_realloc_r+0x1c>
 801a5c0:	4635      	mov	r5, r6
 801a5c2:	e7e7      	b.n	801a594 <_realloc_r+0x1c>

0801a5c4 <_read_r>:
 801a5c4:	b538      	push	{r3, r4, r5, lr}
 801a5c6:	4d07      	ldr	r5, [pc, #28]	; (801a5e4 <_read_r+0x20>)
 801a5c8:	4604      	mov	r4, r0
 801a5ca:	4608      	mov	r0, r1
 801a5cc:	4611      	mov	r1, r2
 801a5ce:	2200      	movs	r2, #0
 801a5d0:	602a      	str	r2, [r5, #0]
 801a5d2:	461a      	mov	r2, r3
 801a5d4:	f7e8 f9f8 	bl	80029c8 <_read>
 801a5d8:	1c43      	adds	r3, r0, #1
 801a5da:	d102      	bne.n	801a5e2 <_read_r+0x1e>
 801a5dc:	682b      	ldr	r3, [r5, #0]
 801a5de:	b103      	cbz	r3, 801a5e2 <_read_r+0x1e>
 801a5e0:	6023      	str	r3, [r4, #0]
 801a5e2:	bd38      	pop	{r3, r4, r5, pc}
 801a5e4:	20001a04 	.word	0x20001a04

0801a5e8 <__ascii_wctomb>:
 801a5e8:	b149      	cbz	r1, 801a5fe <__ascii_wctomb+0x16>
 801a5ea:	2aff      	cmp	r2, #255	; 0xff
 801a5ec:	bf85      	ittet	hi
 801a5ee:	238a      	movhi	r3, #138	; 0x8a
 801a5f0:	6003      	strhi	r3, [r0, #0]
 801a5f2:	700a      	strbls	r2, [r1, #0]
 801a5f4:	f04f 30ff 	movhi.w	r0, #4294967295
 801a5f8:	bf98      	it	ls
 801a5fa:	2001      	movls	r0, #1
 801a5fc:	4770      	bx	lr
 801a5fe:	4608      	mov	r0, r1
 801a600:	4770      	bx	lr
	...

0801a604 <_fstat_r>:
 801a604:	b538      	push	{r3, r4, r5, lr}
 801a606:	4d07      	ldr	r5, [pc, #28]	; (801a624 <_fstat_r+0x20>)
 801a608:	2300      	movs	r3, #0
 801a60a:	4604      	mov	r4, r0
 801a60c:	4608      	mov	r0, r1
 801a60e:	4611      	mov	r1, r2
 801a610:	602b      	str	r3, [r5, #0]
 801a612:	f7e8 fa1e 	bl	8002a52 <_fstat>
 801a616:	1c43      	adds	r3, r0, #1
 801a618:	d102      	bne.n	801a620 <_fstat_r+0x1c>
 801a61a:	682b      	ldr	r3, [r5, #0]
 801a61c:	b103      	cbz	r3, 801a620 <_fstat_r+0x1c>
 801a61e:	6023      	str	r3, [r4, #0]
 801a620:	bd38      	pop	{r3, r4, r5, pc}
 801a622:	bf00      	nop
 801a624:	20001a04 	.word	0x20001a04

0801a628 <_isatty_r>:
 801a628:	b538      	push	{r3, r4, r5, lr}
 801a62a:	4d06      	ldr	r5, [pc, #24]	; (801a644 <_isatty_r+0x1c>)
 801a62c:	2300      	movs	r3, #0
 801a62e:	4604      	mov	r4, r0
 801a630:	4608      	mov	r0, r1
 801a632:	602b      	str	r3, [r5, #0]
 801a634:	f7e8 fa1d 	bl	8002a72 <_isatty>
 801a638:	1c43      	adds	r3, r0, #1
 801a63a:	d102      	bne.n	801a642 <_isatty_r+0x1a>
 801a63c:	682b      	ldr	r3, [r5, #0]
 801a63e:	b103      	cbz	r3, 801a642 <_isatty_r+0x1a>
 801a640:	6023      	str	r3, [r4, #0]
 801a642:	bd38      	pop	{r3, r4, r5, pc}
 801a644:	20001a04 	.word	0x20001a04

0801a648 <_malloc_usable_size_r>:
 801a648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a64c:	1f18      	subs	r0, r3, #4
 801a64e:	2b00      	cmp	r3, #0
 801a650:	bfbc      	itt	lt
 801a652:	580b      	ldrlt	r3, [r1, r0]
 801a654:	18c0      	addlt	r0, r0, r3
 801a656:	4770      	bx	lr

0801a658 <_init>:
 801a658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a65a:	bf00      	nop
 801a65c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a65e:	bc08      	pop	{r3}
 801a660:	469e      	mov	lr, r3
 801a662:	4770      	bx	lr

0801a664 <_fini>:
 801a664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a666:	bf00      	nop
 801a668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a66a:	bc08      	pop	{r3}
 801a66c:	469e      	mov	lr, r3
 801a66e:	4770      	bx	lr
